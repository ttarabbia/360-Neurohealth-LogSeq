{"version":3,"file":"excalidraw.js","sections":[{"offset":{"line":1,"column":0},"map":{"version":3,"file":"module$node_modules$$excalidraw$excalidraw$dist$excalidraw_min.js","lineCount":740,"mappings":"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\/B,CAAlB,CAA\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\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAAzoC,CAAmyC,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAAqC,EAAS,CAAKpC,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAAjzC,CAA28C,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAAsC,EAAS,CAAKrC,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAAz9C,CAAmnD,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAAuC,EAAS,CAAKtC,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ;QAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAAjoD,CAA2xD,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAAwC,EAAS,CAAKvC,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,GAAF,CAAO,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAArJ,CAAzyD,CAAk8D,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAAyC,EAAS,CAAKxC,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAAh9D,CAA0mE,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAA0C,EAAS,CAAKzC,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf;AAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAAxnE,CAAkxE,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAA2C,EAAS,CAAK1C,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,GAAF,CAAO,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAArJ,CAAhyE,CAAy7E,IAAI,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAA4C,EAAS,CAAK3C,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAAt8E,CAAgmF,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAA6C,EAAS,CAAK5C,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B;AAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAA9mF,CAAwwF,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAA8C,EAAS,CAAK7C,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,GAAF,CAAO,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAArJ,CAAtxF,CAA+6F,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAA+C,EAAS,CAAK9C,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,GAAF,CAAO,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAArJ,CAA77F,CAAslG,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAAgD,EAAS,CAAK\/C,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ;AAAoB,EAAtJ,CAApmG,CAA8vG,KAAK,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAAiD,EAAS,CAAKhD,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\/C,CAAiD,CAAC,CAACd,CAAEU,CAAAA,EAAH,CAAMI,CAAN,CAAQ,EAAR,CAAD,CAAjD,CAAmGD,EAAA,CAAEC,CAAF,CAA7BE,CAAC8B,OAAO,MAAR9B,CAAe+B,UAAU,CAAA,CAAzB\/B,CAA6B,CAAOhB,EAAEF,CAAAA,OAAF,CAAUgB,CAAEkC,CAAAA,MAAZ,EAAoB,EAAtJ,CAA5wG,CAAs6G,IAAI,CAAChD,CAAD,CAAGC,CAAH,CAAKW,CAAL,CAAAkD,EAAS,CAAKjD,CAAAA,CAAED,CAAA,CAAE,GAAF,CAAOE,EAAAA,CAAEF,CAAA,CAAE,IAAF,CAAQ,SAAA,EAAU,OAAOE,CAAP,CAASA,CAAE8B,CAAAA,UAAF,CAAa9B,CAAE+B,CAAAA,OAAf,CAAuB\/B,CAAhC,CAAV,GAA+CA,CAA\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\/P,CAAA3F,CAAA0U,CAAAA,mBAAA\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\/D,EAAA,CAAA+D,EAAA,CAAA\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\/Q,KAAA,MAAA,CAAAkB,IAAAD,EAAA,CAAA\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\/c,CAAAA,EAAA,CAAA\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\/E,CAAA4nB,CAAAA,MAAA7iB,CAAA\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\/iB,EAAA4nB,CAAAA,MAAA,CAAA,CAAA,CAAA\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\/U,EAAA+U,CAAAA,SAAA,CAAA,uBAAA\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\/B,OAAAsB,GAAAQ,CAAAA,YAAA,CAAA,IAAA\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MAAAA,EAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAA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\/hB,EAAA,CAAA,EAAA\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\/B,CAAAA,iBAAA,CAAAC,QAAA,CAAAn\/B,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAE,EAAA,CAAA,CAAA,IAAAP,GAAAK,CAAA+8B,CAAAA,oBAAA,CAAAr9B,GAAAR,CAAA41B,CAAAA,UAAA,CAAA90B,CAAA68B,CAAAA,SAAA,CAAA,IAAA,CAAAn9B,EAAA,CAAA,MAAAM,EAAA,KAAAgE,GAAAtE,EAAA4nB,CAAAA,MAAA,CAAArjB,GAAAD,EAAA,CAAAA,EAAA7C,CAAAA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAAhC,CAAAqZ,CAAAA,MAAA,CAAA,MAAAvU,GAAA,GAAAtE,EAAA,EAAAT,CAAAu+B,CAAAA,SAAA,CAAA\/9B,EAAA,CAAAsE,EAAA7C,CAAAA,MAAA;AAAA,CAAA,CAAA,QAAA,CAAA,CAAA0V,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA7W,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA+8B,qBAAA,IAAA,CAAA,CAAA54B,EAAAA,CAAAjF,CAAAs+B,CAAAA,aAAA,CAAA99B,EAAA,CAAAI,CAAA,CAAAE,CAAAk9B,CAAAA,aAAAvxB,CAAAA,CAAA,CAAA5L,CAAA,CAAAC,CAAAk9B,CAAAA,aAAA3xB,CAAAA,CAAA,CAAArL,EAAA,CAAA,OAAA+D,GAAA,GAAAtE,EAAA,CAAAT,CAAAu+B,CAAAA,SAAA,CAAA\/9B,EAAA,CAAAA,EAAA4nB,CAAAA,MAAAnmB,CAAAA,MAAA,CAAA,CAAA,CAAAgD,CAAA,CAAA,CAAAjF,CAAAu+B,CAAAA,SAAA,CAAA\/9B,EAAA,CAAA,KAAA,CAAAyE,CAAA,CAAA,CAAA0S,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA7W,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA+8B,qBAAAr9B,EAAA4nB,CAAAA,MAAA,CAAA5nB,EAAA4nB,CAAAA,MAAAnmB,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAjC,CAAAq\/B,CAAAA,0BAAA,CAAAC,QAAA,CAAAt\/B,CAAA,CAAA,CAAA,IAAAC,EAAAwnB,EAAA,CAAAznB,CAAA,CAAA,CAAAW,GAAAV,CAAAW,CAAA,CAAAA,CAAAD,CAAAV,CAAAa,CAAA,CAAAA,CAAAH,EAAA,CAAA,CAAAF,GAAAR,CAAAY,CAAA,CAAAA,CAAAJ,CAAAR,CAAAe,CAAA,CAAAA,CAAAP,EAAA,CAAA,OAAAT,EAAAooB,CAAAA,MAAA7f,CAAAA,GAAA,CAAA,QAAA,CAAAtI,EAAA,CAAA,CAAA,IAAAW,EAAA,OAAA,CAAA,CAAAA,EAAA,CAAAomB,EAAA,CAAAhnB,CAAAyM,CAAAA,CAAA,CAAAxM,EAAA,CAAA,CAAA,CAAA,CAAAD,CAAAqM,CAAAA,CAAA,CAAApM,EAAA,CAAA,CAAA,CAAA,CAAAU,CAAA,CAAAF,CAAA,CAAAT,CAAAwoB,CAAAA,KAAA,CAAA,EAAA,CAAA,CAAA,CAAA5nB,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAZ,CAAA2+B,CAAAA,gCAAA,CAAAY,QAAA,CAAAv\/B,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAW;AAAA,CAAA,CAAAX,CAAA,CAAAD,CAAAooB,CAAAA,MAAAnmB,CAAAA,MAAA,CAAAhC,CAAA,CAAAA,CAAAY,EAAAA,CAAA4mB,EAAA,CAAAznB,CAAA,CAAAQ,EAAAA,CAAAR,CAAAooB,CAAAA,MAAA,CAAAxnB,CAAA,CAAA,OAAAomB,GAAA,CAAAhnB,CAAAyM,CAAAA,CAAA,CAAAjM,CAAA,CAAA,CAAA,CAAA,CAAAR,CAAAqM,CAAAA,CAAA,CAAA7L,CAAA,CAAA,CAAA,CAAA,EAAAK,CAAAC,CAAA,CAAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAA,CAAAG,CAAA,CAAAA,CAAA,CAAAH,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAb,CAAAwoB,CAAAA,KAAA,CAAA,CAAA,CAAAxoB,CAAAw\/B,CAAAA,uBAAA,CAAAC,QAAA,CAAAz\/B,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAW,EAAA6mB,EAAA,CAAAznB,CAAA,CAAAS,EAAAA,CAAAumB,EAAA,CAAA\/mB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,EAAAW,CAAAC,CAAA,CAAAA,CAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAA,CAAAE,CAAA,CAAAA,CAAA,CAAAF,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAAZ,CAAAwoB,CAAAA,KAAA,CAAA,OAAA,CAAA\/nB,CAAAD,CAAA,CAAAA,CAAA,CAAAR,CAAAyM,CAAAA,CAAA,CAAAhM,CAAAqE,CAAA,CAAAA,CAAA,CAAA9E,CAAAqM,CAAAA,CAAA,CAAA,CAAA,CAAArM,CAAAi\/B,CAAAA,wBAAA,CAAAS,QAAA,CAAA1\/B,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAA,CAAAC,CAAAA,CAAA,IAAAu+B,CAAAA,0BAAA,CAAAr\/B,CAAA,CAAA,KAAA,IAAAgB,GAAAF,CAAAmB,CAAAA,MAAA,CAAA,EAAA,CAAA,EAAAjB,EAAA,CAAA,CAAA,CAAA,IAAAL,GAAAG,CAAA,CAAAE,EAAA,CAAA,IAAAgN,IAAAoZ,CAAAA,KAAA,CAAAzmB,EAAAC,CAAA,CAAAA,CAAA,CAAAA,CAAA,CAAAD,EAAAE,CAAA,CAAAA,CAAA,CAAAA,CAAA,CAAA,CAAAZ,CAAAgB,CAAAA,KAAA,CAAA,IAAA0+B,CAAAA,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA3+B,GAAA,CAAA,MAAA,EAAA,CAAA,CAAAhB,CAAAs+B,CAAAA,aAAA,CAAAsB,QAAA,CAAA5\/B,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAA,CAAAC,CAAAA,CAAA0K,EAAA,CAAAvL,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAAG;CAAAA,CAAAymB,EAAA,CAAAznB,CAAA,CAAA+E,EAAAA,CAAAiiB,EAAA,CAAAlmB,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,EAAAE,CAAAL,CAAA,CAAAA,CAAA,CAAAK,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAA,CAAAP,CAAA,CAAAA,CAAA,CAAAO,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAAhB,CAAAwoB,CAAAA,KAAA,CAAA,OAAA,CAAAzjB,CAAAE,CAAA,CAAAA,CAAA,CAAAjF,CAAAyM,CAAAA,CAAA,CAAA1H,CAAAG,CAAA,CAAAA,CAAA,CAAAlF,CAAAqM,CAAAA,CAAA,CAAA,CAAA,CAAArM,CAAA49B,CAAAA,eAAA,CAAAiC,QAAA,CAAA7\/B,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAooB,CAAAA,MAAA,CAAAxnB,EAAAX,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAY,EAAAZ,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAs3B,GAAA,CAAAv3B,CAAA,CAAA,CAAAooB,OAAAnoB,CAAAsI,CAAAA,GAAA,CAAA,QAAA,CAAAvI,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAY,CAAA,CAAAZ,EAAA,CAAA,CAAA,CAAA,CAAAa,CAAA,CAAA,CAAA,CAAA,CAAA4L,EAAAzM,CAAAyM,CAAAA,CAAAA,CAAA7L,CAAA,CAAAyL,EAAArM,CAAAqM,CAAAA,CAAAA,CAAAxL,CAAA,CAAA,CAAA,CAAA,CAAAb,CAAA8\/B,CAAAA,iBAAA,CAAAC,QAAA,CAAA9\/B,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAC,EAAAb,CAAAmoB,CAAAA,MAAA,CAAAxnB,CAAA,CAAAZ,EAAAu+B,CAAAA,SAAA,CAAAt+B,CAAA,CAAAW,CAAA,CAAA,CAAAE,CAAAE,CAAA,CAAAA,CAAA,CAAAH,CAAA4L,CAAAA,CAAA,CAAA3L,CAAAH,CAAA,CAAAA,CAAA,CAAAE,CAAAwL,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAArM,CAAAu+B,CAAAA,SAAA,CAAAyB,QAAA,CAAAhgC,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAG,GAAAhB,CAAAooB,CAAAA,MAAA,CAAAznB,GAAA,CAAA,CAAAF,GAAA,CAAA,IAAA,QAAA,GAAAG,CAAA,CAAA,CAAA,GAAA,KAAA,GAAAX,CAAA,CAAA,KAAAgG,MAAA,CAAA,2BAAA,CAAA,CAAA+B,CAAAlH,CAAAkH,CAAAhH,EAAAsH,CAAAA,KAAA,EAAAN,EAAAA,MAAA,CAAA\/H,CAAA,CAAA,CAAA,CAAA,EAAA,GAAAA,CAAA,GAAAU,EAAA,CAAAG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAL,EAAA;AAAAK,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAAA,CAAAyH,CAAAA,GAAA,CAAA,QAAA,CAAAvI,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAA,EAAA,GAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,CAAA,CAAAW,EAAA,CAAAX,EAAA,CAAA,CAAA,CAAA,CAAAS,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAA,KAAA,GAAAR,CAAA,CAAAa,CAAA,CAAA28B,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAz8B,EAAA,CAAA,CAAA,CAAAJ,CAAA,CAAA,CAAA,KAAA,CAAA,IAAAJ,GAAAI,CAAA,CAAA,CAAA,CAAAJ,CAAAQ,EAAA,CAAAf,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA6E,GAAAlE,CAAA,CAAA,CAAA,CAAAkE,CAAA9D,EAAA,CAAAf,CAAA,CAAA,CAAA,CAAA,CAAAa,EAAA,CAAAE,EAAAuH,CAAAA,GAAA,CAAA,QAAA,CAAAvI,EAAA,CAAAY,EAAA,CAAA,CAAA,MAAAA,GAAA,GAAAX,CAAA,CAAA,CAAA,GAAAW,EAAA,EAAAD,EAAA,CAAAH,EAAA,CAAAC,EAAA,CAAAqE,EAAA,CAAA9E,EAAA,GAAAW,EAAA,CAAA,CAAA,CAAAF,EAAA,CAAA,CAAA,CAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAAQ,EAAA,CAAAR,EAAA,CAAA,CAAA,CAAA,CAAA8E,EAAA,CAAA,CAAA,CAAAnE,EAAA,EAAAF,EAAA,CAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,CAAAW,EAAA,CAAAX,EAAA,CAAA,CAAA,CAAA,CAAAS,EAAA,CAAA,CAAAT,EAAA,CAAA,CAAA,CAAA,IAAA+E,GAAA8jB,EAAA,CAAA7oB,CAAA,CAAAc,CAAA,CAAAd,CAAA2oB,CAAAA,eAAA,EAAA,OAAA,CAAA1jB,GAAAA,CAAA4jB,EAAA,CAAA7oB,CAAA,CAAAgB,EAAA,CAAAhB,CAAA2oB,CAAAA,eAAA,EAAA,OAAA,CAAAljB,GAAAA,CAAAuhB,EAAA,CAAArmB,EAAA,CAAAF,EAAA,EAAAwE,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAF,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAE,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAAF,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA\/E,CAAAwoB,CAAAA,KAAA,CAAA+O,GAAA,CAAAv3B,CAAA,CAAA2X,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA9W,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAunB,OAAAtnB,CAAA,CAAA2L,EAAAzM,CAAAyM,CAAAA,CAAAA,CAAAhH,EAAA,CAAA,CAAA,CAAA,CAAA4G,EAAArM,CAAAqM,CAAAA,CAAAA,CAAA5G,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAAzF,CAAA,CAAA,EAAA09B,GAAAiC,CAAAA,iBAAA,CAAA,EAAA,KAAAM,GAAAA,QAAA,CAAAjgC,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,IAAAW,EAAA,CAAA,CAAAC,EAAAZ,CAAAgC,CAAAA,MAAA,CAAAnB,EAAAd,CAAAiC,CAAAA,MAAA,CAAArB,CAAA,CAAAC,CAAA,CAAAD,CAAA,EAAA,CAAAE,CAAA,EAAA,CAAAd,CAAA,CAAAc,CAAA,CAAA,CAAAb,CAAA,CAAAW,CAAA,CAAA,OAAAZ,EAAA,CAAA,CAAAk\/B,GAAAA,QAAA,CAAAl\/B,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAA,CAAA,IAAAC,EAAA,IAAAi0B,GAAA,CAAAh0B,EAAA,IAAAg0B,GAAAoL,GAAA,CAAAlgC,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAA,OAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAo\/B,GAAA,CAAAlgC,CAAA,CAAAY,CAAA,CAAAX,CAAA,CAAA,KAAA,CAAAY,CAAA,CAAAC,CAAA,CAAAE,EAAAA,CAAA4V,KAAA6f,CAAAA,IAAA,CAAA31B,CAAA,CAAA4G,CAAAA,MAAA,CAAA,QAAA,CAAA1H,EAAA,CAAA,CAAA,MAAA,CAAAa,CAAA+1B,CAAAA,GAAA,CAAA52B,EAAA,CAAA,CAAA,CAAA40B,GAAAU,CAAAA,QAAA,CAAAt1B,CAAA,CAAAi2B,CAAAA,qBAAA,CAAAj1B,CAAA,CAAA+E,CAAAA,OAAA,CAAA,QAAA,CAAA9F,EAAA,CAAA,CAAA,IAAAW,EAAA22B,GAAA,CAAAt3B,EAAA,CAAA,CAAA44B,gBAAA,IAAA,IAAAj4B,EAAA,CAAAX,EAAA44B,CAAAA,eAAA,GAAA,IAAA,EAAA,GAAAj4B,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA8G,CAAAA,MAAA,CAAA,QAAA,CAAAzH,EAAA,CAAA,CAAA,MAAAA,GAAA,GAAAD,CAAAU,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAw\/B,GAAAA,QAAA,CAAAlgC,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAE,EAAA,CAAA,CAAA,GAAA,MAAA,GAAAf,CAAA,CAAA,GAAA,IAAA,EAAAA,CAAA,CAAA,IAAA;AAAAW,CAAA,GAAA,MAAA,GAAAA,CAAA,CAAAu\/B,EAAA,CAAAngC,CAAA,CAAAC,CAAA,CAAAY,CAAA,CAAA,CAAA,OAAA,GAAAA,CAAA,EAAAD,CAAAF,CAAAA,EAAA,GAAAT,CAAAS,CAAAA,EAAA,IAAA0\/B,EAAA,CAAApgC,CAAA,CAAAC,CAAA,CAAAY,CAAA,CAAA,CAAAC,CAAA+1B,CAAAA,GAAA,CAAA52B,CAAAS,CAAAA,EAAA,CAAA,CAAA,KAAA,CAAA,IAAAE,EAAAC,EAAAA,CAAA,OAAA,GAAAA,CAAA,CAAA,cAAA,CAAA,YAAAC,EAAAA,CAAAd,CAAA,CAAAa,CAAA,CAAA,EAAA,CAAA,IAAA,EAAAC,CAAA,CAAA,IAAA,EAAAy2B,EAAA,CAAAv3B,CAAA,EAAA,CAAAY,EAAA,CAAA,EAAA,EAAAC,CAAA,CAAA,CAAA,IAAA,CAAAD,EAAA,EAAA,CAAAE,CAAA68B,CAAAA,SAAA,CAAA,KAAA,EAAAh9B,CAAA,EAAAK,EAAA61B,CAAAA,GAAA,CAAAl2B,CAAA,CAAA,CAAA,CAAA,CAAA0\/B,GAAAA,QAAA,CAAArgC,CAAA,CAAA,CAAAA,CAAA+F,CAAAA,OAAA,CAAA,QAAA,CAAA\/F,CAAA,CAAA,CAAA8mB,EAAA,CAAA9mB,CAAA,CAAA,CAAAk\/B,EAAA,CAAAl\/B,CAAA,CAAAsgC,EAAA,CAAAtgC,CAAA,CAAA,OAAA,CAAA,CAAAsgC,EAAA,CAAAtgC,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA+mB,EAAA,CAAA\/mB,CAAA,CAAA,EAAAugC,EAAA,CAAAvgC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAugC,GAAAA,QAAA,CAAAvgC,CAAA,CAAA,CAAAwgC,EAAA,CAAAxgC,CAAA,CAAA+F,CAAAA,OAAA,CAAA,QAAA,CAAA9F,CAAA,CAAA,CAAA,IAAAY,EAAAZ,CAAA,CAAA,CAAA,CAAA,OAAAi\/B,GAAA,CAAAj\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\/B,EAAA,CAAAl\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\/\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\/qC,EAAA,CAAA,CAAAmrB,MAAA,CAAA2f,MAAA\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\/F,EAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA\/L,MAAA,EAAA,CAAA8R,KAAA\/F,EAAA,CAAA,eAAA,CAAA,CAAA,CAAA,CAAA\/L,MAAA,EAAA,CAAA8R,KAAA\/F,EAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA\/L,MAAA,EAAA,CAAA8R,KAAA\/F,EAAA,CAAA,kBAAA,CAAA,CAAA,CAAA;AAAA\/L,MAAA2qC,EAAA,CAAA3rC,CAAA,CAAAW,CAAA,CAAA,QAAA,CAAAZ,CAAA,CAAA,CAAA,MAAA2mB,GAAA,CAAA3mB,CAAA,CAAA,EAAAA,CAAAirB,CAAAA,QAAA,CAAA,CAAArqB,CAAAyuB,CAAAA,mBAAA,EAAAvqB,EAAAsH,CAAAA,EAAA,CAAA,CAAAqM,SAAAA,QAAA,CAAAzY,CAAA,CAAA,CAAA,MAAAa,EAAA,CAAAb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAooC,EAAA,CAAA,CAAAntB,KAAA,kBAAA,CAAAstB,QAAAA,QAAA,CAAAvoC,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAA,CAAA,MAAA,CAAAo0B,SAAA2W,EAAA,CAAA3rC,CAAA,CAAAC,CAAA,CAAA,QAAA,CAAAD,CAAA,CAAA,CAAA,MAAA2mB,GAAA,CAAA3mB,CAAA,CAAA,EAAAC,CAAA,CAAAy3B,EAAA,CAAA13B,CAAA,CAAA,CAAAgrB,WAAApqB,CAAA,CAAA,CAAA,CAAAwhC,EAAA,CAAAniC,CAAA,CAAA,CAAAA,CAAA,EAAAD,CAAA,CAAA,CAAA,CAAAwoC,SAAA5sB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA3b,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAmvB,sBAAAxuB,CAAA,CAAA,CAAA,CAAA6nC,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAAK,eAAAA,QAAA,CAAA9oC,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAg1B,CAAAA,QAAA,CAAAp0B,EAAAZ,CAAAwoC,CAAAA,QAAA,CAAA3nC,EAAAb,CAAA+oC,CAAAA,UAAAjoC,EAAAA,CAAA,CAAA,CAAAG,MAAA,CAAA,CAAA8R,KAAA\/F,EAAA,CAAA,kBAAA,CAAA,CAAA,CAAA,CAAA\/L,MAAA,CAAA,CAAA8R,KAAA\/F,EAAA,CAAA,eAAA,CAAA,CAAA,CAAA,CAAA\/L,MAAA,CAAA,CAAA8R,KAAA\/F,EAAA,CAAA,aAAA,CAAA,CAAA,CAAA;MAAAxM,GAAA,EAAAmF,CAAAA,aAAA,CAAA,UAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,QAAA,CAAA,IAAA,CAAAqH,EAAA,CAAA,mBAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA2kC,EAAA,CAAA,CAAAvvB,MAAA,aAAA,CAAAxC,QAAAzX,CAAA,CAAAG,MAAA2qC,EAAA,CAAA3rC,CAAA,CAAAW,CAAA,CAAA,QAAA,CAAAZ,CAAA,CAAA,CAAA,MAAA2mB,GAAA,CAAA3mB,CAAA,CAAA,EAAAA,CAAAgrB,CAAAA,UAAA,CAAA,CAAApqB,CAAAwuB,CAAAA,qBAAA,EAAAtqB,EAAAwH,CAAAA,EAAA,CAAA,CAAAmM,SAAAA,QAAA,CAAAzY,CAAA,CAAA,CAAA,MAAAa,EAAA,CAAAb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAooC,EAAA,CAAA,CAAAntB,KAAA,iBAAA,CAAAstB,QAAAA,QAAA,CAAAvoC,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAA,CAAA,MAAA,CAAAo0B,SAAA2W,EAAA,CAAA3rC,CAAA,CAAAC,CAAA,CAAA,QAAA,CAAAD,CAAA,CAAA,CAAA,MAAA2mB,GAAA,CAAA3mB,CAAA,CAAA,EAAAC,CAAA,CAAAy3B,EAAA,CAAA13B,CAAA,CAAA,CAAAkzB,UAAAtyB,CAAA,CAAA,CAAA,CAAAwhC,EAAA,CAAAniC,CAAA,CAAA,CAAAA,CAAA,EAAAD,CAAA,CAAA,CAAA,CAAAwoC,SAAA5sB,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA3b,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA6vB,qBAAAlvB,CAAA,CAAA,CAAA,CAAA6nC,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAAK,eAAAA,QAAA,CAAA9oC,CAAA,CAAA,CAAA,IAAAC;AAAAD,CAAAg1B,CAAAA,QAAA,CAAAp0B,EAAAZ,CAAAwoC,CAAAA,QAAA,CAAA3nC,EAAAb,CAAA+oC,CAAAA,UAAA,OAAAvoC,GAAA,EAAAmF,CAAAA,aAAA,CAAA,UAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,QAAA,CAAA,IAAA,CAAAqH,EAAA,CAAA,kBAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA2kC,EAAA,CAAA,CAAAvvB,MAAA,YAAA,CAAAxC,QAAA,CAAA,CAAAtX,MAAA,MAAA,CAAA8R,KAAA\/F,EAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAA\/L,MAAA,QAAA,CAAA8R,KAAA\/F,EAAA,CAAA,eAAA,CAAA,CAAA,CAAA,CAAA\/L,MAAA,OAAA,CAAA8R,KAAA\/F,EAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA\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\/B,EAAA,CAAA,mBAAA,CAAA,CAAA;AAAA\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\/qB,CAAA\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\/E,EAAAqxC,CAAAA,SAAAtsC,CAAA\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\/\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\/gC,KAAA\/S,CAAA0a,CAAAA,KAAA,CAAAjO,EAAAxM,CAAAwM,CAAAhM,EAAAgM,CAAA,CAAA,CAAAJ,EAAAzL,CAAAyL,CAAA+nC,GAAA\/nC,CAAA,EAAAA,CAAAvH,EAAAsH,CAAAA,EAAA,CAAAuc,gBAAA,OAAA,CAAApD,YAAA,OAAA,CAAA2N,UAAA,QAAA,CAAA,CAAA,CAAA,CAAA,IAAAjuB,GAAAA,CAAAjE,EAAA,CAAA83B,EAAA,CAAArc,EAAA,CAAAA,EAAA,CAAA,CAAA8W,gBAAAzyB,CAAA,CAAAq3B,SAAA,CAAAt3B,CAAA,CAAA,CAAA,CAAAizC,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAhhC,KAAA,WAAA,CAAArG,EAAAxM,CAAA,CAAAoM,EAAAzL,CAAAyL,CAAA7L,EAAA,CAAAmnB,MAAAlnB,EAAA,CAAAmnB,OAAApnB,EAAA,CAAAyyB,YAAAtJ,EAAAK,CAAAA,aAAA,CAAA,CAAA,CAAA,CAAArU,UAAA,OAAA,CAAAod,QAAA,CAAA,CAAA,CAAA,CAAA;AAAA,IAAA,OAAAogB,GAAA,CAAAA,EAAA,CAAAA,EAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAAluC,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAF,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,QAAA,CAAA\/E,EAAA,CAAAC,EAAA,CAAAW,EAAA,CAAAC,EAAA,CAAAC,EAAA,CAAA,CAAA,IAAAE,EAAA,QAAA,IAAA,IAAAA,EAAA,CAAAhB,EAAA4zC,CAAAA,MAAA,GAAA,IAAA,EAAA,GAAA5yC,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAuH,CAAAA,GAAA,CAAA,QAAA,CAAAvI,EAAA,CAAAgB,EAAA,CAAA,CAAA,MAAAi4B,GAAA,CAAAxc,EAAA,CAAAA,EAAA,CAAA,CAAA0b,SAAA,CAAAt3B,EAAA,CAAA,CAAA0yB,gBAAAzyB,EAAA,CAAA,CAAAgzC,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA\/gC,KAAA,CAAA,CAAA\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\/yB,CAAA+yB,CAAAA,OAAA,CAAA,GAAA,CAAA\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\/mB,CAAA,CAAAgnB,OAAA5mB,CAAA4mB,CAAA\/mB,CAAA,CAAA87C,MAAA\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\/C,CAAAA,YAAA,CAAA,IAAA\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\/C,CAAAA,mBAAA,CAAA3\/C,CAAA,CAAA,CAAA,CAAA;AAAAs\/C,UAAA,IAAAA,CAAAA,SAAAh3C,CAAAA,GAAA,CAAA,QAAA,CAAAtI,CAAA,CAAA,CAAA,MAAAD,EAAA4\/C,CAAAA,mBAAA,CAAA3\/C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAAkC,CAAAA,SAAAm0B,CAAAA,KAAA,CAAA4pB,QAAA,EAAA,CAAA,IAAAX,CAAAA,YAAAr9C,CAAAA,MAAA,CAAA,CAAA,KAAAs9C,CAAAA,SAAAt9C,CAAAA,MAAA,CAAA,CAAA,KAAAu9C,CAAAA,SAAA,CAAA,IAAA,KAAAJ,CAAAA,YAAA\/oB,CAAAA,KAAA,EAAA,CAAA,CAAAr2B,CAAAkC,CAAAA,SAAAg+C,CAAAA,iBAAA,CAAAC,QAAA,CAAAngD,CAAA,CAAA,CAAA,IAAAC,CAAA,CAAAW,EAAA,IAAA4+C,CAAAA,SAAA,IAAA,CAAA5+C,CAAA,EAAAZ,CAAAg1B,CAAAA,QAAA\/yB,CAAAA,MAAA,GAAArB,CAAAo0B,CAAAA,QAAA\/yB,CAAAA,MAAA,CAAA,MAAA,CAAA,CAAA,KAAA,IAAApB,EAAAb,CAAAg1B,CAAAA,QAAA\/yB,CAAAA,MAAApB,CAAA,CAAA,CAAA,EAAA,CAAAA,CAAA,CAAAA,CAAA,EAAA,CAAA,CAAA,IAAAC,GAAAd,CAAAg1B,CAAAA,QAAA,CAAAn0B,CAAA,CAAA,CAAAG,GAAAJ,CAAAo0B,CAAAA,QAAA,CAAAn0B,CAAA,CAAA,IAAA,CAAAC,EAAA,EAAA,CAAAE,EAAA,EAAAF,EAAAJ,CAAAA,EAAA,GAAAM,EAAAN,CAAAA,EAAA,EAAAI,EAAA22B,CAAAA,YAAA,GAAAz2B,EAAAy2B,CAAAA,YAAA,CAAA,MAAA,CAAA,CAAA,CAAA,IAAAx3B,CAAA,GAAAD,EAAAwoC,CAAAA,QAAA,CAAA,CAAA,IAAA7nC,EAAA,CAAAF,EAAA;IAAA,sBAAA,GAAAR,CAAA,GAAA,IAAA,IAAAU,EAAA,CAAAX,CAAAwoC,CAAAA,QAAA,CAAAvoC,CAAA,CAAA,GAAA,IAAA,EAAA,GAAAU,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAg9B,CAAAA,SAAA,KAAA,IAAA,IAAAl9B,EAAA,CAAAG,CAAA4nC,CAAAA,QAAA,CAAAvoC,CAAA,CAAA,GAAA,IAAA,EAAA,GAAAQ,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAk9B,CAAAA,SAAA,IAAA,oBAAA,GAAA19B,CAAA,EAAAD,CAAAwoC,CAAAA,QAAA,CAAAvoC,CAAA,CAAA,GAAAW,CAAA4nC,CAAAA,QAAA,CAAAvoC,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAAD,CAAAkC,CAAAA,SAAAk+C,CAAAA,SAAA,CAAAC,QAAA,CAAArgD,CAAA,CAAAC,CAAA,CAAA,CAAAW,CAAAA,CAAA,IAAA6+C,CAAAA,aAAA,CAAAz\/C,CAAA,CAAAC,CAAA,CAAA,EAAAY,CAAA,CAAA,IAAA++C,CAAAA,mBAAA,CAAAh\/C,CAAA,CAAA,GAAA,IAAAs\/C,CAAAA,iBAAA,CAAAr\/C,CAAA,CAAA,GAAA,IAAAy+C,CAAAA,YAAA95C,CAAAA,IAAA,CAAA5E,CAAA,CAAA,CAAA,IAAA4+C,CAAAA,SAAA,CAAA3+C,CAAA,CAAA,IAAAy\/C,CAAAA,cAAA,EAAA,CAAA,CAAA,CAAAtgD,CAAAkC,CAAAA,SAAAo+C,CAAAA,cAAA,CAAAC,QAAA,EAAA,CAAA,IAAAhB,CAAAA,SAAAv3C,CAAAA,MAAA,CAAA,CAAA,CAAA,IAAAu3C,CAAAA,SAAAt9C,CAAAA,MAAA,CAAA,CAAA;AAAAjC,CAAAkC,CAAAA,SAAAs+C,CAAAA,QAAA,CAAAC,QAAA,EAAA,CAAA,GAAA,CAAA,GAAA,IAAAlB,CAAAA,SAAAt9C,CAAAA,MAAA,CAAA,MAAA,KAAA,KAAAjC,EAAA,IAAAu\/C,CAAAA,SAAAp\/B,CAAAA,GAAA,EAAA,OAAA,KAAA,EAAA,GAAAngB,CAAA,EAAA,IAAAs\/C,CAAAA,YAAA95C,CAAAA,IAAA,CAAAxF,CAAA,CAAA,CAAA,IAAA4\/C,CAAAA,mBAAA,CAAA5\/C,CAAA,CAAA,EAAA,IAAA,CAAA,CAAAA,CAAAkC,CAAAA,SAAAw+C,CAAAA,QAAA,CAAAC,QAAA,EAAA,CAAA,GAAA,CAAA,GAAA,IAAArB,CAAAA,YAAAr9C,CAAAA,MAAA,CAAA,MAAA,KAAA,KAAAjC,EAAA,IAAAs\/C,CAAAA,YAAAn\/B,CAAAA,GAAA,EAAA,CAAAlgB,EAAA,IAAAq\/C,CAAAA,YAAA,CAAA,IAAAA,CAAAA,YAAAr9C,CAAAA,MAAA,CAAA,CAAA,CAAA,OAAA,KAAA,EAAA,GAAAjC,CAAA,EAAA,IAAAu\/C,CAAAA,SAAA\/5C,CAAAA,IAAA,CAAAxF,CAAA,CAAA,CAAA,IAAA4\/C,CAAAA,mBAAA,CAAA3\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\/C,EAAA,CAAAl\/C,CAAA,CAAA,CAAAyjD,GAAAA,QAAA,EAAA,CAAA,CAAA,CAAA,CAAAv5B,EAAAw5B,CAAAA,sBAAA,EAAAF,EAAA,EAAA,CAAA,CAAA,OAAAG,GAAAA,QAAA,CAAA3jD,CAAA,CAAA,CAAA,IAAAC,EAAA,EAAAD,EAAAuY,CAAAA,OAAAxS,CAAAA,OAAA,CAAA,QAAA,CAAA\/F,CAAA,CAAA,CAAAA,CAAA,EAAAC,CAAAuF,CAAAA,IAAA,CAAAxF,CAAA,CAAA,CAAA,CAAAC,EAAAgC,CAAAA,MAAA,EAAA,CAAA,CAAA;AAAAioB,EAAAxI,CAAAA,MAAA,EAAAlhB,EAAA,EAAAmF,CAAAA,aAAA,CAAAu9C,EAAA,CAAA,CAAA3f,IAAAvjC,CAAAujC,CAAAA,GAAA,CAAA7nB,KAAA1b,CAAA0b,CAAAA,IAAA,CAAAnD,QAAAtY,CAAA,CAAAsb,eAAAkoC,EAAA,CAAAN,cAAAnjD,CAAAmjD,CAAAA,aAAA,CAAA3a,SAAAxoC,CAAAwoC,CAAAA,QAAA,CAAA,CAAA,CAAAgb,EAAA,EAAA,CAAA,CAAA5iD,EAAA,CAAA,IAAA,CAAA,OAAAgjD,GAAAA,QAAA,CAAA5jD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAA6Z,CAAAA,QAAA,CAAAjZ,EAAAZ,CAAA6gC,CAAAA,GAAA,CAAAhgC,EAAAb,CAAA6jD,CAAAA,KAAA,CAAA\/iD,EAAAd,CAAAu6C,CAAAA,cAAA,CAAAv5C,GAAAhB,CAAA+Y,CAAAA,SAAApY,EAAAA,CAAAX,CAAAorB,CAAAA,KAAA,OAAA5qB,GAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAAjC,EAAA,CAAA,wBAAA,CAAA9V,EAAA,CAAA,CAAAoqB,MAAA9M,EAAA,CAAA,CAAA,QAAA1d,CAAA,CAAAkjD,WAAAjjD,CAAA,CAAA05C,eAAAz5C,CAAA,CAAA,CAAAH,CAAA,CAAA,CAAA,CAAAV,CAAA,CAAA,CAAA,CAAA8jD,GAAAA,QAAA,CAAA\/jD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAA6Z,CAAAA,QAAA,CAAAjZ,EAAAZ,CAAA6gC,CAAAA,GAAA,CAAAhgC,EAAAb,CAAA6jD,CAAAA,KAAA,CAAA\/iD,EAAAd,CAAAu6C,CAAAA,cAAAv5C,EAAAA,CAAAhB,CAAA+Y,CAAAA,SAAA,OAAAvY,GAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAAjC,EAAA,CAAA,sBAAA;AAAA9V,CAAA,CAAA,CAAAoqB,MAAA,CAAA,QAAAxqB,CAAA,CAAAojD,aAAAnjD,CAAA,CAAA05C,eAAAz5C,CAAA,CAAA,CAAA,CAAAb,CAAA,CAAA,CAAA,KAAAgkD,GAAAA,QAAA,CAAAjkD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAwoC,CAAAA,QAAA,CAAA3nC,EAAAb,CAAAm+C,CAAAA,YAAA,CAAAr9C,EAAAd,CAAAqwB,CAAAA,WAAArvB,EAAAA,CAAA8hC,EAAA,CAAAxM,EAAA,CAAAt2B,CAAAg1B,CAAAA,QAAA,CAAA,CAAA\/0B,CAAA,CAAAU,EAAAA,CAAA,CAAA,CAAAV,CAAAgwB,CAAAA,cAAA,KAAAxvB,EAAAob,EAAA,EAAA,CAAA\/W,GAAA,KAAAA,GAAAY,QAAA+a,CAAAA,eAAAy4B,CAAAA,YAAA,CAAA,KAAA,CAAA,CAAAn0C,GAAAo+B,EAAA,CAAAriC,CAAA,CAAAiE,EAAA\/D,CAAA07B,CAAAA,IAAA,CAAA,QAAA,CAAA18B,EAAA,CAAA,CAAA,MAAAmjC,GAAA,CAAAnjC,EAAA8S,CAAAA,IAAA,CAAA,GAAA7S,EAAA,CAAAD,EAAAuzB,CAAAA,eAAA,CAAA3yB,EAAA,CAAA,CAAA,GAAAX,EAAAgC,CAAAA,MAAA,EAAA,GAAA,GAAAhC,EAAAkT,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAtS,EAAA,CAAA,CAAA,GAAAZ,EAAAgC,CAAAA,MAAA,EAAA,IAAA,GAAAhC,EAAAkT,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAAvS,EAAA,EAAAC,EAAA,EAAAZ,EAAA,GAAA0pB,EAAAI,CAAAA,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA9pB,EAAA,CAAAW,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAAoE,GAAAk+B,EAAA,CAAAriC,CAAA,CAAAmE,EAAAjE,CAAA07B,CAAAA,IAAA,CAAA,QAAA,CAAA18B,EAAA,CAAA,CAAA,MAAAmjC,GAAA,CAAAnjC,EAAA8S,CAAAA,IAAA,CAAA,CAAA,CAAA,OAAAtS,GAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA;AAAA,CAAAoT,UAAA,aAAA,CAAA,CAAAlY,CAAA,CAAA,mBAAA,CAAA,CAAAoE,EAAA,EAAApE,CAAA,CAAA,uBAAA,CAAA,CAAAkE,EAAA,EAAAlE,CAAA,CAAA,iBAAA,CAAA,EAAAuiC,EAAA,CAAAtiC,CAAA,CAAA,EAAAE,CAAA07B,CAAAA,IAAA,CAAA,QAAA,CAAA18B,EAAA,CAAA,CAAA,MAAAojC,GAAA,CAAApjC,EAAA8S,CAAAA,IAAA,CAAA,CAAA,CAAA,GAAAtS,EAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAAva,CAAA,CAAA,mBAAA,CAAA,CAAAA,CAAA,CAAA,mBAAA,CAAA,CAAAA,CAAA,CAAA,kBAAA,CAAA,CAAA,EAAAwiC,EAAA,CAAAviC,CAAA,CAAA,EAAAE,CAAA07B,CAAAA,IAAA,CAAA,QAAA,CAAA18B,EAAA,CAAA,CAAA,MAAAqjC,GAAA,CAAArjC,EAAA8S,CAAAA,IAAA,CAAA,CAAA,CAAA,GAAAtS,EAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAAva,CAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,MAAA,GAAAC,CAAA,EAAAE,CAAA07B,CAAAA,IAAA,CAAA,QAAA,CAAA18B,EAAA,CAAA,CAAA,MAAA,MAAA,GAAAA,EAAA8S,CAAAA,IAAA,CAAA,CAAA,GAAAtS,EAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAAva,CAAA,CAAA,gBAAA,CAAA,CAAAA,CAAA,CAAA,kBAAA,CAAA;AAAAA,CAAA,CAAA,iBAAA,CAAA,CAAA,EAAA,OAAA,GAAAC,CAAA,EAAAE,CAAA07B,CAAAA,IAAA,CAAA,QAAA,CAAA18B,EAAA,CAAA,CAAA,MAAA,OAAA,GAAAA,EAAA8S,CAAAA,IAAA,CAAA,CAAA,GAAAtS,EAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAAva,CAAA,CAAA,iBAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,eAAA,CAAA,CAAAL,EAAA,EAAAmF,CAAAA,aAAA,CAAA,UAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,QAAA,CAAA,IAAA,CAAAqH,EAAA,CAAA,eAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,YAAA,CAAA,CAAAlY,CAAA,CAAA,YAAA,CAAA,CAAAA,CAAA,CAAA,cAAA,CAAA,CAAAA,CAAA,CAAA,cAAA,CAAA,CAAAA,CAAA,CAAA,cAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,CAAAiB,CAAAA,MAAA,EAAAzB,EAAA,EAAAmF,CAAAA,aAAA,CAAA,UAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,QAAA,CAAA,IAAA,CAAAqH,EAAA,CAAA,cAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,YAAA,CAAA;AAAAjU,EAAA,CAAAtE,EAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAAva,CAAA,CAAA,YAAA,CAAA,CAAAA,CAAA,CAAA,2BAAA,CAAA,CAAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAAL,EAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAAva,CAAA,CAAA,WAAA,CAAA,CAAAA,CAAA,CAAA,2BAAA,CAAA,CAAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAAG,CAAAiB,CAAAA,MAAA,EAAApB,CAAA,CAAA,wBAAA,CAAA,CAAAL,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,SAAA,CAAA,CAAAlY,CAAA,CAAA,UAAA,CAAA,CAAAA,CAAA,CAAA,yBAAA,CAAA,CAAAA,CAAA,CAAA,aAAA,CAAA,CAAA,CAAA,CAAAG,CAAAiB,CAAAA,MAAA,EAAApB,CAAA,CAAA,sBAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAJ,CAAA,EAAA,CAAAE,CAAA,EAAA,CAAA,CAAAK,CAAAiB,CAAAA,MAAA,EAAAzB,EAAA,EAAAmF,CAAAA,aAAA,CAAA,UAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,QAAA,CAAA,IAAA,CAAAqH,EAAA,CAAA,gBAAA,CAAA,CAAA;AAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,YAAA,CAAA,CAAAlY,CAAA,CAAA,oBAAA,CAAA,CAAAA,CAAA,CAAA,wBAAA,CAAA,CAAAA,CAAA,CAAA,OAAA,CAAA,CAAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAqjD,GAAA1jD,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAA++B,QAAA,aAAA,CAAA,CAAAlkC,EAAA,EAAAmF,CAAAA,aAAA,CAAA,MAAA,CAAA,CAAAV,EAAA,+eAAA,CAAA,CAAA,CAAA;AAAA4e,GAAAA,QAAA,CAAA7jB,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAglB,CAAAA,MAAA,CAAApkB,EAAAZ,CAAAqwB,CAAAA,WAAA,CAAAxvB,EAAAb,CAAAmkD,CAAAA,WAAA,CAAArjD,EAAAd,CAAA6wB,CAAAA,aAAA,OAAArwB,GAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAA6lC,EAAA14C,CAAAA,GAAA,CAAA,QAAA,CAAAvI,EAAA,CAAAc,EAAA,CAAA,CAAA,IAAAE,GAAAhB,EAAAiB,CAAAA,KAAA,CAAAN,GAAAX,EAAA6a,CAAAA,IAAA,CAAApa,GAAAT,EAAAqT,CAAAA,GAAAvO,GAAAA,CAAAkI,EAAA,CAAA,UAAAhI,CAAAA,MAAA,CAAAhE,EAAA,CAAA,CAAAiE,GAAAA,CAAA,EAAAD,CAAAA,MAAA,CAAAulB,EAAA,CAAA,QAAAxlB,EAAA,MAAAtE,GAAAsE,CAAAtE,EAAAsE,CAAAtE,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAAuE,CAAAA,MAAA,CAAAgI,EAAA,CAAA,eAAA,CAAA,CAAA,GAAA,CAAAhI,CAAAA,MAAA,CAAAlE,EAAA,CAAA,CAAA,CAAA,OAAAN,GAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA,CAAA,CAAA1qB,UAAA,OAAA,CAAA1F,IAAArS,EAAA,CAAA8R,KAAA,OAAA,CAAA+H,KAAAla,EAAA,CAAAujC,QAAAtjC,CAAAsjC,GAAAljC,EAAA,CAAAia,KAAA,sBAAA,CAAAP,MAAA,EAAA1V,CAAAA,MAAA,CAAAulB,EAAA,CAAAzlB,EAAA,CAAA,CAAA,KAAA,CAAAE,CAAAA,MAAA,CAAAC,EAAA,CAAA,CAAA++B,gBAAA,EAAAh\/B,CAAAA,MAAA,CAAAlE,EAAA,CAAA,CAAA,CAAA;AAAA,aAAAypB,EAAA,CAAAzlB,EAAA,CAAA,CAAA,oBAAAG,EAAA,CAAA,cAAAjE,EAAA,CAAAyX,SAAAA,QAAA,EAAA,CAAA5X,CAAA,CAAA,CAAAwvB,YAAArvB,EAAA,CAAAiwB,aAAA,IAAA,CAAAO,mBAAA,EAAA,CAAA,CAAAhF,GAAA,CAAAvsB,CAAA,CAAAe,EAAA,CAAAH,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAL,EAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA,CAAA,CAAA1qB,UAAA,qCAAA,CAAAjG,KAAA,QAAA,CAAA+H,KAAAqpC,EAAA,CAAAjpC,KAAA,gBAAA,CAAA+oB,gBAAA,GAAA,CAAA,oBAAA,GAAA,CAAAtpB,MAAA,EAAA1V,CAAAA,MAAA,CAAAulB,EAAA,CAAAvd,EAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,aAAAud,EAAA,CAAAvd,EAAA,CAAA,iBAAA,CAAA,CAAA,CAAAwN,QAAAA,QAAA,EAAA,CAAA3Z,CAAA,CAAA,CAAAgwB,cAAA,CAAA\/vB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAsjD,GAAAA,QAAA,CAAApkD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAm+C,CAAAA,YAAAv9C,EAAAA,CAAAZ,CAAA8sB,CAAAA,IAAA,OAAAtsB,GAAA,EAAAmF,CAAAA,aAAA,CAAAo+C,EAAA;AAAA,CAAAljB,IAAA,CAAA,CAAA,CAAArgC,EAAA,EAAAmF,CAAAA,aAAA,CAAAi+C,EAAA,CAAA,CAAA\/iB,IAAA,CAAA,CAAAgjB,MAAA,QAAA,CAAA,CAAA5jD,CAAA,CAAA,QAAA,CAAA,CAAAA,CAAA,CAAA,SAAA,CAAA,CAAAA,CAAA,CAAA,WAAA,CAAA,CAAAO,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAylB,MAAA,CAAAi5B,kBAAA,CAAA,CAAA,CAAA,CAAAzwC,CAAA,GAAAA,CAAAhT,CAAAK,CAAAA,KAAA2S,EAAAA,OAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA0wC,GAAAA,QAAA,CAAAtkD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAwoC,CAAAA,QAAA,CAAA5nC,EAAAZ,CAAAmkD,CAAAA,WAAAtjD,EAAAA,CAAAb,CAAAmjD,CAAAA,aAAA,OAAA3iD,GAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAylB,MAAA,CAAAO,QAAA,MAAA,CAAA,CAAA,CAAA9qB,CAAAs9C,CAAAA,YAAA,CAAA,2BAAA,CAAA,CAAA39C,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAylB,MAAA,CAAAi5B,kBAAA,SAAA,CAAA,CAAA,CAAA7jD,EAAA,EAAAmF,CAAAA,aAAA,CAAA2pC,EAAA,CAAA,CAAAruC,MAAAhB,CAAA6uB,CAAAA,UAAA,CAAArW,SAAAA,QAAA,CAAAzY,CAAA,CAAA,CAAAY,CAAA,CAAA,CAAAkuB,WAAA9uB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAY,EAAA,CAAA,IAAA,CAAA;MAAA2jD,GAAAA,QAAA,CAAAvkD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAwkD,CAAAA,eAAA,CAAA5jD,EAAAZ,CAAAykD,CAAAA,iBAAA5jD,EAAAA,CAAAb,CAAAwa,CAAAA,OAAA,OAAAha,GAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAA5a,EAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA,CAAA,CAAA1qB,UAAAjC,EAAA,CAAA,cAAA,CAAA,CAAA,mBAAA7W,CAAA,CAAA,CAAA,CAAAua,QAAA3Z,CAAA,CAAAga,KAAA4rB,EAAA,CAAA3zB,KAAA,QAAA,CAAA4H,MAAA1N,EAAA,CAAA,0BAAA,CAAA,CAAA,aAAAA,EAAA,CAAA,0BAAA,CAAA,CAAAi3B,cAAApoB,EAAA,EAAA,CAAA,CAAA,CAAA,CAAAjb,CAAA,EAAAJ,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,4BAAA,CAAA,CAAAnY,CAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,IAAA,CAAAA,EAAA,CAAA,IAAA,CAAA,KAAA8jD,GAAAlkD,EAAA,EAAAkjC,CAAAA,UAAA,CAAA,QAAA,CAAA1jC,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAAW,EAAAZ,CAAA6Z,CAAAA,QAAA,CAAAhZ,EAAAb,CAAAo5C,CAAAA,OAAA,CAAAt4C,EAAAd,CAAA+Y,CAAAA,SAAA\/X;CAAAA,CAAAhB,CAAAorB,CAAAA,KAAA,OAAA5qB,GAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAAjC,EAAA,CAAA,QAAA,CAAAhW,CAAA,CAAA,CAAAsqB,MAAA5M,EAAA,CAAA,CAAA,YAAA3d,CAAA,CAAA,CAAAG,CAAA,CAAA,CAAAuZ,IAAAta,CAAA,CAAA,CAAAW,CAAA,CAAA,CAAA,CAAA,CAAA+jD,IAAA\/jD,CAAA,CAAA,GAAA,CAAA,CAAA,QAAA,CAAAZ,CAAA,CAAA,CAAA,IAAAC,EAAA2kD,EAAA,EAAA,OAAA3kD,EAAA,CAAA,CAAA,CAAA,CAAAiqB,EAAA26B,CAAAA,YAAA,EAAArkD,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAAjC,EAAA,CAAA,OAAA,CAAA9W,CAAA+Y,CAAAA,SAAA,CAAA,CAAAC,KAAA,QAAA,CAAA,aAAA,MAAA,CAAAC,UAAAA,QAAA,CAAAhZ,CAAA,CAAA,CAAAka,QAAA,GAAAla,CAAAoT,CAAAA,GAAA,GAAApT,CAAAoa,CAAAA,WAAAC,CAAAA,wBAAA,EAAA,CAAAta,CAAAub,CAAAA,cAAA,EAAA,CAAA,CAAA,CAAA,kBAAAvb,CAAA8kD,CAAAA,UAAA,CAAA,CAAAtkD,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,mBAAA,CAAAyB,QAAAxa,CAAAub,CAAAA,cAAA,CAAA,CAAA,CAAA\/a,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA;AAAA,CAAAoT,UAAA,gBAAA,CAAAqS,MAAA,CAAA,cAAA,EAAApmB,CAAAA,MAAA,CAAAhF,CAAA+kD,CAAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA\/kD,CAAA6Z,CAAAA,QAAA,CAAA,CAAA,CAAA5Z,CAAA,CAAA,CAAA,IAAA,CAAA0kD,CAAA,CAAAC,GAAAA,QAAA,EAAA,CAAA,IAAA5kD,EAAA,CAAA,CAAA,CAAAS,EAAAua,CAAAA,QAAA,EAAA,IAAA,CAAA,CAAA\/a,EAAAD,CAAA,CAAA,CAAA,CAAA,CAAAY,EAAAZ,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAAS,EAAA+pC,CAAAA,eAAA,EAAA,QAAA,EAAA,CAAA,IAAAxqC,CAAA,CAAAC,EAAA,EAAA,IAAA,IAAAD,CAAA,CAAA0F,QAAA2B,CAAAA,aAAA,CAAA,aAAA,CAAA,GAAA,IAAA,EAAA,GAAArH,CAAA,EAAA,CAAAA,CAAAojD,CAAAA,SAAA1Y,CAAAA,QAAA,CAAA,iBAAA,CAAA,CAAA,CAAA7pC,GAAA6E,QAAAC,CAAAA,aAAA,CAAA,KAAA,CAAA,OAAA9E,GAAAuiD,CAAAA,SAAAvsB,CAAAA,GAAA,CAAA,YAAA,CAAA,4BAAA,CAAA,CAAA52B,CAAA,GAAAY,EAAAuiD,CAAAA,SAAAvsB,CAAAA,GAAA,CAAA,iBAAA,CAAA,CAAAh2B,EAAAuiD,CAAAA,SAAAvsB,CAAAA,GAAA,CAAA,iCAAA,CAAA;AAAAnxB,QAAAylB,CAAAA,IAAAjlB,CAAAA,WAAA,CAAArF,EAAA,CAAA,CAAAD,CAAA,CAAAC,EAAA,CAAA,CAAA,QAAA,EAAA,CAAA6E,QAAAylB,CAAAA,IAAA5kB,CAAAA,WAAA,CAAA1F,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAZ,CAAA,CAAA,CAAA+kD,EAAAA,QAAA,CAAAhlD,CAAA,CAAA,CAAA,IAAAC,EAAA,QAAA,EAAA,CAAA,IAAAD,EAAA,CAAA,CAAA,CAAAS,EAAAua,CAAAA,QAAA,EAAA,IAAA,CAAA,CAAApa,GAAAZ,CAAA,CAAA,CAAA,CAAA,OAAA,CAAAA,CAAAC,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,CAAAQ,EAAA8qC,CAAAA,WAAA,EAAA,QAAA,CAAAvrC,EAAA,CAAA,CAAA,MAAAY,GAAA,CAAAZ,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAAA,CAAAY,EAAAX,CAAA,CAAA,CAAA,CAAAY,EAAAA,CAAAZ,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAQ,EAAAmY,CAAAA,SAAA,EAAA,QAAA,EAAA,CAAA,GAAAhY,CAAA,CAAA,CAAA,IAAAX,EAAAa,CAAA,CAAAF,CAAA,CAAA,EAAA,CAAAX,CAAAgC,CAAAA,MAAA,EAAA,CAAA,CAAA,GAAAjC,CAAAilD,CAAAA,SAAA,EAAAnsC,CAAA7Y,CAAA,CAAA,CAAA,CAAA6Y,EAAA7Y,CAAA,CAAA,CAAA,CAAA6Y,EAAAA,KAAA,EAAA,KAAAjY,GAAAA,QAAA,CAAAb,EAAA,CAAA,CAAA,GAAAwZ,KAAA,GAAAxZ,EAAAqT,CAAAA,GAAA,CAAA,CAAA,IAAApT,GAAAa,CAAA,CAAAF,CAAA,CAAA,CAAAC,GAAA6E,QAAAgU,CAAAA,aAAA,CAAA1Y,GAAAf,EAAA88C,CAAAA,SAAA,CAAA,QAAA,CAAA\/8C,EAAA,CAAA,CAAA,MAAAA,GAAA,GAAAa,EAAA,CAAA,CAAA,EAAA,GAAAG,EAAA,EAAAhB,EAAAwpC,CAAAA,QAAA,EAAAvpC,EAAA,CAAAA,EAAAgC,CAAAA,MAAA,CAAA,CAAA,CAAA6W,CAAAA,KAAA,EAAA,CAAA9Y,EAAAka,CAAAA,cAAA,EAAA;AAAAlZ,EAAA,GAAAf,EAAAgC,CAAAA,MAAA,CAAA,CAAA,EAAAjC,EAAAwpC,CAAAA,QAAA,GAAAvpC,EAAA,CAAA,CAAA,CAAA6Y,CAAAA,KAAA,EAAA,CAAA9Y,EAAAka,CAAAA,cAAA,EAAA,CAAA,CAAA,CAAA,OAAAtZ,EAAA+pC,CAAAA,gBAAA,CAAA,SAAA,CAAA9pC,EAAA,CAAA,CAAA,QAAA,EAAA,CAAA,MAAAD,EAAAgqC,CAAAA,mBAAA,CAAA,SAAA,CAAA\/pC,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAAZ,CAAAilD,CAAAA,SAAA,CAAA,CAAA,KAAAnkD,EAAAA,QAAA,CAAAd,CAAA,CAAA,CAAA,MAAA,CAAAC,CAAA,CAAAD,CAAAklD,CAAAA,gBAAA,CAAA,mDAAA,CAAA,EAAAtuC,KAAA6f,CAAAA,IAAA,CAAAx2B,CAAA,CAAA,CAAA,EAAA,CAAA,OAAAO,GAAA,EAAAmF,CAAAA,aAAA,CAAAg\/C,EAAA,CAAA,CAAA5rC,UAAAjC,EAAA,CAAA,QAAA,CAAA9W,CAAA+Y,CAAAA,SAAA,CAAA,CAAA+rC,WAAA,cAAA,CAAAC,SAAA\/kD,CAAAmlD,CAAAA,KAAA,CAAA,GAAA,CAAA,GAAA,CAAA5pC,eAAAvb,CAAAub,CAAAA,cAAA,CAAA,CAAA\/a,EAAA,EAAAmF,CAAAA,aAAA,CAAA++C,EAAA,CAAA,CAAAnqC,IAAA1Z,CAAA,CAAA,CAAAL,EAAA,EAAAmF,CAAAA,aAAA,CAAA,IAAA;AAAA,CAAAjF,GAAA,cAAA,CAAAqY,UAAA,eAAA,CAAA,CAAAvY,EAAA,EAAAmF,CAAAA,aAAA,CAAA,MAAA,CAAA,CAAAoT,UAAA,sBAAA,CAAA,CAAA\/Y,CAAA0a,CAAAA,KAAA,CAAA,CAAAla,EAAA,EAAAmF,CAAAA,aAAA,CAAA,QAAA,CAAA,CAAAoT,UAAA,cAAA,CAAAyB,QAAAxa,CAAAub,CAAAA,cAAA,CAAA,aAAAvO,EAAA,CAAA,eAAA,CAAA,CAAA,CAAA6O,EAAA,EAAA,CAAA8qB,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAAlmC,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,iBAAA,CAAA,CAAA\/Y,CAAA6Z,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAAurC,EAAAA,QAAA,CAAAplD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAA00C,CAAAA,OAAA,CAAA9zC,EAAAZ,CAAA0Y,CAAAA,OAAA,CAAA7X,EAAA,CAAA,CAAA,CAAAJ,EAAAua,CAAAA,QAAA,EAAA,CAAA,CAAA\/a,CAAA,CAAAa,EAAAA,CAAAD,CAAA,CAAA,CAAA,CAAA,KAAAG,EAAAH,CAAA,CAAA,CAAA,CAAAF,EAAAA,CAAAH,EAAA,EAAA+qC,CAAAA,WAAA,CAAA,QAAA,EAAA,CAAAvqC,CAAA,CAAA,CAAA,CAAA,CAAAJ,EAAA,EAAAA,CAAA,EAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,OAAAJ,GAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAAta,CAAA,EAAAN,EAAA,EAAAmF,CAAAA,aAAA,CAAAq\/C,CAAA;AAAA,CAAAG,MAAA,CAAA,CAAA,CAAA5pC,eAAA5a,CAAA,CAAA+Z,MAAA1N,EAAA,CAAA,mBAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,IAAA,CAAA1F,CAAA4gB,CAAAA,KAAA,CAAA,IAAA,CAAAtY,CAAAA,GAAA,CAAA,QAAA,CAAAvI,EAAA,CAAA,CAAA,MAAAQ,GAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAApb,EAAA,CAAAQ,EAAA,EAAAmF,CAAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA0\/C,IAAAzkD,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAykD,CAAA,CAAAC,GAAAD,EAAAjtB,CAAAA,QAAA,CAAAhE,gBAAA,CAAA,CAAAA,gBAAA,CAAA,CAAA,CAAAmxB,GAAA,QAAAA,EAAA7\/C,SAAAC,CAAAA,aAAA,CAAA,QAAA,CAAAuf,CAAAA,UAAA,CAAA,IAAA,CAAA,CAAAsgC,GAAAA,QAAA,EAAA,CAAA,MAAAhlD,GAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CAAAqH,EAAA,CAAA,+BAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,GAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,MAAA;AAAA,IAAA,CAAAqH,EAAA,CAAA,0BAAA,CAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAAqH,EAAA,CAAA,6BAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAAy4C,GAAAA,QAAA,CAAAzlD,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAiqB,EAAAw5B,CAAAA,sBAAA,EAAAzjD,CAAA,CAAAA,EAAAgzC,CAAAA,SAAA,CAAA,EAAAjzC,EAAA,WAAAk4C,kBAAA,CAAAj4C,CAAAiG,CAAAA,WAAA,CAAAlG,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAkqB,EAAAxI,CAAAA,MAAA,EAAAlhB,EAAA,EAAAmF,CAAAA,aAAA,CAAA6\/C,EAAA,CAAA,IAAA,CAAA,CAAAvlD,CAAA,CAAA,CAAA,CAAAylD,GAAAA,QAAA,CAAA1lD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAg1B,CAAAA,QAAA,CAAAp0B,EAAAZ,CAAAwoC,CAAAA,QAAA,CAAA3nC,EAAAb,CAAA4yC,CAAAA,aAAA,CAAA9xC,EAAA,IAAA,EAAA,GAAAD,CAAA,CAAA,EAAA,CAAAA,CAAAG,EAAAA,CAAAhB,CAAAmjD,CAAAA,aAAA,KAAAxiD,GAAAX,CAAA2lD,CAAAA,aAAA,CAAA7gD,GAAA9E,CAAA4lD,CAAAA,aAAA,CAAA7gD,GAAA\/E,CAAA6lD,CAAAA,mBAAA,CAAA5gD,GAAAjF,CAAA8lD,CAAAA,iBAAA,CAAA5gD,GAAA29B,EAAA,CAAA5iC,CAAA,CAAAW,CAAA,CAAA6F,EAAAA,CAAA,CAAA,CAAA,CAAAhG,EAAAua,CAAAA,QAAA,EAAAsqC,EAAA,CAAA,KAAAp+C,GAAAT,CAAA,CAAA,CAAA,CAAA;AAAAQ,GAAAR,CAAA,CAAA,CAAA,CAAAhB,EAAAA,CAAA,CAAA,CAAA,CAAAhF,EAAAua,CAAAA,QAAA,EAAA9V,EAAA,CAAA,KAAA+G,GAAAxG,CAAA,CAAA,CAAA,CAAA,CAAA0G,GAAA1G,CAAA,CAAA,CAAA,CAAA,CAAA4G,GAAA,CAAA,CAAA,CAAA5L,EAAAkY,CAAAA,MAAA,EAAA,IAAA,CAAA,CAAApM,GAAA3L,CAAA2vB,CAAAA,gBAAA,CAAA9jB,GAAA7L,CAAAsxB,CAAAA,mBAAA,CAAAvlB,GAAA\/L,CAAA+wB,CAAAA,kBAAA,CAAA9kB,GAAAZ,EAAA,CAAAysB,EAAA,CAAAz4B,CAAA,CAAAW,CAAA,CAAA,CAAAX,CAAA,OAAA,CAAA,CAAA,CAAAQ,EAAAmY,CAAAA,SAAA,EAAA,QAAA,EAAA,CAAAzM,EAAA,CAAAjH,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAzE,EAAAmY,CAAAA,SAAA,EAAA,QAAA,EAAA,CAAA,IAAA5Y,GAAAqM,EAAAwM,CAAAA,OAAA,IAAA7Y,EAAA,CAAA,GAAA,CAAA,IAAAC,GAAA0yC,EAAA,CAAA9lC,EAAA,CAAAjM,CAAA,CAAA,CAAA2vB,iBAAAhkB,EAAA,CAAA2lB,oBAAAzlB,EAAA,CAAAmmC,cAAA9xC,CAAA,CAAAwzB,MAAAptB,EAAA,CAAAyqB,mBAAAhlB,EAAA,CAAA,CAAA+qC,GAAA,CAAAz3C,EAAA,CAAAoB,CAAAA,IAAA,CAAA,QAAA,EAAA,CAAAokD,EAAA,CAAAxlD,EAAA,CAAAD,EAAA,CAAA,CAAA,CAAA+lD,CAAAA,KAAA,CAAA,QAAA,CAAA9lD,EAAA,CAAA,CAAAm8B,OAAAwZ,CAAAA,KAAA,CAAA31C,EAAA,CAAAwlD,GAAA,CAAA,IAAAhR,EAAA,CAAAz0C,EAAA,CAAA,CAAA,CAAA,CAAA,MAAAC,EAAA,CAAA,CAAAm8B,OAAAwZ,CAAAA,KAAA,CAAA31C,EAAA,CAAA,CAAAwlD,EAAA,CAAA,IAAAhR,EAAA,CAAAz0C,EAAA,CAAA,CAAA,CAAA;AAAA,CAAAY,CAAA,CAAAiM,EAAA,CAAAN,EAAA,CAAAzL,CAAA,CAAA2L,EAAA,CAAAvF,EAAA,CAAAyF,EAAA,CAAA,CAAA,CAAAnM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,cAAA,CAAA,CAAAvY,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,uBAAA,CAAAwB,IAAAlO,EAAA,CAAA,CAAA,CAAAk5C,EAAA,EAAAvkD,CAAAm9C,CAAAA,YAAA,CAAA,oBAAA,CAAA,CAAA39C,EAAA,EAAAmF,CAAAA,aAAA,CAAAo+C,EAAA,CAAA,CAAAljB,IAAA,CAAA,CAAAgjB,MAAA,QAAA,CAAA,CAAArjD,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,uBAAA,CAAA,CAAAvY,EAAA,EAAAmF,CAAAA,aAAA,CAAAi+C,EAAA,CAAA,CAAA\/iB,IAAA,CAAA,CAAA,CAAArgC,EAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA,CAAA,CAAA3wB,KAAA,QAAA,CAAA0F,MAAA,KAAA,CAAAkC,MAAA1N,EAAA,CAAA,qBAAA,CAAA,CAAA,aAAAA,EAAA,CAAA,qBAAA,CAAA,CAAAwN,QAAAA,QAAA,EAAA,CAAA,MAAA7Z,GAAA,CAAAkM,EAAA,CAAA3F,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA1G,EAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA;AAAA,CAAA3wB,KAAA,QAAA,CAAA0F,MAAA,KAAA,CAAAkC,MAAA1N,EAAA,CAAA,qBAAA,CAAA,CAAA,aAAAA,EAAA,CAAA,qBAAA,CAAA,CAAAwN,QAAAA,QAAA,EAAA,CAAA,MAAA1V,GAAA,CAAA+H,EAAA,CAAA3F,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA+wC,EAAA,EAAAz3C,EAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA,CAAA,CAAA3wB,KAAA,QAAA,CAAA+H,KAAAkqB,EAAA,CAAArqB,MAAA1N,EAAA,CAAA,4BAAA,CAAA,CAAA,aAAAA,EAAA,CAAA,4BAAA,CAAA,CAAAwN,QAAAA,QAAA,EAAA,CAAA,MAAAzV,GAAA,CAAA8H,EAAA,CAAA3F,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAjC,EAAA,EAAAzE,EAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA,CAAA,CAAA3wB,KAAA,QAAA,CAAA+H,KAAA8pB,EAAA,CAAAjqB,MAAA1N,EAAA,CAAA,0BAAA,CAAA,CAAA,aAAAA,EAAA,CAAA,0BAAA,CAAA,CAAAwN,QAAAA,QAAA,EAAA,CAAA,MAAAvV,GAAA,CAAA4H,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAArM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA;AAAA,CAAAoT,UAAA,oBAAA,CAAA,CAAA\/X,CAAAm9C,CAAAA,YAAA,CAAA,mBAAA,CAAA,CAAA,CAAA39C,EAAA,EAAAmF,CAAAA,aAAA,CAAAi+C,EAAA,CAAA,CAAA\/iB,IAAA,CAAA,CAAA,CAAAwkB,EAAA98C,CAAAA,GAAA,CAAA,QAAA,CAAAvI,EAAA,CAAA,CAAA,IAAAC,GAAA,QAAA,CAAAD,EAAA,CAAAC,EAAA,CAAAW,EAAA,CAAAC,EAAA,CAAA,CAAAC,EAAAA,CAAA+xC,EAAA,CAAA7yC,EAAA,CAAAY,EAAA,CAAAI,GAAAA,CAAA8xC,EAAA,CAAAhyC,EAAA,CAAAb,EAAA,CAAAW,EAAA,CAAA2H,CAAAA,GAAA,CAAA,QAAA,CAAAvI,EAAA,CAAA,CAAA,MAAAgO,KAAAg4C,CAAAA,KAAA,CAAAhmD,EAAA,CAAAa,EAAA,CAAA,CAAA,CAAA,OAAA,CAAAG,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA6L,EAAA,CAAA\/L,CAAA,CAAA6L,EAAA,CAAA3M,EAAA,CAAA,CAAAY,GAAAX,EAAA,CAAA,CAAA,CAAAY,GAAAA,CAAAZ,EAAA,CAAA,CAAA,CAAAe,GAAAA,CAAA,EAAAgE,CAAAA,MAAA,CAAAgI,EAAA,CAAA,eAAA,CAAA,CAAA,GAAA,CAAAhI,CAAAA,MAAA,CAAAhF,EAAA,CAAA,KAAA,CAAAgF,CAAAA,MAAA,CAAApE,EAAA,CAAA,GAAA,CAAAoE,CAAAA,MAAA,CAAAnE,EAAA,CAAA,GAAA,CAAA,OAAAL,GAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA,CAAA,CAAApwB,IAAArT,EAAA,CAAA6hC,KAAA,GAAA,CAAA\/uB,KAAA,OAAA,CAAA+H,KAAA,EAAA7V,CAAAA,MAAA,CAAAhF,EAAA,CAAA,GAAA,CAAA,CAAAib,KAAA,qBAAA,CAAAP,MAAA1Z,EAAA,CAAA,aAAAA,EAAA,CAAAN,GAAA,qBAAA;AAAAwjC,QAAAlkC,EAAAkkC,GAAAh9B,EAAA,CAAAuR,SAAAA,QAAA,EAAA,CAAA,MAAAxR,GAAA,CAAAjH,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAgB,CAAAm9C,CAAAA,YAAA,CAAA,wBAAA,CAAA,CAAAj5C,EAAA,EAAA1E,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,OAAA,CAAA,IAAA,CAAAnF,EAAA,EAAAmF,CAAAA,aAAA,CAAA,OAAA,CAAA,CAAAmN,KAAA,UAAA,CAAAoxB,QAAAj4B,EAAA,CAAAwM,SAAAA,QAAA,CAAAzY,EAAA,CAAA,CAAA,MAAAmM,GAAA,CAAAnM,EAAAya,CAAAA,aAAAypB,CAAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAAl3B,EAAA,CAAA,qBAAA,CAAA,CAAA,CAAA,CAAAhM,CAAAm9C,CAAAA,YAAA,CAAA,wBAAA,CAAA,CAAAn9C,CAAAm9C,CAAAA,YAAA,CAAA,0BAAA,CAAA,CAAA,CAAA,CAAA,CAAA8H,GAAAA,QAAA,CAAAjmD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAg1B,CAAAA,QAAA,CAAAp0B,EAAAZ,CAAAwoC,CAAAA,QAAA,CAAA3nC,EAAAb,CAAA4yC,CAAAA,aAAA9xC,EAAAA,CAAA,IAAA,EAAA,GAAAD,CAAA,CAAA,EAAA,CAAAA,CAAA,KAAAG,EAAAhB,CAAAmjD,CAAAA,aAAA;AAAAxiD,GAAAX,CAAA2lD,CAAAA,aAAA,CAAA7gD,GAAA9E,CAAA4lD,CAAAA,aAAA,CAAA7gD,GAAA\/E,CAAA6lD,CAAAA,mBAAA5gD,EAAAA,CAAAjF,CAAA8lD,CAAAA,iBAAA,KAAA5gD,GAAA,CAAA,CAAA,CAAAzE,EAAAua,CAAAA,QAAA,EAAA,CAAA,CAAA,CAAA,CAAAvU,GAAAvB,EAAA,CAAA,CAAA,CAAA,CAAAgC,GAAAhC,EAAA,CAAA,CAAA,CAAA,CAAA+B,GAAA,CAAA,CAAA,CAAAxG,EAAAkY,CAAAA,MAAA,EAAA,IAAA,CAAAlT,GAAAA,CAAAjF,EAAA,EAAA+qC,CAAAA,WAAA,CAAA,QAAA,EAAA,CAAA,IAAAvrC,EAAAkH,GAAA,CAAA,CAAA,CAAA,CAAA,KAAA,IAAAlH,EAAA,CAAAiH,EAAA4R,CAAAA,OAAA,GAAA,IAAA,EAAA,GAAA7Y,EAAA,EAAAA,EAAA8Y,CAAAA,KAAA,EAAA,CAAA,CAAA,EAAA,CAAA,OAAAtY,GAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAA5a,EAAA,EAAAmF,CAAAA,aAAA,CAAA89B,EAAA,CAAA,CAAAjpB,QAAAA,QAAA,EAAA,CAAAtT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA2T,KAAAqqB,EAAA,CAAApyB,KAAA,QAAA,CAAA,aAAA9F,EAAA,CAAA,gBAAA,CAAA,CAAAi3B,cAAApoB,EAAA,EAAA,CAAAnB,MAAA1N,EAAA,CAAA,gBAAA,CAAA,CAAAuN,IAAAtT,EAAA,CAAA,CAAA,CAAAR,EAAA,EAAAjG,EAAA,EAAAmF,CAAAA,aAAA,CAAAq\/C,CAAA,CAAA,CAAAzpC,eAAA9V,EAAA;AAAAiV,MAAA1N,EAAA,CAAA,gBAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA+\/C,EAAA,CAAA,CAAA1wB,SAAA\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\/lD,EAAAb,CAAA6mD,CAAAA,mBAAA\/lD,EAAAA,CAAAd,CAAAwa,CAAAA,OAAA,KAAAxZ,EAAA,CAAA,CAAA,CAAAP,EAAAkY,CAAAA,MAAA,EAAA,IAAA,CAAA,EAAA,CAAA,CAAAlY,EAAAmY,CAAAA,SAAA,EAAA,QAAA,EAAA,CAAA,IAAA5Y,GAAAC,CAAAD,EAAAY,CAAA,IAAAZ,EAAA,CAAA,CAAA,IAAAa,GAAAkyC,EAAA,CAAA\/yC,EAAA,CAAA,CAAAuwB,iBAAA,CAAA,CAAA,CAAA2B,oBAAApJ,EAAAe,CAAAA,EAAA,CAAA8H,mBAAA,CAAA,CAAA,CAAA,CAAA7wB,GAAAA,CAAA,CAAA,KAAA,IAAAH,GAAAK,CAAA6X,CAAAA,OAAAgB,CAAAA,QAAA,CAAA\/Y,EAAA,CAAAH,EAAAsB,CAAAA,MAAA,CAAAnB,EAAA,EAAA,CAAA,CAAA,IAAAL,GAAAE,EAAA,CAAAG,EAAA,CAAA,MAAA,GAAAL,EAAAqmD,CAAAA,OAAA,EAAA9lD,CAAA6X,CAAAA,OAAAtS,CAAAA,WAAA,CAAA9F,EAAA,CAAA,CAAAO,CAAA6X,CAAAA,OAAA3S,CAAAA,WAAA,CAAArF,EAAA,CAAA,KAAAL,GAAAQ,CAAA6X,CAAAA,OAAA,OAAA,SAAA,EAAA,CAAArY,EAAA+F,CAAAA,WAAA,CAAA1F,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAZ,CAAA,CAAAW,CAAA,CAAA,CAAA,KAAAD,GAAA,CAAA,CAAA,CAAAF,EAAAua,CAAAA,QAAA,EAAA,CAAA,CAAA,CAAA,CAAAjW,GAAApE,EAAA,CAAA,CAAA,CAAA,CAAAsE,GAAAtE,EAAA,CAAA,CAAA,CAAAuE,GAAAA,CAAA2W,EAAA,EAAA,KAAApV,IAAA1B,EAAA0B,EAAAvB,EAAAuB,GAAA7F,CAAA6F;AAAAjG,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,qBAAA,CAAA,CAAA2tC,EAAA,CAAA,OAAAlmD,GAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAAjC,EAAA,CAAA,cAAA,CAAA,CAAA,uBAAA7W,CAAA,EAAAW,CAAA,CAAA,CAAA,CAAAmmD,aAAAA,QAAA,EAAA,CAAA,MAAA9hD,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA+hD,aAAAA,QAAA,EAAA,CAAA,MAAA\/hD,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAzE,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAAjC,EAAA,CAAA,uBAAA,CAAA,CAAA,sBAAA,CAAA,CAAAlW,CAAA,CAAA,CAAA,CAAA2Z,IAAAvZ,CAAA,CAAAimD,UAAA,CAAA,CAAAhnD,CAAA,CAAAua,QAAAva,CAAA,EAAAW,CAAA,CAAAE,CAAA,CAAA,IAAA,EAAA,CAAAomD,YAAAA,QAAA,CAAAlnD,EAAA,CAAA,CAAAiF,EAAA,CAAA,CAAA,CAAA,CAAAjF,GAAAmnD,CAAAA,YAAAC,CAAAA,OAAA,CAAAtiD,EAAAiI,CAAAA,EAAAwD,CAAAA,aAAA,CAAAzJ,IAAAC,CAAAA,SAAA,CAAA9G,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAwG,EAAA,CAAAxG,CAAA,GAAA8E,EAAA,EAAAG,EAAA,GAAA1E,EAAA,EAAAmF,CAAAA,aAAA,CAAA,QAAA;AAAA,CAAAoT,UAAA,iCAAA,CAAA,aAAA\/L,EAAA,CAAA,0BAAA,CAAA,CAAAwN,QAAA3Z,CAAA,CAAA,CAAA6lC,EAAA,CAAA,CAAA,CAAA,CAAA,GAAAlmC,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAgiB,MAAA,MAAA,CAAAC,OAAA,MAAA,CAAA8c,QAAA,eAAA,CAAA2hB,MAAA,4BAAA,CAAA,CAAA7lD,EAAA,EAAAmF,CAAAA,aAAA,CAAA,MAAA,CAAA,CAAAV,EAAA,6MAAA,CAAA,CAAA,CAAA,CAAA,GAAAzE,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAgiB,MAAA,MAAA;AAAAC,OAAA,MAAA,CAAA8c,QAAA,eAAA,CAAA2hB,MAAA,4BAAA,CAAAttC,UAAA,0BAAA,CAAA,CAAAvY,EAAA,EAAAmF,CAAAA,aAAA,CAAA,MAAA,CAAA,CAAAV,EAAA,4PAAA,CAAA,CAAA,CAAA,CAAAoiD,GAAAA,QAAA,CAAArnD,CAAA,CAAA,CAAA,MAAAQ,GAAA,EAAAmF,CAAAA,aAAA,CAAA,OAAA,CAAA,CAAAoT,UAAAjC,EAAA,CAAA,oEAAA;AAAA,gBAAA9R,CAAAA,MAAA,CAAAhF,CAAA6hC,CAAAA,IAAA,EAAA,GAAA,CAAA,CAAA,CAAA,8BAAA7hC,CAAAoyB,CAAAA,cAAA,CAAA,CAAA,CAAA1X,MAAA,EAAA1V,CAAAA,MAAA,CAAAhF,CAAA0a,CAAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAAla,EAAA,EAAAmF,CAAAA,aAAA,CAAA,OAAA,CAAA,CAAAoT,UAAA,wBAAA,CAAAjG,KAAA,UAAA,CAAAmI,KAAAjb,CAAAib,CAAAA,IAAA,CAAAva,GAAAV,CAAAU,CAAAA,EAAA,CAAA+X,SAAAzY,CAAAyY,CAAAA,QAAA,CAAAyrB,QAAAlkC,CAAAkkC,CAAAA,OAAA,CAAA,aAAAlkC,CAAA0a,CAAAA,KAAA,CAAA,CAAA,CAAAla,EAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAA,gBAAA,CAAA,CAAA\/Y,CAAAkkC,CAAAA,OAAA,CAAAojB,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAAC,GAAAA,QAAA,CAAAxnD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAynD,CAAAA,OAAA,CAAA7mD,EAAAZ,CAAA6Z,CAAAA,QAAAhZ,EAAAA,CAAAm3B,EAAA,EAAA,CAAAh4B,CAAA,CAAA,CAAA,SAAA,CAAA,UAAA,CAAA,CAAA,KAAAc,EAAAN,EAAA,EAAAmF,CAAAA,aAAA,CAAA,IAAA,CAAA,CAAAoT,UAAA,iBAAA,CAAArY,GAAA,EAAAsE,CAAAA,MAAA,CAAA\/E,CAAA;AAAA,QAAA,CAAA,CAAA,CAAA+M,EAAA,CAAA,WAAAhI,CAAAA,MAAA,CAAA\/E,CAAA,CAAA,CAAA,CAAA,OAAAO,GAAA,EAAAmF,CAAAA,aAAA,CAAA,SAAA,CAAA2V,EAAA,EAAA,CAAA,EAAA,CAAAza,CAAA,CAAA,CAAA,kBAAA,EAAAmE,CAAAA,MAAA,CAAA\/E,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,UAAA,EAAA,MAAAW,EAAA,CAAAA,CAAA,CAAAE,CAAA,CAAA,CAAAN,EAAA,EAAAmF,CAAAA,aAAA,CAAAnF,EAAA,EAAA4a,CAAAA,QAAA,CAAA,IAAA,CAAAta,CAAA,CAAAF,CAAA,CAAA,CAAA,CAAA,CAAA8mD,IAAA9mD,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAAAZ,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAA6Z,CAAAA,QAAA,CAAAjZ,EAAAZ,CAAA+Y,CAAAA,SAAAlY,EAAAA,CAAAb,CAAA2nD,CAAAA,MAAA,OAAAnnD,GAAA,EAAAmF,CAAAA,aAAA,CAAA,KAAA,CAAA,CAAAoT,UAAAjC,EAAA,CAAA,UAAA,CAAAlW,CAAA,CAAA,CAAAgnD,gBAAA\/mD,CAAA,CAAA,CAAA,CAAA,CAAAZ,CAAA,CAAA,CAAAynD,CAAA,CAAAG,GAAAA,QAAA,CAAA7nD,CAAA,CAAA,CAAA,IAAAC,EAAAD,CAAAwoC,CAAAA,QAAA,CAAA5nC,EAAAZ,CAAAg1B,CAAAA,QAAA,CAAAn0B,EAAAb,CAAA8nD,CAAAA,WAAA,CAAAhnD,EAAAd,CAAAmjD,CAAAA,aAAA,CAAAniD,GAAAhB,CAAA+nD,CAAAA,YAAA,CAAApnD,GAAAX,CAAAmkD,CAAAA,WAAA,CAAA1jD,GAAAT,CAAAgoD,CAAAA,mBAAA,CAAAljD,GAAA9E,CAAAioD,CAAAA,YAAA;AAAAljD,GAAA\/E,CAAAglB,CAAAA,MAAA,CAAA\/f,GAAAjF,CAAAwkD,CAAAA,eAAA,CAAAt\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\/C,EAAA,CAAAw\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\/Y,CAAA+oD,CAAAA,OAAA,CAAA,CAAA\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\/F,GAAA,CAAA,CAAAA,EAAA,CAAA\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\/E,CAAAgoD,CAAAA,mBAAA,CAAA\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\/+B,EAAA,CAAA,QAAA,CAAA\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\/L,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAA+\/C,CAAAA,YAAA3\/C,IAAA9L,CAAAT,EAAAS,CAAA,IAAAD,OAAA,CAAA,QAAA,CAAAnB,EAAA,CAAAC,EAAA,CAAA,CAAAa,EAAA,CAAAd,EAAAgB,GAAA,CAAAf,EAAA,CAAA,CAAAmB,EAAAA,OAAA,CAAAN,EAAA,CAAAH,EAAAmsD,CAAAA,MAAA,CAAA9rD,EAAA,CAAAL,EAAAuM,CAAAE,GAAAA,CAAA,CAAA2\/C,MAAA,CAAA,CAAA,CAAAF,aAAA3\/C,EAAA,CAAA8\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\/mB,CAAA,CAAAgnB,OAAA\/mB,EAAA,CAAAyrB,OAAA,UAAA,CAAA,CAAA3E,MAAA7mB,EAAA,CAAA8mB,OAAA5mB,CAAA,CAAAuZ,IAAA,IAAAqzC,CAAAA,eAAA,CAAAvK,cAAA,IAAAwK,CAAAA,uBAAA,CAAAC,cAAA,IAAAC,CAAAA,uBAAA,CAAAC,YAAA,IAAAC,CAAAA,aAAA,CAAAC,gBAAA,IAAAD,CAAAA,aAAA,CAAAE,YAAA,IAAAC,CAAAA,eAAA;AAAAC,cAAA,IAAAC,CAAAA,uBAAA,CAAA,CAAAthD,EAAA,CAAA,sBAAA,CAAA,CAAA,CAAAxM,EAAA,EAAAmF,CAAAA,aAAA,CAAA,QAAA,CAAA,CAAAjF,GAAA,QAAA,CAAA0qB,MAAA,CAAAzD,MAAA\/mB,CAAA,CAAAgnB,OAAA\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\/C,EAAA7K,CAAAA,MAAA,CAAA,IAAA5\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\/\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\/B,CAAAA,GAAA,CAAA\/zB,CAAAmzD,CAAAA,SAAA,CAAA,CAAA1mD,EAAAzM,CAAA+sB,CAAAA,OAAA,CAAA1gB,EAAArM,CAAAmtB,CAAAA,OAAA,CAAA,CAAA,EAAA,GAAA+lC,EAAArxB,CAAAA,IAAA,GAAAuxB,EAAA,CAAArU,EAAA,CAAAmU,EAAA,CAAA,CAAAG,EAAA,CAAA,IAAAlyC,CAAAA,KAAA2L,CAAAA,IAAA7rB,CAAAA,KAAA,CAAAqyD,EAAA,CAAArU,EAAA,CAAAroC,KAAA6f,CAAAA,IAAA,CAAAy8B,EAAArf,CAAAA,MAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA5zC,CAAAiC,CAAAA,SAAAqxD,CAAAA,uBAAA,CAAAC,QAAA,CAAAxzD,CAAA,CAAA,CAAA,IAAAC,EAAA4sB,EAAA,CAAA7sB,CAAA,CAAA,IAAAmhB,CAAAA,KAAA,CAAA,CAAAvgB,EAAA83B,EAAA,CAAA,IAAAuyB,CAAAA,KAAAv1B,CAAAA,WAAA,EAAA;AAAA,IAAAvU,CAAAA,KAAA,CAAA,CAAAtgB,GAAA4nB,EAAA,CAAA7nB,CAAA,CAAA,CAAAE,GAAAD,EAAA,CAAA,CAAA,CAAA,CAAAG,GAAAH,EAAA,CAAA,CAAA,CAAA,CAAAF,GAAAE,EAAA,CAAA,CAAA,CAAAJ,GAAAA,CAAAI,EAAA,CAAA,CAAA,CAAA,OAAA,CAAAs1C,OAAAl2C,CAAA,CAAAwzD,aAAA7lC,EAAA,CAAApiB,EAAA,CAAAvL,CAAAwM,CAAAA,CAAA,CAAAxM,CAAAoM,CAAAA,CAAA,CAAA,IAAA8U,CAAAA,KAAAwP,CAAAA,QAAA,CAAA,CAAA,CAAA+iC,WAAAnxB,EAAA,CAAA6pB,EAAA,CAAApsD,CAAA+sB,CAAAA,OAAA,CAAA,IAAA5L,CAAAA,KAAA8L,CAAAA,UAAA,CAAAjtB,CAAAmtB,CAAAA,OAAA,CAAA,IAAAhM,CAAAA,KAAA0K,CAAAA,SAAA,CAAA,CAAA8nC,WAAA90C,EAAA,CAAA,EAAA,CAAA5e,CAAA,CAAA,CAAAgiC,iBAAA,IAAAgpB,CAAAA,KAAAv1B,CAAAA,WAAA,EAAA3N,CAAAA,MAAA,CAAA,QAAA,CAAA\/nB,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAAD,GAAA+zB,CAAAA,GAAA,CAAA9zB,EAAAS,CAAAA,EAAA,CAAA44B,EAAA,CAAAr5B,EAAA,CAAA,CAAA,CAAAD,EAAA,CAAA,CAAA,IAAAquB,GAAA,CAAA,CAAAyjC,OAAA,CAAA8B,WAAA,CAAA,CAAA,CAAA9iC,WAAA,CAAA,CAAA,CAAA+iC,OAAA,CAAApnD,EAAA,CAAA,CAAAJ,EAAA,CAAA,CAAA,CAAAynD,eAAA,QAAA,CAAAC,OAAA,CAAAtnD,GAAA9L,EAAA8L,CAAA3L,EAAA2L,EAAA,CAAA,CAAAJ,GAAA5L,EAAA4L,CAAArL,EAAAqL,EAAA,CAAA,CAAA,CAAA,CAAA2nD,IAAA,CAAAz\/B,QAAA,IAAA,CAAA0\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\/wB,CAAAA,gBAAA,EAAA\/hC,CAAA,CAAAZ,CAAA+sB,CAAAA,OAAA,CAAA,IAAAtL,CAAAA,QAAA,CAAA,CAAAyL,QAAA,IAAA\/L,CAAAA,KAAA+L,CAAAA,OAAAA;CAAAtsB,CAAAssB,CAAAjtB,CAAA0zD,CAAAA,UAAAlnD,CAAAA,CAAAygB,EAAA,IAAA\/L,CAAAA,KAAA2L,CAAAA,IAAA7rB,CAAAA,KAAA,CAAA,CAAA,CAAAhB,CAAA0zD,CAAAA,UAAAlnD,CAAAA,CAAA,CAAA7L,CAAA,CAAA,CAAA,CAAA,EAAAX,CAAAyzD,CAAAA,UAAA9wB,CAAAA,cAAA,EAAA9hC,CAAA,CAAAd,CAAAmtB,CAAAA,OAAA,CAAA,IAAA1L,CAAAA,QAAA,CAAA,CAAA2L,QAAA,IAAAjM,CAAAA,KAAAiM,CAAAA,OAAAA,EAAAtsB,CAAAssB,CAAAntB,CAAA0zD,CAAAA,UAAAtnD,CAAAA,CAAA+gB,EAAA,IAAAjM,CAAAA,KAAA2L,CAAAA,IAAA7rB,CAAAA,KAAA,CAAA,CAAA,CAAAhB,CAAA0zD,CAAAA,UAAAtnD,CAAAA,CAAA,CAAAvL,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAAb,CAAAiC,CAAAA,SAAA4zD,CAAAA,iCAAA,CAAAC,QAAA,CAAA\/1D,CAAA,CAAA,CAAA,IAAAC,EAAA,IAAA,OAAA6tB,GAAA,CAAA,QAAA,CAAAltB,CAAA,CAAA,CAAA,IAAAC,GAAAZ,CAAAkhB,CAAAA,KAAA,CAAArgB,GAAAD,EAAAmvB,CAAAA,eAAA,CAAAhvB,GAAAH,EAAAywB,CAAAA,eAAA,CAAA3wB,GAAAE,EAAAowB,CAAAA,YAAA,CAAAxwB,GAAAI,EAAAwvB,CAAAA,WAAA,CAAA7vB,GAAAK,EAAAuvB,CAAAA,aAAA,CAAArrB,GAAAlE,EAAAiwB,CAAAA,UAAA7rB,GAAAA,CAAApE,EAAAkwB,CAAAA,UAAA,IAAA9wB,CAAAwhB,CAAAA,QAAA,CAAA,CAAAqP,WAAA,CAAA,CAAA,CAAAC,WAAA,CAAA,CAAA,CAAAO,gBAAA,IAAA;AAAAI,iBAAA,IAAA,CAAA3B,aAAA,IAAA,CAAAE,eAAAtvB,EAAA,EAAAgmB,EAAA,CAAA1mB,CAAAkhB,CAAAA,KAAA8O,CAAAA,cAAA,CAAA,CAAAhwB,CAAAkhB,CAAAA,KAAA8O,CAAAA,cAAA,CAAA,IAAA,CAAA,CAAA,CAAAhwB,CAAA60D,CAAAA,WAAA,CAAAl0D,CAAAmsB,CAAAA,OAAA,CAAAnsB,CAAAusB,CAAAA,OAAA,CAAA,IAAA,CAAA,CAAAltB,CAAAkhB,CAAAA,KAAAgP,CAAAA,oBAAA,CAAA,CAAA,IAAAjrB,GAAAw4B,EAAAc,CAAAA,eAAA,CAAA59B,CAAA,CAAAX,CAAAkhB,CAAAA,KAAAgP,CAAAA,oBAAA,CAAAlwB,CAAAkhB,CAAAA,KAAA,CAAAjc,GAAA,GAAAjF,CAAAkhB,CAAAA,KAAAgP,CAAAA,oBAAA,EAAAlwB,CAAAwhB,CAAAA,QAAA,CAAA,CAAA0O,qBAAAjrB,EAAA,CAAA8sB,kBAAA,EAAA,CAAA,CAAA,CAAA,GAAAu6B,EAAA,CAAA,IAAA,CAAAjlD,MAAAsjC,CAAAA,mBAAA,CAAA9lC,EAAA+G,CAAAA,EAAA8D,CAAAA,YAAA,CAAA3P,CAAAw0D,CAAAA,cAAAC,CAAAA,MAAA,CAAA,CAAAntD,MAAAsjC,CAAAA,mBAAA,CAAA9lC,EAAA+G,CAAAA,EAAA+D,CAAAA,UAAA,CAAA5P,CAAAw0D,CAAAA,cAAAE,CAAAA,IAAA,CAAA,CAAAptD,MAAAsjC,CAAAA,mBAAA,CAAA9lC,EAAA+G,CAAAA,EAAAkD,CAAAA,OAAA;AAAA\/O,CAAAw0D,CAAAA,cAAAv7C,CAAAA,SAAA,CAAA,CAAA3R,MAAAsjC,CAAAA,mBAAA,CAAA9lC,EAAA+G,CAAAA,EAAAmD,CAAAA,KAAA,CAAAhP,CAAAw0D,CAAAA,cAAA5E,CAAAA,OAAA,CAAA,CAAA,MAAA,IAAA,IAAA,EAAA9uD,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAgS,CAAAA,IAAA,CAAA,CAAA,GAAA8T,EAAA,CAAA9lB,EAAA,CAAA,CAAA,CAAA,CAAAA,EAAAsnB,CAAAA,MAAAnmB,CAAAA,MAAA,EAAA2pD,EAAA5sB,CAAAA,eAAA,EAAA,CAAAv4B,CAAA,CAAAomB,EAAA,CAAAjsB,CAAA,CAAAX,CAAAkhB,CAAAA,KAAA,CAAA,CAAAnhB,CAAAs0D,CAAAA,IAAAC,CAAAA,WAAA,EAAA,CAAAzzD,EAAA,EAAAH,EAAA,CAAAX,CAAAs0D,CAAAA,IAAAC,CAAAA,WAAA,EAAA,CAAA5zD,EAAA,GAAAV,CAAAkhB,CAAAA,KAAAyP,CAAAA,gBAAA,EAAA9J,EAAA,CAAAhmB,EAAA,CAAA,EAAA2\/B,EAAA,CAAA3\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\/B,CAAAA,QAAA;AAAAiH,QAAA,EAAA,CAAA\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\/B,YAAA,CAAA8\/B,EAAA,CAAA,CAAA,KAAAA,EAAA,CAAAxkD,MAAAmS,CAAAA,UAAA,CAAA+yC,EAAAsE,CAAAA,aAAA,CAAAhsD,EAAAqI,CAAAA,EAAA,CAAA,CAAA,IAAA0+C,EAAA;AAAA,CAAA,GAAA5rD,CAAAu4D,CAAAA,OAAAv2D,CAAAA,MAAA,CAAA,CAAA,IAAArB,EAAAX,CAAAu4D,CAAAA,OAAA,CAAA,CAAA,CAAAx4D,EAAAwuD,CAAAA,uBAAA,CAAA,CAAAzhC,QAAAnsB,CAAAmsB,CAAAA,OAAA,CAAAI,QAAAvsB,CAAAusB,CAAAA,OAAA,CAAA,CAAA0+B,GAAA,CAAA,CAAA,CAAA7\/B,aAAA,CAAA8\/B,EAAA,CAAA,CAAA7rD,CAAAia,CAAAA,cAAA,EAAA,EAAA,GAAAja,CAAAu4D,CAAAA,OAAAv2D,CAAAA,MAAA,EAAAjC,CAAAyhB,CAAAA,QAAA,CAAA,CAAA+P,mBAAA,EAAA,CAAA,CAAA,CAAA,KAAAinC,CAAAA,QAAA,CAAAC,QAAA,CAAAz4D,CAAA,CAAA,CAAAA,CAAAia,CAAAA,cAAA,EAAA,EAAA,CAAAja,CAAAu4D,CAAAA,OAAAv2D,CAAAA,MAAA,EAAAjC,CAAAyhB,CAAAA,QAAA,CAAA,CAAA4P,2BAAA,EAAA,CAAAG,mBAAAxxB,CAAAmhB,CAAAA,KAAAkQ,CAAAA,0BAAA,CAAA,CAAA,CAAA,KAAAo+B,CAAAA,kBAAA,CAAA3hC,EAAA,CAAA,QAAA,EAAA,CAAA,IAAA7tB,EAAAiF,EAAA,EAAA,CAAA,QAAA,CAAAjF,CAAA,CAAA,CAAA,IAAAW,CAAA,CAAAC,CAAA,CAAAC,EAAA,OAAA4qD,GAAA,CAAA,IAAA,CAAA,QAAA,CAAA1qD,EAAA,CAAA,CAAA,OAAAA,EAAAwX,CAAAA,KAAA,EAAA,KAAA,CAAA,CAAA,MAAA5X,EAAA;AAAA8E,QAAAgU,CAAAA,aAAA,CAAA7Y,CAAA,CAAA6E,QAAAizD,CAAAA,gBAAA,CAAA5M,EAAA,CAAAC,EAAA,CAAA,CAAA,CAAA\/rD,CAAA,EAAAY,CAAA,WAAAq3C,kBAAA,EAAA,CAAAztB,EAAA,CAAA7pB,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAi4C,EAAA,CAAA54C,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,MAAAqwB,CAAAxvB,EAAAwvB,CAAAtvB,EAAAqf,CAAAA,IAAA,EAAAiQ,EAAAA,YAAA,CAAAtwB,CAAAyhB,CAAAA,QAAA,CAAA,CAAA6O,aAAAxvB,EAAAwvB,CAAAA,YAAA,CAAA,CAAA,CAAAxvB,EAAA6yC,CAAAA,WAAA,CAAA3zC,CAAAyhB,CAAAA,QAAA,CAAA,CAAA0P,YAAA,CAAA7d,KAAAxS,EAAA6yC,CAAAA,WAAA,CAAAviB,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAtwB,EAAAk0B,CAAAA,QAAA,CAAAh1B,CAAA8uD,CAAAA,6BAAA,CAAAhuD,EAAAk0B,CAAAA,QAAA,CAAA,CAAAl0B,EAAAiS,CAAAA,IAAA,EAAA\/S,CAAAgxD,CAAAA,gBAAA,CAAAlwD,EAAAiS,CAAAA,IAAA,CAAA,CAAA\/S,CAAAkxD,CAAAA,eAAA,CAAA,WAAA,CAAA,CAAA,IAAA,EAAAjxD,CAAA,EAAAA,CAAAia,CAAAA,cAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA,SAAA,CAAAla,CAAA,CAAA,CAAA,MAAAC,EAAAuB,CAAAA,KAAA,CAAA,IAAA,CAAAD,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,KAAAutD,CAAAA,6BAAA;AAAA8J,QAAA,CAAA34D,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,EAAA,GAAAD,CAAA,GAAAA,CAAA,CAAAmrD,EAAA,CAAA,KAAA,EAAA,GAAAlrD,CAAA,GAAAA,CAAA,CAAAmrD,EAAA,CAAA,KAAAlrD,EAAA2nB,EAAA,CAAAxoB,CAAA,CAAA,CAAAe,GAAAF,CAAA,CAAA,CAAA,CAAA,CAAAH,GAAAG,CAAA,CAAA,CAAA,CAAA,CAAAgE,GAAAkJ,IAAA0E,CAAAA,GAAA,CAAA1R,EAAA,CAAAF,CAAAL,CAAA,CAAAA,CAAA,CAAAqE,CAAA,CAAAC,EAAAA,CAAAiJ,IAAA0E,CAAAA,GAAA,CAAA\/R,EAAA,CAAAG,CAAAN,CAAA,CAAAA,CAAA,CAAAuE,CAAA,CAAAE,EAAAA,CAAA4nB,EAAA,CAAA,CAAAE,QAAAnsB,CAAA,CAAAusB,QAAAtsB,CAAA,CAAA,CAAAb,CAAAmhB,CAAAA,KAAA,CAAAjc,GAAAA,CAAAD,CAAAwH,CAAAA,CAAAvH,CAAAJ,EAAA2B,EAAAA,CAAAxB,CAAAoH,CAAAA,CAAA5F,CAAA1B,CAAA,KAAAmC,GAAA,IAAAmnB,GAAApnB,GAAAA,CAAAuE,EAAA,CAAAtG,EAAA,CAAAuB,CAAA,CAAAzG,CAAAmhB,CAAAA,KAAAwP,CAAAA,QAAA,CAAA,KAAAlrB,GAAAwB,EAAA,CAAA,CAAA,CAAA,CAAAgF,GAAAhF,EAAA,CAAA,CAAA,CAAA,CAAAkF,GAAA,IAAAkiB,GAAAhiB,GAAAA,CAAApM,CAAAsI,CAAAA,GAAA,CAAA,QAAA,CAAAtI,EAAA,CAAA,CAAA,IAAAW,GAAA44B,EAAA,CAAAx5B,CAAAmhB,CAAAA,KAAA+O,CAAAA,cAAA,CAAAhpB,EAAA,CAAAjH,EAAA,CAAA,CAAAwM,EAAAxM,EAAAwM,CAAAA,CAAAA,CAAAhH,EAAAgH,CAAAzL,EAAA,CAAAqL,EAAApM,EAAAoM,CAAAA,CAAAA,CAAAJ,EAAAI,CAAA1L,EAAA,CAAA,CAAA,OAAAwL,GAAA4nB,CAAAA,GAAA,CAAA9zB,EAAAS,CAAAA,EAAA,CAAAE,EAAAF,CAAAA,EAAA,CAAA,CAAAE,EAAA,CAAA,CAAA2L,EAAAA,CAAAo\/C,EAAA,CAAAA,EAAA,CAAA,EAAA,CAAA3rD,CAAAirD,CAAAA,KAAAz1B,CAAAA,2BAAA,EAAA,CAAA,CAAAnpB,EAAA,CAAAi1B,GAAA,CAAA\/0B,CAAA,CAAAtM,CAAA,CAAAkM,EAAA,CAAAnM,EAAAirD,CAAAA,KAAA90B,CAAAA,kBAAA,CAAA5pB,CAAA,CAAAq\/C,GAAA5sB,CAAAA,eAAA,EAAAh\/B,EAAAyhB,CAAAA,QAAA,CAAAgX,EAAA,CAAA5Z,EAAA,CAAAA,EAAA,CAAA,EAAA;AAAA7e,CAAAmhB,CAAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA0P,cAAA,CAAA,CAAA,CAAAW,mBAAAnlB,EAAA0b,CAAAA,MAAA,CAAA,QAAA,CAAA\/nB,EAAA,CAAAC,EAAA,CAAA,CAAA,MAAAD,GAAA,CAAAC,EAAAS,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAV,EAAA,CAAA,CAAA,EAAA,CAAA,CAAAyxB,iBAAA,EAAA,CAAA,CAAA,CAAAzxB,CAAAirD,CAAAA,KAAAv1B,CAAAA,WAAA,EAAA,CAAA,CAAA,CAAA,KAAAyuB,CAAAA,WAAA,CAAA0U,QAAA,CAAA54D,CAAA,CAAA,CAAAD,CAAAyhB,CAAAA,QAAA,CAAAxhB,CAAA,CAAA,CAAA,KAAAguD,CAAAA,aAAA,CAAA6K,QAAA,CAAA94D,CAAA,CAAA,CAAA,OAAA,GAAAA,CAAA+4D,CAAAA,WAAA,EAAA1M,EAAA,GAAArgC,YAAA,CAAAqgC,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAA,CAAAC,EAAA,CAAA,CAAA,CAAA,CAAA4G,GAAAz\/B,CAAAA,MAAA,CAAAzzB,CAAAmzD,CAAAA,SAAA,CAAA,CAAA,KAAAtE,CAAAA,UAAA,CAAAmK,QAAA,EAAA,CAAAh5D,CAAAyhB,CAAAA,QAAA,CAAA,QAAA,CAAAzhB,CAAA,CAAA,CAAA,MAAA,CAAAowB,cAAA,CAAApwB,CAAAowB,CAAAA,aAAA,CAAAC,YAAArwB,CAAAowB,CAAAA,aAAA,CAAA,WAAA,CAAApwB,CAAAqwB,CAAAA,WAAA,CAAA,CAAA,CAAA,CAAA,KAAAk6B,CAAAA,aAAA,CAAA0O,QAAA,EAAA,CAAAj5D,CAAAmjD,CAAAA,aAAAtE,CAAAA,aAAA,CAAAjB,EAAA,CAAA,CAAA;IAAAmR,CAAAA,WAAA,CAAAmK,QAAA,EAAA,CAAAl5D,CAAAmhB,CAAAA,KAAA2Q,CAAAA,SAAA,EAAA4b,EAAA,CAAA,QAAA,CAAA,OAAA,CAAA1tC,EAAAmjD,CAAAA,aAAAtE,CAAAA,aAAA,CAAAf,EAAA,CAAA,CAAA,KAAAuP,CAAAA,iBAAA,CAAA8L,QAAA,CAAAl5D,CAAA,CAAA,CAAAD,CAAAyhB,CAAAA,QAAA,CAAA5C,EAAA,CAAA,EAAA,CAAAqkB,EAAA,CAAA5M,EAAA,CAAAr2B,CAAA,CAAA,CAAAD,CAAAmhB,CAAAA,KAAA,CAAAnhB,CAAAglB,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAAsmC,CAAAA,UAAA,CAAA8N,QAAA,EAAA,CAAAp5D,CAAAyhB,CAAAA,QAAA,CAAA,CAAAwQ,aAAA,IAAA,CAAA,CAAA,CAAA,KAAA+6B,CAAAA,WAAA,CAAAl\/B,EAAA,CAAA,QAAA,CAAA7tB,CAAA,CAAA,CAAA,IAAAW,CAAAX,EAAAwoC,CAAAA,eAAA,EAAAmjB,EAAA5sB,CAAAA,eAAA,EAAA,KAAA,IAAAp+B,CAAA,CAAAX,CAAAuoC,CAAAA,QAAA,GAAA,IAAA,EAAA,GAAA5nC,CAAA,EAAAA,CAAAsxB,CAAAA,mBAAA,EAAAlyB,CAAAyhB,CAAAA,QAAA,CAAA,CAAAyQ,oBAAAjyB,CAAAuoC,CAAAA,QAAAtW,CAAAA,mBAAA,CAAA,CAAAjyB,EAAA+0B,CAAAA,QAAA,EAAAh1B,CAAAirD,CAAAA,KAAA90B,CAAAA,kBAAA,CAAAl2B,CAAA+0B,CAAAA,QAAA,CAAA\/0B,EAAA8uB,CAAAA,aAAA;AAAA\/uB,CAAAyhB,CAAAA,QAAA,CAAA,CAAAsN,cAAA9uB,CAAA8uB,CAAAA,aAAA,CAAA,CAAA,CAAA,CAAA,KAAAigC,CAAAA,cAAA,CAAAqK,QAAA,EAAA,CAAAr5D,CAAAyhB,CAAAA,QAAA,CAAA,EAAA,CAAA,CAAA,KAAAkuC,CAAAA,2BAAA,CAAA7hC,EAAA,CAAA,QAAA,CAAA9tB,CAAA,CAAA,CAAA+rD,EAAA,CAAA\/rD,CAAAyM,CAAAA,CAAAu\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\/sB,CAAA6L,CAAAA,CAAAkhB,CAAA\/sB,CAAAonB,CAAAA,MAAA2F,CAAA,CAAA,CAAA,CAAA,CAAA,IAAAttB,EAAAia,CAAAA,cAAA,EAAA,CAAA,IAAAja,EAAAsZ,CAAAA,OAAA,EAAAtZ,CAAAqZ,CAAAA,MAAA,EAAArZ,CAAAoZ,CAAAA,OAAA,EAAA,IAAA,GAAArZ,CAAAmhB,CAAAA,KAAA6O,CAAAA,eAAA,GAAA,CAAAjrB,CAAA,CAAA,QAAA,CAAA\/E,EAAA,CAAA,CAAA,IAAAC,GAAAghD,EAAA\/nC,CAAAA,IAAA,CAAA,QAAA,CAAAjZ,EAAA,CAAAW,EAAA,CAAA,CAAA,MAAAZ,GAAA,GAAA+H,CAAAnH,EAAAmH,CAAA,CAAAA,EAAAA,QAAA,EAAA,GAAA,QAAA,EAAA,MAAA9H,GAAAoT,CAAAA,GAAA,CAAApT,EAAAoT,CAAAA,GAAA,GAAArT,EAAA,CAAAC,EAAAoT,CAAAA,GAAA+kB,CAAAA,QAAA,CAAAp4B,EAAA,CAAA,CAAA,CAAA,CAAA,QAAA,IAAA,EAAAC,EAAA,CAAA,IAAA,EAAA,CAAAA,EAAAgB,CAAAA,KAAA,GAAA,IAAA,CAAA,CAAAhB,CAAAoT,CAAAA,GAAA,CAAA,EAAArT,CAAAkxD,CAAAA,eAAA,CAAAnsD,CAAA,CAAA,CAAA20D,GAAA,GAAAz5D,CAAAoT,CAAAA,GAAA,EAAArT,CAAA6uD,CAAAA,UAAA,EAAA,CAAA8K,IAAA;AAAA15D,CAAAoT,CAAAA,GAAA,EAAA,CAAA,GAAA6\/C,EAAArxB,CAAAA,IAAA,GAAAoqB,EAAA,CAAA,CAAA,CAAA,CAAA1\/B,EAAA,CAAAvsB,CAAAglB,CAAAA,MAAA,CAAAlgB,EAAA6G,CAAAA,EAAAyC,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,KAAAwhD,CAAAA,OAAA,CAAA9hC,EAAA,CAAA,QAAA,CAAA7tB,CAAA,CAAA,CAAA,GAAA05D,GAAA,GAAA15D,CAAAoT,CAAAA,GAAA,GAAA,WAAA,GAAArT,CAAAmhB,CAAAA,KAAAkP,CAAAA,WAAA,CAAAhE,EAAA,CAAArsB,CAAAglB,CAAAA,MAAA,CAAA,EAAAwH,EAAA,CAAAxsB,CAAAglB,CAAAA,MAAA,CAAAhlB,CAAAmhB,CAAAA,KAAAkP,CAAAA,WAAA,CAAA,CAAArwB,CAAAyhB,CAAAA,QAAA,CAAA,CAAA+P,mBAAA,EAAA,CAAAC,iBAAA,EAAA,CAAAvB,eAAA,IAAA,CAAA,CAAA,CAAA,CAAA+7B,EAAA,CAAA,CAAA,CAAA,EAAAhsD,CAAA,CAAAqqB,EAAA,CAAA,EAAAtqB,CAAAmhB,CAAAA,KAAAyP,CAAAA,gBAAA,EAAA5wB,CAAAyhB,CAAAA,QAAA,CAAA,CAAAmP,iBAAA,CAAA,CAAA,CAAA,CAAA,CAAAjX,EAAA,CAAA1Z,CAAAoT,CAAAA,GAAA,CAAA,CAAAzS,CAAA,CAAA83B,EAAA,CAAA14B,CAAAirD,CAAAA,KAAAv1B,CAAAA,WAAA,EAAA,CAAA11B,CAAAmhB,CAAAA,KAAA,CAAA,CAAAnhB,CAAAmhB,CAAAA,KAAAyP,CAAAA,gBAAA,CAAAyP,EAAA,CAAAz\/B,CAAA,CAAA,CAAA+\/B,EAAA,CAAA\/\/B,CAAA,CAAA,CAAAZ,CAAAyhB,CAAAA,QAAA,CAAA,CAAAuQ,kBAAA,EAAA,CAAA,CAAA,CAAA,CAAA,KAAAg+B,CAAAA,cAAA,CAAAliC,EAAA,CAAA,QAAA,CAAA7tB,CAAA,CAAA,CAAAA,CAAAia,CAAAA,cAAA,EAAAla;CAAAyhB,CAAAA,QAAA,CAAA,CAAA+P,mBAAA,EAAA,CAAA,CAAA6hC,GAAA,CAAArzD,CAAAmhB,CAAAA,KAAA2L,CAAAA,IAAA7rB,CAAAA,KAAA,CAAA,CAAA,KAAAgvD,CAAAA,eAAA,CAAAniC,EAAA,CAAA,QAAA,CAAA7tB,CAAA,CAAA,CAAA,GAAAA,CAAAia,CAAAA,cAAA,EAAA,CAAA,CAAA,GAAAg5C,EAAArxB,CAAAA,IAAA,CAAA,CAAA,IAAAjhC,EAAAyyD,EAAAzyD,EAAA,EAAAZ,CAAAyhB,CAAAA,QAAA,CAAA,QAAA,CAAAzhB,CAAA,CAAA,CAAA,IAAAa,EAAAb,CAAA8sB,CAAAA,IAAA,CAAAhsB,GAAAd,CAAAitB,CAAAA,UAAAjsB,EAAAA,CAAAhB,CAAA6rB,CAAAA,SAAA,OAAA,CAAAiB,KAAAwW,EAAA,CAAAE,EAAA,CAAA5iC,CAAA,CAAAX,CAAAq0B,CAAAA,KAAA,CAAA,CAAAzzB,CAAA,CAAA,CAAA6a,KAAA5a,EAAA,CAAAyiC,IAAAviC,CAAA,CAAA,CAAA,CAAAyL,EAAAs\/C,EAAA,CAAA1\/C,EAAA2\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\/mB,EAAAgnB,CAAAA,MAAA,CAAA,KAAA3b,GAAA\/E,EAAA,CAAA,CAAA,CAAA+E,CAAA\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\/C,IAAA0E,CAAAA,GAAA,CAAA\/E,EAAA,CAAA,CAAAoD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA9Q,EAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAAm4B,CAAAA,QAAA,CAAAv3B,CAAA,CAAA,GAAAkN,EAAA,CAAA,CAAA,CAAA,CAAA7I,EAAA,CAAA,CAAA,CAAA,CAAAyI,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAAyqB,CAAAA,QAAA,CAAAv3B,CAAA,CAAA,GAAAkN,EAAA,CAAA,CAAA,CAAA,CAAA7I,EAAA,CAAA,CAAA,CAAA,CAAA2I,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAAhB,EAAA,GAAAhM,CAAAu3B,CAAAA,QAAA,CAAA,GAAA,CAAA,GAAArqB,EAAA,CAAA,CAAA,CAAA,EAAAC,IAAA0E,CAAAA,GAAA,CAAA\/E,EAAA,CAAA,EAAA9M,CAAAu3B,CAAAA,QAAA,CAAA,GAAA,CAAA,GAAArqB,EAAA,CAAA,CAAA,CAAA,EAAAC,IAAA0E,CAAAA,GAAA,CAAA\/E,EAAA,CAAA,CAAA,CAAA,EAAA;AAAAb,EAAA,GAAAjM,CAAAu3B,CAAAA,QAAA,CAAA,GAAA,CAAA,GAAArqB,EAAA,CAAA,CAAA,CAAA,EAAAC,IAAA0E,CAAAA,GAAA,CAAA7E,EAAA,CAAA,EAAAhN,CAAAu3B,CAAAA,QAAA,CAAA,GAAA,CAAA,GAAArqB,EAAA,CAAA,CAAA,CAAA,EAAAC,IAAA0E,CAAAA,GAAA,CAAA7E,EAAA,CAAA,CAAA,CAAA\/M,GAAA,GAAAiN,EAAA,CAAA,CAAA,CAAA,CAAA7I,EAAA,CAAA,CAAA,CAAA,CAAA8I,IAAA0E,CAAAA,GAAA,CAAA\/E,EAAA,CAAA,CAAA,CAAA,CAAAI,EAAA,CAAA,CAAA,CAAA,CAAA7I,EAAA,CAAA,CAAA,CAAA,CAAA8I,IAAA0E,CAAAA,GAAA,CAAA7E,EAAA,CAAA,CAAA,CAAA,CAAAoD,EAAAA,CAAAjR,EAAAwoB,CAAAA,KAAAtX,GAAAA,CAAA+V,EAAA,CAAAlZ,EAAA,CAAA7I,EAAA,CAAA+L,CAAA,CAAAK,EAAAA,CAAA2V,EAAA,CAAA5V,CAAAtD,EAAA,CAAA,CAAA,CAAAsD,CAAArD,IAAA0E,CAAAA,GAAA,CAAA\/E,EAAA,CAAA0D,CAAA,CAAAA,CAAAtD,EAAA,CAAA,CAAA,CAAAsD,CAAArD,IAAA0E,CAAAA,GAAA,CAAA7E,EAAA,CAAAwD,CAAA,CAAAA,CAAA,CAAAnM,EAAA,CAAA+L,CAAA,CAAAlD,GAAA,CAAAkZ,EAAA,CAAA\/V,EAAA,CAAAI,CAAA,CAAA,CAAAL,CAAA,CAAAQ,EAAAA,CAAAkwB,EAAA,CAAA3hC,EAAA,CAAA6M,EAAA,CAAAC,EAAA,CAAA4E,GAAAA,CAAA+vB,EAAA,CAAA,EAAA,CAAA1zB,EAAA,CAAA2D,GAAA,CAAA,CAAA,CAAA,EAAA1R,EAAAyM,CAAAA,CAAA,CAAAQ,EAAAyE,GAAA,CAAA,CAAA,CAAA,EAAA1R,EAAAqM,CAAAA,CAAA,CAAAoB,EAAAkE,EAAAA,CAAAmG,EAAA,CAAA,CAAA6P,MAAA3Z,IAAA0E,CAAAA,GAAA,CAAA7F,EAAA,CAAA,CAAA+a,OAAA5Z,IAAA0E,CAAAA,GAAA,CAAA5F,EAAA,CAAA,CAAAL,EAAAiF,EAAA,CAAA,CAAA,CAAA,CAAArF,EAAAqF,EAAA,CAAA,CAAA,CAAA,CAAA,CAAAD,CAAA,CAAA,EAAA,GAAAE,CAAAgW,CAAAA,KAAA,EAAA,CAAA,GAAAhW,CAAAiW,CAAAA,MAAA,EAAAhW,MAAA2\/C,CAAAA,QAAA,CAAA5\/C,CAAAlF,CAAAA,CAAA,CAAA,EAAAmF,MAAA2\/C,CAAAA,QAAA,CAAA5\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\/qB,EAAA\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\/kC,WAAA,CAAA,IAAA,EAAA,GAAA\/E,CAAAuhB,CAAAA,KAAAorC,CAAAA,eAAA,EAAAjP,EAAA,CAAA,IAAA,EAAA,GAAA19C,CAAAuhB,CAAAA,KAAA6Q,CAAAA,cAAA,EAAAwrB,EAAA,CAAA,IAAA,EAAA,GAAA59C,CAAAuhB,CAAAA,KAAA8Q,CAAAA,eAAA,EAAAk5B,EAAA,CAAAzN,EAAA,CAAA,CAAAva,IAAAziC,CAAA,CAAA4a,KAAA7a,CAAA,CAAAsiD,cAAAnjD,CAAAmjD,CAAAA,aAAA,CAAA3a,SAAAxoC,CAAAmhB,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAAu6C,CAAAA,WAAA,CAAA5tC,EAAA,CAAA,QAAA,CAAA7tB,CAAA,CAAA,CAAA,GAAAA,CAAAia,CAAAA,cAAA,EAAA,CAAA,CAAAgyC,EAAA,CAAA,CAAA,IAAAtrD,EAAAX,CAAAi8D,CAAAA,MAAA,CAAAr7D,EAAAZ,CAAAgsC,CAAAA,MAAA,CAAAnrC,EAAAd,CAAAmhB,CAAAA,KAAA,CAAAngB,GAAAF,CAAA0wB,CAAAA,kBAAA,CAAA7wB,GAAAG,CAAAuwB,CAAAA,0BAAA,IAAApxB,CAAAoZ,CAAAA,OAAA,EAAApZ,CAAAsZ,CAAAA,OAAA,CAAA,CAAA9Y,CAAAA,CAAAuN,IAAA6pB,CAAAA,IAAA,CAAAh3B,CAAA,CAAAL,EAAAA,CAAAwN,IAAA0E,CAAAA,GAAA,CAAA7R,CAAA,CAAA,GAAA,CAAAL,CAAA,GAAAA,CAAA,CAAA,EAAA,CAAAA,EAAA,EAAAC,CAAA,EAAA,GAAAiB,MAAAgB,CAAAA,IAAA,CAAA\/B,EAAA,CAAAsB,CAAAA,MAAA,EAAAwX,UAAA,CAAA,QAAA,EAAA,CAAAzZ,CAAAyhB,CAAAA,QAAA,CAAA,CAAA+P,mBAAA7wB,EAAA;AAAA0wB,2BAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,KAAAtsB,GAAA\/E,CAAAmhB,CAAAA,KAAA2L,CAAAA,IAAA7rB,CAAAA,KAAA8D,CAAAvE,CAAAuE,CAAA,GAAA,OAAAA,GAAA,EAAAiJ,IAAAmuD,CAAAA,KAAA,CAAAnuD,IAAAmD,CAAAA,GAAA,CAAA,CAAA,CAAAnR,CAAAmhB,CAAAA,KAAA2L,CAAAA,IAAA7rB,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAAR,CAAA,CAAAsE,EAAA,CAAAiJ,IAAAkE,CAAAA,KAAA,CAAAnN,EAAA,CAAAD,EAAA4I,CAAAA,EAAA,CAAA,GAAA,CAAA,EAAA,GAAA,CAAA5I,EAAA4I,CAAAA,EAAA,EAAA1N,CAAAyhB,CAAAA,QAAA,CAAA,QAAA,CAAAzhB,EAAA,CAAA,CAAA,IAAAC,GAAAD,EAAA8sB,CAAAA,IAAA,CAAAlsB,GAAAZ,EAAAitB,CAAAA,UAAApsB,GAAAA,CAAAb,EAAA6rB,CAAAA,SAAA,OAAA,CAAAiB,KAAAwW,EAAA,CAAAE,EAAA,CAAAz+B,EAAA,CAAA,CAAA9E,EAAA,CAAA,CAAAyb,KAAA9a,EAAA,CAAA2iC,IAAA1iC,EAAA,CAAA,CAAA,CAAA4L,EAAAs\/C,EAAA,CAAA1\/C,EAAA2\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\/mB,EAAAZ,CAAA4nB,CAAAA,MAAA,CAAA\/mB,EAAAb,CAAAitB,CAAAA,UAAA,CAAAnsB,EAAAd,CAAA6rB,CAAAA,SAAA,CAAA7qB,GAAAhB,CAAAyY,CAAAA,QAAA,CAAA9X,GAAAX,CAAA63D,CAAAA,WAAA,CAAA\/yD,GAAA9E,CAAA0sD,CAAAA,aAAA,CAAA3nD,GAAA\/E,CAAAgoD,CAAAA,mBAAA,CAAA\/iD,GAAAjF,CAAAwkD,CAAAA,eAAA;AAAAt\/C,GAAAlF,CAAAs8D,CAAAA,eAAA,CAAA71D,GAAAzG,CAAA8lD,CAAAA,iBAAA,CAAA5+C,GAAAlH,CAAA2uD,CAAAA,YAAA,CAAA1nD,GAAAjH,CAAAwhB,CAAAA,QAAAvV,GAAAA,CAAA,IAAA,EAAA,GAAAhF,EAAA,CAAAxB,EAAA4C,CAAAA,IAAA,CAAApB,EAAA,KAAAkF,GAAAnM,CAAAqyB,CAAAA,eAAA,CAAAhmB,GAAArM,CAAAoyB,CAAAA,cAAA7lB,EAAAA,CAAAvM,CAAA2sD,CAAAA,eAAA,OAAA,CAAA,CAAA,CAAAlsD,EAAAmY,CAAAA,SAAA,EAAA,QAAA,EAAA,CAAA,IAAA5Y,GAAAA,QAAA,CAAAA,EAAA,CAAA,CAAA,QAAA,EAAA,MAAAA,GAAAs0B,CAAAA,KAAA,EAAA,CAAA,GAAAt0B,EAAAs0B,CAAAA,KAAA,EAAAt0B,EAAAka,CAAAA,cAAA,EAAA,CAAA,OAAAxU,SAAAilC,CAAAA,gBAAA,CAAA,WAAA,CAAA3qC,EAAA,CAAA,CAAAowD,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,EAAA,CAAA1qD,QAAAklC,CAAAA,mBAAA,CAAA,WAAA,CAAA5qC,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAAQ,EAAA,EAAAmF,CAAAA,aAAA,CAAAsH,EAAA,CAAA,CAAAuU,SAAAvV,EAAA,CAAA,CAAAzL,EAAA,EAAAmF,CAAAA,aAAA,CAAA+mC,EAAA,CAAA,IAAA,CAAAlsC,EAAA,EAAAmF,CAAAA,aAAA,CAAA6mD,EAAA,CAAA,CAAA7kC,MAAA1nB,CAAA;AAAA2nB,OAAAhnB,CAAA,CAAAqsB,WAAApsB,CAAA,CAAAgrB,UAAA\/qB,CAAA,CAAA2X,SAAAzX,EAAA,CAAA62D,YAAAl3D,EAAA,CAAA+rD,cAAA5nD,EAAA,CAAAkjD,oBAAAjjD,EAAA,CAAAy\/C,gBAAAv\/C,EAAA,CAAAq3D,gBAAAp3D,EAAA,CAAA4gD,kBAAAr\/C,EAAA,CAAAkoD,aAAAznD,EAAA,CAAAsa,SAAAvV,EAAA,CAAAomB,gBAAAlmB,EAAA,CAAAimB,eAAA\/lB,EAAA,CAAAsgD,gBAAApgD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAiwD,GAAAr4B,CAAAA,YAAA,CAAA,CAAAs4B,QAAAh3D,EAAA4C,CAAAA,IAAA,CAAA,KAAAq0D,GAAA,CAAA,CAAA,CAAAj8D,EAAAijC,CAAAA,UAAA,EAAA,QAAA,CAAA1jC,CAAA,CAAAC,CAAA,CAAA,CAAA,MAAAO,GAAA,EAAAmF,CAAAA,aAAA,CAAA62D,EAAA,CAAA17D,EAAA,EAAA,CAAA,EAAA,CAAAd,CAAA,CAAA,CAAA0sD,cAAAzsD,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,OAAA08D,GAAAn8D,EAAA,EAAAolC,CAAAA,IAAA,CAAA82B,EAAA,CAAAE,QAAA,CAAA58D,CAAA,CAAAC,CAAA,CAAA,CAAAD,CAAA63D,CAAAA,WAAA,KAAAj3D,EAAAD,EAAA,EAAA,CAAAX,CAAA,CAAA,CAAA,aAAA,CAAA,CAAA,CAAAa,GAAAZ,CAAA43D,CAAAA,WAAA,CAAAl3D,EAAA,EAAA,CAAAV,CAAA,CAAA,CAAA,aAAA,CAAA,CAAAY,CAAAC;CAAAA,CAAAY,MAAAgB,CAAAA,IAAA,CAAA1C,CAAA,CAAAgB,EAAAA,CAAAU,MAAAgB,CAAAA,IAAA,CAAAzC,CAAA,CAAA,OAAAa,EAAAmB,CAAAA,MAAA,GAAAjB,CAAAiB,CAAAA,MAAA,EAAAnB,CAAAorC,CAAAA,KAAA,CAAA,QAAA,CAAAlsC,CAAA,CAAA,CAAA,MAAAY,EAAA,CAAAZ,CAAA,CAAA,GAAAa,CAAA,CAAAb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAY,EAAA,CAAA,IAAA,CAAA,OAAAke,GAAA69C,EAAA,CAAzpH,CAAypH,KAAA18D,CAAA48D,EAAA,CAAA58D,CAAAH,CAAAA,OAAA,CAAAE,CAAA,CAAzpH,CAAypH,KAAAA,CAAA88D,EAAA,CAAA98D,CAAAF,CAAAA,OAAA,CAAAG,CAAA,CAAzpH,CAAf,CAAwqHQ,EAAA,EAAA,OAAAD,EAAAyG,CAAAA,CAAA,CAAAtG,CAAA,CAAAH,CAAAI,CAAAA,CAAA,CAAAZ,CAAA+8D,EAAA,CAAA,IAAA98D,EAAAD,CAAA,EAAAA,CAAA4C,CAAAA,UAAA,CAAA,EAAA,EAAA5C,CAAA6C,CAAAA,OAAA,CAAA,EAAA,EAAA7C,CAAA,OAAAQ,EAAAyE,CAAAA,CAAA,CAAAhF,CAAA,CAAA,CAAAa,EAAAb,CAAA,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAAY,CAAA,CAAAa,MAAA63B,CAAAA,cAAA,CAAAv5B,CAAA,EAAA0B,MAAA63B,CAAAA,cAAA,CAAAv5B,CAAA,CAAA,CAAAA,CAAA,EAAAA,CAAA+gB,CAAAA,SAAA,CAAAvgB,CAAAP,CAAAA,CAAA,CAAA+8D,QAAA,CAAAh9D,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,CAAA,CAAAA,CAAA,GAAAD,CAAA,CAAA,IAAA,CAAAA,CAAA,CAAA,EAAA,CAAA,CAAAC,CAAA,GAAA,QAAA,EAAA,MAAAD,EAAA,EAAAA,CAAA,GAAA,CAAA,CAAAC,CAAA,EAAAD,CAAA4C,CAAAA,UAAA,EAAA,EAAA,CAAA3C,CAAA,EAAA,UAAA,EAAA,MAAAD,EAAAqB,CAAAA,IAAA,EAAA,MAAArB,EAAA,KAAAc,EAAAY,MAAAwf,CAAAA,MAAA,CAAA,IAAA,CAAA1gB,EAAAK,CAAAA,CAAA,CAAAC,CAAA,CAAA,KAAAE,EAAA,EAAAJ;CAAA,CAAAA,CAAA,EAAA,CAAA,IAAA,CAAAC,CAAA,CAAA,EAAA,CAAA,CAAAA,CAAA,CAAA,EAAA,CAAA,CAAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,KAAAF,CAAA,CAAA,CAAA,CAAAV,CAAA,EAAAD,CAAA,CAAA,QAAA,EAAA,MAAAW,EAAA,EAAA,CAAA,CAAAC,CAAA2B,CAAAA,OAAA,CAAA5B,CAAA,CAAA,CAAAA,CAAA,CAAAE,CAAA,CAAAF,CAAA,CAAA,CAAAe,MAAAu7D,CAAAA,mBAAA,CAAAt8D,CAAA,CAAAoF,CAAAA,OAAA,CAAA9F,CAAA,EAAAe,CAAA,CAAAf,CAAA,CAAA,CAAA,EAAA,EAAAD,CAAA,CAAAC,CAAA,CAAA,CAAA,OAAAe,EAAA6B,CAAAA,OAAA,CAAA,EAAAq6D,EAAAl9D,CAAA,CAAAQ,CAAAyE,CAAAA,CAAA,CAAAnE,CAAA,CAAAE,CAAA,CAAA,CAAAF,CAAA,CAAA,CAAAN,CAAAyE,CAAAA,CAAA,CAAA,CAAAjF,CAAA,CAAAC,CAAA,CAAAk9D,EAAA,CAAA,IAAAv8D,IAAAA,CAAA,GAAAX,EAAA,CAAAO,CAAAQ,CAAAA,CAAA,CAAAf,CAAA,CAAAW,CAAA,CAAA,EAAA,CAAAJ,CAAAQ,CAAAA,CAAA,CAAAhB,CAAA,CAAAY,CAAA,CAAA,EAAAc,MAAAC,CAAAA,cAAA,CAAA3B,CAAA,CAAAY,CAAA,CAAA,CAAAgB,WAAA,CAAA,CAAA,CAAA0mB,IAAAroB,CAAA,CAAAW,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAJ,CAAAiG,CAAAA,CAAA,CAAA,EAAA,CAAAjG,CAAAR,CAAAA,CAAA,CAAAA,CAAAo9D,EAAAj8D,OAAA0G,CAAAA,GAAA,CAAAnG,MAAAgB,CAAAA,IAAA,CAAAlC,CAAAiG,CAAAA,CAAA,CAAAshB,CAAAA,MAAA,CAAA,CAAA9nB,CAAA,CAAAW,CAAA,CAAA,GAAAJ,CAAAiG,CAAAA,CAAA,CAAA7F,CAAA,CAAA,CAAAZ,CAAA,CAAAC,CAAA,CAAA,CAAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAAO,CAAAuE,CAAAA,CAAA,CAAA\/E,CAAAq9D,EAAA,oBAAAA,CAAA,CAAA,EAAA,OAAA,CAAA,GAAA,iBAAA,CAAA,GAAA,iBAAA,CAAA,GAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,mBAAA;AAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA;AAAA,IAAA,QAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,IAAA,iBAAA,CAAA,CAAAr9D,CAAA,CAAAq9D,CAAA,GAAAA,CAAA,CAAA,EAAA,sBAAA,CAAA,GAAA,sBAAA,CAAA,GAAA,sBAAA,CAAA,GAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA;AAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA;AAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,IAAA,sBAAA,CAAA,CAAAr9D,CAAA,CAAAq9D,CAAA,KAAA,CAAA78D,CAAAQ,CAAAA,CAAA,CAAA,CAAAhB,CAAA,CAAAC,CAAA,CAAAq9D,EAAA57D,MAAAQ,CAAAA,SAAAC,CAAAA,cAAAC,CAAAA,IAAA,CAAApC,CAAA,CAAAC,CAAA,CAAA,CAAAa,CAAA,CAAA,EAAA,CAAAN,CAAAC,CAAAA,CAAA,CAAA,CAAAT,CAAA,CAAAC,CAAA,CAAAW,CAAA,CAAAC,CAAA,CAAA08D,EAAA,CAAA,GAAAz8D,CAAA,CAAAd,CAAA,CAAA,CAAAc,CAAA,CAAAd,CAAA,CAAAwF,CAAAA,IAAA,CAAAvF,CAAA,CAAA,KAAA,CAAA,IAAAQ,CAAA,IAAA,IAAA,EAAA,GAAAG,CAAA,CAAA,CAAAkE,CAAAA,CAAAY,QAAA83D,CAAAA,oBAAA,CAAA,QAAA,CAAA,KAAA,IAAAz4D,EAAA,CAAA,CAAAA,CAAA,CAAAD,CAAA7C,CAAAA,MAAA,CAAA8C,CAAA,EAAA,CAAA,CAAA,IAAAE,EAAAH,CAAA,CAAAC,CAAA,CAAA,IAAAE,CAAAi0C,CAAAA,YAAA,CAAA,KAAA,CAAA,EAAAl5C,CAAA,EAAAiF,CAAAi0C,CAAAA,YAAA,CAAA,cAAA,CAAA,EAAAl4C,aAAA,CAAAJ,CAAA,CAAA,CAAA,IAAAD,EAAAsE,CAAA,MAAA,CAAA,CAAA,CAAAtE,CAAA,GAAAF,CAAA,CAAA,CAAA,CAAA,CAAAg9D,CAAA98D,CAAA88D,CAAA\/3D,QAAAC,CAAAA,aAAA,CAAA,QAAA,CAAA83D,EAAAA,OAAA,CAAA,OAAA,CAAA98D,CAAA+8D,CAAAA,OAAA,CAAA,GAAA,CAAAl9D,CAAAsF,CAAAA,EAAA,EAAAnF,CAAAqF,CAAAA,YAAA,CAAA,OAAA,CAAAxF,CAAAsF,CAAAA,EAAA,CAAA,CAAAnF,CAAAqF,CAAAA,YAAA,CAAA,cAAA;AAAAhF,aAAA,CAAAJ,CAAA,CAAA,CAAAD,CAAAg9D,CAAAA,GAAA,CAAA39D,CAAA,CAAAc,EAAA,CAAAd,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAiF,EAAAA,CAAA,CAAAjF,CAAA,CAAAW,CAAA,CAAAsE,EAAA,CAAAvE,CAAAi9D,CAAAA,OAAA,CAAAj9D,CAAAk9D,CAAAA,MAAA,CAAA,IAAA7xC,aAAA,CAAAvlB,CAAA,CAAA,KAAA5F,EAAAC,CAAA,CAAAd,CAAA,CAAA,IAAA,OAAAc,CAAA,CAAAd,CAAA,CAAA,CAAAW,CAAAyG,CAAAA,UAAA,EAAAzG,CAAAyG,CAAAA,UAAAb,CAAAA,WAAA,CAAA5F,CAAA,CAAA,CAAAE,CAAA,EAAAA,CAAAkF,CAAAA,OAAA,CAAA\/F,EAAA,EAAAA,EAAA,CAAAY,CAAA,CAAA,CAAA,CAAAX,CAAA,CAAA,MAAAA,EAAA,CAAAW,CAAA,CAAA,CAAA,KAAA6F,EAAAgT,UAAA,CAAAvU,CAAAiC,CAAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA2L,KAAA,SAAA,CAAA0I,OAAA7a,CAAA,CAAA,CAAA,CAAA,IAAA,CAAAA,EAAAi9D,CAAAA,OAAA,CAAA14D,CAAAiC,CAAAA,IAAA,CAAA,IAAA,CAAAxG,CAAAi9D,CAAAA,OAAA,CAAAj9D,EAAAk9D,CAAAA,MAAA,CAAA34D,CAAAiC,CAAAA,IAAA,CAAA,IAAA,CAAAxG,CAAAk9D,CAAAA,MAAA,CAAAp9D,EAAA,EAAAiF,QAAA+B,CAAAA,IAAAvB,CAAAA,WAAA,CAAAvF,CAAA,CAAA,CAAA,CAAA,CAAAH,CAAAK,CAAAA,CAAA,CAAAb,CAAA89D,EAAA,CAAA,WAAA,EAAA,MAAAx9C,OAAA,EAAAA,MAAAy9C,CAAAA,WAAA,EAAAr8D,MAAAC,CAAAA,cAAA,CAAA3B,CAAA,CAAAsgB,MAAAy9C,CAAAA,WAAA,CAAA,CAAA98D,MAAA,QAAA,CAAA,CAAAS,OAAAC,CAAAA,cAAA,CAAA3B,CAAA,CAAA,YAAA;AAAA,CAAAiB,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAT,CAAA0E,CAAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,IAAAlF,EAAA,CAAA,IAAA,CAAA,CAAAQ,EAAAiG,CAAAA,CAAAsK,CAAAA,CAAA,CAAA,CAAA9Q,CAAA,CAAAW,CAAA,CAAAo9D,EAAA,CAAA,IAAAn9D,EAAAL,CAAAQ,CAAAA,CAAA,CAAAhB,CAAA,CAAAC,CAAA,CAAA,CAAAD,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,EAAA,IAAA,CAAA,GAAAY,CAAA,CAAA,GAAAA,CAAA,CAAAD,CAAA4E,CAAAA,IAAA,CAAA3E,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,IAAAC,EAAA,IAAAK,OAAA,CAAA,CAAAP,CAAA,CAAAE,CAAA,CAAA,EAAA,CAAAD,CAAA,CAAAb,CAAA,CAAAC,CAAA,CAAA,CAAA,CAAAW,CAAA,CAAAE,CAAA,CAAA,CAAA,CAAAF,EAAA4E,CAAAA,IAAA,CAAA3E,CAAA,CAAA,CAAA,CAAA,CAAAC,CAAA,CAAAE,EAAAA,CAAAR,CAAA0E,CAAAA,CAAAlE,CAAAR,CAAAuE,CAAAA,CAAA,CAAA9E,CAAA,CAAA,KAAAU,EAAAsF,KAAA,EAAAzF,EAAAC,CAAAA,CAAA,CAAAO,CAAA,CAAAJ,CAAA,EAAA,CAAA,GAAAJ,CAAAQ,CAAAA,CAAA,CAAAhB,CAAA,CAAAC,CAAA,CAAA,GAAA,CAAA,IAAAY,CAAA,CAAAb,CAAA,CAAAC,CAAA,CAAA,IAAAD,CAAA,CAAAC,CAAA,CAAA,CAAA,IAAA,EAAA,EAAAY,CAAA,EAAA,CAAA,IAAAC,EAAAF,CAAAE,GAAA,MAAA,GAAAF,CAAAkS,CAAAA,IAAA,CAAA,SAAA,CAAAlS,CAAAkS,CAAAA,IAAAhS,CAAAE,EAAAA,CAAAJ,CAAAI,EAAAJ,CAAA4a,CAAAA,MAAAxa,EAAAJ,CAAA4a,CAAAA,MAAAmiD,CAAAA,GAAAh9D,EAAA+zC,CAAAA,OAAA,CAAA,gBAAA,CAAAz0C,CAAA,CAAA,aAAA,CAAAa,CAAA,CAAA,IAAA,CAAAE,CAAA,CAAA,GAAAL,EAAAsa,CAAAA,IAAA,CAAA,gBAAAta,EAAAmS,CAAAA,IAAA,CAAAhS,CAAAH,EAAAs9D,CAAAA,OAAA,CAAAj9D,CAAAH,EAAA,CAAA,CAAA,CAAA,CAAAF,CAAA,CAAA,CAAA,CAAA,CAAA,QAAA,CAAAV,CAAA,CAAAA,CAAA,CAAA,CAAA,CAAA,KAAAA,EAAA,CAAAA,CAAA,CAAAW,CAAA,CAAAX,EAAA,CAAA,IAAA,IAAAY,CAAA,CAAAC,CAAA,CAAA,CAAAE,CAAA,CAAAL,CAAA,CAAAF,CAAA,CAAA,CAAAG,CAAA,CAAAkE,EAAA,CAAA,CAAAC,EAAA,EAAA,CAAAD,CAAA,CAAA9D,CAAAiB,CAAAA,MAAA,CAAA6C,CAAA,EAAA,CAAAhE,CAAA;AAAAE,CAAA,CAAA8D,CAAA,CAAA,CAAAtE,CAAAQ,CAAAA,CAAA,CAAAhB,CAAA,CAAAc,CAAA,CAAA,EAAAd,CAAA,CAAAc,CAAA,CAAA,EAAAiE,CAAAS,CAAAA,IAAA,CAAAxF,CAAA,CAAAc,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAAd,CAAA,CAAAc,CAAA,CAAA,CAAA,CAAA,KAAAD,CAAA,GAAAF,EAAA,CAAAH,CAAAQ,CAAAA,CAAA,CAAAL,CAAA,CAAAE,CAAA,CAAA,GAAAL,CAAAyG,CAAAA,CAAA,CAAApG,CAAA,CAAA,CAAAF,CAAA,CAAAE,CAAA,CAAA,CAAAJ,EAAA,EAAAA,CAAA,CAAAD,CAAA,CAAA,KAAAP,CAAA,EAAAA,CAAA,CAAAW,CAAA,CAAA,CAAAmE,CAAA9C,CAAAA,MAAA,CAAA,CAAA8C,CAAAud,CAAAA,KAAA,EAAA,EAAA,CAAA,CAAA1hB,EAAAL,IAAA29D,CAAAA,sBAAAt9D,CAAAL,IAAA29D,CAAAA,sBAAAt9D,EAAA,EAAAA,EAAAmF,CAAAA,OAAA,CAAA9F,CAAAkH,CAAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAAvG,EAAA4E,CAAAA,IAAA,CAAAvF,CAAAkH,CAAAA,IAAA,CAAA,IAAA,CAAAvG,CAAA4E,CAAAA,IAAA2B,CAAAA,IAAA,CAAAvG,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAAJ,CAAA,CAAA,IAAA,CAAxqH,CAAJ,CAAD,EAAP,CAA1U,CAH6D;","sources":["node_modules\/@excalidraw\/excalidraw\/dist\/excalidraw.min.js"],"sourcesContent":["shadow$provide[556] = function(global,require,module,exports) {\nvar process = require('process');\n\/*! For license information please see excalidraw.min.js.LICENSE.txt *\/\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\"),require(\"react-dom\")):\"function\"==typeof define&&define.amd?define([\"react\",\"react-dom\"],t):\"object\"==typeof exports?exports.Excalidraw=t(require(\"react\"),require(\"react-dom\")):e.Excalidraw=t(e.React,e.ReactDOM)}(self,(function(e,t){return(()=>{var n,r,a,o,i={5374:e=>{function t(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}e.exports=function(e){return function(){var n=this,r=arguments;return new Promise((function(a,o){var i=e.apply(n,r);function l(e){t(i,a,o,l,c,\"next\",e)}function c(e){t(i,a,o,l,c,\"throw\",e)}l(void 0)}))}}},566:e=>{e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},6950:e=>{function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},t.apply(this,arguments)}e.exports=t},5474:(e,t,n)=>{var r=n(8387);e.exports=function(e,t){if(null==e)return{};var n,a,o=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}},8387:e=>{e.exports=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}},6009:(e,t,n)=>{var r=n(487),a=n(8328);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},1395:(e,t,n)=>{var r=n(487),a=n(6121);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},3211:(e,t,n)=>{var r=n(487),a=n(2510);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},5574:(e,t,n)=>{var r=n(487),a=n(7972);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},4518:(e,t,n)=>{var r=n(487),a=n(190);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},3040:(e,t,n)=>{var r=n(487),a=n(6718);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8623:(e,t,n)=>{var r=n(487),a=n(3623);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},4193:(e,t,n)=>{var r=n(487),a=n(103);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},341:(e,t,n)=>{var r=n(487),a=n(7061);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},9705:(e,t,n)=>{var r=n(487),a=n(1498);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},7143:(e,t,n)=>{var r=n(487),a=n(666);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},7428:(e,t,n)=>{var r=n(487),a=n(849);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8465:(e,t,n)=>{var r=n(487),a=n(6915);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8680:(e,t,n)=>{var r=n(487),a=n(7030);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},205:(e,t,n)=>{var r=n(487),a=n(3994);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8416:(e,t,n)=>{var r=n(487),a=n(700);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},2816:(e,t,n)=>{var r=n(487),a=n(287);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},1575:(e,t,n)=>{var r=n(487),a=n(5657);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},7287:(e,t,n)=>{var r=n(487),a=n(7392);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8518:(e,t,n)=>{var r=n(487),a=n(6065);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},5849:(e,t,n)=>{var r=n(487),a=n(83);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},9478:(e,t,n)=>{var r=n(487),a=n(1554);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},2680:(e,t,n)=>{var r=n(487),a=n(1970);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},3142:(e,t,n)=>{var r=n(487),a=n(961);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8234:(e,t,n)=>{var r=n(487),a=n(4878);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},4651:(e,t,n)=>{var r=n(487),a=n(1988);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},2189:(e,t,n)=>{var r=n(487),a=n(3245);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},487:(e,t,n)=>{\"use strict\";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],c=t.base?o[0]+t.base:o[0],s=n[c]||0,u=\"\".concat(c,\" \").concat(s);n[c]=s+1;var d=l(u),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:u,updater:g(p,t),references:1}),r.push(u)}return r}function s(e){var t=document.createElement(\"style\"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),\"function\"==typeof e.insert)e.insert(t);else{var i=o(e.insert||\"head\");if(!i)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");i.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join(\"\\n\")});function p(e,t,n,r){var a=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute(\"media\",a):e.removeAttribute(\"media\"),o&&\"undefined\"!=typeof btoa&&(r+=\"\\n\/*# sourceMappingURL=data:application\/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o)))),\" *\/\")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,a;if(t.singleton){var o=m++;n=h||(h=s(t)),r=p.bind(null,n,o,!1),a=p.bind(null,n,o,!0)}else n=s(t),r=f.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||\"boolean\"==typeof t.singleton||(t.singleton=a());var n=c(e=e||[],t);return function(e){if(e=e||[],\"[object Array]\"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=l(n[r]);i[a].references--}for(var o=c(e,t),s=0;s<n.length;s++){var u=l(n[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=o}}}},2829:e=>{\"use strict\";e.exports=JSON.parse('{\"labels\":{\"paste\":\"Paste\",\"pasteCharts\":\"Paste charts\",\"selectAll\":\"Select all\",\"multiSelect\":\"Add element to selection\",\"moveCanvas\":\"Move canvas\",\"cut\":\"Cut\",\"copy\":\"Copy\",\"copyAsPng\":\"Copy to clipboard as PNG\",\"copyAsSvg\":\"Copy to clipboard as SVG\",\"bringForward\":\"Bring forward\",\"sendToBack\":\"Send to back\",\"bringToFront\":\"Bring to front\",\"sendBackward\":\"Send backward\",\"delete\":\"Delete\",\"copyStyles\":\"Copy styles\",\"pasteStyles\":\"Paste styles\",\"stroke\":\"Stroke\",\"background\":\"Background\",\"fill\":\"Fill\",\"strokeWidth\":\"Stroke width\",\"strokeStyle\":\"Stroke style\",\"strokeStyle_solid\":\"Solid\",\"strokeStyle_dashed\":\"Dashed\",\"strokeStyle_dotted\":\"Dotted\",\"sloppiness\":\"Sloppiness\",\"opacity\":\"Opacity\",\"textAlign\":\"Text align\",\"edges\":\"Edges\",\"sharp\":\"Sharp\",\"round\":\"Round\",\"arrowheads\":\"Arrowheads\",\"arrowhead_none\":\"None\",\"arrowhead_arrow\":\"Arrow\",\"arrowhead_bar\":\"Bar\",\"arrowhead_dot\":\"Dot\",\"fontSize\":\"Font size\",\"fontFamily\":\"Font family\",\"onlySelected\":\"Only selected\",\"withBackground\":\"With background\",\"exportEmbedScene\":\"Embed scene into exported file\",\"exportEmbedScene_details\":\"Scene data will be saved into the exported PNG\/SVG file so that the scene can be restored from it.\\\\nWill increase exported file size.\",\"addWatermark\":\"Add \\\\\"Made with Excalidraw\\\\\"\",\"handDrawn\":\"Hand-drawn\",\"normal\":\"Normal\",\"code\":\"Code\",\"small\":\"Small\",\"medium\":\"Medium\",\"large\":\"Large\",\"veryLarge\":\"Very large\",\"solid\":\"Solid\",\"hachure\":\"Hachure\",\"crossHatch\":\"Cross-hatch\",\"thin\":\"Thin\",\"bold\":\"Bold\",\"left\":\"Left\",\"center\":\"Center\",\"right\":\"Right\",\"extraBold\":\"Extra bold\",\"architect\":\"Architect\",\"artist\":\"Artist\",\"cartoonist\":\"Cartoonist\",\"fileTitle\":\"File title\",\"colorPicker\":\"Color picker\",\"canvasBackground\":\"Canvas background\",\"drawingCanvas\":\"Drawing canvas\",\"layers\":\"Layers\",\"actions\":\"Actions\",\"language\":\"Language\",\"liveCollaboration\":\"Live collaboration\",\"duplicateSelection\":\"Duplicate\",\"untitled\":\"Untitled\",\"name\":\"Name\",\"yourName\":\"Your name\",\"madeWithExcalidraw\":\"Made with Excalidraw\",\"group\":\"Group selection\",\"ungroup\":\"Ungroup selection\",\"collaborators\":\"Collaborators\",\"showGrid\":\"Show grid\",\"addToLibrary\":\"Add to library\",\"removeFromLibrary\":\"Remove from library\",\"libraryLoadingMessage\":\"Loading library\u2026\",\"libraries\":\"Browse libraries\",\"loadingScene\":\"Loading scene\u2026\",\"align\":\"Align\",\"alignTop\":\"Align top\",\"alignBottom\":\"Align bottom\",\"alignLeft\":\"Align left\",\"alignRight\":\"Align right\",\"centerVertically\":\"Center vertically\",\"centerHorizontally\":\"Center horizontally\",\"distributeHorizontally\":\"Distribute horizontally\",\"distributeVertically\":\"Distribute vertically\",\"viewMode\":\"View mode\",\"toggleExportColorScheme\":\"Toggle export color scheme\",\"share\":\"Share\"},\"buttons\":{\"clearReset\":\"Reset the canvas\",\"export\":\"Export\",\"exportToPng\":\"Export to PNG\",\"exportToSvg\":\"Export to SVG\",\"copyToClipboard\":\"Copy to clipboard\",\"copyPngToClipboard\":\"Copy PNG to clipboard\",\"scale\":\"Scale\",\"save\":\"Save\",\"saveAs\":\"Save as\",\"load\":\"Load\",\"getShareableLink\":\"Get shareable link\",\"close\":\"Close\",\"selectLanguage\":\"Select language\",\"scrollBackToContent\":\"Scroll back to content\",\"zoomIn\":\"Zoom in\",\"zoomOut\":\"Zoom out\",\"resetZoom\":\"Reset zoom\",\"menu\":\"Menu\",\"done\":\"Done\",\"edit\":\"Edit\",\"undo\":\"Undo\",\"redo\":\"Redo\",\"resetLibrary\":\"Reset library\",\"createNewRoom\":\"Create new room\",\"fullScreen\":\"Full screen\",\"darkMode\":\"Dark mode\",\"lightMode\":\"Light mode\",\"zenMode\":\"Zen mode\",\"exitZenMode\":\"Exit zen mode\"},\"alerts\":{\"clearReset\":\"This will clear the whole canvas. Are you sure?\",\"couldNotCreateShareableLink\":\"Couldn\\'t create shareable link.\",\"couldNotCreateShareableLinkTooBig\":\"Couldn\\'t create shareable link: the scene is too big\",\"couldNotLoadInvalidFile\":\"Couldn\\'t load invalid file\",\"importBackendFailed\":\"Importing from backend failed.\",\"cannotExportEmptyCanvas\":\"Cannot export empty canvas.\",\"couldNotCopyToClipboard\":\"Couldn\\'t copy to clipboard. Try using Chrome browser.\",\"decryptFailed\":\"Couldn\\'t decrypt data.\",\"uploadedSecurly\":\"The upload has been secured with end-to-end encryption, which means that Excalidraw server and third parties can\\'t read the content.\",\"loadSceneOverridePrompt\":\"Loading external drawing will replace your existing content. Do you wish to continue?\",\"collabStopOverridePrompt\":\"Stopping the session will overwrite your previous, locally stored drawing. Are you sure?\\\\n\\\\n(If you want to keep your local drawing, simply close the browser tab instead.)\",\"errorLoadingLibrary\":\"There was an error loading the third party library.\",\"confirmAddLibrary\":\"This will add {{numShapes}} shape(s) to your library. Are you sure?\",\"imageDoesNotContainScene\":\"Importing images isn\\'t supported at the moment.\\\\n\\\\nDid you want to import a scene? This image does not seem to contain any scene data. Have you enabled this during export?\",\"cannotRestoreFromImage\":\"Scene couldn\\'t be restored from this image file\",\"invalidSceneUrl\":\"Couldn\\'t import scene from the supplied URL. It\\'s either malformed, or doesn\\'t contain valid Excalidraw JSON data.\",\"resetLibrary\":\"This will clear your library. Are you sure?\"},\"toolBar\":{\"selection\":\"Selection\",\"draw\":\"Free draw\",\"rectangle\":\"Rectangle\",\"diamond\":\"Diamond\",\"ellipse\":\"Ellipse\",\"arrow\":\"Arrow\",\"line\":\"Line\",\"text\":\"Text\",\"library\":\"Library\",\"lock\":\"Keep selected tool active after drawing\"},\"headings\":{\"canvasActions\":\"Canvas actions\",\"selectedShapeActions\":\"Selected shape actions\",\"shapes\":\"Shapes\"},\"hints\":{\"linearElement\":\"Click to start multiple points, drag for single line\",\"freeDraw\":\"Click and drag, release when you\\'re finished\",\"text\":\"Tip: you can also add text by double-clicking anywhere with the selection tool\",\"linearElementMulti\":\"Click on last point or press Escape or Enter to finish\",\"lockAngle\":\"You can constrain angle by holding SHIFT\",\"resize\":\"You can constrain proportions by holding SHIFT while resizing,\\\\nhold ALT to resize from the center\",\"rotate\":\"You can constrain angles by holding SHIFT while rotating\",\"lineEditor_info\":\"Double-click or press Enter to edit points\",\"lineEditor_pointSelected\":\"Press Delete to remove point, CtrlOrCmd+D to duplicate, or drag to move\",\"lineEditor_nothingSelected\":\"Select a point to move or remove, or hold Alt and click to add new points\"},\"canvasError\":{\"cannotShowPreview\":\"Cannot show preview\",\"canvasTooBig\":\"The canvas may be too big.\",\"canvasTooBigTip\":\"Tip: try moving the farthest elements a bit closer together.\"},\"errorSplash\":{\"headingMain_pre\":\"Encountered an error. Try \",\"headingMain_button\":\"reloading the page.\",\"clearCanvasMessage\":\"If reloading doesn\\'t work, try \",\"clearCanvasMessage_button\":\"clearing the canvas.\",\"clearCanvasCaveat\":\" This will result in loss of work \",\"trackedToSentry_pre\":\"The error with identifier \",\"trackedToSentry_post\":\" was tracked on our system.\",\"openIssueMessage_pre\":\"We were very cautious not to include your scene information on the error. If your scene is not private, please consider following up on our \",\"openIssueMessage_button\":\"bug tracker.\",\"openIssueMessage_post\":\" Please include information below by copying and pasting into the GitHub issue.\",\"sceneContent\":\"Scene content:\"},\"roomDialog\":{\"desc_intro\":\"You can invite people to your current scene to collaborate with you.\",\"desc_privacy\":\"Don\\'t worry, the session uses end-to-end encryption, so whatever you draw will stay private. Not even our server will be able to see what you come up with.\",\"button_startSession\":\"Start session\",\"button_stopSession\":\"Stop session\",\"desc_inProgressIntro\":\"Live-collaboration session is now in progress.\",\"desc_shareLink\":\"Share this link with anyone you want to collaborate with:\",\"desc_exitSession\":\"Stopping the session will disconnect you from the room, but you\\'ll be able to continue working with the scene, locally. Note that this won\\'t affect other people, and they\\'ll still be able to collaborate on their version.\",\"shareTitle\":\"Join a live collaboration session on Excalidraw\"},\"errorDialog\":{\"title\":\"Error\"},\"helpDialog\":{\"blog\":\"Read our blog\",\"click\":\"click\",\"curvedArrow\":\"Curved arrow\",\"curvedLine\":\"Curved line\",\"documentation\":\"Documentation\",\"drag\":\"drag\",\"editor\":\"Editor\",\"github\":\"Found an issue? Submit\",\"howto\":\"Follow our guides\",\"or\":\"or\",\"preventBinding\":\"Prevent arrow binding\",\"shapes\":\"Shapes\",\"shortcuts\":\"Keyboard shortcuts\",\"textFinish\":\"Finish editing (text)\",\"textNewLine\":\"Add new line (text)\",\"title\":\"Help\",\"view\":\"View\",\"zoomToFit\":\"Zoom to fit all elements\",\"zoomToSelection\":\"Zoom to selection\"},\"encrypted\":{\"tooltip\":\"Your drawings are end-to-end encrypted so Excalidraw\\'s servers will never see them.\"},\"stats\":{\"angle\":\"Angle\",\"element\":\"Element\",\"elements\":\"Elements\",\"height\":\"Height\",\"scene\":\"Scene\",\"selected\":\"Selected\",\"storage\":\"Storage\",\"title\":\"Stats for nerds\",\"total\":\"Total\",\"version\":\"Version\",\"versionCopy\":\"Click to copy\",\"versionNotAvailable\":\"Version not available\",\"width\":\"Width\"},\"toast\":{\"copyStyles\":\"Copied styles.\",\"copyToClipboard\":\"Copied to clipboard.\",\"copyToClipboardAsPng\":\"Copied {{exportSelection}} to clipboard as PNG\\\\n({{exportColorScheme}})\",\"fileSaved\":\"File saved.\",\"fileSavedToFilename\":\"Saved to {filename}\",\"canvas\":\"canvas\",\"selection\":\"selection\"}}')},2051:e=>{\"use strict\";e.exports=JSON.parse('{\"ar-SA\":84,\"bg-BG\":95,\"ca-ES\":95,\"de-DE\":100,\"el-GR\":99,\"en\":100,\"es-ES\":100,\"fa-IR\":91,\"fi-FI\":100,\"fr-FR\":100,\"he-IL\":92,\"hi-IN\":93,\"hu-HU\":83,\"id-ID\":99,\"it-IT\":100,\"ja-JP\":97,\"kab-KAB\":98,\"ko-KR\":95,\"my-MM\":78,\"nb-NO\":100,\"nl-NL\":99,\"nn-NO\":86,\"oc-FR\":100,\"pa-IN\":96,\"pl-PL\":97,\"pt-BR\":100,\"pt-PT\":98,\"ro-RO\":100,\"ru-RU\":100,\"sk-SK\":99,\"sv-SE\":100,\"tr-TR\":83,\"uk-UA\":96,\"zh-CN\":98,\"zh-TW\":100}')},788:(e,t,n)=>{var r={\".\/ar-SA.json\":[7294,558],\".\/bg-BG.json\":[3860,384],\".\/ca-ES.json\":[750,351],\".\/de-DE.json\":[7439,43],\".\/el-GR.json\":[9422,526],\".\/en.json\":[2829],\".\/es-ES.json\":[2863,317],\".\/fa-IR.json\":[3853,710],\".\/fi-FI.json\":[5472,472],\".\/fr-FR.json\":[3280,364],\".\/he-IL.json\":[3970,262],\".\/hi-IN.json\":[5599,933],\".\/hu-HU.json\":[1516,661],\".\/id-ID.json\":[7992,491],\".\/it-IT.json\":[5963,465],\".\/ja-JP.json\":[1323,137],\".\/kab-KAB.json\":[9230,164],\".\/ko-KR.json\":[7552,60],\".\/my-MM.json\":[1778,242],\".\/nb-NO.json\":[8751,246],\".\/nl-NL.json\":[4675,196],\".\/nn-NO.json\":[7558,920],\".\/oc-FR.json\":[9945,565],\".\/pa-IN.json\":[863,280],\".\/percentages.json\":[2051],\".\/pl-PL.json\":[122,852],\".\/pt-BR.json\":[7443,381],\".\/pt-PT.json\":[2560,149],\".\/ro-RO.json\":[5654,752],\".\/ru-RU.json\":[5609,869],\".\/sk-SK.json\":[8684,401],\".\/sv-SE.json\":[1570,698],\".\/tr-TR.json\":[8146,213],\".\/uk-UA.json\":[9746,583],\".\/zh-CN.json\":[9044,304],\".\/zh-TW.json\":[2939,62]};function a(e){if(!n.o(r,e))return Promise.resolve().then((()=>{var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}));var t=r[e],a=t[0];return Promise.all(t.slice(1).map(n.e)).then((()=>n.t(a,3)))}a.keys=()=>Object.keys(r),a.id=788,e.exports=a},7154:e=>{function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},t.apply(this,arguments)}e.exports=t},6479:(e,t,n)=>{var r=n(7316);e.exports=function(e,t){if(null==e)return{};var n,a,o=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}},7316:e=>{e.exports=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}},8328:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>p});var r=n(3645),a=n.n(r),o=n(1667),i=n.n(o),l=n(7464),c=n(9638),s=a()((function(e){return e[1]})),u=i()(l.Z),d=i()(c.Z);s.push([e.id,'@font-face{font-family:\"Virgil\";src:url('+u+');font-display:swap}@font-face{font-family:\"Cascadia\";src:url('+d+\");font-display:swap}\",\"\"]);const p=s},6121:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Avatar{width:2.5rem;height:2.5rem;border-radius:1.25rem;display:flex;justify-content:center;align-items:center;color:#fff;cursor:pointer;font-size:.8rem;font-weight:500}\",\"\"]);const o=a},2510:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .CollabButton.is-collaborating{background-color:var(--button-special-active-bg-color)}.excalidraw .CollabButton.is-collaborating .ToolIcon__icon svg,.excalidraw .CollabButton.is-collaborating .ToolIcon__label{color:var(--icon-green-fill-color)}.excalidraw .CollabButton-collaborators{min-width:1em;position:absolute;bottom:-5px;padding:3px;border-radius:50%;background-color:#40c057;color:#fff;font-size:.7em;font-family:var(--ui-font)}:root[dir=ltr] .excalidraw .CollabButton-collaborators{right:-5px}:root[dir=rtl] .excalidraw .CollabButton-collaborators{left:-5px}\",\"\"]);const o=a},7972:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .color-picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}:root[dir=ltr] .excalidraw .color-picker{left:-5.5px}:root[dir=rtl] .excalidraw .color-picker{right:-5.5px}.excalidraw .color-picker-control-container{display:grid;grid-template-columns:auto 1fr;align-items:center}.excalidraw .color-picker-triangle{width:0;height:0;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent var(--popup-bg-color);position:absolute;top:-10px}:root[dir=ltr] .excalidraw .color-picker-triangle{left:12px}:root[dir=rtl] .excalidraw .color-picker-triangle{right:12px}.excalidraw .color-picker-triangle-shadow{border-color:transparent transparent rgba(0,0,0,.1);top:-11px}.excalidraw .color-picker-content{padding:.5rem;display:grid;grid-template-columns:repeat(5, auto);grid-gap:.5rem;border-radius:4px}.excalidraw .color-picker-content:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-picker-content .color-input-container{grid-column:1\/span 5}.excalidraw .color-picker-swatch{position:relative;height:1.875rem;width:1.875rem;cursor:pointer;border-radius:4px;margin:0;box-sizing:border-box;border:1px solid #ddd;background-color:currentColor !important;filter:var(--appearance-filter)}.excalidraw .color-picker-swatch:focus{box-shadow:0 0 4px 1px currentColor;border-color:var(--select-highlight-color)}.excalidraw .color-picker-transparent{border-radius:4px;box-shadow:rgba(0,0,0,.1) 0 0 0 1px inset;position:absolute;top:0;right:0;bottom:0;left:0}.excalidraw .color-picker-transparent,.excalidraw .color-picker-label-swatch{background:url(\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\") left center}.excalidraw .color-picker-hash{background:var(--input-border-color);height:1.875rem;width:1.875rem;color:var(--input-label-color);display:flex;align-items:center;justify-content:center;position:relative}:root[dir=ltr] .excalidraw .color-picker-hash{border-radius:4px 0 0 4px}:root[dir=rtl] .excalidraw .color-picker-hash{border-radius:0 4px 4px 0}.excalidraw .color-input-container:focus-within .color-picker-hash{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-input-container:focus-within .color-picker-hash::before,.excalidraw .color-input-container:focus-within .color-picker-hash::after{content:\"\";width:1px;height:100%;position:absolute;top:0}.excalidraw .color-input-container:focus-within .color-picker-hash::before{background:var(--input-border-color)}:root[dir=ltr] .excalidraw .color-input-container:focus-within .color-picker-hash::before{right:-1px}:root[dir=rtl] .excalidraw .color-input-container:focus-within .color-picker-hash::before{left:-1px}.excalidraw .color-input-container:focus-within .color-picker-hash::after{background:var(--input-bg-color)}:root[dir=ltr] .excalidraw .color-input-container:focus-within .color-picker-hash::after{right:-2px}:root[dir=rtl] .excalidraw .color-input-container:focus-within .color-picker-hash::after{left:-2px}.excalidraw .color-input-container{display:flex}.excalidraw .color-picker-input{width:12ch;margin:0;font-size:1rem;background-color:var(--input-bg-color);color:var(--text-primary-color);border:0;outline:none;height:1.75em;box-shadow:var(--input-border-color) 0 0 0 1px inset;float:left;padding:1px;padding-inline-start:.5em;appearance:none}:root[dir=ltr] .excalidraw .color-picker-input{border-radius:0 4px 4px 0}:root[dir=rtl] .excalidraw .color-picker-input{border-radius:4px 0 0 4px}.excalidraw .color-picker-label-swatch{height:1.875rem;width:1.875rem;margin-inline-end:.25rem;border:1px solid #dee2e6;position:relative;overflow:hidden;background-color:transparent !important;filter:var(--appearance-filter)}.excalidraw .color-picker-label-swatch:after{content:\"\";position:absolute;top:0;left:0;width:100%;height:100%;background:var(--swatch-color)}.excalidraw .color-picker-keybinding{position:absolute;bottom:2px;font-size:.7em}:root[dir=ltr] .excalidraw .color-picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .color-picker-keybinding{left:2px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .color-picker-keybinding{display:none}}.excalidraw .color-picker-type-canvasBackground .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementBackground .color-picker-keybinding{color:#fff}.excalidraw .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementStroke .color-picker-keybinding{color:#d4d4d4}.excalidraw.Appearance_dark .color-picker-type-elementBackground .color-picker-keybinding{color:#000}.excalidraw.Appearance_dark .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#000}',\"\"]);const o=a},190:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .context-menu{position:relative;border-radius:4px;box-shadow:0 3px 10px rgba(0,0,0,.2);padding:0;list-style:none;user-select:none;margin:-0.25rem 0 0 .125rem;padding:.5rem 0;background-color:var(--popup-secondary-bg-color);border:1px solid var(--button-gray-3);cursor:default}.excalidraw .context-menu button{color:var(--popup-text-color)}.excalidraw .context-menu-option{position:relative;width:100%;min-width:9.5rem;margin:0;padding:.25rem 1rem .25rem 1.25rem;text-align:start;border-radius:0;background-color:transparent;border:none;white-space:nowrap;display:grid;grid-template-columns:1fr .2fr;align-items:center}.excalidraw .context-menu-option.checkmark::before{position:absolute;left:6px;margin-bottom:1px;content:\"\u2713\"}.excalidraw .context-menu-option.dangerous .context-menu-option__label{color:#f03e3e}.excalidraw .context-menu-option .context-menu-option__label{justify-self:start;margin-inline-end:20px}.excalidraw .context-menu-option .context-menu-option__shortcut{justify-self:end;opacity:.6;font-family:inherit;font-size:.7rem}.excalidraw .context-menu-option:hover{color:var(--popup-bg-color);background-color:var(--select-highlight-color)}.excalidraw .context-menu-option:hover.dangerous{background-color:#fa5252}.excalidraw .context-menu-option:hover.dangerous .context-menu-option__label{color:var(--popup-bg-color)}.excalidraw .context-menu-option:focus{z-index:1}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .context-menu-option{display:block}.excalidraw .context-menu-option .context-menu-option__label{margin-inline-end:0}.excalidraw .context-menu-option .context-menu-option__shortcut{display:none}}.excalidraw .context-menu-option-separator{border:none;border-top:1px solid #adb5bd}',\"\"]);const o=a},6718:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Dialog{user-select:text;cursor:auto}.excalidraw .Dialog__title{display:grid;align-items:center;margin-top:0;grid-template-columns:1fr calc(var(--space-factor) * 7);grid-gap:var(--metric);padding:calc(var(--space-factor) * 2);text-align:center;font-variant:small-caps;font-size:1.2em}.excalidraw .Dialog__titleContent{flex:1}.excalidraw .Dialog .Modal__close{color:var(--icon-fill-color);margin:0}.excalidraw .Dialog__content{padding:0 16px 16px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .Dialog{--metric: calc(var(--space-factor) * 4);--inset-left: max(var(--metric), var(--sal));--inset-right: max(var(--metric), var(--sar))}.excalidraw .Dialog__title{grid-template-columns:calc(var(--space-factor) * 7) 1fr calc( var(--space-factor) * 7 );position:sticky;top:0;padding:calc(var(--space-factor) * 2);background:var(--island-bg-color);font-size:1.25em;box-sizing:border-box;border-bottom:1px solid var(--button-gray-2);z-index:1}.excalidraw .Dialog__titleContent{text-align:center}.excalidraw .Dialog .Island{width:100vw;height:100%;box-sizing:border-box;overflow-y:auto;padding-left:max(calc(var(--padding) * var(--space-factor)), var(--sal));padding-right:max(calc(var(--padding) * var(--space-factor)), var(--sar));padding-bottom:max(calc(var(--padding) * var(--space-factor)), var(--sab))}.excalidraw .Dialog .Modal__close{order:-1}}\",\"\"]);const o=a},3623:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .ExportDialog__preview{--preview-padding: calc(var(--space-factor) * 4);background:url(\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\") left center;text-align:center;padding:var(--preview-padding);margin-bottom:calc(var(--space-factor) * 3)}.excalidraw .ExportDialog__preview canvas{max-width:calc(100% - var(--preview-padding) * 2);max-height:25rem}.excalidraw.Appearance_dark .ExportDialog__preview canvas{filter:none}.excalidraw .ExportDialog__actions{width:100%;display:flex;grid-gap:calc(var(--space-factor) * 2);align-items:top;justify-content:space-between}.excalidraw .ExportDialog__name{grid-column:project-name;margin:auto}.excalidraw .ExportDialog__name .TextInput{height:calc(1rem - 3px)}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .ExportDialog{display:flex;flex-direction:column}.excalidraw .ExportDialog__actions{flex-direction:column;align-items:center}.excalidraw .ExportDialog__actions>*{margin-bottom:calc(var(--space-factor) * 3)}.excalidraw .ExportDialog__preview canvas{max-height:30vh}.excalidraw .ExportDialog__dialog,.excalidraw .ExportDialog__dialog .Island{height:100%;box-sizing:border-box}.excalidraw .ExportDialog__dialog .Island{overflow-y:auto}}',\"\"]);const o=a},103:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .FixedSideContainer{--margin: 0.25rem;position:absolute;pointer-events:none}.excalidraw .FixedSideContainer>*{pointer-events:all}.excalidraw .FixedSideContainer_side_top{left:var(--margin);top:var(--margin);right:var(--margin);z-index:2}.excalidraw .FixedSideContainer_side_top.zen-mode{right:42px}\",\"\"]);const o=a},7061:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .HelpDialog h3{border-bottom:1px solid var(--button-gray-2);padding-bottom:4px}.excalidraw .HelpDialog--island{border:1px solid var(--button-gray-2);margin-bottom:16px}.excalidraw .HelpDialog--island-title{margin:0;padding:4px;background-color:var(--button-gray-1);text-align:center}.excalidraw .HelpDialog--shortcut{border-top:1px solid var(--button-gray-2)}.excalidraw .HelpDialog--key{word-break:keep-all;border:1px solid var(--button-gray-2);padding:2px 8px;margin:auto 4px;background-color:var(--button-gray-1);border-radius:2px;font-size:.8em;min-height:26px;box-sizing:border-box;display:flex;align-items:center;font-family:inherit}.excalidraw .HelpDialog--header{display:flex;flex-direction:row;justify-content:space-evenly;margin-bottom:32px;padding-bottom:16px}.excalidraw .HelpDialog--btn{border:1px solid var(--link-color);padding:8px 32px;border-radius:4px}.excalidraw .HelpDialog--btn:hover{text-decoration:none}\",\"\"]);const o=a},1498:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .HintViewer{pointer-events:none;box-sizing:border-box;position:absolute;display:flex;justify-content:center;left:0;top:100%;max-width:100%;width:100%;margin-top:6px;text-align:center;color:#868e96;font-size:.8rem}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .HintViewer{position:static;padding-right:2em}}.excalidraw .HintViewer>span{padding:.2rem .4rem;background-color:var(--overlay-bg-color);border-radius:4px}\",\"\"]);const o=a},666:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .picker-container{display:inline-block;box-sizing:border-box;margin-right:.25rem}.excalidraw .picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}.excalidraw .picker-container button,.excalidraw .picker button{position:relative;display:flex;align-items:center;justify-content:center}.excalidraw .picker-container button:focus,.excalidraw .picker button:focus{outline:transparent;background-color:var(--button-gray-2)}.excalidraw .picker-container button:focus svg,.excalidraw .picker button:focus svg{opacity:1}.excalidraw .picker-container button:hover,.excalidraw .picker button:hover{background-color:var(--button-gray-2)}.excalidraw .picker-container button:active,.excalidraw .picker button:active{background-color:var(--button-gray-3)}.excalidraw .picker-container button:disabled,.excalidraw .picker button:disabled{cursor:not-allowed}.excalidraw .picker-container button svg,.excalidraw .picker button svg{margin:0;width:36px;height:18px;opacity:.6;pointer-events:none}.excalidraw .picker button{padding:.25rem .28rem .35rem .25rem}.excalidraw .picker-triangle{width:0;height:0;position:relative;top:-10px;z-index:10}:root[dir=ltr] .excalidraw .picker-triangle{left:12px}:root[dir=rtl] .excalidraw .picker-triangle{right:12px}.excalidraw .picker-triangle:before{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent rgba(0,0,0,.1);top:-1px}.excalidraw .picker-triangle:after{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent var(--popup-bg-color)}.excalidraw .picker-content{padding:.5rem;display:grid;grid-auto-flow:column;grid-gap:.5rem;border-radius:4px}:root[dir=rtl] .excalidraw .picker-content{padding:.4rem}.excalidraw .picker-keybinding{position:absolute;bottom:2px;font-size:.7em;color:var(--keybinding-color)}:root[dir=ltr] .excalidraw .picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .picker-keybinding{left:2px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .picker-keybinding{display:none}}.excalidraw .picker-type-canvasBackground .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementBackground .picker-keybinding{color:#fff}.excalidraw .picker-swatch[aria-label=transparent] .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementStroke .picker-keybinding{color:#d4d4d4}.excalidraw.Appearance_dark .picker-type-elementBackground .picker-keybinding{color:#000}.excalidraw.Appearance_dark .picker-swatch[aria-label=transparent] .picker-keybinding{color:#000}',\"\"]);const o=a},849:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .Island{--padding: 0;background-color:var(--island-bg-color);backdrop-filter:saturate(100%) blur(10px);box-shadow:var(--shadow-island);border-radius:4px;padding:calc(var(--padding) * var(--space-factor));position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .Island.zen-mode{box-shadow:none}\",\"\"]);const o=a},6915:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .layer-ui__library{margin:auto;display:flex;align-items:center;justify-content:center}.excalidraw .layer-ui__library .layer-ui__library-header{display:flex;align-items:center;width:100%;margin:2px 0}.excalidraw .layer-ui__library .layer-ui__library-header button{margin:0 2px}.excalidraw .layer-ui__library .layer-ui__library-header a{margin-inline-start:auto;padding-inline-end:18px;white-space:nowrap}.excalidraw .layer-ui__library-message{padding:10px 20px;max-width:200px}.excalidraw .layer-ui__library-items{max-height:50vh;overflow:auto}.excalidraw .layer-ui__wrapper{z-index:var(--zIndex-layerUI)}.excalidraw .layer-ui__wrapper .encrypted-icon{position:relative;margin-inline-start:15px;display:flex;justify-content:center;align-items:center;border-radius:var(--space-factor);color:#2b8a3e}.excalidraw .layer-ui__wrapper .encrypted-icon svg{width:1.2rem;height:1.2rem}.excalidraw .layer-ui__wrapper__github-corner{top:0;position:absolute;width:40px}:root[dir=ltr] .excalidraw .layer-ui__wrapper__github-corner{right:0}:root[dir=rtl] .excalidraw .layer-ui__wrapper__github-corner{left:0}.excalidraw .layer-ui__wrapper__footer{position:absolute;z-index:100;bottom:0;width:190px}:root[dir=ltr] .excalidraw .layer-ui__wrapper__footer{right:0}:root[dir=rtl] .excalidraw .layer-ui__wrapper__footer{left:0}.excalidraw .layer-ui__wrapper .zen-mode-transition{transition:transform .5s ease-in-out}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left{transform:translate(-92px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left{transform:translate(92px, 0)}.excalidraw .layer-ui__wrapper .disable-zen-mode{height:30px;position:absolute;bottom:10px;font-size:10px;padding:10px;font-weight:500;opacity:0;visibility:hidden;transition:visibility 0s linear 0s,opacity .5s}[dir=ltr] .excalidraw .layer-ui__wrapper .disable-zen-mode{right:15px}[dir=rtl] .excalidraw .layer-ui__wrapper .disable-zen-mode{left:15px}.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{opacity:1;visibility:visible;transition:visibility 0s linear 300ms,opacity .5s;transition-delay:.8s}\",\"\"]);const o=a},7030:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .library-unit{align-items:center;border:1px solid var(--button-gray-2);display:flex;justify-content:center;position:relative;width:63px;height:63px}.excalidraw .library-unit__dragger{display:flex;height:100%;width:100%}.excalidraw .library-unit__dragger>svg{filter:var(--appearance-filter);flex-grow:1;max-height:100%;max-width:100%}.excalidraw .library-unit__removeFromLibrary,.excalidraw .library-unit__removeFromLibrary:hover,.excalidraw .library-unit__removeFromLibrary:active{align-items:center;background:none;border:none;color:var(--icon-fill-color);display:flex;justify-content:center;margin:0;padding:0;position:absolute;right:5px;top:5px}.excalidraw .library-unit__removeFromLibrary>svg{height:16px;width:16px}.excalidraw .library-unit__pulse{transform:scale(1);animation:library-unit__pulse-animation 1s ease-in infinite}.excalidraw .library-unit__adder{position:absolute;left:50%;top:50%;width:20px;height:20px;margin-left:-10px;margin-top:-10px;pointer-events:none}.excalidraw .library-unit__active{cursor:pointer}@keyframes library-unit__pulse-animation{0%{transform:scale(0.95)}50%{transform:scale(1)}100%{transform:scale(0.95)}}\",\"\"]);const o=a},3994:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw.excalidraw-modal-container{position:absolute;z-index:10}.excalidraw .Modal{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;align-items:center;justify-content:center;overflow:auto;padding:calc(var(--space-factor) * 10)}.excalidraw .Modal__background{position:absolute;top:0;left:0;right:0;bottom:0;z-index:1;background-color:rgba(0,0,0,.3);backdrop-filter:blur(2px)}.excalidraw .Modal__content{position:relative;z-index:2;width:100%;max-width:var(--max-width);max-height:100%;opacity:0;transform:translateY(10px);animation:Modal__content_fade-in .1s ease-out .05s forwards;position:relative;overflow-y:auto;background:var(--island-bg-color);backdrop-filter:none;border:1px solid var(--dialog-border-color);box-shadow:0 2px 10px rgba(0,0,0,.25);border-radius:6px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .Modal__content{max-width:100%;border:0;border-radius:0}}@keyframes Modal__content_fade-in{from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.excalidraw .Modal__close{width:calc(var(--space-factor) * 7);height:calc(var(--space-factor) * 7);display:flex;align-items:center;justify-content:center}.excalidraw .Modal__close svg{height:calc(var(--space-factor) * 5)}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .Modal{padding:0}.excalidraw .Modal__content{position:absolute;top:0;left:0;right:0;bottom:0}}\",\"\"]);const o=a},700:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .PasteChartDialog .Island{display:flex;flex-direction:column}}.excalidraw .PasteChartDialog .container{display:flex;align-items:center;justify-content:space-around;flex-wrap:wrap}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .PasteChartDialog .container{flex-direction:column;justify-content:center}}.excalidraw .PasteChartDialog .ChartPreview{margin:8px;text-align:center;width:192px;height:128px;border-radius:2px;padding:1px;border:1px solid #ced4da;display:flex;align-items:center;justify-content:center;background:transparent}.excalidraw .PasteChartDialog .ChartPreview div{display:inline-block}.excalidraw .PasteChartDialog .ChartPreview svg{max-height:120px;max-width:186px}.excalidraw .PasteChartDialog .ChartPreview:hover{padding:0;border:2px solid #339af0}\",\"\"]);const o=a},287:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .popover{position:fixed;z-index:10}\",\"\"]);const o=a},5657:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .Stack{--gap: 0;display:grid;gap:calc(var(--space-factor) * var(--gap))}.excalidraw .Stack_vertical{grid-template-columns:auto;grid-auto-flow:row;grid-auto-rows:min-content}.excalidraw .Stack_horizontal{grid-template-rows:auto;grid-auto-flow:column;grid-auto-columns:min-content}\",\"\"]);const o=a},7392:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Stats{position:absolute;top:64px;right:12px;font-size:12px;z-index:999}.excalidraw .Stats h3{margin:0 24px 8px 0;white-space:nowrap}.excalidraw .Stats .close{float:right;height:16px;width:16px;cursor:pointer}.excalidraw .Stats .close svg{width:100%;height:100%}.excalidraw .Stats table{width:100%}.excalidraw .Stats table th{border-bottom:1px solid var(--input-border-color);padding:4px}.excalidraw .Stats table tr td:nth-child(2){min-width:24px;text-align:right}:root[dir=rtl] .excalidraw .Stats{left:12px;right:initial}:root[dir=rtl] .excalidraw .Stats h3{margin:0 0 8px 24px}:root[dir=rtl] .excalidraw .Stats .close{float:left}\",\"\"]);const o=a},6065:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .TextInput{color:var(--text-primary-color);display:inline-block;border:1.5px solid var(--button-gray-1);line-height:1;padding:.75rem;white-space:nowrap;border-radius:var(--space-factor);background-color:var(--input-bg-color)}.excalidraw .TextInput:not(:focus):hover{background-color:var(--input-hover-bg-color)}.excalidraw .TextInput:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}\",\"\"]);const o=a},83:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Toast{animation:fade-in .5s;background-color:var(--button-gray-1);border-radius:4px;bottom:10px;box-sizing:border-box;cursor:default;left:50%;margin-left:-150px;padding:4px 0;position:absolute;text-align:center;width:300px;z-index:999999}.excalidraw .Toast__message{color:var(--popup-text-color);white-space:pre-wrap}@keyframes fade-in{from{opacity:0}to{opacity:1}}\",\"\"]);const o=a},1554:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .ToolIcon{display:inline-flex;align-items:center;position:relative;font-family:Cascadia;cursor:pointer;background-color:var(--button-gray-1);-webkit-tap-highlight-color:transparent;border-radius:var(--space-factor)}.excalidraw .ToolIcon__icon{width:2.5rem;height:2.5rem;color:var(--icon-fill-color);display:flex;justify-content:center;align-items:center;border-radius:var(--space-factor)}.excalidraw .ToolIcon__icon svg{position:relative;height:1em;fill:var(--icon-fill-color);color:var(--icon-fill-color)}.excalidraw .ToolIcon__icon+.ToolIcon__label{margin-inline-start:0}.excalidraw .ToolIcon__label{color:var(--icon-fill-color);font-family:var(--ui-font);margin:0 .8em;text-overflow:ellipsis}.excalidraw .ToolIcon_size_s .ToolIcon__icon{width:1.4rem;height:1.4rem;font-size:.8em}.excalidraw .excalidraw .ToolIcon_type_button,.excalidraw .Modal .ToolIcon_type_button,.excalidraw .ToolIcon_type_button{padding:0;border:none;margin:0;font-size:inherit}.excalidraw .excalidraw .ToolIcon_type_button:hover,.excalidraw .Modal .ToolIcon_type_button:hover,.excalidraw .ToolIcon_type_button:hover{background-color:var(--button-gray-1)}.excalidraw .excalidraw .ToolIcon_type_button:active,.excalidraw .Modal .ToolIcon_type_button:active,.excalidraw .ToolIcon_type_button:active{background-color:var(--button-gray-2)}.excalidraw .excalidraw .ToolIcon_type_button:focus,.excalidraw .Modal .ToolIcon_type_button:focus,.excalidraw .ToolIcon_type_button:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .excalidraw .ToolIcon_type_button.ToolIcon--selected,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected,.excalidraw .ToolIcon_type_button.ToolIcon--selected{background-color:var(--button-gray-2)}.excalidraw .excalidraw .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .ToolIcon_type_button.ToolIcon--selected:active{background-color:var(--button-gray-3)}.excalidraw .excalidraw .ToolIcon_type_button--show,.excalidraw .Modal .ToolIcon_type_button--show,.excalidraw .ToolIcon_type_button--show{visibility:visible}.excalidraw .excalidraw .ToolIcon_type_button--hide,.excalidraw .Modal .ToolIcon_type_button--hide,.excalidraw .ToolIcon_type_button--hide{visibility:hidden}.excalidraw .ToolIcon_type_radio,.excalidraw .ToolIcon_type_checkbox{position:absolute;opacity:0;pointer-events:none}.excalidraw .ToolIcon_type_radio:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_radio:focus+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:focus+.ToolIcon__icon{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .ToolIcon_type_radio:active+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:active+.ToolIcon__icon{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_floating{background-color:transparent}.excalidraw .ToolIcon_type_floating:hover{background-color:transparent}.excalidraw .ToolIcon_type_floating:active{background-color:transparent}.excalidraw .ToolIcon_type_floating:focus{box-shadow:none}.excalidraw .ToolIcon_type_floating .ToolIcon__icon{width:2rem;height:2em}.excalidraw .ToolIcon.ToolIcon__lock.ToolIcon_type_floating{margin-left:.1rem}.excalidraw .ToolIcon__keybinding{position:absolute;bottom:2px;right:3px;font-size:.5em;color:var(--keybinding-color);font-family:var(--ui-font);user-select:none}@media(max-width: 425px){.excalidraw .Shape .ToolIcon__icon{width:2rem;height:2rem}.excalidraw .Shape .ToolIcon__icon svg{height:.8em}}@media(max-width: 760px){.excalidraw .ToolIcon.ToolIcon__lock{display:inline-block;position:absolute;top:60px;right:-8px;margin-left:0;border-radius:20px 0 0 20px;z-index:1;background-color:var(--button-gray-1)}.excalidraw .ToolIcon.ToolIcon__lock:hover{background-color:var(--button-gray-1)}.excalidraw .ToolIcon.ToolIcon__lock:active{background-color:var(--button-gray-2)}.excalidraw .ToolIcon.ToolIcon__lock .ToolIcon__icon{border-radius:inherit}.excalidraw .ToolIcon.ToolIcon__lock svg{position:static}}.excalidraw .TooltipIcon{width:.9em;height:.9em;margin-left:5px;margin-top:1px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .TooltipIcon{display:none}}:root[dir=ltr] .excalidraw .unlocked-icon{left:2px}:root[dir=rtl] .excalidraw .unlocked-icon{right:2px}\",\"\"]);const o=a},1970:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Tooltip{position:relative}.excalidraw .Tooltip__label{--arrow-size: 4px;visibility:hidden;background:#000;color:#fff;text-align:center;border-radius:6px;padding:8px;position:absolute;z-index:10;font-size:13px;line-height:1.5;font-weight:500;left:calc(50% + var(--arrow-size) \/ 2 - 1px);transform:translateX(-50%);word-wrap:break-word}.excalidraw .Tooltip__label::after{content:\"\";border:var(--arrow-size) solid transparent;position:absolute;left:calc(50% - var(--arrow-size))}.excalidraw .Tooltip__label--above{bottom:calc(100% + var(--arrow-size) + 3px)}.excalidraw .Tooltip__label--above::after{border-top-color:#000;top:100%}.excalidraw .Tooltip__label--below{top:calc(100% + var(--arrow-size) + 3px)}.excalidraw .Tooltip__label--below::after{border-bottom-color:#000;bottom:100%}.excalidraw .Tooltip:hover .Tooltip__label{visibility:visible}.excalidraw .Tooltip__label:hover{visibility:visible}',\"\"]);const o=a},961:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .UserList{pointer-events:none;padding:var(--space-factor) 40px var(--space-factor) var(--space-factor);display:flex;flex-wrap:wrap;justify-content:flex-end}.excalidraw .UserList>*{pointer-events:all;margin:0 0 var(--space-factor) var(--space-factor)}.excalidraw .UserList_mobile{padding:0;justify-content:normal}.excalidraw .UserList_mobile>*{margin:0 var(--space-factor) var(--space-factor) 0}\",\"\"]);const o=a},4878:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".visually-hidden{position:absolute !important;height:1px;width:1px;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);white-space:nowrap}.LoadingMessage{position:absolute;top:0;right:0;bottom:0;left:0;z-index:999;display:flex;align-items:center;justify-content:center;pointer-events:none}.LoadingMessage span{background-color:var(--button-gray-1);border-radius:5px;padding:.8em 1.2em;color:var(--popup-text-color);font-size:1.3em}\",\"\"]);const o=a},1988:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}:export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw{--appearance-filter: none;--button-destructive-bg-color: #ffe3e3;--button-destructive-color: #c92a2a;--button-gray-1: #e9ecef;--button-gray-2: #ced4da;--button-gray-3: #adb5bd;--button-special-active-bg-color: #ebfbee;--dialog-border-color: #868e96;--dropdown-icon: url(\\'data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>\\');--focus-highlight-color: #a5d8ff;--icon-fill-color: #000000;--icon-green-fill-color: #2b8a3e;--input-bg-color: #ffffff;--input-border-color: #dee2e6;--input-hover-bg-color: #f1f3f5;--input-label-color: #495057;--island-bg-color: rgba(255, 255, 255, 0.9);--keybinding-color: #adb5bd;--link-color: #1c7ed6;--overlay-bg-color: rgba(255, 255, 255, 0.88);--popup-bg-color: #ffffff;--popup-secondary-bg-color: #f1f3f5;--popup-text-color: #000000;--popup-text-inverted-color: #ffffff;--sab: env(safe-area-inset-bottom);--sal: env(safe-area-inset-left);--sar: env(safe-area-inset-right);--sat: env(safe-area-inset-top);--select-highlight-color: #339af0;--shadow-island: 0 1px 5px rgba(0, 0, 0, 0.15);--space-factor: 0.25rem;--text-primary-color: #343a40}.excalidraw.Appearance_dark{background:#000}.excalidraw.Appearance_dark.Appearance_dark-background-none{background:none}.excalidraw.Appearance_dark{--appearance-filter: invert(93%) hue-rotate(180deg);--button-destructive-bg-color: #5a0000;--button-destructive-color: #ffa8a8;--button-gray-1: #363636;--button-gray-2: #272727;--button-gray-3: #222;--button-special-active-bg-color: #204624;--dialog-border-color: #212529;--dropdown-icon: url(\\'data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path fill=\"%23ced4da\" d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>\\');--focus-highlight-color: #228be6;--icon-fill-color: #ced4da;--icon-green-fill-color: #69db7c;--input-bg-color: #121212;--input-border-color: #2e2e2e;--input-hover-bg-color: #181818;--input-label-color: #e9ecef;--island-bg-color: #1e1e1e;--keybinding-color: #868e96;--overlay-bg-color: rgba(52, 58, 64, 0.12);--popup-bg-color: #2c2c2c;--popup-secondary-bg-color: #222;--popup-text-color: #ced4da;--popup-text-inverted-color: #2c2c2c;--select-highlight-color: #4dabf7;--shadow-island: 0 1px 5px rgba(0, 0, 0, 0.3);--text-primary-color: #ced4da}:root{--zIndex-canvas: 1;--zIndex-wysiwyg: 2;--zIndex-layerUI: 3}.excalidraw{position:relative;overflow:hidden;color:var(--text-primary-color);display:flex;top:0;bottom:0;left:0;right:0}.excalidraw a{font-weight:500;text-decoration:none;color:var(--link-color)}.excalidraw a:hover{text-decoration:underline}.excalidraw canvas{touch-action:none;user-select:none;image-rendering:pixelated;image-rendering:-moz-crisp-edges;z-index:var(--zIndex-canvas)}.excalidraw.Appearance_dark canvas{filter:var(--appearance-filter)}.excalidraw .FixedSideContainer{padding-top:var(--sat, 0);padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0)}.excalidraw .panelRow{display:flex;justify-content:space-between}.excalidraw .panelColumn{display:flex;flex-direction:column}.excalidraw .panelColumn h3,.excalidraw .panelColumn legend,.excalidraw .panelColumn .control-label{margin-top:.333rem;margin-bottom:.333rem;font-size:.75rem;color:var(--text-primary-color);font-weight:bold;display:block}.excalidraw .panelColumn .control-label input{display:block;width:100%}.excalidraw .panelColumn h3:first-child,.excalidraw .panelColumn legend:first-child,.excalidraw .panelColumn .control-label:first-child{margin-top:0}.excalidraw .panelColumn legend{padding:0}.excalidraw .panelColumn .iconSelectList{flex-wrap:wrap;position:relative}.excalidraw .panelColumn .buttonList{flex-wrap:wrap}.excalidraw .panelColumn .buttonList label{margin-right:.25rem;font-size:.75rem;display:inline-block}.excalidraw .panelColumn .buttonList input[type=radio],.excalidraw .panelColumn .buttonList input[type=button]{opacity:0;position:absolute;pointer-events:none}.excalidraw .panelColumn .buttonList .iconRow{margin-top:8px}.excalidraw .panelColumn .buttonList .ToolIcon{margin:0;margin-inline-end:8px}.excalidraw .panelColumn .buttonList .ToolIcon:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .panelColumn .buttonList .ToolIcon:hover{background-color:var(--button-gray-2)}.excalidraw .panelColumn .buttonList .ToolIcon:active{background-color:var(--button-gray-3)}.excalidraw .panelColumn .buttonList .ToolIcon:disabled{cursor:not-allowed}.excalidraw .panelColumn .buttonList .ToolIcon__icon{width:28px;height:28px}.excalidraw .panelColumn fieldset{margin:0;margin-top:.333rem;padding:0;border:none}.excalidraw .divider{width:1px;background-color:#e9ecef;margin:1px}.excalidraw .buttonList label:focus-within,.excalidraw input:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw button,.excalidraw .buttonList label{user-select:none;background-color:var(--button-gray-1);border:0;border-radius:4px;margin:.125rem 0;padding:.25rem;white-space:nowrap;cursor:pointer}.excalidraw button:focus,.excalidraw .buttonList label:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw button:hover,.excalidraw .buttonList label:hover{background-color:var(--button-gray-2)}.excalidraw button:active,.excalidraw .buttonList label:active{background-color:var(--button-gray-3)}.excalidraw button:disabled,.excalidraw .buttonList label:disabled{cursor:not-allowed}.excalidraw .active,.excalidraw .buttonList label.active{background-color:var(--button-gray-2)}.excalidraw .active:hover,.excalidraw .buttonList label.active:hover{background-color:var(--button-gray-2)}.excalidraw .active:active,.excalidraw .buttonList label.active:active{background-color:var(--button-gray-3)}.excalidraw .buttonList.buttonListIcon label{display:inline-flex;justify-content:center;align-items:center}.excalidraw .buttonList.buttonListIcon label svg{width:36px;height:18px;opacity:.6}.excalidraw .buttonList.buttonListIcon label.active svg{opacity:1}.excalidraw .App-top-bar{z-index:var(--zIndex-layerUI);display:flex;flex-direction:column;align-items:center}.excalidraw .App-bottom-bar{position:absolute;top:0;bottom:0;left:0;right:0;--bar-padding: calc(4 * var(--space-factor));padding-top:max(var(--bar-padding), var(--sat,0));padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0);z-index:4;display:flex;align-items:flex-end;pointer-events:none}.excalidraw .App-bottom-bar>.Island{width:100%;max-width:100%;min-width:100%;box-sizing:border-box;max-height:100%;display:flex;flex-direction:column;pointer-events:initial}.excalidraw .App-bottom-bar>.Island .panelColumn{padding:8px 8px 0 8px}.excalidraw .App-toolbar{width:100%;box-sizing:border-box}.excalidraw .App-toolbar-content{display:flex;align-items:center;justify-content:space-between;padding:8px}.excalidraw .App-mobile-menu{width:100%;overflow-x:visible;overflow-y:auto;box-sizing:border-box;margin-bottom:var(--bar-padding)}.excalidraw .App-menu{display:grid;color:var(--icon-fill-color)}.excalidraw .App-menu_top{grid-template-columns:1fr auto 1fr;grid-gap:4px;align-items:flex-start;cursor:default;pointer-events:none !important}.excalidraw .layer-ui__wrapper:not(.disable-pointerEvents) .App-menu_top>*{pointer-events:all}.excalidraw .App-menu_top>*:first-child{justify-self:flex-start}.excalidraw .App-menu_top>*:last-child{justify-self:flex-end}.excalidraw .App-menu_bottom{position:absolute;bottom:0;grid-template-columns:1fr auto 1fr;grid-gap:4px;align-items:flex-start;cursor:default;pointer-events:none !important;z-index:100}:root[dir=ltr] .excalidraw .App-menu_bottom{left:.25rem}:root[dir=rtl] .excalidraw .App-menu_bottom{right:.25rem}.excalidraw .App-menu_bottom--transition-left section{width:185px}.excalidraw .App-menu_bottom section{display:flex}.excalidraw .layer-ui__wrapper:not(.disable-pointerEvents) .App-menu_bottom>*{pointer-events:all}.excalidraw .App-menu_bottom>*:first-child{justify-self:flex-start}.excalidraw .App-menu_bottom>*:last-child{justify-self:flex-end}.excalidraw .App-menu_left{grid-template-rows:1fr auto 1fr;height:100%}.excalidraw .App-menu_right{grid-template-rows:1fr;height:100%}.excalidraw .App-menu__left{overflow-y:auto}.excalidraw .dropdown-select{height:1.5rem;padding:0;padding-inline-start:.5rem;padding-inline-end:1.5rem;color:var(--icon-fill-color);background-color:var(--button-gray-1);border-radius:var(--space-factor);border:1px solid var(--button-gray-2);font-size:.8rem;outline:none;appearance:none;background-image:var(--dropdown-icon);background-repeat:no-repeat;background-position:right .7rem top 50%,0 0;background-size:.65em auto,100%}:root[dir=rtl] .excalidraw .dropdown-select{background-position:left .7rem top 50%,0 0}.excalidraw .dropdown-select:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .dropdown-select:hover{background-color:var(--button-gray-2)}.excalidraw .dropdown-select:active{background-color:var(--button-gray-2)}.excalidraw .dropdown-select.dropdown-select--floating{position:absolute;margin:.5em}.excalidraw .dropdown-select__language.dropdown-select--floating{position:absolute;bottom:10px}:root[dir=ltr] .excalidraw .dropdown-select__language.dropdown-select--floating{right:44px}:root[dir=rtl] .excalidraw .dropdown-select__language.dropdown-select--floating{left:44px}.excalidraw .zIndexButton{margin:0;margin-inline-end:8px;padding:5px;display:inline-flex;align-items:center;justify-content:center}.excalidraw .zIndexButton svg{width:18px;height:18px}.excalidraw .scroll-back-to-content{color:var(--popup-text-color);position:absolute;left:50%;bottom:30px;transform:translateX(-50%);padding:10px 20px}.excalidraw .help-icon{position:absolute;cursor:pointer;fill:#868e96;bottom:14px;width:1.5rem}:root[dir=ltr] .excalidraw .help-icon{right:14px}:root[dir=rtl] .excalidraw .help-icon{left:14px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw aside{display:none}.excalidraw .scroll-back-to-content{bottom:calc(80px + var(--sab, 0));z-index:-1}}:root[dir=rtl] .excalidraw .rtl-mirror{transform:scaleX(-1)}.excalidraw .github-corner{position:absolute;top:0;z-index:2}:root[dir=ltr] .excalidraw .github-corner{right:0}:root[dir=rtl] .excalidraw .github-corner{left:0}.excalidraw .zen-mode-visibility{visibility:visible;opacity:1;height:auto;width:auto;transition:opacity .5s}.excalidraw .zen-mode-visibility.zen-mode-visibility--hidden{visibility:hidden;opacity:0;height:0;width:0;transition:opacity .5s}.excalidraw .disable-pointerEvents{pointer-events:none !important}.excalidraw.excalidraw--view-mode .App-menu{display:flex;justify-content:space-between}@media print{.excalidraw .App-bottom-bar,.excalidraw .FixedSideContainer,.excalidraw .layer-ui__wrapper{display:none}}.ErrorSplash.excalidraw{min-height:100vh;padding:20px 0;overflow:auto;display:flex;align-items:center;justify-content:center;user-select:text}.ErrorSplash.excalidraw .ErrorSplash-messageContainer{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:40px;background-color:#ffe3e3;border:3px solid #c92a2a}.ErrorSplash.excalidraw .ErrorSplash-paragraph{margin:15px 0;max-width:600px}.ErrorSplash.excalidraw .ErrorSplash-paragraph.align-center{text-align:center}.ErrorSplash.excalidraw .bigger,.ErrorSplash.excalidraw .bigger button{font-size:1.1em}.ErrorSplash.excalidraw .smaller,.ErrorSplash.excalidraw .smaller button{font-size:.9em}.ErrorSplash.excalidraw .ErrorSplash-details{display:flex;flex-direction:column;align-items:flex-start}.ErrorSplash.excalidraw .ErrorSplash-details textarea{width:100%;margin:10px 0;font-family:\"Cascadia\";font-size:.8em}',\"\"]);const o=a},3245:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\"\",\"\"]),a.locals={isMobileQuery:\"(max-width: 600px), (max-height: 500px) and (max-width: 1000px)\",appearanceFilter:\"invert(93%) hue-rotate(180deg)\"};const o=a},3645:e=>{\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?\"@media \".concat(t[2],\" {\").concat(n,\"}\"):n})).join(\"\")},t.i=function(e,n,r){\"string\"==typeof e&&(e=[[null,e,\"\"]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&a[c[0]]||(n&&(c[2]?c[2]=\"\".concat(n,\" and \").concat(c[2]):c[2]=n),t.push(c))}},t}},1667:e=>{\"use strict\";e.exports=function(e,t){return t||(t={}),\"string\"!=typeof(e=e&&e.__esModule?e.default:e)?e:(\/^['\"].*['\"]$\/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),\/[\"'() \\t\\n]\/.test(e)||t.needQuotes?'\"'.concat(e.replace(\/\"\/g,'\\\\\"').replace(\/\\n\/g,\"\\\\n\"),'\"'):e)}},9638:(e,t,n)=>{\"use strict\";n.d(t,{Z:()=>r});const r=n.p+\"excalidraw-assets\/Cascadia.woff2\"},7464:(e,t,n)=>{\"use strict\";n.d(t,{Z:()=>r});const r=n.p+\"excalidraw-assets\/Virgil.woff2\"},8288:(e,t,n)=>{\"use strict\";n.d(t,{iC:()=>i,f:()=>l,qx:()=>c,Iw:()=>s,$e:()=>u,wZ:()=>d,ay:()=>p,oc:()=>f,Oh:()=>h,Ks:()=>r,Vi:()=>m,$C:()=>g,ut:()=>v,_D:()=>b,n5:()=>y,rk:()=>w,Hg:()=>x,hs:()=>E,eQ:()=>k,k:()=>S,LO:()=>C,I:()=>O,Gj:()=>M,nM:()=>T,Lg:()=>I,HM:()=>P,V4:()=>A,EH:()=>_,Gi:()=>L});var r,a=n(2189),o=n.n(a),i=\"Excalidraw\",l=10,c=8,s=5,u=1,d=30,p=Math.PI\/12,f={TEXT:\"text\",CROSSHAIR:\"crosshair\",GRABBING:\"grabbing\",POINTER:\"pointer\",MOVE:\"move\",AUTO:\"\"},h={MAIN:0,WHEEL:1,SECONDARY:2,TOUCH:-1};!function(e){e.COPY=\"copy\",e.PASTE=\"paste\",e.CUT=\"cut\",e.KEYDOWN=\"keydown\",e.KEYUP=\"keyup\",e.MOUSE_MOVE=\"mousemove\",e.RESIZE=\"resize\",e.UNLOAD=\"unload\",e.BLUR=\"blur\",e.DRAG_OVER=\"dragover\",e.DROP=\"drop\",e.GESTURE_END=\"gestureend\",e.BEFORE_UNLOAD=\"beforeunload\",e.GESTURE_START=\"gesturestart\",e.GESTURE_CHANGE=\"gesturechange\",e.POINTER_MOVE=\"pointermove\",e.POINTER_UP=\"pointerup\",e.STATE_CHANGE=\"statechange\",e.WHEEL=\"wheel\",e.TOUCH_START=\"touchstart\",e.TOUCH_END=\"touchend\",e.HASHCHANGE=\"hashchange\",e.VISIBILITY_CHANGE=\"visibilitychange\",e.SCROLL=\"scroll\"}(r||(r={}));var m={TEST:\"test\",DEVELOPMENT:\"development\"},g={SHAPE_ACTIONS_MENU:\"App-menu__left\"},v={1:\"Virgil\",2:\"Helvetica\",3:\"Cascadia\"},b=\"Segoe UI Emoji\",y=20,w=1,x=\"left\",E=\"top\",k=\"{version}\",S=20,C={excalidraw:\"application\/vnd.excalidraw+json\",excalidrawlib:\"application\/vnd.excalidrawlib+json\"},O={LOCAL_STORAGE_LIBRARY:\"excalidraw-library\"},M=300,T=500,I=5e3,P=100,A=.1,_={VIEW:\"viewMode\",ZEN:\"zenMode\",GRID:\"gridMode\"},L=o().appearanceFilter},3956:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>sf,defaultLang:()=>g,getElementMap:()=>ei,getSceneVersion:()=>ti,getSyncableElements:()=>Jo,languages:()=>v,restore:()=>Ms,restoreAppState:()=>Os,restoreElements:()=>Cs});var r=n(7154),a=n.n(r),o=n(6479),i=n.n(o),l=n(4698),c=n.n(l),s=n(8288);const u=JSON.parse('{\"u2\":\"@excalidraw\/excalidraw\",\"i8\":\"0.4.3\"}');\"production\"!==s.Vi.TEST&&(n.p=window.EXCALIDRAW_ASSET_PATH||\"https:\/\/unpkg.com\/\".concat(u.u2,\"@\").concat(u.i8,\"\/dist\/\"));var d=n(5374),p=n.n(d),f=n(2829),h=n(2051),m=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},g={code:\"en\",label:\"English\"},v=[{code:\"ar-SA\",label:\"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\",rtl:!0},{code:\"bg-BG\",label:\"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\"},{code:\"ca-ES\",label:\"Catal\u00e0\"},{code:\"de-DE\",label:\"Deutsch\"},{code:\"el-GR\",label:\"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"},{code:\"es-ES\",label:\"Espa\u00f1ol\"},{code:\"fa-IR\",label:\"\u0641\u0627\u0631\u0633\u06cc\",rtl:!0},{code:\"fi-FI\",label:\"Suomi\"},{code:\"fr-FR\",label:\"Fran\u00e7ais\"},{code:\"he-IL\",label:\"\u05e2\u05d1\u05e8\u05d9\u05ea\",rtl:!0},{code:\"hi-IN\",label:\"\u0939\u093f\u0928\u094d\u0926\u0940\"},{code:\"hu-HU\",label:\"Magyar\"},{code:\"id-ID\",label:\"Bahasa Indonesia\"},{code:\"it-IT\",label:\"Italiano\"},{code:\"ja-JP\",label:\"\u65e5\u672c\u8a9e\"},{code:\"kab-KAB\",label:\"Taqbaylit\"},{code:\"ko-KR\",label:\"\ud55c\uad6d\uc5b4\"},{code:\"my-MM\",label:\"Burmese\"},{code:\"nb-NO\",label:\"Norsk bokm\u00e5l\"},{code:\"nl-NL\",label:\"Nederlands\"},{code:\"nn-NO\",label:\"Norsk nynorsk\"},{code:\"oc-FR\",label:\"Occitan\"},{code:\"pa-IN\",label:\"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\"},{code:\"pl-PL\",label:\"Polski\"},{code:\"pt-BR\",label:\"Portugu\u00eas Brasileiro\"},{code:\"pt-PT\",label:\"Portugu\u00eas\"},{code:\"ro-RO\",label:\"Rom\u00e2n\u0103\"},{code:\"ru-RU\",label:\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\"},{code:\"sk-SK\",label:\"Sloven\u010dina\"},{code:\"sv-SE\",label:\"Svenska\"},{code:\"tr-TR\",label:\"T\u00fcrk\u00e7e\"},{code:\"uk-UA\",label:\"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\"},{code:\"zh-CN\",label:\"\u7b80\u4f53\u4e2d\u6587\"},{code:\"zh-TW\",label:\"\u7e41\u9ad4\u4e2d\u6587\"}].concat([g]).sort((function(e,t){return e.label>t.label?1:-1})).filter((function(e){return h[e.code]>=85})),b=\"__test__\";\"production\"===s.Vi.DEVELOPMENT&&v.unshift({code:b,label:\"test language\"},{code:\"\".concat(b,\".rtl\"),label:\"\u202atest language (rtl)\u202c\",rtl:!0});var y,w=g,x={},E=function(){var e=p()((function(e){return m(this,(function(t){switch(t.label){case 0:return w=e,document.documentElement.dir=w.rtl?\"rtl\":\"ltr\",document.documentElement.lang=w.code,e.code.startsWith(b)?(x={},[3,3]):[3,1];case 1:return[4,n(788)(\".\/\".concat(w.code,\".json\"))];case 2:x=t.sent(),t.label=3;case 3:return[2]}}))}));return function(t){return e.apply(this,arguments)}}(),k=function(){return w},S=function(e,t){for(var n=0;n<t.length;++n){var r=t[n];if(void 0===e[r])return;e=e[r]}if(\"string\"==typeof e)return e},C=function(e,t){if(w.code.startsWith(b)){var n=t?\"\".concat(e,\"(\").concat(JSON.stringify(t).slice(1,-1),\")\"):e;return\"\u202a[[\".concat(n,\"]]\u202c\")}var r=e.split(\".\"),a=S(x,r)||S(f,r);if(void 0===a)throw new Error(\"Can't find translation for \".concat(e));if(t)for(var o in t)a=a.replace(\"{{\".concat(o,\"}}\"),t[o]);return a},O=function(){return c().createElement(\"div\",{className:\"LoadingMessage\"},c().createElement(\"span\",null,C(\"labels.loadingScene\")))},M=(y=function(e,t){return(y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function n(){this.constructor=e}y(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),T=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},I=function(e){function t(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r,a=this;return r=a=e.apply(this,t)||this,a.state={isLoading:!0},r}return M(t,e),t.prototype.componentDidMount=function(){var e=this;return p()((function(){var t;return T(this,(function(n){switch(n.label){case 0:return t=v.find((function(t){return t.code===e.props.langCode}))||g,[4,E(t)];case 1:return n.sent(),e.setState({isLoading:!1}),[2]}}))}))()},t.prototype.render=function(){return this.state.isLoading?c().createElement(O,null):this.props.children},t}(c().Component),P=n(566),A=n.n(P);function _(e,t){return Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)}function L(e,t,n){const r=_(t,n);if(0===r)return _(e,t);let a=((e[0]-t[0])*(n[0]-t[0])+(e[1]-t[1])*(n[1]-t[1]))\/r;return a=Math.max(0,Math.min(1,a)),_(e,D(t,n,a))}function D(e,t,n){return[e[0]+(t[0]-e[0])*n,e[1]+(t[1]-e[1])*n]}function j(e,t,n,r){const a=r||[];if(function(e,t){const n=e[t+0],r=e[t+1],a=e[t+2],o=e[t+3];let i=3*r[0]-2*n[0]-o[0];i*=i;let l=3*r[1]-2*n[1]-o[1];l*=l;let c=3*a[0]-2*o[0]-n[0];c*=c;let s=3*a[1]-2*o[1]-n[1];return s*=s,i<c&&(i=c),l<s&&(l=s),i+l}(e,t)<n){const n=e[t+0];if(a.length){(o=a[a.length-1],i=n,Math.sqrt(_(o,i)))>1&&a.push(n)}else a.push(n);a.push(e[t+3])}else{const r=.5,o=e[t+0],i=e[t+1],l=e[t+2],c=e[t+3],s=D(o,i,r),u=D(i,l,r),d=D(l,c,r),p=D(s,u,r),f=D(u,d,r),h=D(p,f,r);j([o,s,p,h],0,n,a),j([h,f,d,c],0,n,a)}var o,i;return a}function z(e,t){return B(e,0,e.length,t)}function B(e,t,n,r,a){const o=a||[],i=e[t],l=e[n-1];let c=0,s=1;for(let r=t+1;r<n-1;++r){const t=L(e[r],i,l);t>c&&(c=t,s=r)}return Math.sqrt(c)>r?(B(e,t,s+1,r,o),B(e,s,n,r,o)):(o.length||o.push(i),o.push(l)),o}function H(e,t=.15,n){const r=[],a=(e.length-1)\/3;for(let n=0;n<a;n++){j(e,3*n,t,r)}return n&&n>0?B(r,0,r.length,n):r}function N(e,t,n){if(e&&e.length){const[r,a]=t,o=Math.PI\/180*n,i=Math.cos(o),l=Math.sin(o);e.forEach((e=>{const[t,n]=e;e[0]=(t-r)*i-(n-a)*l+r,e[1]=(t-r)*l+(n-a)*i+a}))}}function R(e){const t=e[0],n=e[1];return Math.sqrt(Math.pow(t[0]-n[0],2)+Math.pow(t[1]-n[1],2))}function F(e,t,n,r){const a=t[1]-e[1],o=e[0]-t[0],i=a*e[0]+o*e[1],l=r[1]-n[1],c=n[0]-r[0],s=l*n[0]+c*n[1],u=a*c-l*o;return u?[(c*i-o*s)\/u,(a*s-l*i)\/u]:null}function W(e,t,n){const r=e.length;if(r<3)return!1;const a=[Number.MAX_SAFE_INTEGER,n],o=[t,n];let i=0;for(let t=0;t<r;t++){const n=e[t],l=e[(t+1)%r];if(K(n,l,o,a)){if(0===V(n,o,l))return G(n,o,l);i++}}return i%2==1}function G(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])}function V(e,t,n){const r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2}function K(e,t,n,r){const a=V(e,t,n),o=V(e,t,r),i=V(n,r,e),l=V(n,r,t);return a!==o&&i!==l||(!(0!==a||!G(e,n,t))||(!(0!==o||!G(e,r,t))||(!(0!==i||!G(n,e,r))||!(0!==l||!G(n,t,r)))))}function U(e,t){const n=[0,0],r=Math.round(t.hachureAngle+90);r&&N(e,n,r);const a=function(e,t){const n=[...e];n[0].join(\",\")!==n[n.length-1].join(\",\")&&n.push([n[0][0],n[0][1]]);const r=[];if(n&&n.length>2){let e=t.hachureGap;e<0&&(e=4*t.strokeWidth),e=Math.max(e,.1);const a=[];for(let e=0;e<n.length-1;e++){const t=n[e],r=n[e+1];if(t[1]!==r[1]){const e=Math.min(t[1],r[1]);a.push({ymin:e,ymax:Math.max(t[1],r[1]),x:e===t[1]?t[0]:r[0],islope:(r[0]-t[0])\/(r[1]-t[1])})}}if(a.sort(((e,t)=>e.ymin<t.ymin?-1:e.ymin>t.ymin?1:e.x<t.x?-1:e.x>t.x?1:e.ymax===t.ymax?0:(e.ymax-t.ymax)\/Math.abs(e.ymax-t.ymax))),!a.length)return r;let o=[],i=a[0].ymin;for(;o.length||a.length;){if(a.length){let e=-1;for(let t=0;t<a.length&&!(a[t].ymin>i);t++)e=t;a.splice(0,e+1).forEach((e=>{o.push({s:i,edge:e})}))}if(o=o.filter((e=>!(e.edge.ymax<=i))),o.sort(((e,t)=>e.edge.x===t.edge.x?0:(e.edge.x-t.edge.x)\/Math.abs(e.edge.x-t.edge.x))),o.length>1)for(let e=0;e<o.length;e+=2){const t=e+1;if(t>=o.length)break;const n=o[e].edge,a=o[t].edge;r.push([[Math.round(n.x),i],[Math.round(a.x),i]])}i+=e,o.forEach((t=>{t.edge.x=t.edge.x+e*t.edge.islope}))}}return r}(e,t);return r&&(N(e,n,-r),function(e,t,n){const r=[];e.forEach((e=>r.push(...e))),N(r,t,n)}(a,n,-r)),a}class Y{constructor(e){this.helper=e}fillPolygon(e,t){return this._fillPolygon(e,t)}_fillPolygon(e,t,n=!1){let r=U(e,t);if(n){const t=this.connectingLines(e,r);r=r.concat(t)}return{type:\"fillSketch\",ops:this.renderLines(r,t)}}renderLines(e,t){const n=[];for(const r of e)n.push(...this.helper.doubleLineOps(r[0][0],r[0][1],r[1][0],r[1][1],t));return n}connectingLines(e,t){const n=[];if(t.length>1)for(let r=1;r<t.length;r++){const a=t[r-1];if(R(a)<3)continue;const o=[t[r][0],a[1]];if(R(o)>3){const t=this.splitOnIntersections(e,o);n.push(...t)}}return n}midPointInPolygon(e,t){return W(e,(t[0][0]+t[1][0])\/2,(t[0][1]+t[1][1])\/2)}splitOnIntersections(e,t){const n=Math.max(5,.1*R(t)),r=[];for(let a=0;a<e.length;a++){const o=e[a],i=e[(a+1)%e.length];if(K(o,i,...t)){const e=F(o,i,t[0],t[1]);if(e){const a=R([e,t[0]]),o=R([e,t[1]]);a>n&&o>n&&r.push({point:e,distance:a})}}}if(r.length>1){const n=r.sort(((e,t)=>e.distance-t.distance)).map((e=>e.point));if(W(e,...t[0])||n.shift(),W(e,...t[1])||n.pop(),n.length<=1)return this.midPointInPolygon(e,t)?[t]:[];const a=[t[0],...n,t[1]],o=[];for(let t=0;t<a.length-1;t+=2){const n=[a[t],a[t+1]];this.midPointInPolygon(e,n)&&o.push(n)}return o}return this.midPointInPolygon(e,t)?[t]:[]}}class X extends Y{fillPolygon(e,t){return this._fillPolygon(e,t,!0)}}class Z extends Y{fillPolygon(e,t){const n=this._fillPolygon(e,t),r=Object.assign({},t,{hachureAngle:t.hachureAngle+90}),a=this._fillPolygon(e,r);return n.ops=n.ops.concat(a.ops),n}}class q{constructor(e){this.helper=e}fillPolygon(e,t){const n=U(e,t=Object.assign({},t,{curveStepCount:4,hachureAngle:0,roughness:1}));return this.dotsOnLines(n,t)}dotsOnLines(e,t){const n=[];let r=t.hachureGap;r<0&&(r=4*t.strokeWidth),r=Math.max(r,.1);let a=t.fillWeight;a<0&&(a=t.strokeWidth\/2);const o=r\/4;for(const i of e){const e=R(i),l=e\/r,c=Math.ceil(l)-1,s=e-c*r,u=(i[0][0]+i[1][0])\/2-r\/4,d=Math.min(i[0][1],i[1][1]);for(let e=0;e<c;e++){const i=d+s+e*r,l=this.helper.randOffsetWithRange(u-o,u+o,t),c=this.helper.randOffsetWithRange(i-o,i+o,t),p=this.helper.ellipse(l,c,a,a,t);n.push(...p.ops)}}return{type:\"fillSketch\",ops:n}}}class Q{constructor(e){this.helper=e}fillPolygon(e,t){const n=U(e,t);return{type:\"fillSketch\",ops:this.dashedLine(n,t)}}dashedLine(e,t){const n=t.dashOffset<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashOffset,r=t.dashGap<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashGap,a=[];return e.forEach((e=>{const o=R(e),i=Math.floor(o\/(n+r)),l=(o+r-i*(n+r))\/2;let c=e[0],s=e[1];c[0]>s[0]&&(c=e[1],s=e[0]);const u=Math.atan((s[1]-c[1])\/(s[0]-c[0]));for(let e=0;e<i;e++){const o=e*(n+r),i=o+n,s=[c[0]+o*Math.cos(u)+l*Math.cos(u),c[1]+o*Math.sin(u)+l*Math.sin(u)],d=[c[0]+i*Math.cos(u)+l*Math.cos(u),c[1]+i*Math.sin(u)+l*Math.sin(u)];a.push(...this.helper.doubleLineOps(s[0],s[1],d[0],d[1],t))}})),a}}class ${constructor(e){this.helper=e}fillPolygon(e,t){const n=t.hachureGap<0?4*t.strokeWidth:t.hachureGap,r=t.zigzagOffset<0?n:t.zigzagOffset,a=U(e,t=Object.assign({},t,{hachureGap:n+r}));return{type:\"fillSketch\",ops:this.zigzagLines(a,r,t)}}zigzagLines(e,t,n){const r=[];return e.forEach((e=>{const a=R(e),o=Math.round(a\/(2*t));let i=e[0],l=e[1];i[0]>l[0]&&(i=e[1],l=e[0]);const c=Math.atan((l[1]-i[1])\/(l[0]-i[0]));for(let e=0;e<o;e++){const a=2*e*t,o=2*(e+1)*t,l=Math.sqrt(2*Math.pow(t,2)),s=[i[0]+a*Math.cos(c),i[1]+a*Math.sin(c)],u=[i[0]+o*Math.cos(c),i[1]+o*Math.sin(c)],d=[s[0]+l*Math.cos(c+Math.PI\/4),s[1]+l*Math.sin(c+Math.PI\/4)];r.push(...this.helper.doubleLineOps(s[0],s[1],d[0],d[1],n),...this.helper.doubleLineOps(d[0],d[1],u[0],u[1],n))}})),r}}const J={};class ee{constructor(e){this.seed=e}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))\/2**31:Math.random()}}const te={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function ne(e,t){return e.type===t}function re(e){const t=[],n=function(e){const t=new Array;for(;\"\"!==e;)if(e.match(\/^([ \\t\\r\\n,]+)\/))e=e.substr(RegExp.$1.length);else if(e.match(\/^([aAcChHlLmMqQsStTvVzZ])\/))t[t.length]={type:0,text:RegExp.$1},e=e.substr(RegExp.$1.length);else{if(!e.match(\/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)\/))return[];t[t.length]={type:1,text:`${parseFloat(RegExp.$1)}`},e=e.substr(RegExp.$1.length)}return t[t.length]={type:2,text:\"\"},t}(e);let r=\"BOD\",a=0,o=n[a];for(;!ne(o,2);){let i=0;const l=[];if(\"BOD\"===r){if(\"M\"!==o.text&&\"m\"!==o.text)return re(\"M0,0\"+e);a++,i=te[o.text],r=o.text}else ne(o,1)?i=te[r]:(a++,i=te[o.text],r=o.text);if(!(a+i<n.length))throw new Error(\"Path data ended short\");for(let e=a;e<a+i;e++){const t=n[e];if(!ne(t,1))throw new Error(\"Param not a number: \"+r+\",\"+t.text);l[l.length]=+t.text}if(\"number\"!=typeof te[r])throw new Error(\"Bad segment: \"+r);{const e={key:r,data:l};t.push(e),a+=i,o=n[a],\"M\"===r&&(r=\"L\"),\"m\"===r&&(r=\"l\")}}return t}function ae(e){let t=0,n=0,r=0,a=0;const o=[];for(const{key:i,data:l}of e)switch(i){case\"M\":o.push({key:\"M\",data:[...l]}),[t,n]=l,[r,a]=l;break;case\"m\":t+=l[0],n+=l[1],o.push({key:\"M\",data:[t,n]}),r=t,a=n;break;case\"L\":o.push({key:\"L\",data:[...l]}),[t,n]=l;break;case\"l\":t+=l[0],n+=l[1],o.push({key:\"L\",data:[t,n]});break;case\"C\":o.push({key:\"C\",data:[...l]}),t=l[4],n=l[5];break;case\"c\":{const e=l.map(((e,r)=>r%2?e+n:e+t));o.push({key:\"C\",data:e}),t=e[4],n=e[5];break}case\"Q\":o.push({key:\"Q\",data:[...l]}),t=l[2],n=l[3];break;case\"q\":{const e=l.map(((e,r)=>r%2?e+n:e+t));o.push({key:\"Q\",data:e}),t=e[2],n=e[3];break}case\"A\":o.push({key:\"A\",data:[...l]}),t=l[5],n=l[6];break;case\"a\":t+=l[5],n+=l[6],o.push({key:\"A\",data:[l[0],l[1],l[2],l[3],l[4],t,n]});break;case\"H\":o.push({key:\"H\",data:[...l]}),t=l[0];break;case\"h\":t+=l[0],o.push({key:\"H\",data:[t]});break;case\"V\":o.push({key:\"V\",data:[...l]}),n=l[0];break;case\"v\":n+=l[0],o.push({key:\"V\",data:[n]});break;case\"S\":o.push({key:\"S\",data:[...l]}),t=l[2],n=l[3];break;case\"s\":{const e=l.map(((e,r)=>r%2?e+n:e+t));o.push({key:\"S\",data:e}),t=e[2],n=e[3];break}case\"T\":o.push({key:\"T\",data:[...l]}),t=l[0],n=l[1];break;case\"t\":t+=l[0],n+=l[1],o.push({key:\"T\",data:[t,n]});break;case\"Z\":case\"z\":o.push({key:\"Z\",data:[]}),t=r,n=a}return o}function oe(e){const t=[];let n=\"\",r=0,a=0,o=0,i=0,l=0,c=0;for(const{key:s,data:u}of e){switch(s){case\"M\":t.push({key:\"M\",data:[...u]}),[r,a]=u,[o,i]=u;break;case\"C\":t.push({key:\"C\",data:[...u]}),r=u[4],a=u[5],l=u[2],c=u[3];break;case\"L\":t.push({key:\"L\",data:[...u]}),[r,a]=u;break;case\"H\":r=u[0],t.push({key:\"L\",data:[r,a]});break;case\"V\":a=u[0],t.push({key:\"L\",data:[r,a]});break;case\"S\":{let e=0,o=0;\"C\"===n||\"S\"===n?(e=r+(r-l),o=a+(a-c)):(e=r,o=a),t.push({key:\"C\",data:[e,o,...u]}),l=u[0],c=u[1],r=u[2],a=u[3];break}case\"T\":{const[e,o]=u;let i=0,s=0;\"Q\"===n||\"T\"===n?(i=r+(r-l),s=a+(a-c)):(i=r,s=a);const d=r+2*(i-r)\/3,p=a+2*(s-a)\/3,f=e+2*(i-e)\/3,h=o+2*(s-o)\/3;t.push({key:\"C\",data:[d,p,f,h,e,o]}),l=i,c=s,r=e,a=o;break}case\"Q\":{const[e,n,o,i]=u,s=r+2*(e-r)\/3,d=a+2*(n-a)\/3,p=o+2*(e-o)\/3,f=i+2*(n-i)\/3;t.push({key:\"C\",data:[s,d,p,f,o,i]}),l=e,c=n,r=o,a=i;break}case\"A\":{const e=Math.abs(u[0]),n=Math.abs(u[1]),o=u[2],i=u[3],l=u[4],c=u[5],s=u[6];if(0===e||0===n)t.push({key:\"C\",data:[r,a,c,s,c,s]}),r=c,a=s;else if(r!==c||a!==s){le(r,a,c,s,e,n,o,i,l).forEach((function(e){t.push({key:\"C\",data:e})})),r=c,a=s}break}case\"Z\":t.push({key:\"Z\",data:[]}),r=o,a=i}n=s}return t}function ie(e,t,n){return[e*Math.cos(n)-t*Math.sin(n),e*Math.sin(n)+t*Math.cos(n)]}function le(e,t,n,r,a,o,i,l,c,s){const u=(d=i,Math.PI*d\/180);var d;let p=[],f=0,h=0,m=0,g=0;if(s)[f,h,m,g]=s;else{[e,t]=ie(e,t,-u),[n,r]=ie(n,r,-u);const i=(e-n)\/2,s=(t-r)\/2;let d=i*i\/(a*a)+s*s\/(o*o);d>1&&(d=Math.sqrt(d),a*=d,o*=d);const p=a*a,v=o*o,b=p*v-p*s*s-v*i*i,y=p*s*s+v*i*i,w=(l===c?-1:1)*Math.sqrt(Math.abs(b\/y));m=w*a*s\/o+(e+n)\/2,g=w*-o*i\/a+(t+r)\/2,f=Math.asin(parseFloat(((t-g)\/o).toFixed(9))),h=Math.asin(parseFloat(((r-g)\/o).toFixed(9))),e<m&&(f=Math.PI-f),n<m&&(h=Math.PI-h),f<0&&(f=2*Math.PI+f),h<0&&(h=2*Math.PI+h),c&&f>h&&(f-=2*Math.PI),!c&&h>f&&(h-=2*Math.PI)}let v=h-f;if(Math.abs(v)>120*Math.PI\/180){const e=h,t=n,l=r;h=c&&h>f?f+120*Math.PI\/180*1:f+120*Math.PI\/180*-1,p=le(n=m+a*Math.cos(h),r=g+o*Math.sin(h),t,l,a,o,i,0,c,[h,e,m,g])}v=h-f;const b=Math.cos(f),y=Math.sin(f),w=Math.cos(h),x=Math.sin(h),E=Math.tan(v\/4),k=4\/3*a*E,S=4\/3*o*E,C=[e,t],O=[e+k*y,t-S*b],M=[n+k*x,r-S*w],T=[n,r];if(O[0]=2*C[0]-O[0],O[1]=2*C[1]-O[1],s)return[O,M,T].concat(p);{p=[O,M,T].concat(p);const e=[];for(let t=0;t<p.length;t+=3){const n=ie(p[t][0],p[t][1],u),r=ie(p[t+1][0],p[t+1][1],u),a=ie(p[t+2][0],p[t+2][1],u);e.push([n[0],n[1],r[0],r[1],a[0],a[1]])}return e}}const ce={randOffset:function(e,t){return we(e,t)},randOffsetWithRange:function(e,t,n){return ye(e,t,n)},ellipse:function(e,t,n,r,a){const o=fe(n,r,a);return he(e,t,a,o).opset},doubleLineOps:function(e,t,n,r,a){return xe(e,t,n,r,a,!0)}};function se(e,t,n,r,a){return{type:\"path\",ops:xe(e,t,n,r,a)}}function ue(e,t,n){const r=(e||[]).length;if(r>2){const a=[];for(let t=0;t<r-1;t++)a.push(...xe(e[t][0],e[t][1],e[t+1][0],e[t+1][1],n));return t&&a.push(...xe(e[r-1][0],e[r-1][1],e[0][0],e[0][1],n)),{type:\"path\",ops:a}}return 2===r?se(e[0][0],e[0][1],e[1][0],e[1][1],n):{type:\"path\",ops:[]}}function de(e,t,n,r,a){return function(e,t){return ue(e,!0,t)}([[e,t],[e+n,t],[e+n,t+r],[e,t+r]],a)}function pe(e,t){let n=ke(e,1*(1+.2*t.roughness),t);if(!t.disableMultiStroke){const r=ke(e,1.5*(1+.22*t.roughness),function(e){const t=Object.assign({},e);t.randomizer=void 0,e.seed&&(t.seed=e.seed+1);return t}(t));n=n.concat(r)}return{type:\"path\",ops:n}}function fe(e,t,n){const r=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(e\/2,2)+Math.pow(t\/2,2))\/2)),a=Math.max(n.curveStepCount,n.curveStepCount\/Math.sqrt(200)*r),o=2*Math.PI\/a;let i=Math.abs(e\/2),l=Math.abs(t\/2);const c=1-n.curveFitting;return i+=we(i*c,n),l+=we(l*c,n),{increment:o,rx:i,ry:l}}function he(e,t,n,r){const[a,o]=Ce(r.increment,e,t,r.rx,r.ry,1,r.increment*ye(.1,ye(.4,1,n),n),n);let i=Se(a,null,n);if(!n.disableMultiStroke){const[a]=Ce(r.increment,e,t,r.rx,r.ry,1.5,0,n),o=Se(a,null,n);i=i.concat(o)}return{estimatedPoints:o,opset:{type:\"path\",ops:i}}}function me(e,t,n,r,a,o,i,l,c){const s=e,u=t;let d=Math.abs(n\/2),p=Math.abs(r\/2);d+=we(.01*d,c),p+=we(.01*p,c);let f=a,h=o;for(;f<0;)f+=2*Math.PI,h+=2*Math.PI;h-f>2*Math.PI&&(f=0,h=2*Math.PI);const m=2*Math.PI\/c.curveStepCount,g=Math.min(m\/2,(h-f)\/2),v=Oe(g,s,u,d,p,f,h,1,c);if(!c.disableMultiStroke){const e=Oe(g,s,u,d,p,f,h,1.5,c);v.push(...e)}return i&&(l?v.push(...xe(s,u,s+d*Math.cos(f),u+p*Math.sin(f),c),...xe(s,u,s+d*Math.cos(h),u+p*Math.sin(h),c)):v.push({op:\"lineTo\",data:[s,u]},{op:\"lineTo\",data:[s+d*Math.cos(f),u+p*Math.sin(f)]})),{type:\"path\",ops:v}}function ge(e,t){const n=[];if(e.length){const r=t.maxRandomnessOffset||0,a=e.length;if(a>2){n.push({op:\"move\",data:[e[0][0]+we(r,t),e[0][1]+we(r,t)]});for(let o=1;o<a;o++)n.push({op:\"lineTo\",data:[e[o][0]+we(r,t),e[o][1]+we(r,t)]})}}return{type:\"fillPath\",ops:n}}function ve(e,t){return function(e,t){let n=e.fillStyle||\"hachure\";if(!J[n])switch(n){case\"zigzag\":J[n]||(J[n]=new X(t));break;case\"cross-hatch\":J[n]||(J[n]=new Z(t));break;case\"dots\":J[n]||(J[n]=new q(t));break;case\"dashed\":J[n]||(J[n]=new Q(t));break;case\"zigzag-line\":J[n]||(J[n]=new $(t));break;case\"hachure\":default:n=\"hachure\",J[n]||(J[n]=new Y(t))}return J[n]}(t,ce).fillPolygon(e,t)}function be(e){return e.randomizer||(e.randomizer=new ee(e.seed||0)),e.randomizer.next()}function ye(e,t,n,r=1){return n.roughness*r*(be(n)*(t-e)+e)}function we(e,t,n=1){return ye(-e,e,t,n)}function xe(e,t,n,r,a,o=!1){const i=o?a.disableMultiStrokeFill:a.disableMultiStroke,l=Ee(e,t,n,r,a,!0,!1);if(i)return l;const c=Ee(e,t,n,r,a,!0,!0);return l.concat(c)}function Ee(e,t,n,r,a,o,i){const l=Math.pow(e-n,2)+Math.pow(t-r,2),c=Math.sqrt(l);let s=1;s=c<200?1:c>500?.4:-.0016668*c+1.233334;let u=a.maxRandomnessOffset||0;u*u*100>l&&(u=c\/10);const d=u\/2,p=.2+.2*be(a);let f=a.bowing*a.maxRandomnessOffset*(r-t)\/200,h=a.bowing*a.maxRandomnessOffset*(e-n)\/200;f=we(f,a,s),h=we(h,a,s);const m=[],g=()=>we(d,a,s),v=()=>we(u,a,s);return o&&(i?m.push({op:\"move\",data:[e+g(),t+g()]}):m.push({op:\"move\",data:[e+we(u,a,s),t+we(u,a,s)]})),i?m.push({op:\"bcurveTo\",data:[f+e+(n-e)*p+g(),h+t+(r-t)*p+g(),f+e+2*(n-e)*p+g(),h+t+2*(r-t)*p+g(),n+g(),r+g()]}):m.push({op:\"bcurveTo\",data:[f+e+(n-e)*p+v(),h+t+(r-t)*p+v(),f+e+2*(n-e)*p+v(),h+t+2*(r-t)*p+v(),n+v(),r+v()]}),m}function ke(e,t,n){const r=[];r.push([e[0][0]+we(t,n),e[0][1]+we(t,n)]),r.push([e[0][0]+we(t,n),e[0][1]+we(t,n)]);for(let a=1;a<e.length;a++)r.push([e[a][0]+we(t,n),e[a][1]+we(t,n)]),a===e.length-1&&r.push([e[a][0]+we(t,n),e[a][1]+we(t,n)]);return Se(r,null,n)}function Se(e,t,n){const r=e.length,a=[];if(r>3){const o=[],i=1-n.curveTightness;a.push({op:\"move\",data:[e[1][0],e[1][1]]});for(let t=1;t+2<r;t++){const n=e[t];o[0]=[n[0],n[1]],o[1]=[n[0]+(i*e[t+1][0]-i*e[t-1][0])\/6,n[1]+(i*e[t+1][1]-i*e[t-1][1])\/6],o[2]=[e[t+1][0]+(i*e[t][0]-i*e[t+2][0])\/6,e[t+1][1]+(i*e[t][1]-i*e[t+2][1])\/6],o[3]=[e[t+1][0],e[t+1][1]],a.push({op:\"bcurveTo\",data:[o[1][0],o[1][1],o[2][0],o[2][1],o[3][0],o[3][1]]})}if(t&&2===t.length){const e=n.maxRandomnessOffset;a.push({op:\"lineTo\",data:[t[0]+we(e,n),t[1]+we(e,n)]})}}else 3===r?(a.push({op:\"move\",data:[e[1][0],e[1][1]]}),a.push({op:\"bcurveTo\",data:[e[1][0],e[1][1],e[2][0],e[2][1],e[2][0],e[2][1]]})):2===r&&a.push(...xe(e[0][0],e[0][1],e[1][0],e[1][1],n));return a}function Ce(e,t,n,r,a,o,i,l){const c=[],s=[],u=we(.5,l)-Math.PI\/2;s.push([we(o,l)+t+.9*r*Math.cos(u-e),we(o,l)+n+.9*a*Math.sin(u-e)]);for(let i=u;i<2*Math.PI+u-.01;i+=e){const e=[we(o,l)+t+r*Math.cos(i),we(o,l)+n+a*Math.sin(i)];c.push(e),s.push(e)}return s.push([we(o,l)+t+r*Math.cos(u+2*Math.PI+.5*i),we(o,l)+n+a*Math.sin(u+2*Math.PI+.5*i)]),s.push([we(o,l)+t+.98*r*Math.cos(u+i),we(o,l)+n+.98*a*Math.sin(u+i)]),s.push([we(o,l)+t+.9*r*Math.cos(u+.5*i),we(o,l)+n+.9*a*Math.sin(u+.5*i)]),[s,c]}function Oe(e,t,n,r,a,o,i,l,c){const s=o+we(.1,c),u=[];u.push([we(l,c)+t+.9*r*Math.cos(s-e),we(l,c)+n+.9*a*Math.sin(s-e)]);for(let o=s;o<=i;o+=e)u.push([we(l,c)+t+r*Math.cos(o),we(l,c)+n+a*Math.sin(o)]);return u.push([t+r*Math.cos(i),n+a*Math.sin(i)]),u.push([t+r*Math.cos(i),n+a*Math.sin(i)]),Se(u,null,c)}function Me(e,t,n,r,a,o,i,l){const c=[],s=[l.maxRandomnessOffset||1,(l.maxRandomnessOffset||1)+.3];let u=[0,0];const d=l.disableMultiStroke?1:2;for(let p=0;p<d;p++)0===p?c.push({op:\"move\",data:[i[0],i[1]]}):c.push({op:\"move\",data:[i[0]+we(s[0],l),i[1]+we(s[0],l)]}),u=[a+we(s[p],l),o+we(s[p],l)],c.push({op:\"bcurveTo\",data:[e+we(s[p],l),t+we(s[p],l),n+we(s[p],l),r+we(s[p],l),u[0],u[1]]});return c}function Te(e){return[...e]}const Ie=\"none\";class Pe{constructor(e){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:\"#000\",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:\"hachure\",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,combineNestedSvgPaths:!1,disableMultiStroke:!1,disableMultiStrokeFill:!1},this.config=e||{},this.config.options&&(this.defaultOptions=this._o(this.config.options))}static newSeed(){return Math.floor(Math.random()*2**31)}_o(e){return e?Object.assign({},this.defaultOptions,e):this.defaultOptions}_d(e,t,n){return{shape:e,sets:t||[],options:n||this.defaultOptions}}line(e,t,n,r,a){const o=this._o(a);return this._d(\"line\",[se(e,t,n,r,o)],o)}rectangle(e,t,n,r,a){const o=this._o(a),i=[],l=de(e,t,n,r,o);if(o.fill){const a=[[e,t],[e+n,t],[e+n,t+r],[e,t+r]];\"solid\"===o.fillStyle?i.push(ge(a,o)):i.push(ve(a,o))}return o.stroke!==Ie&&i.push(l),this._d(\"rectangle\",i,o)}ellipse(e,t,n,r,a){const o=this._o(a),i=[],l=fe(n,r,o),c=he(e,t,o,l);if(o.fill)if(\"solid\"===o.fillStyle){const n=he(e,t,o,l).opset;n.type=\"fillPath\",i.push(n)}else i.push(ve(c.estimatedPoints,o));return o.stroke!==Ie&&i.push(c.opset),this._d(\"ellipse\",i,o)}circle(e,t,n,r){const a=this.ellipse(e,t,n,n,r);return a.shape=\"circle\",a}linearPath(e,t){const n=this._o(t);return this._d(\"linearPath\",[ue(e,!1,n)],n)}arc(e,t,n,r,a,o,i=!1,l){const c=this._o(l),s=[],u=me(e,t,n,r,a,o,i,!0,c);if(i&&c.fill)if(\"solid\"===c.fillStyle){const i=me(e,t,n,r,a,o,!0,!1,c);i.type=\"fillPath\",s.push(i)}else s.push(function(e,t,n,r,a,o,i){const l=e,c=t;let s=Math.abs(n\/2),u=Math.abs(r\/2);s+=we(.01*s,i),u+=we(.01*u,i);let d=a,p=o;for(;d<0;)d+=2*Math.PI,p+=2*Math.PI;p-d>2*Math.PI&&(d=0,p=2*Math.PI);const f=(p-d)\/i.curveStepCount,h=[];for(let e=d;e<=p;e+=f)h.push([l+s*Math.cos(e),c+u*Math.sin(e)]);return h.push([l+s*Math.cos(p),c+u*Math.sin(p)]),h.push([l,c]),ve(h,i)}(e,t,n,r,a,o,c));return c.stroke!==Ie&&s.push(u),this._d(\"arc\",s,c)}curve(e,t){const n=this._o(t),r=[],a=pe(e,n);if(n.fill&&n.fill!==Ie&&e.length>=3){const t=H(function(e,t=0){const n=e.length;if(n<3)throw new Error(\"A curve must have at least three points.\");const r=[];if(3===n)r.push(Te(e[0]),Te(e[1]),Te(e[2]),Te(e[2]));else{const n=[];n.push(e[0],e[0]);for(let t=1;t<e.length;t++)n.push(e[t]),t===e.length-1&&n.push(e[t]);const a=[],o=1-t;r.push(Te(n[0]));for(let e=1;e+2<n.length;e++){const t=n[e];a[0]=[t[0],t[1]],a[1]=[t[0]+(o*n[e+1][0]-o*n[e-1][0])\/6,t[1]+(o*n[e+1][1]-o*n[e-1][1])\/6],a[2]=[n[e+1][0]+(o*n[e][0]-o*n[e+2][0])\/6,n[e+1][1]+(o*n[e][1]-o*n[e+2][1])\/6],a[3]=[n[e+1][0],n[e+1][1]],r.push(a[1],a[2],a[3])}}return r}(e),10,(1+n.roughness)\/2);\"solid\"===n.fillStyle?r.push(ge(t,n)):r.push(ve(t,n))}return n.stroke!==Ie&&r.push(a),this._d(\"curve\",r,n)}polygon(e,t){const n=this._o(t),r=[],a=ue(e,!0,n);return n.fill&&(\"solid\"===n.fillStyle?r.push(ge(e,n)):r.push(ve(e,n))),n.stroke!==Ie&&r.push(a),this._d(\"polygon\",r,n)}path(e,t){const n=this._o(t),r=[];if(!e)return this._d(\"path\",r,n);e=(e||\"\").replace(\/\\n\/g,\" \").replace(\/(-\\s)\/g,\"-\").replace(\"\/(ss)\/g\",\" \");const a=n.fill&&\"transparent\"!==n.fill&&n.fill!==Ie,o=n.stroke!==Ie,i=!!(n.simplification&&n.simplification<1),l=function(e,t,n){const r=oe(ae(re(e))),a=[];let o=[],i=[0,0],l=[];const c=()=>{l.length>=4&&o.push(...H(l,t)),l=[]},s=()=>{c(),o.length&&(a.push(o),o=[])};for(const{key:e,data:t}of r)switch(e){case\"M\":s(),i=[t[0],t[1]],o.push(i);break;case\"L\":c(),o.push([t[0],t[1]]);break;case\"C\":if(!l.length){const e=o.length?o[o.length-1]:i;l.push([e[0],e[1]])}l.push([t[0],t[1]]),l.push([t[2],t[3]]),l.push([t[4],t[5]]);break;case\"Z\":c(),o.push([i[0],i[1]])}if(s(),!n)return a;const u=[];for(const e of a){const t=z(e,n);t.length&&u.push(t)}return u}(e,1,i?4-4*n.simplification:(1+n.roughness)\/2);if(a)if(n.combineNestedSvgPaths){const e=[];l.forEach((t=>e.push(...t))),\"solid\"===n.fillStyle?r.push(ge(e,n)):r.push(ve(e,n))}else l.forEach((e=>{\"solid\"===n.fillStyle?r.push(ge(e,n)):r.push(ve(e,n))}));return o&&(i?l.forEach((e=>{r.push(ue(e,!1,n))})):r.push(function(e,t){const n=oe(ae(re(e))),r=[];let a=[0,0],o=[0,0];for(const{key:e,data:i}of n)switch(e){case\"M\":{const e=1*(t.maxRandomnessOffset||0);r.push({op:\"move\",data:i.map((n=>n+we(e,t)))}),o=[i[0],i[1]],a=[i[0],i[1]];break}case\"L\":r.push(...xe(o[0],o[1],i[0],i[1],t)),o=[i[0],i[1]];break;case\"C\":{const[e,n,a,l,c,s]=i;r.push(...Me(e,n,a,l,c,s,o,t)),o=[c,s];break}case\"Z\":r.push(...xe(o[0],o[1],a[0],a[1],t)),o=[a[0],a[1]]}return{type:\"path\",ops:r}}(e,n))),this._d(\"path\",r,n)}opsToPath(e){let t=\"\";for(const n of e.ops){const e=n.data;switch(n.op){case\"move\":t+=`M${e[0]} ${e[1]} `;break;case\"bcurveTo\":t+=`C${e[0]} ${e[1]}, ${e[2]} ${e[3]}, ${e[4]} ${e[5]} `;break;case\"lineTo\":t+=`L${e[0]} ${e[1]} `}}return t.trim()}toPaths(e){const t=e.sets||[],n=e.options||this.defaultOptions,r=[];for(const e of t){let t=null;switch(e.type){case\"path\":t={d:this.opsToPath(e),stroke:n.stroke,strokeWidth:n.strokeWidth,fill:Ie};break;case\"fillPath\":t={d:this.opsToPath(e),stroke:Ie,strokeWidth:0,fill:n.fill||Ie};break;case\"fillSketch\":t=this.fillSketch(e,n)}t&&r.push(t)}return r}fillSketch(e,t){let n=t.fillWeight;return n<0&&(n=t.strokeWidth\/2),{d:this.opsToPath(e),stroke:t.fill||Ie,strokeWidth:n,fill:Ie}}}class Ae{constructor(e,t){this.canvas=e,this.ctx=this.canvas.getContext(\"2d\"),this.gen=new Pe(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.ctx;for(const a of t)switch(a.type){case\"path\":r.save(),r.strokeStyle=\"none\"===n.stroke?\"transparent\":n.stroke,r.lineWidth=n.strokeWidth,n.strokeLineDash&&r.setLineDash(n.strokeLineDash),n.strokeLineDashOffset&&(r.lineDashOffset=n.strokeLineDashOffset),this._drawToContext(r,a),r.restore();break;case\"fillPath\":r.save(),r.fillStyle=n.fill||\"\";const t=\"curve\"===e.shape||\"polygon\"===e.shape?\"evenodd\":\"nonzero\";this._drawToContext(r,a,t),r.restore();break;case\"fillSketch\":this.fillSketch(r,a,n)}}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2),e.save(),n.fillLineDash&&e.setLineDash(n.fillLineDash),n.fillLineDashOffset&&(e.lineDashOffset=n.fillLineDashOffset),e.strokeStyle=n.fill||\"\",e.lineWidth=r,this._drawToContext(e,t),e.restore()}_drawToContext(e,t,n=\"nonzero\"){e.beginPath();for(const n of t.ops){const t=n.data;switch(n.op){case\"move\":e.moveTo(t[0],t[1]);break;case\"bcurveTo\":e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5]);break;case\"lineTo\":e.lineTo(t[0],t[1])}}\"fillPath\"===t.type?e.fill(n):e.stroke()}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(e,t,n,r,a){const o=this.gen.line(e,t,n,r,a);return this.draw(o),o}rectangle(e,t,n,r,a){const o=this.gen.rectangle(e,t,n,r,a);return this.draw(o),o}ellipse(e,t,n,r,a){const o=this.gen.ellipse(e,t,n,r,a);return this.draw(o),o}circle(e,t,n,r){const a=this.gen.circle(e,t,n,r);return this.draw(a),a}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n),n}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n),n}arc(e,t,n,r,a,o,i=!1,l){const c=this.gen.arc(e,t,n,r,a,o,i,l);return this.draw(c),c}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n),n}path(e,t){const n=this.gen.path(e,t);return this.draw(n),n}}const _e=\"http:\/\/www.w3.org\/2000\/svg\";class Le{constructor(e,t){this.svg=e,this.gen=new Pe(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.svg.ownerDocument||window.document,a=r.createElementNS(_e,\"g\");for(const o of t){let t=null;switch(o.type){case\"path\":t=r.createElementNS(_e,\"path\"),t.setAttribute(\"d\",this.opsToPath(o)),t.setAttribute(\"stroke\",n.stroke),t.setAttribute(\"stroke-width\",n.strokeWidth+\"\"),t.setAttribute(\"fill\",\"none\"),n.strokeLineDash&&t.setAttribute(\"stroke-dasharray\",n.strokeLineDash.join(\" \").trim()),n.strokeLineDashOffset&&t.setAttribute(\"stroke-dashoffset\",`${n.strokeLineDashOffset}`);break;case\"fillPath\":t=r.createElementNS(_e,\"path\"),t.setAttribute(\"d\",this.opsToPath(o)),t.setAttribute(\"stroke\",\"none\"),t.setAttribute(\"stroke-width\",\"0\"),t.setAttribute(\"fill\",n.fill||\"\"),\"curve\"!==e.shape&&\"polygon\"!==e.shape||t.setAttribute(\"fill-rule\",\"evenodd\");break;case\"fillSketch\":t=this.fillSketch(r,o,n)}t&&a.appendChild(t)}return a}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2);const a=e.createElementNS(_e,\"path\");return a.setAttribute(\"d\",this.opsToPath(t)),a.setAttribute(\"stroke\",n.fill||\"\"),a.setAttribute(\"stroke-width\",r+\"\"),a.setAttribute(\"fill\",\"none\"),n.fillLineDash&&a.setAttribute(\"stroke-dasharray\",n.fillLineDash.join(\" \").trim()),n.fillLineDashOffset&&a.setAttribute(\"stroke-dashoffset\",`${n.fillLineDashOffset}`),a}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(e){return this.gen.opsToPath(e)}line(e,t,n,r,a){const o=this.gen.line(e,t,n,r,a);return this.draw(o)}rectangle(e,t,n,r,a){const o=this.gen.rectangle(e,t,n,r,a);return this.draw(o)}ellipse(e,t,n,r,a){const o=this.gen.ellipse(e,t,n,r,a);return this.draw(o)}circle(e,t,n,r){const a=this.gen.circle(e,t,n,r);return this.draw(a)}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n)}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n)}arc(e,t,n,r,a,o,i=!1,l){const c=this.gen.arc(e,t,n,r,a,o,i,l);return this.draw(c)}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n)}path(e,t){const n=this.gen.path(e,t);return this.draw(n)}}const De={canvas:(e,t)=>new Ae(e,t),svg:(e,t)=>new Le(e,t),generator:e=>new Pe(e),newSeed:()=>Pe.newSeed()};function je(e){var t,n,r=\"\";if(\"string\"==typeof e||\"number\"==typeof e)r+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=je(e[t]))&&(r&&(r+=\" \"),r+=n);else for(t in e)e[t]&&(r&&(r+=\" \"),r+=t);return r}function ze(){for(var e,t,n=0,r=\"\";n<arguments.length;)(e=arguments[n++])&&(t=je(e))&&(r&&(r+=\" \"),r+=t);return r}var Be=function(e){return null!=e&&\"text\"===e.type},He=function(e){return null!=e&&Ne(e.type)},Ne=function(e){return\"arrow\"===e||\"line\"===e||\"draw\"===e},Re=function(e){return null!=e&&Fe(e.type)},Fe=function(e){return\"arrow\"===e},We=function(e){return null!=e&&(\"rectangle\"===e.type||\"diamond\"===e.type||\"ellipse\"===e.type||\"text\"===e.type)},Ge=function(e,t,n,r,a){return[(e-n)*Math.cos(a)-(t-r)*Math.sin(a)+n,(e-n)*Math.sin(a)+(t-r)*Math.cos(a)+r]},Ve=function(e,t,n){return Ge(e[0],e[1],t[0],t[1],n)},Ke=function(e,t,n,r,a,o,i,l){var c=Math.cos(r),s=Math.sin(r);return e.e&&e.w?t+=a+i:e.e?(t+=a*(1+c),n+=a*s,t+=i*(1-c),n+=i*-s):e.w&&(t+=a*(1-c),n+=a*-s,t+=i*(1+c),n+=i*s),e.n&&e.s?n+=o+l:e.n?(t+=o*s,n+=o*(1-c),t+=l*-s,n+=l*(1+c)):e.s&&(t+=o*-s,n+=o*(1+c),t+=l*s,n+=l*(1-c)),[t,n]},Ue=function(e,t,n,r){var a=n-e,o=r-t;return Math.hypot(a,o)},Ye=function(e,t){if(void 0===t&&(t=1),e.length>=3){var n=[e[0],e[e.length-1]],r=n[0],a=n[1];return Ue(r[0],r[1],a[0],a[1])<=s.qx\/t}return!1},Xe=function(e,t,n){var r=e.length;if(r<3)return!1;for(var a=[Number.MAX_SAFE_INTEGER,n],o=[t,n],i=0,l=0;l<r;l++){var c=e[l],s=e[(l+1)%r];if(Qe(c,s,o,a)){if(0===qe(c,o,s))return Ze(c,o,s);i++}}return i%2==1},Ze=function(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])},qe=function(e,t,n){var r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2},Qe=function(e,t,n,r){var a=qe(e,t,n),o=qe(e,t,r),i=qe(n,r,e),l=qe(n,r,t);return a!==o&&i!==l||(!(0!==a||!Ze(e,n,t))||(!(0!==o||!Ze(e,r,t))||(!(0!==i||!Ze(n,e,r))||!(0!==l||!Ze(n,t,r)))))},$e=function(e,t,n){return n?[Math.round(e\/n)*n,Math.round(t\/n)*n]:[e,t]},Je=function(e,t,n){var r=n.map((function(t){return t[e]})),a=Math.max.apply(Math,r),o=Math.min.apply(Math,r),i=a-o,l=0===i?1:t\/i,c=1\/0,s=n.map((function(t){return t.map((function(t,n){if(n!==e)return t;var r=t*l;return c=Math.min(r,c),r}))}));if(2===s.length)return s;var u=o-c;return s.map((function(t){return t.map((function(t,n){return n===e?t+u:t}))}))},et=function(e){return He(e)?rt(e):[e.x,e.y,e.x+e.width,e.y+e.height]},tt=function(e){for(var t=0,n=e.sets;t<n.length;t++){var r=n[t];if(\"path\"===r.type)return r.ops}return e.sets[0].ops},nt=function(e,t){var n=[0,0],r=e.reduce((function(e,r){var a,o=r.op,i=r.data;if(\"move\"===o)n=i;else if(\"bcurveTo\"===o){var l=[i[0],i[1]],c=[i[2],i[3]],s=[i[4],i[5]],u=n;n=s;for(var d=function(e,t){return Math.pow(1-e,3)*s[t]+3*e*Math.pow(1-e,2)*c[t]+3*Math.pow(e,2)*(1-e)*l[t]+u[t]*Math.pow(e,3)},p=0;p<=1;){var f=d(p,0),h=d(p,1);t&&(f=(a=t(f,h))[0],h=a[1]),e.minY=Math.min(e.minY,h),e.minX=Math.min(e.minX,f),e.maxX=Math.max(e.maxX,f),e.maxY=Math.max(e.maxY,h),p+=.1}}return e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[r.minX,r.minY,r.maxX,r.maxY]},rt=function(e){if(e.points.length<2||!Jn(e)){var t=e.points.reduce((function(e,t){var n=t[0],r=t[1];return e.minY=Math.min(e.minY,r),e.minX=Math.min(e.minX,n),e.maxX=Math.max(e.maxX,n),e.maxY=Math.max(e.maxY,r),e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0}),n=t.minX,r=t.minY,a=t.maxX,o=t.maxY;return[n+e.x,r+e.y,a+e.x,o+e.y]}var i=Jn(e),l=tt(i[0]),c=nt(l),s=c[0],u=c[1],d=c[2],p=c[3];return[s+e.x,u+e.y,d+e.x,p+e.y]},at=function(e){var t=et(e),n=t[0],r=t[1],a=t[2],o=t[3],i=(n+a)\/2,l=(r+o)\/2;if(He(e))return function(e,t,n){if(e.points.length<2||!Jn(e)){var r=e.points.reduce((function(r,a){var o,i=a[0],l=a[1];return i=(o=Ge(e.x+i,e.y+l,t,n,e.angle))[0],l=o[1],r.minY=Math.min(r.minY,l),r.minX=Math.min(r.minX,i),r.maxX=Math.max(r.maxX,i),r.maxY=Math.max(r.maxY,l),r}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[r.minX,r.minY,r.maxX,r.maxY]}var a=Jn(e),o=tt(a[0]);return nt(o,(function(r,a){return Ge(e.x+r,e.y+a,t,n,e.angle)}))}(e,i,l);if(\"diamond\"===e.type){var c=Ge(i,r,i,l,e.angle),s=c[0],u=c[1],d=Ge(i,o,i,l,e.angle),p=d[0],f=d[1],h=Ge(n,l,i,l,e.angle),m=h[0],g=h[1],v=Ge(a,l,i,l,e.angle),b=v[0],y=v[1];return[Math.min(s,p,m,b),Math.min(u,f,g,y),Math.max(s,p,m,b),Math.max(u,f,g,y)]}if(\"ellipse\"===e.type){var w=(a-n)\/2,x=(o-r)\/2,E=Math.cos(e.angle),k=Math.sin(e.angle),S=Math.hypot(w*E,x*k),C=Math.hypot(x*E,w*k);return[i-S,l-C,i+S,l+C]}var O=Ge(n,r,i,l,e.angle),M=O[0],T=O[1],I=Ge(n,o,i,l,e.angle),P=I[0],A=I[1],_=Ge(a,o,i,l,e.angle),L=_[0],D=_[1],j=Ge(a,r,i,l,e.angle),z=j[0],B=j[1];return[Math.min(M,P,L,z),Math.min(T,A,D,B),Math.max(M,P,L,z),Math.max(T,A,D,B)]},ot=function(e){if(!e.length)return[0,0,0,0];var t=1\/0,n=-1\/0,r=1\/0,a=-1\/0;return e.forEach((function(e){var o=at(e),i=o[0],l=o[1],c=o[2],s=o[3];t=Math.min(t,i),r=Math.min(r,l),n=Math.max(n,c),a=Math.max(a,s)})),[t,r,n,a]},it=function(e,t,n){if(!He(e))return[e.x,e.y,e.x+t,e.y+n];var r=Je(0,t,Je(1,n,e.points)),a=De.generator(),o=\"sharp\"===e.strokeSharpness?a.linearPath(r,tr(e)):a.curve(r,tr(e)),i=tt(o),l=nt(i),c=l[0],s=l[1],u=l[2],d=l[3];return[c+e.x,s+e.y,u+e.x,d+e.y]},lt=function(e,t,n){var r=De.generator(),a=\"sharp\"===n?r.linearPath(t,tr(e)):r.curve(t,tr(e)),o=tt(a),i=nt(o),l=i[0],c=i[1],s=i[2],u=i[3];return[l+e.x,c+e.y,s+e.x,u+e.y]};const ct=JSON.parse('{\"ix\":\"#ffffff\",\"Sn\":\"#000000\",\"MA\":[\"#f8f9fa\",\"#f1f3f5\",0,0,\"#ced4da\",\"#adb5bd\",\"#868e96\",\"#495057\",\"#343a40\"],\"Q6\":[\"#fff5f5\",\"#ffe3e3\",\"#ffc9c9\",\"#ffa8a8\",\"#ff8787\",\"#ff6b6b\",\"#fa5252\",\"#f03e3e\",\"#e03131\",\"#c92a2a\"],\"iQ\":[\"#fff0f6\",\"#ffdeeb\",\"#fcc2d7\",\"#faa2c1\",\"#f783ac\",\"#f06595\",\"#e64980\",\"#d6336c\",\"#c2255c\",\"#a61e4d\"],\"pl\":[\"#f8f0fc\",\"#f3d9fa\",\"#eebefa\",\"#e599f7\",\"#da77f2\",\"#cc5de8\",\"#be4bdb\",\"#ae3ec9\",\"#9c36b5\",\"#862e9c\"],\"ht\":[\"#f3f0ff\",\"#e5dbff\",\"#d0bfff\",\"#b197fc\",\"#9775fa\",\"#845ef7\",\"#7950f2\",\"#7048e8\",\"#6741d9\",\"#5f3dc4\"],\"QN\":[\"#edf2ff\",\"#dbe4ff\",\"#bac8ff\",\"#91a7ff\",\"#748ffc\",\"#5c7cfa\",\"#4c6ef5\",\"#4263eb\",\"#3b5bdb\",\"#364fc7\"],\"iN\":[\"#e7f5ff\",\"#d0ebff\",\"#a5d8ff\",\"#74c0fc\",\"#4dabf7\",\"#339af0\",\"#228be6\",\"#1c7ed6\",\"#1971c2\",\"#1864ab\"],\"sl\":[\"#e3fafc\",\"#c5f6fa\",\"#99e9f2\",\"#66d9e8\",\"#3bc9db\",\"#22b8cf\",\"#15aabf\",\"#1098ad\",\"#0c8599\",\"#0b7285\"],\"$C\":[\"#e6fcf5\",\"#c3fae8\",\"#96f2d7\",\"#63e6be\",\"#38d9a9\",\"#20c997\",\"#12b886\",\"#0ca678\",\"#099268\",\"#087f5b\"],\"ek\":[\"#ebfbee\",\"#d3f9d8\",\"#b2f2bb\",\"#8ce99a\",\"#69db7c\",\"#51cf66\",\"#40c057\",\"#37b24d\",\"#2f9e44\",\"#2b8a3e\"],\"LR\":[\"#f4fce3\",\"#e9fac8\",\"#d8f5a2\",\"#c0eb75\",\"#a9e34b\",\"#94d82d\",\"#82c91e\",\"#74b816\",\"#66a80f\",\"#5c940d\"],\"er\":[\"#fff9db\",\"#fff3bf\",\"#ffec99\",\"#ffe066\",\"#ffd43b\",\"#fcc419\",\"#fab005\",\"#f59f00\",\"#f08c00\",\"#e67700\"],\"$y\":[\"#fff4e6\",\"#ffe8cc\",\"#ffd8a8\",\"#ffc078\",\"#ffa94d\",\"#ff922b\",\"#fd7e14\",\"#f76707\",\"#e8590c\",\"#d9480f\"]}');var st=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},ut=function(e){return[ct.Q6[e],ct.iQ[e],ct.pl[e],ct.ht[e],ct.QN[e],ct.iN[e],ct.sl[e],ct.$C[e],ct.ek[e],ct.LR[e],ct.er[e],ct.$y[e]]};const dt={canvasBackground:st([ct.ix,ct.MA[0],ct.MA[1]],ut(0)),elementBackground:st([\"transparent\",ct.MA[4],ct.MA[6]],ut(6)),elementStroke:st([ct.Sn,ct.MA[8],ct.MA[7]],ut(9))};var pt=n(6207),ft=\/Mac|iPod|iPhone|iPad\/.test(window.navigator.platform),ht=\/^Win\/.test(window.navigator.platform),mt=\"Equal\",gt=\"Minus\",vt=\"NumpadAdd\",bt=\"NumpadSubtract\",yt=\"Numpad0\",wt=\"BracketRight\",xt=\"BracketLeft\",Et=\"Digit1\",kt=\"Digit2\",St=\"Digit9\",Ct=\"Quote\",Ot=\"Digit0\",Mt=\"KeyC\",Tt=\"KeyG\",It=\"KeyF\",Pt=\"KeyH\",At=\"KeyV\",_t=\"KeyX\",Lt=\"KeyZ\",Dt=\"KeyR\",jt=\"ArrowDown\",zt=\"ArrowLeft\",Bt=\"ArrowRight\",Ht=\"ArrowUp\",Nt=\"Backspace\",Rt=\"Alt\",Ft=ft?\"metaKey\":\"ctrlKey\",Wt=\"Delete\",Gt=\"Enter\",Vt=\"Escape\",Kt=\"?\",Ut=\" \",Yt=\"Tab\",Xt=\"a\",Zt=\"d\",qt=\"e\",Qt=\"l\",$t=\"o\",Jt=\"p\",en=\"q\",tn=\"r\",nn=\"s\",rn=\"t\",an=\"v\",on=\"x\",ln=\"y\",cn=\"z\",sn=function(e){return e===zt||e===Bt||e===jt||e===Ht},un=function(e){return e.altKey},dn=function(e){return e.shiftKey},pn=function(e){return e.shiftKey},fn=\"http:\/\/www.w3.org\/2000\/svg\",hn=null,mn=function(){if(hn)return hn;var e=new Date,t=e.getFullYear(),n=\"\".concat(e.getMonth()+1).padStart(2,\"0\"),r=\"\".concat(e.getDate()).padStart(2,\"0\"),a=\"\".concat(e.getHours()).padStart(2,\"0\"),o=\"\".concat(e.getMinutes()).padStart(2,\"0\");return\"\".concat(t,\"-\").concat(n,\"-\").concat(r,\"-\").concat(a).concat(o)},gn=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},vn=function(e){return e instanceof HTMLElement&&\"wysiwyg\"===e.dataset.type||e instanceof HTMLBRElement||e instanceof HTMLTextAreaElement||e instanceof HTMLInputElement&&(\"text\"===e.type||\"number\"===e.type)},bn=function(e){var t=e.fontFamily;return\"\".concat(s.ut[t],\", \").concat(s._D)},yn=function(e){var t=e.fontSize,n=e.fontFamily;return\"\".concat(t,\"px \").concat(bn({fontFamily:n}))},wn=function(e,t){var n=document.createElement(\"div\"),r=document.body;n.style.position=\"absolute\",n.style.whiteSpace=\"pre\",n.style.font=t,r.appendChild(n),n.innerText=e.split(\"\\n\").map((function(e){return e||\" \"})).join(\"\\n\");var a=n.offsetWidth,o=n.offsetHeight,i=document.createElement(\"span\");i.style.display=\"inline-block\",i.style.overflow=\"hidden\",i.style.width=\"1px\",i.style.height=\"1px\",n.appendChild(i);var l=i.offsetTop+i.offsetHeight;return document.body.removeChild(n),{width:a,height:o,baseline:l}},xn=function(e,t){var n,r=0,a=function(){for(var a=[],o=0;o<arguments.length;o++)a[o]=arguments[o];n=a,clearTimeout(r),r=window.setTimeout((function(){return e.apply(void 0,a)}),t)};return a.flush=function(){clearTimeout(r),n&&e.apply(void 0,n)},a.cancel=function(){clearTimeout(r)},a},En=function(e){var t=window.getSelection();if(t){var n=document.createRange();n.selectNodeContents(e),t.removeAllRanges(),t.addRange(n)}},kn=function(){var e=window.getSelection();e&&e.removeAllRanges()},Sn=function(e,t){return Math.abs(e-t)},Cn=function(e){e&&(e.style.cursor=\"\")},On=function(e,t){e&&(e.style.cursor=t)},Mn=function(e,t){e&&(\"selection\"===t?Cn(e):e.style.cursor=s.oc.CROSSHAIR)},Tn=function(){var e;return\"HTML\"===(null===(e=document.fullscreenElement)||void 0===e?void 0:e.nodeName)},In=function(e){return e=e.replace(\/\\bAlt\\b\/i,\"Alt\").replace(\/\\bShift\\b\/i,\"Shift\").replace(\/\\b(Enter|Return)\\b\/i,\"Enter\").replace(\/\\bDel\\b\/i,\"Delete\"),ft?e.replace(\/\\bCtrlOrCmd\\b\/i,\"Cmd\").replace(\/\\bAlt\\b\/i,\"Option\"):e.replace(\/\\bCtrlOrCmd\\b\/i,\"Ctrl\")},Pn=function(e,t){var n=e.clientX,r=e.clientY,a=t.zoom,o=t.offsetLeft,i=t.offsetTop,l=t.scrollX,c=t.scrollY,s=1\/a.value;return{x:(n-a.translation.x-o)*s-l,y:(r-a.translation.y-i)*s-c}},An=function(e,t){var n=e.sceneX,r=e.sceneY,a=t.zoom,o=t.offsetLeft,i=t.offsetTop,l=t.scrollX,c=t.scrollY;return{x:(n+l+o)*a.value+a.translation.x,y:(r+c+i)*a.value+a.translation.y}},_n=function(e){return getComputedStyle(document.documentElement).getPropertyValue(\"--\".concat(e))},Ln=new RegExp(\"^[^\".concat(\"A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff\u2c00-\ufb1c\ufdfe-\ufe6f\ufefd-\uffff\",\"]*[\").concat(\"\u0591-\u07ff\ufb1d-\ufdfd\ufe70-\ufefc\",\"]\")),Dn=function(e){return Ln.test(e)},jn=function(e){return{x:e[0],y:e[1]}},zn=function(e){if(\"AbortError\"!==(null==e?void 0:e.name))throw e},Bn=function(e){return function(t){(0,pt.unstable_batchedUpdates)(e,t)}},Hn=function(e,t){var n,r=[{value:1,symbol:\"b\"},{value:1e3,symbol:\"k\"},{value:1e6,symbol:\"M\"},{value:1e9,symbol:\"G\"}];for(n=r.length-1;n>0&&!(e>=r[n].value);n--);return(e\/r[n].value).toFixed(t).replace(\/\\.0+$|(\\.[0-9]*[1-9])0+$\/,\"$1\")+r[n].symbol},Nn=function(){var e;return(null===(e=document.querySelector('meta[name=\"version\"]'))||void 0===e?void 0:e.content)||s.eQ},Rn=function(){return{appearance:\"light\",collaborators:new Map,currentChartType:\"bar\",currentItemBackgroundColor:\"transparent\",currentItemEndArrowhead:\"arrow\",currentItemFillStyle:\"hachure\",currentItemFontFamily:s.rk,currentItemFontSize:s.n5,currentItemLinearStrokeSharpness:\"round\",currentItemOpacity:100,currentItemRoughness:1,currentItemStartArrowhead:null,currentItemStrokeColor:ct.Sn,currentItemStrokeSharpness:\"sharp\",currentItemStrokeStyle:\"solid\",currentItemStrokeWidth:1,currentItemTextAlign:s.Hg,cursorButton:\"up\",draggingElement:null,editingElement:null,editingGroupId:null,editingLinearElement:null,elementLocked:!1,elementType:\"selection\",errorMessage:null,exportBackground:!0,exportEmbedScene:!1,exportWithDarkMode:!1,fileHandle:null,gridSize:null,height:window.innerHeight,isBindingEnabled:!0,isLibraryOpen:!1,isLoading:!1,isResizing:!1,isRotating:!1,lastPointerDownWith:\"mouse\",multiElement:null,name:\"\".concat(C(\"labels.untitled\"),\"-\").concat(mn()),openMenu:null,pasteDialog:{shown:!1,data:null},previousSelectedElementIds:{},resizingElement:null,scrolledOutside:!1,scrollX:0,scrollY:0,selectedElementIds:{},selectedGroupIds:{},selectionElement:null,shouldAddWatermark:!1,shouldCacheIgnoreZoom:!1,showHelpDialog:!1,showStats:!1,startBoundElement:null,suggestedBindings:[],toastMessage:null,viewBackgroundColor:ct.ix,width:window.innerWidth,zenModeEnabled:!1,zoom:{value:1,translation:{x:0,y:0}},viewModeEnabled:!1}},Fn={appearance:{browser:!0,export:!1},collaborators:{browser:!1,export:!1},currentChartType:{browser:!0,export:!1},currentItemBackgroundColor:{browser:!0,export:!1},currentItemEndArrowhead:{browser:!0,export:!1},currentItemFillStyle:{browser:!0,export:!1},currentItemFontFamily:{browser:!0,export:!1},currentItemFontSize:{browser:!0,export:!1},currentItemLinearStrokeSharpness:{browser:!0,export:!1},currentItemOpacity:{browser:!0,export:!1},currentItemRoughness:{browser:!0,export:!1},currentItemStartArrowhead:{browser:!0,export:!1},currentItemStrokeColor:{browser:!0,export:!1},currentItemStrokeSharpness:{browser:!0,export:!1},currentItemStrokeStyle:{browser:!0,export:!1},currentItemStrokeWidth:{browser:!0,export:!1},currentItemTextAlign:{browser:!0,export:!1},cursorButton:{browser:!0,export:!1},draggingElement:{browser:!1,export:!1},editingElement:{browser:!1,export:!1},editingGroupId:{browser:!0,export:!1},editingLinearElement:{browser:!1,export:!1},elementLocked:{browser:!0,export:!1},elementType:{browser:!0,export:!1},errorMessage:{browser:!1,export:!1},exportBackground:{browser:!0,export:!1},exportEmbedScene:{browser:!0,export:!1},exportWithDarkMode:{browser:!0,export:!1},fileHandle:{browser:!1,export:!1},gridSize:{browser:!0,export:!0},height:{browser:!1,export:!1},isBindingEnabled:{browser:!1,export:!1},isLibraryOpen:{browser:!1,export:!1},isLoading:{browser:!1,export:!1},isResizing:{browser:!1,export:!1},isRotating:{browser:!1,export:!1},lastPointerDownWith:{browser:!0,export:!1},multiElement:{browser:!1,export:!1},name:{browser:!0,export:!1},offsetLeft:{browser:!1,export:!1},offsetTop:{browser:!1,export:!1},openMenu:{browser:!0,export:!1},pasteDialog:{browser:!1,export:!1},previousSelectedElementIds:{browser:!0,export:!1},resizingElement:{browser:!1,export:!1},scrolledOutside:{browser:!0,export:!1},scrollX:{browser:!0,export:!1},scrollY:{browser:!0,export:!1},selectedElementIds:{browser:!0,export:!1},selectedGroupIds:{browser:!0,export:!1},selectionElement:{browser:!1,export:!1},shouldAddWatermark:{browser:!0,export:!1},shouldCacheIgnoreZoom:{browser:!0,export:!1},showHelpDialog:{browser:!1,export:!1},showStats:{browser:!0,export:!1},startBoundElement:{browser:!1,export:!1},suggestedBindings:{browser:!1,export:!1},toastMessage:{browser:!1,export:!1},viewBackgroundColor:{browser:!0,export:!0},width:{browser:!1,export:!1},zenModeEnabled:{browser:!0,export:!1},zoom:{browser:!0,export:!1},viewModeEnabled:{browser:!1,export:!1}},Wn=function(e,t){for(var n={},r=0,a=Object.keys(e);r<a.length;r++){var o=a[r],i=Fn[o];null!=i&&i[t]&&(n[o]=e[o])}return n},Gn=function(e){return Wn(e,\"export\")};function Vn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Kn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vn(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Un=Rn(),Yn=20,Xn=[12,8],Zn=[3,6],qn=function(e,t,n){switch(n.globalAlpha=e.opacity\/100,e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":t.draw(Jn(e));break;case\"arrow\":case\"draw\":case\"line\":Jn(e).forEach((function(e){t.draw(e)}));break;default:if(!Be(e))throw new Error(\"Unimplemented type \".concat(e.type));var r=Dn(e.text),a=r&&!n.canvas.isConnected;a&&document.body.appendChild(n.canvas),n.canvas.setAttribute(\"dir\",r?\"rtl\":\"ltr\");var o=n.font;n.font=yn(e);var i=n.fillStyle;n.fillStyle=e.strokeColor;var l=n.textAlign;n.textAlign=e.textAlign;for(var c=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),s=e.height\/c.length,u=e.height-e.baseline,d=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,p=0;p<c.length;p++)n.fillText(c[p],d,(p+1)*s-u);n.fillStyle=i,n.font=o,n.textAlign=l,a&&n.canvas.remove()}n.globalAlpha=1},Qn=new WeakMap,$n=new WeakMap,Jn=function(e){return $n.get(e)},er=function(e){return $n.delete(e)},tr=function(e){var t={seed:e.seed,strokeLineDash:\"dashed\"===e.strokeStyle?Xn:\"dotted\"===e.strokeStyle?Zn:void 0,disableMultiStroke:\"solid\"!==e.strokeStyle,strokeWidth:\"solid\"!==e.strokeStyle?e.strokeWidth+.5:e.strokeWidth,fillWeight:e.strokeWidth\/2,hachureGap:4*e.strokeWidth,roughness:e.roughness,stroke:e.strokeColor};switch(e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":return t.fillStyle=e.fillStyle,t.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor,\"ellipse\"===e.type&&(t.curveFitting=1),t;case\"line\":case\"draw\":return Ye(e.points)&&(t.fillStyle=e.fillStyle,t.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor),t;case\"arrow\":return t;default:throw new Error(\"Unimplemented type \".concat(e.type))}},nr=function(e,t){var n=$n.get(e)||null;if(!n){switch(Qn.delete(e),e.type){case\"rectangle\":if(\"round\"===e.strokeSharpness){var r=e.width,a=e.height,o=.25*Math.min(r,a);n=t.path(\"M \".concat(o,\" 0 L \").concat(r-o,\" 0 Q \").concat(r,\" 0, \").concat(r,\" \").concat(o,\" L \").concat(r,\" \").concat(a-o,\" Q \").concat(r,\" \").concat(a,\", \").concat(r-o,\" \").concat(a,\" L \").concat(o,\" \").concat(a,\" Q 0 \").concat(a,\", 0 \").concat(a-o,\" L 0 \").concat(o,\" Q 0 0, \").concat(o,\" 0\"),tr(e))}else n=t.rectangle(0,0,e.width,e.height,tr(e));break;case\"diamond\":var i=function(e){var t=Math.floor(e.width\/2)+1,n=e.width,r=Math.floor(e.height\/2)+1;return[t,0,n,r,t,e.height,0,r]}(e),l=i[0],c=i[1],s=i[2],u=i[3],d=i[4],p=i[5],f=i[6],h=i[7];n=t.polygon([[l,c],[s,u],[d,p],[f,h]],tr(e));break;case\"ellipse\":n=t.ellipse(e.width\/2,e.height\/2,e.width,e.height,tr(e));break;case\"line\":case\"draw\":case\"arrow\":var m=tr(e),g=e.points.length?e.points:[[0,0]];if(n=\"sharp\"===e.strokeSharpness?m.fill?[t.polygon(g,m)]:[t.linearPath(g,m)]:[t.curve(g,m)],\"arrow\"===e.type){var v=e.startArrowhead,b=void 0===v?null:v,y=e.endArrowhead,w=void 0===y?\"arrow\":y;function x(e,n,r,a){var o=function(e,t,n,r){var a=tt(t[0]);if(a.length<1)return null;var o=\"start\"===n?1:a.length-1,i=a[o].data,l=[i[4],i[5]],c=[i[2],i[3]],s=[i[0],i[1]],u=a[o-1],d=[0,0];\"move\"===u.op?d=u.data:\"bcurveTo\"===u.op&&(d=[u.data[4],u.data[5]]);var p=function(e,t){return Math.pow(1-e,3)*l[t]+3*e*Math.pow(1-e,2)*c[t]+3*Math.pow(e,2)*(1-e)*s[t]+d[t]*Math.pow(e,3)},f=\"start\"===n?d:l,h=f[0],m=f[1],g=[p(.3,0),p(.3,1)],v=g[0],b=g[1],y=Math.hypot(h-v,m-b),w=(h-v)\/y,x=(m-b)\/y,E={arrow:30,bar:15,dot:15}[r],k=e.points.reduce((function(e,t,n,r){var a=t[0],o=t[1],i=n>0?r[n-1]:[0,0],l=i[0],c=i[1];return e+Math.hypot(a-l,o-c)}),0),S=Math.min(E,k\/2),C=h-w*S,O=m-x*S;if(\"dot\"===r)return[h,m,Math.hypot(O-m,C-h)];var M={arrow:20,bar:90}[r],T=Ge(C,O,h,m,-M*Math.PI\/180),I=T[0],P=T[1],A=Ge(C,O,h,m,M*Math.PI\/180);return[h,m,I,P,A[0],A[1]]}(e,n,r,a);if(null===o)return[];if(\"dot\"===a){var i=o[0],l=o[1],c=o[2];return[t.circle(i,l,c,Kn(Kn({},m),{},{fill:e.strokeColor,fillStyle:\"solid\"}))]}var s=o[0],u=o[1],d=o[2],p=o[3],f=o[4],h=o[5];return\"dotted\"===e.strokeStyle?m.strokeLineDash=[3,4]:delete m.strokeLineDash,[t.line(d,p,s,u,m),t.line(f,h,s,u,m)]}if(null!==b){var E=x(e,n,\"start\",b);n.push.apply(n,E)}if(null!==w){E=x(e,n,\"end\",w);n.push.apply(n,E)}}break;case\"text\":n=[]}$n.set(e,n)}},rr=function(e,t){var n=t?t.zoom:Un.zoom,r=Qn.get(e),a=r&&r.canvasZoom!==n.value&&!(null!=t&&t.shouldCacheIgnoreZoom);if(!r||a){var o=function(e,t){var n=document.createElement(\"canvas\"),r=n.getContext(\"2d\"),a=0,o=0;if(He(e)){var i=et(e),l=i[0],c=i[1],s=i[2],u=i[3];n.width=Sn(l,s)*window.devicePixelRatio*t.value+Yn*t.value*2,n.height=Sn(c,u)*window.devicePixelRatio*t.value+Yn*t.value*2,a=e.x>l?Math.floor(Sn(e.x,l))*window.devicePixelRatio*t.value:0,o=e.y>c?Math.floor(Sn(e.y,c))*window.devicePixelRatio*t.value:0,r.translate(a,o)}else n.width=e.width*window.devicePixelRatio*t.value+Yn*t.value*2,n.height=e.height*window.devicePixelRatio*t.value+Yn*t.value*2;r.translate(Yn*t.value,Yn*t.value),r.scale(window.devicePixelRatio*t.value,window.devicePixelRatio*t.value);var d=De.canvas(n);return qn(e,d,r),r.translate(-20*t.value,-20*t.value),r.scale(1\/(window.devicePixelRatio*t.value),1\/(window.devicePixelRatio*t.value)),{element:e,canvas:n,canvasZoom:t.value,canvasOffsetX:a,canvasOffsetY:o}}(e,n);return Qn.set(e,o),o}return r},ar=function(e,t,n,r,a){var o=t.generator;switch(e.type){case\"selection\":n.translate(e.x+a.scrollX,e.y+a.scrollY);var i=n.fillStyle;n.fillStyle=\"rgba(0, 0, 255, 0.10)\",n.fillRect(0,0,e.width,e.height),n.fillStyle=i,n.translate(-e.x-a.scrollX,-e.y-a.scrollY);break;case\"rectangle\":case\"diamond\":case\"ellipse\":case\"line\":case\"draw\":case\"arrow\":case\"text\":if(nr(e,o),r){!function(e,t,n,r){var a=e.element,o=et(a),i=o[0],l=o[1],c=o[2],s=o[3],u=((i+c)\/2+r.scrollX)*window.devicePixelRatio,d=((l+s)\/2+r.scrollY)*window.devicePixelRatio;n.scale(1\/window.devicePixelRatio,1\/window.devicePixelRatio),n.translate(u,d),n.rotate(a.angle),n.drawImage(e.canvas,-(c-i)\/2*window.devicePixelRatio-Yn*e.canvasZoom\/e.canvasZoom,-(s-l)\/2*window.devicePixelRatio-Yn*e.canvasZoom\/e.canvasZoom,e.canvas.width\/e.canvasZoom,e.canvas.height\/e.canvasZoom),n.rotate(-a.angle),n.translate(-u,-d),n.scale(window.devicePixelRatio,window.devicePixelRatio)}(rr(e,a),0,n,a)}else{var l=et(e),c=l[0],s=l[1],u=l[2],d=l[3],p=(c+u)\/2+a.scrollX,f=(s+d)\/2+a.scrollY,h=(u-c)\/2-(e.x-c),m=(d-s)\/2-(e.y-s);n.translate(p,f),n.rotate(e.angle),n.translate(-h,-m),qn(e,t,n),n.translate(h,m),n.rotate(-e.angle),n.translate(-p,-f)}break;default:throw new Error(\"Unimplemented type \".concat(e.type))}},or=function(e){return\"string\"==typeof e},ir=function(){function e(){this.callbacks=new Set,this.nonDeletedElements=[],this.elements=[],this.elementsMap=new Map}return e.mapElementToScene=function(e,t){or(e)?this.sceneMapById.set(e,t):this.sceneMapByElement.set(e,t)},e.getScene=function(e){return or(e)?this.sceneMapById.get(e)||null:this.sceneMapByElement.get(e)||null},e.prototype.getElementsIncludingDeleted=function(){return this.elements},e.prototype.getElements=function(){return this.nonDeletedElements},e.prototype.getElement=function(e){return this.elementsMap.get(e)||null},e.prototype.getNonDeletedElement=function(e){var t=this.getElement(e);return t&&ri(t)?t:null},e.prototype.getNonDeletedElements=function(e){var t=this,n=[];return e.forEach((function(e){var r=t.getNonDeletedElement(e);null!=r&&n.push(r)})),n},e.prototype.replaceAllElements=function(t){var n=this;this.elements=t,this.elementsMap.clear(),t.forEach((function(t){n.elementsMap.set(t.id,t),e.mapElementToScene(t,n)})),this.nonDeletedElements=ni(this.elements),this.informMutation()},e.prototype.informMutation=function(){for(var e=0,t=Array.from(this.callbacks);e<t.length;e++){(0,t[e])()}},e.prototype.addCallback=function(e){var t=this;if(this.callbacks.has(e))throw new Error;return this.callbacks.add(e),function(){if(!t.callbacks.has(e))throw new Error;t.callbacks.delete(e)}},e.prototype.destroy=function(){var t=this;e.sceneMapById.forEach((function(n,r){n===t&&e.sceneMapById.delete(r)})),this.callbacks.clear()},e}();ir.sceneMapByElement=new WeakMap,ir.sceneMapById=new Map;const lr=ir;var cr=new ee(Date.now()),sr=function(){return Math.floor(cr.next()*Math.pow(2,31))},ur=function(){return((e=21)=>{let t=\"\",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?\"_\":\"-\"}return t})()};function dr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dr(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var fr=function(e,t){var n,r=!1,a=t.points;for(var o in void 0!==a&&(t=pr(pr({},function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{width:Math.max.apply(Math,t)-Math.min.apply(Math,t),height:Math.max.apply(Math,n)-Math.min.apply(Math,n)}}(a)),t)),t){var i=t[o];if(void 0!==i){if(e[o]===i&&(\"object\"!=typeof i||null===i||\"groupIds\"===o))continue;if(\"points\"===o){var l=e[o],c=i;if(l.length===c.length){for(var s=!1,u=l.length;--u;){var d=l[u],p=c[u];if(d[0]!==p[0]||d[1]!==p[1]){s=!0;break}}if(!s)continue}}e[o]=i,r=!0}}r&&(void 0===t.height&&void 0===t.width&&void 0===a||er(e),e.version++,e.versionNonce=sr(),null===(n=lr.getScene(e))||void 0===n||n.informMutation())},hr=function(e,t){return pr(pr(pr({},e),t),{},{version:e.version+1,versionNonce:sr()})},mr=function(e){return He(e)?e.points.length<2:0===e.width&&0===e.height},gr=function(e,t,n){var r=Math.abs(t),a=Math.abs(n);if(\"line\"===e||\"arrow\"===e||\"draw\"===e){var o=Math.round(Math.atan(a\/r)\/s.ay)*s.ay;0===o?n=0:o===Math.PI\/2?t=0:n=Math.round(r*Math.tan(o))*Math.sign(n)||n}else\"selection\"!==e&&(n=r*Math.sign(n));return{width:t,height:n}},vr=function(e){var t={width:e.width,height:e.height,x:e.x,y:e.y};if(e.width<0){var n=Math.abs(e.width);t.width=n,t.x=e.x-n}if(e.height<0){var r=Math.abs(e.height);t.height=r,t.y=e.y-r}return t},br=n(5474),yr=n.n(br),wr=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function xr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Er(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xr(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var kr=function(e,t,n){var r,a,o=n.filter((function(t){return t.groupIds.includes(e)}));return o.length<2?t.selectedGroupIds[e]||t.editingGroupId===e?Er(Er({},t),{},{selectedGroupIds:Er(Er({},t.selectedGroupIds),{},(r={},r[e]=!1,r)),editingGroupId:null}):t:Er(Er({},t),{},{selectedGroupIds:Er(Er({},t.selectedGroupIds),{},(a={},a[e]=!0,a)),selectedElementIds:Er(Er({},t.selectedElementIds),Object.fromEntries(o.map((function(e){return[e.id,!0]}))))})},Sr=function(e,t){return null!=Cr(e,t)},Cr=function(e,t){return t.groupIds.filter((function(t){return t!==e.editingGroupId})).find((function(t){return e.selectedGroupIds[t]}))},Or=function(e){return Object.entries(e.selectedGroupIds).filter((function(e){e[0];return e[1]})).map((function(e){var t=e[0];e[1];return t}))},Mr=function(e,t){for(var n=Er({},e),r=0,a=ci(t,e);r<a.length;r++){var o=a[r].groupIds;if(e.editingGroupId){var i=o.indexOf(e.editingGroupId);i>-1&&(o=o.slice(0,i))}if(o.length>0){var l=o[o.length-1];n=kr(l,n,t)}}return n},Tr=function(e,t){return e.groupIds.includes(t)},Ir=function(e,t){return e.filter((function(e){return Tr(e,t)}))},Pr=function(e,t,n){var r=wr([],e),a=n?r.indexOf(n):-1,o=a>-1?a:r.length;return r.splice(o,0,t),r};function Ar(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ar(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ar(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Lr=function(e,t){var n,r,a=t.x,o=t.y,i=t.strokeColor,l=t.backgroundColor,c=t.fillStyle,s=t.strokeWidth,u=t.strokeStyle,d=t.roughness,p=t.opacity,f=t.width,h=void 0===f?0:f,m=t.height,g=void 0===m?0:m,v=t.angle,b=void 0===v?0:v,y=t.groupIds,w=void 0===y?[]:y,x=t.strokeSharpness,E=t.boundElementIds,k=void 0===E?null:E,S=yr()(t,[\"x\",\"y\",\"strokeColor\",\"backgroundColor\",\"fillStyle\",\"strokeWidth\",\"strokeStyle\",\"roughness\",\"opacity\",\"width\",\"height\",\"angle\",\"groupIds\",\"strokeSharpness\",\"boundElementIds\"]);return{id:S.id||ur(),type:e,x:a,y:o,width:h,height:g,angle:b,strokeColor:i,backgroundColor:l,fillStyle:c,strokeWidth:s,strokeStyle:u,roughness:d,opacity:p,groupIds:w,strokeSharpness:x,seed:null!==(n=S.seed)&&void 0!==n?n:sr(),version:S.version||1,versionNonce:null!==(r=S.versionNonce)&&void 0!==r?r:0,isDeleted:!1,boundElementIds:k}},Dr=function(e){return Lr(e.type,e)},jr=function(e,t){return{x:\"center\"===e.textAlign?t.width\/2:\"right\"===e.textAlign?t.width:0,y:\"middle\"===e.verticalAlign?t.height\/2:0}},zr=function(e){var t=wn(e.text,yn(e)),n=jr(e,t);return hr(_r(_r({},Lr(\"text\",e)),{},{text:e.text,fontSize:e.fontSize,fontFamily:e.fontFamily,textAlign:e.textAlign,verticalAlign:e.verticalAlign,x:e.x-n.x,y:e.y-n.y,width:t.width,height:t.height,baseline:t.baseline}),{})},Br=function(e,t){var n=t.text,r=t.isDeleted;return hr(e,_r({text:n,isDeleted:null!=r?r:e.isDeleted},function(e,t){var n,r,a,o=wn(t,yn(e)),i=o.width,l=o.height,c=o.baseline,s=e.textAlign,u=e.verticalAlign;if(\"center\"===s&&\"middle\"===u){var d=wn(e.text,yn(e)),p=jr(e,{width:i-d.width,height:l-d.height});r=e.x-p.x,a=e.y-p.y}else{var f=et(e),h=f[0],m=f[1],g=f[2],v=f[3],b=it(e,i,l),y=(h-b[0])\/2,w=(m-b[1])\/2,x=(g-b[2])\/2,E=(v-b[3])\/2;r=(n=Ke({s:!0,e:\"center\"===s||\"left\"===s,w:\"center\"===s||\"right\"===s},e.x,e.y,e.angle,y,w,x,E))[0],a=n[1]}return{width:i,height:l,x:Number.isFinite(r)?r:e.x,y:Number.isFinite(a)?a:e.y,baseline:c}}(e,n)))},Hr=function(e){return _r(_r({},Lr(e.type,e)),{},{points:e.points||[],lastCommittedPoint:null,startBinding:null,endBinding:null,startArrowhead:e.startArrowhead,endArrowhead:e.endArrowhead})},Nr=function(e,t){if(void 0===t&&(t=0),null==e||\"object\"!=typeof e)return e;if(\"[object Object]\"===Object.prototype.toString.call(e)){var n=\"function\"==typeof e.constructor?Object.create(Object.getPrototypeOf(e)):{};for(var r in e)if(e.hasOwnProperty(r)){if(0===t&&(\"shape\"===r||\"canvas\"===r))continue;n[r]=Nr(e[r],t+1)}return n}if(Array.isArray(e)){for(var a=e.length,o=new Array(a);a--;)o[a]=Nr(e[a],t+1);return o}return e},Rr=function(e,t,n,r){var a=Nr(n);return a.id=ur(),a.seed=sr(),a.groupIds=function(e,t,n){for(var r=wr([],e),a=t?e.indexOf(t):-1,o=a>-1?a:e.length,i=0;i<o;i++)r[i]=n(r[i]);return r}(a.groupIds,e,(function(e){return t.has(e)||t.set(e,ur()),t.get(e)})),r&&(a=Object.assign(a,r)),a},Fr={mouse:8,pen:16,touch:28},Wr={e:!0,s:!0,n:!0,w:!0},Gr={e:!0,s:!0,n:!0,w:!0},Vr={e:!0,s:!0,n:!0,w:!0,nw:!0,se:!0},Kr={e:!0,s:!0,n:!0,w:!0,ne:!0,sw:!0},Ur=function(e,t,n,r,a,o,i){var l=Ge(e+n\/2,t+r\/2,a,o,i);return[l[0]-n\/2,l[1]-r\/2,n,r]},Yr=function(e,t,n,r,a){var o=e[0],i=e[1],l=e[2],c=e[3];void 0===a&&(a={});var s=Fr[r],u=s\/n.value,d=s\/n.value,p=s\/n.value,f=s\/n.value,h=l-o,m=c-i,g=(o+l)\/2,v=(i+c)\/2,b=4\/n.value,y=(s-8)\/(2*n.value),w={nw:a.nw?void 0:Ur(o-b-p+y,i-b-f+y,u,d,g,v,t),ne:a.ne?void 0:Ur(l+b-y,i-b-f+y,u,d,g,v,t),sw:a.sw?void 0:Ur(o-b-p+y,c+b-y,u,d,g,v,t),se:a.se?void 0:Ur(l+b-y,c+b-y,u,d,g,v,t),rotation:a.rotation?void 0:Ur(o+h\/2-u\/2,i-b-f+y-16\/n.value,u,d,g,v,t)},x=5*Fr.mouse\/n.value;return Math.abs(h)>x&&(a.n||(w.n=Ur(o+h\/2-u\/2,i-b-f+y,u,d,g,v,t)),a.s||(w.s=Ur(o+h\/2-u\/2,c+b-y,u,d,g,v,t))),Math.abs(m)>x&&(a.w||(w.w=Ur(o-b-p+y,i+m\/2-d\/2,u,d,g,v,t)),a.e||(w.e=Ur(l+b-y,i+m\/2-d\/2,u,d,g,v,t))),w},Xr=function(e,t,n){void 0===n&&(n=\"mouse\");var r={};if(\"arrow\"===e.type||\"line\"===e.type||\"draw\"===e.type){if(2===e.points.length){var a=e.points[1];0===a[0]||0===a[1]?r=Kr:a[0]>0&&a[1]<0?r=Vr:a[0]>0&&a[1]>0?r=Kr:a[0]<0&&a[1]>0?r=Vr:a[0]<0&&a[1]<0&&(r=Kr)}}else\"text\"===e.type&&(r=Gr);return Yr(et(e),e.angle,t,n,r)},Zr=function(e,t){return[0,0,0,0,t,e,1,0]},qr=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0);var n=[0,0,0,0,0,0,0,0];if(t<0||t>7)throw new Error(\"Expected `index` betwen 0 and 7, got `\".concat(t,\"`\"));return 0!==e&&(n[t]=e),n},Qr=function(e){return[e[0],e[1],e[2],e[3],-e[4],-e[5],-e[6],-e[7]]},$r=function(e,t){return ia(t)?[e[0]-t,e[1],e[2],e[3],e[4],e[5],e[6],e[7]]:[e[0]-t[0],e[1]-t[1],e[2]-t[2],e[3]-t[3],e[4]-t[4],e[5]-t[5],e[6]-t[6],e[7]-t[7]]},Jr=function(e,t){return ia(t)?[e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*t,e[5]*t,e[6]*t,e[7]*t]:[ea(e,t),t[1]*e[0]+t[0]*e[1]-t[4]*e[2]+t[5]*e[3]+t[2]*e[4]-t[3]*e[5]-t[7]*e[6]-t[6]*e[7],t[2]*e[0]+t[0]*e[2]-t[6]*e[3]+t[3]*e[6],t[3]*e[0]+t[6]*e[2]+t[0]*e[3]-t[2]*e[6],t[4]*e[0]+t[2]*e[1]-t[1]*e[2]+t[7]*e[3]+t[0]*e[4]+t[6]*e[5]-t[5]*e[6]+t[3]*e[7],t[5]*e[0]-t[3]*e[1]+t[7]*e[2]+t[1]*e[3]-t[6]*e[4]+t[0]*e[5]+t[4]*e[6]+t[2]*e[7],t[6]*e[0]+t[3]*e[2]-t[2]*e[3]+t[0]*e[6],t[7]*e[0]+t[6]*e[1]+t[5]*e[2]+t[4]*e[3]+t[3]*e[4]+t[2]*e[5]+t[1]*e[6]+t[0]*e[7]]},ea=function(e,t){return t[0]*e[0]+t[2]*e[2]+t[3]*e[3]-t[6]*e[6]},ta=function(e,t){return[na(e,t),e[1]*t[7]+e[4]*t[5]-e[5]*t[4]+e[7]*t[1],e[2]*t[7]-e[4]*t[6]+e[6]*t[4]+e[7]*t[2],e[3]*t[7]+e[5]*t[6]-e[6]*t[5]+e[7]*t[3],e[4]*t[7]+e[7]*t[4],e[5]*t[7]+e[7]*t[5],e[6]*t[7]+e[7]*t[6],e[7]*t[7]]},na=function(e,t){return e[0]*t[7]+e[1]*t[6]+e[2]*t[5]+e[3]*t[4]+e[4]*t[3]+e[5]*t[2]+e[6]*t[1]+e[7]*t[0]},ra=function(e){return Math.sqrt(Math.abs(e[0]*e[0]-e[2]*e[2]-e[3]*e[3]+e[6]*e[6]))},aa=function(e){var t=ra(e);if(0===t||1===t)return e;var n=e[6]<0?-1:1;return Jr(e,n\/t)},oa=function(e){var t=function(e){return Math.sqrt(Math.abs(e[7]*e[7]-e[5]*e[5]-e[4]*e[4]+e[1]*e[1]))}(e);return 0===t||1===t?e:Jr(e,1\/t)},ia=function(e){return\"number\"==typeof e},la=(qr(1,1),qr(1,2),qr(1,3),qr(1,4),qr(1,5),qr(1,6),qr(1,7),function(e,t,n){return aa([0,n,e,t,0,0,0,0])}),ca=function(e,t){return aa(ta(t,e))},sa=function(e,t){return n=e,[(r=t)[0]*n[0]+r[2]*n[2]+r[3]*n[3]-r[6]*n[6],r[1]*n[0]+r[0]*n[1]-r[4]*n[2]+r[5]*n[3]+r[2]*n[4]-r[3]*n[5]-r[7]*n[6]-r[6]*n[7],r[2]*n[0]+r[0]*n[2]-r[6]*n[3]+r[3]*n[6],r[3]*n[0]+r[6]*n[2]+r[0]*n[3]-r[2]*n[6],r[4]*n[0]+r[7]*n[3]+r[0]*n[4]+r[3]*n[7],r[5]*n[0]+r[7]*n[2]+r[0]*n[5]+r[2]*n[7],r[6]*n[0]+r[0]*n[6],r[7]*n[0]+r[0]*n[7]];var n,r},ua=function(e){var t=e[0];return[0,0,0,0,e[1],t,1,0]},da=function(e){return[e[5],e[4]]},pa=function(e,t){return aa((n=e,[(r=t)[0]*n[0],r[1]*n[0]+r[0]*n[1],r[2]*n[0]+r[0]*n[2],r[3]*n[0]+r[0]*n[3],r[4]*n[0]+r[2]*n[1]-r[1]*n[2]+r[0]*n[4],r[5]*n[0]-r[3]*n[1]+r[1]*n[3]+r[0]*n[5],r[6]*n[0]+r[3]*n[2]-r[2]*n[3]+r[0]*n[6],r[7]*n[0]+r[6]*n[1]+r[5]*n[2]+r[4]*n[3]+r[3]*n[4]+r[2]*n[5]+r[1]*n[6]]));var n,r},fa=function(e,t){return ra(ta(e,t))},ha=function(e,t){return na(e,t)},ma=function(e){return[0,0,0,0,e[4],e[5],0,0]},ga=function(e,t){return n=Jr(e,Math.sin(t\/2)),r=Math.cos(t\/2),ia(r)?[n[0]+r,n[1],n[2],n[3],n[4],n[5],n[6],n[7]]:[n[0]+r[0],n[1]+r[1],n[2]+r[2],n[3]+r[3],n[4]+r[4],n[5]+r[5],n[6]+r[6],n[7]+r[7]];var n,r},va=function(e,t){return aa(Jr(Jr(e,t),Qr(e)))},ba=function(e,t,n,r){var a=10\/t.zoom.value;return!ya(e,t,[n,r])&&xa(e,[n,r],a)},ya=function(e,t,n){var r=10\/t.zoom.value,a=\"text\"===e.type?Oa:function(e){if(\"arrow\"===e.type)return!1;var t=\"transparent\"!==e.backgroundColor;return\"line\"===e.type||\"draw\"===e.type?t&&Ye(e.points):t}(e)?Ma:Ta;return Sa({element:e,point:n,threshold:r,check:a})},wa=function(e,t){return e.selectedElementIds[t.id]},xa=function(e,t,n){var r=t[0],a=t[1],o=et(e),i=o[0],l=o[1],c=o[2],s=o[3],u=Ge(r,a,(i+c)\/2,(l+s)\/2,-e.angle),d=u[0],p=u[1];return d>i-n&&d<c+n&&p>l-n&&p<s+n},Ea=function(e,t){var n=t.x,r=t.y,a=ka(e,e.width,e.height);return Sa({element:e,point:[n,r],threshold:a,check:Ia})},ka=function(e,t,n){var r=(\"diamond\"===e.type?1\/Math.sqrt(2):1)*Math.min(t,n);return Math.max(16,Math.min(.25*r,32))},Sa=function(e){switch(e.element.type){case\"rectangle\":case\"text\":case\"diamond\":case\"ellipse\":var t=Ca(e.element,e.point);return e.check(t,e.threshold);case\"arrow\":case\"line\":case\"draw\":return Da(e);case\"selection\":return console.warn(\"This should not happen, we need to investigate why it does.\"),!1}},Ca=function(e,t){switch(e.type){case\"rectangle\":case\"text\":return Pa(e,t);case\"diamond\":return Aa(e,t);case\"ellipse\":return _a(e,t)}},Oa=function(e,t){return e<0},Ma=function(e,t){return e<t},Ta=function(e,t){return Math.abs(e)<t},Ia=function(e,t){return 0<=e&&e<t},Pa=function(e,t){var n=ja(e,t),r=n[1],a=n[2],o=n[3];return Math.max(ha(r,la(0,1,-o)),ha(r,la(1,0,-a)))},Aa=function(e,t){var n=ja(e,t),r=n[1],a=n[2],o=n[3],i=la(o,a,-o*a);return ha(r,i)},_a=function(e,t){var n=La(e,t),r=n[0],a=n[1];return-function(e){return Math.sign(e[1])}(a)*ha(r,a)},La=function(e,t){var n=ja(e,t),r=n[1],a=n[2],o=n[3],i=da(r),l=i[0],c=i[1],s=.707,u=.707,d=a,p=o;[0,1,2,3].forEach((function(e){var t=d*s,n=p*u,r=(d*d-p*p)*Math.pow(s,3)\/d,a=(p*p-d*d)*Math.pow(u,3)\/p,o=t-r,i=n-a,f=l-r,h=c-a,m=Math.hypot(i,o),g=Math.hypot(h,f);s=Math.min(1,Math.max(0,(f*m\/g+r)\/d)),u=Math.min(1,Math.max(0,(h*m\/g+a)\/p));var v=Math.hypot(u,s);s\/=v,u\/=v}));var f,h=Zr(d*s,p*u);return[r,sa(ca(r,f=h),f)]},Da=function(e){var t=e.element,n=e.threshold;if(!Jn(t))return!1;var r=ja(e.element,e.point),a=r[0],o=r[1],i=r[2],l=r[3],c=la(0,1,-l),s=la(1,0,-i);if(!Ma(ha(o,c),n)||!Ma(ha(o,s),n))return!1;var u=da(a),d=u[0],p=u[1],f=Jn(t);if(e.check===Ma&&f.some((function(e){return Ya(e,d,p,t.strokeSharpness)})))return!0;return f.some((function(e){return Xa(e,d,p,n)}))},ja=function(e,t){var n,r=ua(t),a=et(e),o=Ba(a),i=ga(o,e.angle),l=va(i,r),c=function(e){return[0,0,0,0,Math.abs(e[4]),Math.abs(e[5]),1,0]}($r(l,ma(o))),s=(n=e.x,[0,0,0,0,e.y,n,0,0]),u=$r(l,s),d=a[0],p=a[1];return[u,c,(a[2]-d)\/2,(a[3]-p)\/2]},za=function(e){var t=et(e),n=Ba(t),r=ga(n,e.angle),a=Qr(function(e){return[1,0,0,0,-.5*e[5],.5*e[4],0,0]}(ma(n)));return Jr(a,r)},Ba=function(e){var t=e[0],n=e[1],r=e[2],a=e[3];return Zr((t+r)\/2,(n+a)\/2)},Ha=function(e,t,n){var r=za(e),a=va(r,ua(t)),o=va(r,ua(n)),i=ca(a,o),l=e.height\/e.width,c=e.width\/2,s=e.height\/2,u=i[2],d=i[3],p=i[1],f=Math.abs(d),h=Math.abs(u);switch(e.type){case\"rectangle\":case\"text\":return p\/(c*(h+l*f));case\"diamond\":return f<h?p\/(h*c):p\/(f*s);case\"ellipse\":return p\/(c*Math.sqrt(Math.pow(u,2)+Math.pow(l,2)*Math.pow(d,2)))}},Na=function(e,t,n,r){var a;switch(void 0===r&&(r=0),e.type){case\"rectangle\":case\"text\":case\"diamond\":var o=Ra(e);a=o.flatMap((function(e,n){var a=[e,o[(n+1)%4]];return Fa(t,Wa(a,r))})).concat(o.flatMap((function(e){return Va(e,r,t)})));break;case\"ellipse\":a=Ga(e,r,t)}if(a.length<2)return[];var i=a.sort((function(e,t){return fa(e,n)-fa(t,n)}));return[i[0],i[i.length-1]]},Ra=function(e,t){void 0===t&&(t=1);var n=t*e.width\/2,r=t*e.height\/2;switch(e.type){case\"rectangle\":case\"text\":return[Zr(n,r),Zr(n,-r),Zr(-n,-r),Zr(-n,r)];case\"diamond\":return[Zr(0,r),Zr(n,0),Zr(0,-r),Zr(-n,0)]}},Fa=function(e,t){var n=t[0],r=t[1];return ha(n,e)*ha(r,e)>=0?[]:[pa(e,ca(n,r))]},Wa=function(e,t){var n=e[0],r=e[1],a=function(e,t){var n=.5*t;return[1,0,0,0,n*e[4],n*e[5],0,0]}(function(e,t){return oa([0,0,0,0,t[4]-e[4],t[5]-e[5],0,0])}(n,r),t);return[va(a,n),va(a,r)]},Ga=function(e,t,n){var r=e.width\/2+t,a=e.height\/2+t,o=n[2],i=n[3],l=n[1],c=r*r*o*o+a*a*i*i,s=c-l*l;if(0===c||s<=0)return[];var u=Math.sqrt(s),d=-r*r*o*l,p=-a*a*i*l;return[Zr((d+r*a*i*u)\/c,(p-r*a*o*u)\/c),Zr((d-r*a*i*u)\/c,(p+r*a*o*u)\/c)]},Va=function(e,t,n){if(0===t)return 0===ha(n,e)?[e]:[];var r=n[2],a=n[3],o=n[1],i=da(e),l=i[0],c=i[1],s=r*r+a*a,u=t*t*s-Math.pow(r*l+a*c+o,2);if(0===s||u<=0)return[];var d=Math.sqrt(u),p=l*a*a-c*r*a-r*o,f=c*r*r-l*r*a-a*o;return[Zr((p+a*d)\/s,(f-r*d)\/s),Zr((p-a*d)\/s,(f+r*d)\/s)]},Ka=function(e,t,n){var r=Math.abs(t),a=e.width*r\/2,o=e.height*r\/2,i=Math.sign(t),l=da(n),c=l[0],s=l[1],u=0===s?1e-4:s,d=Math.pow(c,2)*Math.pow(o,2)+Math.pow(u,2)*Math.pow(a,2),p=(-c*Math.pow(o,2)+i*u*Math.sqrt(Math.max(0,d-Math.pow(a,2)*Math.pow(o,2))))\/d,f=(-p*c-1)\/u,h=-Math.pow(a,2)*p\/(Math.pow(f,2)*Math.pow(o,2)+Math.pow(p,2)*Math.pow(a,2));return Zr(h,(-p*h-1)\/f)},Ua=function(e,t,n){var r=Math.abs(t),a=Math.sign(t),o=Ra(e,r),i=0,l=null;return o.forEach((function(e){var t=a*ca(n,e)[1];t>i&&(i=t,l=e)})),l},Ya=function(e,t,n,r){for(var a=[],o=!1,i=0,l=tt(e);i<l.length;i++){var c=l[i];\"move\"===c.op?(o=!o)&&a.push([c.data[0],c.data[1]]):\"bcurveTo\"===c.op&&o&&(a.push([c.data[0],c.data[1]]),a.push([c.data[2],c.data[3]]),a.push([c.data[4],c.data[5]]))}if(a.length>=4){if(\"sharp\"===r)return Xe(a,t,n);var s=H(a,10,5);return Xe(s,t,n)}return!1},Xa=function(e,t,n,r){var a=tt(e),o=[0,0];return a.some((function(e,a){var i=e.op,l=e.data;if(\"move\"===i)o=l;else if(\"bcurveTo\"===i){var c=[l[0],l[1]],s=[l[2],l[3]],u=[l[4],l[5]],d=o;return o=u,function(e,t,n,r,a,o){for(var i=a[0],l=a[1],c=function(a,o){return Math.pow(1-a,3)*r[o]+3*a*Math.pow(1-a,2)*n[o]+3*Math.pow(a,2)*(1-a)*t[o]+e[o]*Math.pow(a,3)},s=0;s<=1;){var u=c(s,0),d=c(s,1);if(Math.sqrt(Math.pow(u-i,2)+Math.pow(d-l,2))<o)return!0;s+=.01}return!1}(d,c,s,u,[t,n],r)}return!1}))},Za=function(e,t,n){return t>=e[0]&&t<=e[0]+e[2]&&n>=e[1]&&n<=e[1]+e[3]},qa=function(e,t,n,r,a,o){return e.reduce((function(e,i){if(e)return e;var l=function(e,t,n,r,a,o){if(!t.selectedElementIds[e.id])return!1;var i=Xr(e,a,o),l=i.rotation,c=yr()(i,[\"rotation\"]);if(l&&Za(l,n,r))return\"rotation\";var s=Object.keys(c).filter((function(e){var t=c[e];return!!t&&Za(t,n,r)}));return s.length>0&&s[0]}(i,t,n,r,a,o);return l?{element:i,transformHandleType:l}:null}),null)},Qa=function(e,t,n,r,a){var o=e[0],i=e[1],l=e[2],c=e[3],s=Yr([o,i,l,c],0,r,a,Wr);return Object.keys(s).find((function(e){var r=s[e];return r&&Za(r,t,n)}))||!1},$a=[\"ns\",\"nesw\",\"ew\",\"nwse\"],Ja=function(e){var t=e.element,n=e.transformHandleType,r=t&&Math.sign(t.height)*Math.sign(t.width)==-1,a=null;switch(n){case\"n\":case\"s\":a=\"ns\";break;case\"w\":case\"e\":a=\"ew\";break;case\"nw\":case\"se\":a=r?\"nesw\":\"nwse\";break;case\"ne\":case\"sw\":a=r?\"nwse\":\"nesw\";break;case\"rotation\":return\"grab\"}return a&&t&&(a=function(e,t){var n=$a.indexOf(e);if(n>=0){var r=Math.round(t\/(Math.PI\/4));e=$a[(n+r)%$a.length]}return e}(a,t.angle)),a?\"\".concat(a,\"-resize\"):\"\"},eo=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function to(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function no(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?to(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):to(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ro=function(){function e(t,n){this.elementId=t.id,lr.mapElementToScene(this.elementId,n),e.normalizePoints(t),this.activePointIndex=null,this.lastUncommittedPoint=null,this.isDragging=!1,this.pointerOffset={x:0,y:0},this.startBindingElement=\"keep\",this.endBindingElement=\"keep\"}return e.getElement=function(e){var t,n=null===(t=lr.getScene(e))||void 0===t?void 0:t.getNonDeletedElement(e);return n||null},e.handlePointDragging=function(t,n,r,a,o){if(!t.editingLinearElement)return!1;var i=t.editingLinearElement,l=i.activePointIndex,c=i.elementId,s=i.isDragging,u=e.getElement(c);if(!u)return!1;if(null!=l&&l>-1){!1===s&&n({editingLinearElement:no(no({},i),{},{isDragging:!0})});var d=e.createPointAt(u,r-i.pointerOffset.x,a-i.pointerOffset.y,t.gridSize);return e.movePoint(u,l,d),Re(u)&&o(u,0===l?\"start\":\"end\"),!0}return!1},e.handlePointerUp=function(t,n,r){var a,o=n.elementId,i=n.activePointIndex,l=n.isDragging,c=e.getElement(o);if(!c)return n;var s={};if(l&&(0===i||i===c.points.length-1)){Ye(c.points,r.zoom.value)&&e.movePoint(c,i,0===i?c.points[c.points.length-1]:c.points[0]);var u=io(r)?bo(jn(e.getPointAtIndexGlobalCoordinates(c,i)),lr.getScene(c)):null;(a={})[0===i?\"startBindingElement\":\"endBindingElement\"]=u,s=a}return no(no(no({},n),s),{},{isDragging:!1,pointerOffset:{x:0,y:0}})},e.handlePointerDown=function(t,n,r,a,o){var i={didAddPoint:!1,hitElement:null};if(!n.editingLinearElement)return i;var l=n.editingLinearElement.elementId,c=e.getElement(l);if(!c)return i;if(t.altKey)return null==n.editingLinearElement.lastUncommittedPoint&&fr(c,{points:eo(eo([],c.points),[e.createPointAt(c,o.x,o.y,n.gridSize)])}),a.resumeRecording(),r({editingLinearElement:no(no({},n.editingLinearElement),{},{activePointIndex:c.points.length-1,lastUncommittedPoint:null,endBindingElement:bo(o,lr.getScene(c))})}),i.didAddPoint=!0,i;var s=e.getPointIndexUnderCursor(c,n.zoom,o.x,o.y);if(s>-1)i.hitElement=c;else{var u=n.editingLinearElement,d=u.startBindingElement,p=u.endBindingElement;io(n)&&Re(c)&&lo(c,d,p)}var f=et(c),h=f[0],m=f[1],g=(h+f[2])\/2,v=(m+f[3])\/2,b=s>-1&&Ge(c.x+c.points[s][0],c.y+c.points[s][1],g,v,c.angle);return r({editingLinearElement:no(no({},n.editingLinearElement),{},{activePointIndex:s>-1?s:null,pointerOffset:b?{x:o.x-b[0],y:o.y-b[1]}:{x:0,y:0}})}),i},e.handlePointerMove=function(t,n,r,a,o){var i=a.elementId,l=a.lastUncommittedPoint,c=e.getElement(i);if(!c)return a;var s=c.points,u=s[s.length-1];if(!t.altKey)return u===l&&e.movePoint(c,s.length-1,\"delete\"),no(no({},a),{},{lastUncommittedPoint:null});var d=e.createPointAt(c,n-a.pointerOffset.x,r-a.pointerOffset.y,o);return u===l?e.movePoint(c,c.points.length-1,d):e.movePoint(c,\"new\",d),no(no({},a),{},{lastUncommittedPoint:c.points[c.points.length-1]})},e.getPointsGlobalCoordinates=function(e){var t=et(e),n=t[0],r=t[1],a=t[2],o=t[3],i=(n+a)\/2,l=(r+o)\/2;return e.points.map((function(t){var n,r=e.x,a=e.y;return[r=(n=Ge(r+t[0],a+t[1],i,l,e.angle))[0],a=n[1]]}))},e.getPointAtIndexGlobalCoordinates=function(e,t){var n=t<0?e.points.length+t:t,r=et(e),a=r[0],o=r[1],i=(a+r[2])\/2,l=(o+r[3])\/2,c=e.points[n],s=e.x,u=e.y;return Ge(s+c[0],u+c[1],i,l,e.angle)},e.pointFromAbsoluteCoords=function(e,t){var n=et(e),r=n[0],a=n[1],o=(r+n[2])\/2,i=(a+n[3])\/2,l=Ge(t[0],t[1],o,i,-e.angle),c=l[0],s=l[1];return[c-e.x,s-e.y]},e.getPointIndexUnderCursor=function(e,t,n,r){for(var a=this.getPointsGlobalCoordinates(e),o=a.length;--o>-1;){var i=a[o];if(Ue(n,r,i[0],i[1])*t.value<this.POINT_HANDLE_SIZE\/2+1)return o}return-1},e.createPointAt=function(e,t,n,r){var a=$e(t,n,r),o=et(e),i=o[0],l=o[1],c=(i+o[2])\/2,s=(l+o[3])\/2,u=Ge(a[0],a[1],c,s,-e.angle),d=u[0],p=u[1];return[d-e.x,p-e.y]},e.normalizePoints=function(e){var t=e.points,n=t[0][0],r=t[0][1];fr(e,{points:t.map((function(e,t){return[e[0]-n,e[1]-r]})),x:e.x+n,y:e.y+r})},e.movePointByOffset=function(t,n,r){var a=t.points[n],o=a[0],i=a[1];e.movePoint(t,n,[o+r.x,i+r.y])},e.movePoint=function(e,t,n,r){var a,o=e.points,i=0,l=0;if(\"delete\"===n){if(\"new\"===t)throw new Error(\"invalid args in movePoint\");(a=o.slice()).splice(t,1),0===t&&(i=a[0][0],l=a[0][1],a=a.map((function(e,t){return 0===t?[0,0]:[e[0]-i,e[1]-l]})))}else if(\"new\"===t)a=eo(eo([],o),[n]);else{var c=n[0]-o[t][0],s=n[1]-o[t][1];a=o.map((function(e,n){return n===t?0===n?(i=c,l=s,e):(i=0,l=0,[e[0]+c,e[1]+s]):i||l?[e[0]-i,e[1]-l]:e}))}var u=lt(e,a,e.strokeSharpness||\"round\"),d=lt(e,o,e.strokeSharpness||\"round\"),p=(u[0]+u[2])\/2,f=(u[1]+u[3])\/2,h=(d[0]+d[2])\/2,m=(d[1]+d[3])\/2,g=Ge(i,l,h-p,m-f,e.angle);fr(e,no(no({},r),{},{points:a,x:e.x+g[0],y:e.y+g[1]}))},e}();ro.POINT_HANDLE_SIZE=20;var ao=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function oo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var io=function(e){return e.isBindingEnabled},lo=function(e,t,n){var r=new Set,a=new Set;co(e,t,n,\"start\",r,a),co(e,n,t,\"end\",r,a);var o=Array.from(a).filter((function(e){return!r.has(e)}));lr.getScene(e).getNonDeletedElements(o).forEach((function(t){var n;fr(t,{boundElementIds:null===(n=t.boundElementIds)||void 0===n?void 0:n.filter((function(t){return t!==e.id}))})}))},co=function(e,t,n,r,a,o){if(\"keep\"!==t)if(null!=t)null!=n&&(\"keep\"===n?ho(e,t,r):\"start\"!==r&&n.id===t.id)||(fo(e,t,r),a.add(t.id));else{var i=vo(e,r);null!=i&&o.add(i)}},so=function(e){e.forEach((function(e){Re(e)?lo(e,Oo(e,\"start\"),Oo(e,\"end\")):We(e)&&uo(e)}))},uo=function(e){To(e).forEach((function(t){var n=t[0],r=t[1];return lo(n,\"end\"===r?\"keep\":e,\"start\"===r?\"keep\":e)}))},po=function(e,t,n,r){null!=t.startBoundElement&&fo(e,t.startBoundElement,\"start\");var a=bo(r,n);null==a||ho(e,a,\"end\")||fo(e,a,\"end\")},fo=function(e,t,n){var r,a;fr(e,((r={})[\"start\"===n?\"startBinding\":\"endBinding\"]=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?oo(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):oo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({elementId:t.id},yo(e,t,n)),r)),fr(t,{boundElementIds:Array.from(new Set(ao(ao([],null!==(a=t.boundElementIds)&&void 0!==a?a:[]),[e.id])))})},ho=function(e,t,n){var r=e[\"start\"===n?\"endBinding\":\"startBinding\"];return mo(e,null==r?void 0:r.elementId,t)},mo=function(e,t,n){return t===n.id&&e.points.length<3},go=function(e){e.forEach((function(e){Re(e)&&lo(e,null,null)}))},vo=function(e,t){var n,r=\"start\"===t?\"startBinding\":\"endBinding\",a=e[r];return null==a?null:(fr(e,((n={})[r]=null,n)),a.elementId)},bo=function(e,t){return vi(t.getElements(),(function(t){return We(t)&&Ea(t,e)}))},yo=function(e,t,n){var r=\"start\"===n?-1:1,a=-1===r?0:e.points.length-1,o=a-r,i=ro.getPointAtIndexGlobalCoordinates(e,a),l=ro.getPointAtIndexGlobalCoordinates(e,o);return{focus:Ha(t,l,i),gap:Math.max(1,Ca(t,i))}},wo=function(e,t){var n,r=null!==(n=e.boundElementIds)&&void 0!==n?n:[];if(0!==r.length){var a=null!=t?t:{},o=a.newSize,i=a.simultaneouslyUpdated,l=Eo(i);lr.getScene(e).getNonDeletedElements(r).forEach((function(t){var n=e;if(xo(t,n)){var r=So(n,t.startBinding,o),a=So(n,t.endBinding,o);l.has(t.id)?fr(t,{startBinding:r,endBinding:a}):(ko(t,\"start\",r,e),ko(t,\"end\",a,e))}}))}},xo=function(e,t){var n,r;return(null===(n=e.startBinding)||void 0===n?void 0:n.elementId)===t.id||(null===(r=e.endBinding)||void 0===r?void 0:r.elementId)===t.id},Eo=function(e){return new Set((e||[]).map((function(e){return e.id})))},ko=function(e,t,n,r){var a;if(!(null==n||n.elementId!==r.id&&e.points.length>2)){var o=lr.getScene(e).getElement(n.elementId);if(null!=o){var i,l=\"start\"===t?-1:1,c=-1===l?0:e.points.length-1,s=c-l,u=ro.getPointAtIndexGlobalCoordinates(e,s),d=function(e,t,n){if(0===t){var r=et(e),a=Ba(r);return da(a)}var o,i=za(e),l=va(i,ua(n)),c=Qr(i);switch(e.type){case\"rectangle\":case\"text\":case\"diamond\":o=Ua(e,t,l);break;case\"ellipse\":o=Ka(e,t,l)}return da(va(c,o))}(o,n.focus,u);if(0===n.gap)i=d;else{var p=function(e,t,n,r){void 0===r&&(r=0);var a=za(e),o=va(a,ua(t)),i=va(a,ua(n)),l=ca(o,i),c=Qr(a);return Na(e,l,o,r).map((function(e){return da(va(c,e))}))}(o,u,d,n.gap);i=0===p.length?d:p[0]}ro.movePoint(e,c,ro.pointFromAbsoluteCoords(e,i),((a={})[\"start\"===t?\"startBinding\":\"endBinding\"]=n,a))}}},So=function(e,t,n){if(null==t||null==n)return t;var r=t.gap,a=t.focus,o=t.elementId,i=n.width,l=n.height,c=e.width,s=e.height;return{elementId:o,gap:Math.max(1,Math.min(ka(e,i,l),r*(i<l?i\/c:l\/s))),focus:a}},Co=function(e){return[Oo(e,\"start\"),Oo(e,\"end\")].filter((function(e){return null!=e}))},Oo=function(e,t){return bo(Mo(e,t),lr.getScene(e))},Mo=function(e,t){var n=\"start\"===t?0:-1;return jn(ro.getPointAtIndexGlobalCoordinates(e,n))},To=function(e){return lr.getScene(e).getElements().map((function(t){if(!Re(t))return null;var n=Io(t,\"start\",e),r=Io(t,\"end\",e);return n||r?[t,n&&r?\"both\":n?\"start\":\"end\",e]:null})).filter((function(e){return null!=e}))},Io=function(e,t,n){return null==e[\"start\"===t?\"startBinding\":\"endBinding\"]&&!ho(e,n,t)&&Ea(n,Mo(e,t))},Po=function(e,t,n,r){var a=new Set,o=new Set,i=\"duplicatesServeAsOld\"===r;t.forEach((function(e){var t=e.boundElementIds;if(null!=t&&t.length>0&&(t.forEach((function(e){i&&!n.has(e)&&a.add(e)})),o.add(n.get(e.id))),Re(e)){if(null!=e.startBinding){var r=e.startBinding.elementId;i&&!n.has(r)&&o.add(r)}if(null!=e.endBinding){r=e.endBinding.elementId;i&&!n.has(r)&&o.add(r)}null==e.startBinding&&null==e.endBinding||a.add(n.get(e.id))}})),e.filter((function(e){var t=e.id;return a.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;fr(e,{startBinding:Ao(t,n),endBinding:Ao(r,n)})})),e.filter((function(e){var t=e.id;return o.has(t)})).forEach((function(e){var t=e.boundElementIds;null!=t&&t.length>0&&fr(e,{boundElementIds:t.map((function(e){var t;return null!==(t=n.get(e))&&void 0!==t?t:e}))})}))},Ao=function(e,t){var n;if(null==e)return null;var r=e.elementId;return{focus:e.focus,gap:e.gap,elementId:null!==(n=t.get(r))&&void 0!==n?n:r}},_o=function(e,t){var n=new Set(t.map((function(e){return e.id}))),r=new Set;t.forEach((function(e){var t;We(e)&&(null===(t=e.boundElementIds)||void 0===t||t.forEach((function(e){n.has(e)||r.add(e)})))})),e.filter((function(e){var t=e.id;return r.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;fr(e,{startBinding:Lo(t,n),endBinding:Lo(r,n)})}))},Lo=function(e,t){return null==e||t.has(e.elementId)?null:e},Do=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function jo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function zo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jo(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Bo=function(e){return e>=2*Math.PI?e-2*Math.PI:e},Ho=function(e,t,n,r){var a=et(e),o=a[0],i=a[1],l=(o+a[2])\/2,c=(i+a[3])\/2,u=5*Math.PI\/2+Math.atan2(n-c,t-l);r&&(u+=s.ay\/2,u-=u%s.ay),u=Bo(u),fr(e,{angle:u})},No=function(e,t,n,r,a){var o;var i=et(e),l=i[0],c=i[1],s=i[2],u=i[3],d=Ge(r,a,(l+s)\/2,(c+u)\/2,-e.angle),p=d[0],f=d[1],h=\"end\"===t?[p-e.x,f-e.y]:[e.x+e.points[1][0]-p,e.y+e.points[1][1]-f],m=h[0],g=h[1];n&&(m=(o=function(e,t,n,r){var a=gr.apply(void 0,Do([e],Ge(t,n,0,0,r)));return Ge(a.width,a.height,0,0,-r)}(e.type,m,g,e.angle))[0],g=o[1]);var v=Ke(\"end\"===t?{s:!0,e:!0}:{n:!0,w:!0},e.x,e.y,e.angle,0,0,(e.points[1][0]-m)\/2,(e.points[1][1]-g)\/2),b=v[0],y=v[1];fr(e,{x:b,y,points:[[0,0],[m,g]]})},Ro=function(e,t,n){return He(e)?{points:Je(0,t,Je(1,n,e.points))}:{}},Fo=function(e,t,n){var r=e.fontSize*(t\/e.width);if(r<1)return null;var a=wn(e.text,yn({fontSize:r,fontFamily:e.fontFamily}));return{size:r,baseline:a.baseline+(n-a.height)}},Wo=function(e,t,n,r,a){var o,i=et(e),l=i[0],c=i[1],s=i[2],u=i[3],d=Ge(r,a,(l+s)\/2,(c+u)\/2,-e.angle),p=d[0],f=d[1];switch(t){case\"se\":o=Math.max((p-l)\/(s-l),(f-c)\/(u-c));break;case\"nw\":o=Math.max((s-p)\/(s-l),(u-f)\/(u-c));break;case\"ne\":o=Math.max((p-l)\/(s-l),(u-f)\/(u-c));break;case\"sw\":o=Math.max((s-p)\/(s-l),(f-c)\/(u-c))}if(o>0){var h=e.width*o,m=e.height*o,g=Fo(e,h,m);if(null===g)return;var v=it(e,h,m),b=(l-v[0])\/2,y=(c-v[1])\/2,w=(s-v[2])\/2,x=(u-v[3])\/2,E=Ke(function(e,t){return{n:\/^(n|ne|nw)$\/.test(e)||t&&\/^(s|se|sw)$\/.test(e),s:\/^(s|se|sw)$\/.test(e)||t&&\/^(n|ne|nw)$\/.test(e),w:\/^(w|nw|sw)$\/.test(e)||t&&\/^(e|ne|se)$\/.test(e),e:\/^(e|ne|se)$\/.test(e)||t&&\/^(w|nw|sw)$\/.test(e)}}(t,n),e.x,e.y,e.angle,b,y,w,x),k=E[0],S=E[1];fr(e,{fontSize:g.size,width:h,height:m,baseline:g.baseline,x:k,y:S})}},Go=function(e,t,n,r,a,o,i){var l,c,s=it(e,e.width,e.height),u=[s[0],s[1]],d=[s[2],s[3]],p=[((l=u)[0]+(c=d)[0])\/2,(l[1]+c[1])\/2],f=Ve([o,i],p,-e.angle),h=it(n,n.width,n.height),m=h[0],g=h[1],v=h[2]-m,b=h[3]-g,y=(d[0]-u[0])\/v,w=(d[1]-u[1])\/b;r.includes(\"e\")&&(y=(f[0]-u[0])\/v),r.includes(\"s\")&&(w=(f[1]-u[1])\/b),r.includes(\"w\")&&(y=(d[0]-f[0])\/v),r.includes(\"n\")&&(w=(d[1]-f[1])\/b);var x=e.width,E=e.height,k=n.width*y,S=n.height*w;if(a&&(k=2*k-x,S=2*S-E),t){var C=Math.abs(k)\/x,O=Math.abs(S)\/E;if(1===r.length&&(S*=C,k*=O),2===r.length){var M=Math.max(C,O);k=x*M*Math.sign(k),S=E*M*Math.sign(S)}}var T=it(e,k,S),I=T[0],P=T[1],A=T[2]-I,_=T[3]-P,L=Do([],u);if([\"n\",\"w\",\"nw\"].includes(r)&&(L=[d[0]-Math.abs(A),d[1]-Math.abs(_)]),\"ne\"===r){var D=[u[0],d[1]];L=[D[0],D[1]-Math.abs(_)]}if(\"sw\"===r){var j=[d[0],u[1]];L=[j[0]-Math.abs(A),j[1]]}t&&([\"s\",\"n\"].includes(r)&&(L[0]=p[0]-A\/2),[\"e\",\"w\"].includes(r)&&(L[1]=p[1]-_\/2)),k<0&&(r.includes(\"e\")&&(L[0]-=Math.abs(A)),r.includes(\"w\")&&(L[0]+=Math.abs(A))),S<0&&(r.includes(\"s\")&&(L[1]-=Math.abs(_)),r.includes(\"n\")&&(L[1]+=Math.abs(_))),a&&(L[0]=p[0]-Math.abs(A)\/2,L[1]=p[1]-Math.abs(_)\/2);var z=e.angle,B=Ve(L,p,z),H=[L[0]+Math.abs(A)\/2,L[1]+Math.abs(_)\/2],N=Ve(H,p,z);L=Ve(B,N,-z);var R=Ro(e,k,S),F=Do([],L);F[0]+=e.x-I,F[1]+=e.y-P;var W=zo({width:Math.abs(k),height:Math.abs(S),x:F[0],y:F[1]},R);0!==W.width&&0!==W.height&&Number.isFinite(W.x)&&Number.isFinite(W.y)&&(wo(n,{newSize:{width:W.width,height:W.height}}),fr(n,W))},Vo=function(e,t,n,r){var a,o,i=ot(e),l=i[0],c=i[1],s=i[2],u=i[3];switch(t){case\"se\":a=Math.max((n-l)\/(s-l),(r-c)\/(u-c)),o=function(e,t,n){var r=t[0],o=t[1],i=n[0],s=n[1];return{x:e.x+(r-l)*(a-1)+r-i,y:e.y+(o-c)*(a-1)+o-s}};break;case\"nw\":a=Math.max((s-n)\/(s-l),(u-r)\/(u-c)),o=function(e,t,n){var r=t[2],o=t[3],i=n[2],l=n[3];return{x:e.x-(s-r)*(a-1)+r-i,y:e.y-(u-o)*(a-1)+o-l}};break;case\"ne\":a=Math.max((n-l)\/(s-l),(u-r)\/(u-c)),o=function(e,t,n){var r=t[0],o=t[3],i=n[0],c=n[3];return{x:e.x+(r-l)*(a-1)+r-i,y:e.y-(u-o)*(a-1)+o-c}};break;case\"sw\":a=Math.max((s-n)\/(s-l),(r-c)\/(u-c)),o=function(e,t,n){var r=t[1],o=t[2],i=n[1],l=n[2];return{x:e.x-(s-o)*(a-1)+o-l,y:e.y+(r-c)*(a-1)+r-i}}}if(a>0){var d=e.reduce((function(t,n){if(!t)return t;var r=n.width*a,i=n.height*a,l={};if(\"text\"===n.type){var c=Fo(n,r,i);if(null===c)return null;l={fontSize:c.size,baseline:c.baseline}}var s=et(n),u=Ro(n,r,i);wo(n,{newSize:{width:r,height:i},simultaneouslyUpdated:e});var d=it(zo(zo({},n),u),r,i),p=o(n,s,d),f=p.x,h=p.y;return Do(Do([],t),[zo(zo({width:r,height:i,x:f,y:h},u),l)])}),[]);d&&e.forEach((function(e,t){fr(e,d[t])}))}},Ko=function(e,t,n,r,a,o,i){var l=5*Math.PI\/2+Math.atan2(r-i,n-o);a&&(l+=s.ay\/2,l-=l%s.ay),t.forEach((function(t,n){var r,a,c=et(t),s=c[0],u=c[1],d=(s+c[2])\/2,p=(u+c[3])\/2,f=null!==(r=null===(a=e.originalElements.get(t.id))||void 0===a?void 0:a.angle)&&void 0!==r?r:t.angle,h=Ge(d,p,o,i,l+f-t.angle),m=h[0],g=h[1];fr(t,{x:t.x+(m-d),y:t.y+(g-p),angle:Bo(l+f)})}))},Uo=function(e,t,n,r,a,o,i,l,c,s){var u;c&&(i=(u=gr(t,i,o<r?-l:l)).width,(l=u.height)<0&&(l=-l));var d=a<n?n-i:n,p=o<r?r-l:r;s&&(d=n-(i+=i)\/2,p=r-(l+=l)\/2),0!==i&&0!==l&&fr(e,{x:d,y:p,width:i,height:l})},Yo=function(e){return e.replace(\/\\t\/g,\"        \").replace(\/\\r?\\n|\\r\/g,\"\\n\")},Xo=function(e,t,n,r,a){var o=r.zoom,i=r.offsetTop,l=r.offsetLeft,c=180*n\/Math.PI,s=(e-2*l)*(o.value-1)\/2,u=(t-2*i)*(o.value-1)\/2;return e>a&&1!==o.value&&(s=a\/2*(o.value-1)),\"translate(\".concat(s,\"px, \").concat(u,\"px) scale(\").concat(o.value,\") rotate(\").concat(c,\"deg)\")},Zo=function(e){var t=wn(e.text,yn(e));fr(e,{width:t.width,height:t.height,baseline:t.baseline})},qo=function(e,t){return Boolean(!e.viewModeEnabled&&(e.editingElement||ci(t,e).length||\"selection\"!==e.elementType))};function Qo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qo(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Jo=function(e){return e.filter((function(e){return e.isDeleted||!mr(e)}))},ei=function(e){return e.reduce((function(e,t){return e[t.id]=t,e}),{})},ti=function(e){return e.reduce((function(e,t){return e+t.version}),0)},ni=function(e){return e.filter((function(e){return!e.isDeleted}))},ri=function(e){return!e.isDeleted},ai=function(e){return ni(e).map((function(e){return Ne(e.type)?$o($o({},e),{},{lastCommittedPoint:null}):e}))},oi=function(e){return ai(e)},ii=function(e,t,n){var r=[e.horizontal,e.vertical].map((function(e){return null!=e&&e.x<=t&&t<=e.x+e.width&&e.y<=n&&n<=e.y+e.height})),a=r[0],o=r[1];return{isOverEither:a||o,isOverHorizontal:a,isOverVertical:o}},li=function(e,t){return e.some((function(e){return t.selectedElementIds[e.id]}))},ci=function(e,t){return e.filter((function(e){return t.selectedElementIds[e.id]}))},si=function(e,t){return t.editingElement?[t.editingElement]:ci(e,t)},ui=function(e){var t=e.scenePoint,n=e.viewportDimensions,r=e.zoom;return{scrollX:n.width\/2*(1\/r.value)-t.x-r.translation.x*(1\/r.value),scrollY:n.height\/2*(1\/r.value)-t.y-r.translation.y*(1\/r.value)}},di=function(e,t,n){var r;if(!e.length)return{scrollX:0,scrollY:0};var a=ot(e),o=a[0],i=a[1],l=a[2],c=a[3];return function(e,t,n){var r=n[0],a=n[1],o=n[2],i=n[3],l=An({sceneX:r,sceneY:a},e),c=l.x,s=l.y,u=An({sceneX:o,sceneY:i},e),d=u.x,p=u.y;return d-c>e.width||p-s>e.height}(t,0,[o,i,l,c])&&(o=(r=function(e,t){if(!e.length)return[0,0,0,0];var n=1\/0,r=e[0];return e.forEach((function(e){var a=at(e),o=a[0],i=a[1],l=a[2],c=a[3],s=Ue((o+l)\/2,(i+c)\/2,t.x,t.y);s<n&&(n=s,r=e)})),at(r)}(e,Pn({clientX:t.scrollX,clientY:t.scrollY},t)))[0],i=r[1],l=r[2],c=r[3]),ui({scenePoint:{x:(o+l)\/2,y:(i+c)\/2},viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})},pi=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"draw\"===e||\"line\"===e},fi=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"arrow\"===e||\"draw\"===e||\"line\"===e},hi=function(e){return\"rectangle\"===e||\"arrow\"===e||\"draw\"===e||\"line\"===e},mi=function(e){return\"text\"===e},gi=function(e){return\"arrow\"===e},vi=function(e,t){for(var n=null,r=e.length-1;r>=0;--r){var a=e[r];if(!a.isDeleted&&t(a)){n=a;break}}return n},bi=function(e,t,n,r){return void 0===r&&(r={x:0,y:0}),{value:e,translation:{x:r.x-n.left-(r.x-n.left-t.translation.x)*(e\/t.value),y:r.y-n.top-(r.y-n.top-t.translation.y)*(e\/t.value)}}},yi=function(e){var t=parseFloat(e.toFixed(2));return Math.max(.1,Math.min(t,10))},wi=(n(9478),c().forwardRef((function(e,t){var n=c().useRef(null);c().useImperativeHandle(t,(function(){return n.current}));var r=\"ToolIcon_size_\".concat(e.size||\"m\");return\"button\"===e.type?c().createElement(\"button\",{className:ze(\"ToolIcon_type_button\",r,e.className,e.visible&&!e.hidden?\"ToolIcon_type_button--show\":\"ToolIcon_type_button--hide\",{ToolIcon:!e.hidden,\"ToolIcon--selected\":e.selected}),hidden:e.hidden,title:e.title,\"aria-label\":e[\"aria-label\"],type:\"button\",onClick:e.onClick,ref:n},c().createElement(\"div\",{className:\"ToolIcon__icon\",\"aria-hidden\":\"true\"},e.icon||e.label,e.keyBindingLabel&&c().createElement(\"span\",{className:\"ToolIcon__keybinding\"},e.keyBindingLabel)),e.showAriaLabel&&c().createElement(\"div\",{className:\"ToolIcon__label\"},e[\"aria-label\"]),e.children):c().createElement(\"label\",{className:ze(\"ToolIcon\",e.className),title:e.title},c().createElement(\"input\",{className:\"ToolIcon_type_radio \".concat(r),type:\"radio\",name:e.name,\"aria-label\":e[\"aria-label\"],\"aria-keyshortcuts\":e[\"aria-keyshortcuts\"],\"data-testid\":e[\"data-testid\"],id:e.id,onChange:e.onChange,checked:e.checked,ref:n}),c().createElement(\"div\",{className:\"ToolIcon__icon\"},e.icon,e.keyBindingLabel&&c().createElement(\"span\",{className:\"ToolIcon__keybinding\"},e.keyBindingLabel)))})));wi.defaultProps={visible:!0,className:\"\"};var xi=function(e){return\"light\"===e?ct.$y[4]:ct.$y[9]},Ei=function(e){return\"light\"===e?ct.Sn:ct.MA[4]},ki=function(e){return\"light\"===e?ct.ix:\"#1e1e1e\"},Si=function(e,t){void 0===t&&(t=512);var n=\"number\"==typeof t?{width:t}:t,r=n.width,a=void 0===r?512:r,o=n.height,i=void 0===o?a:o,l=n.mirror,s=n.style;return c().createElement(\"svg\",{\"aria-hidden\":\"true\",focusable:\"false\",role:\"img\",viewBox:\"0 0 \".concat(a,\" \").concat(i),className:ze({\"rtl-mirror\":l}),style:s},\"string\"==typeof e?c().createElement(\"path\",{fill:\"currentColor\",d:e}):e)},Ci=Si(\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\",{mirror:!0}),Oi=Si(\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z\",{width:448,height:512}),Mi=Si(\"M252 54L203 8a28 27 0 00-20-8H28C12 0 0 12 0 27v195c0 15 12 26 28 26h204c15 0 28-11 28-26V73a28 27 0 00-8-19zM130 213c-21 0-37-16-37-36 0-19 16-35 37-35 20 0 37 16 37 35 0 20-17 36-37 36zm56-169v56c0 4-4 6-7 6H44c-4 0-7-2-7-6V42c0-4 3-7 7-7h133l4 2 3 2a7 7 0 012 5z M296 201l87 95-188 205-78 9c-10 1-19-8-18-20l9-84zm141-14l-41-44a31 31 0 00-46 0l-38 41 87 95 38-42c13-14 13-36 0-50z\",{width:448,height:512}),Ti=Si(\"M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z\",{width:576,height:512,mirror:!0}),Ii=Si(\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\",{width:384,height:512}),Pi=Si(\"M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z\",{width:448,height:512}),Ai=Si(\"M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\"),_i=Si(\"M384 121.9c0-6.3-2.5-12.4-7-16.9L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128zM571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-379 28v-32c0-8.8 7.2-16 16-16h176V160H248c-13.2 0-24-10.8-24-24V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V352H208c-8.8 0-16-7.2-16-16z\",{width:576,height:512,mirror:!0}),Li=Si(\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),Di=Si(\"M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),ji=Si(\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"),zi=Si(\"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z\"),Bi=Si(\"M255.545 8c-66.269.119-126.438 26.233-170.86 68.685L48.971 40.971C33.851 25.851 8 36.559 8 57.941V192c0 13.255 10.745 24 24 24h134.059c21.382 0 32.09-25.851 16.971-40.971l-41.75-41.75c30.864-28.899 70.801-44.907 113.23-45.273 92.398-.798 170.283 73.977 169.484 169.442C423.236 348.009 349.816 424 256 424c-41.127 0-79.997-14.678-110.63-41.556-4.743-4.161-11.906-3.908-16.368.553L89.34 422.659c-4.872 4.872-4.631 12.815.482 17.433C133.798 479.813 192.074 504 256 504c136.966 0 247.999-111.033 248-247.998C504.001 119.193 392.354 7.755 255.545 8z\",{mirror:!0}),Hi=Si(\"M256.455 8c66.269.119 126.437 26.233 170.859 68.685l35.715-35.715C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.75c-30.864-28.899-70.801-44.907-113.23-45.273-92.398-.798-170.283 73.977-169.484 169.442C88.764 348.009 162.184 424 256 424c41.127 0 79.997-14.678 110.629-41.556 4.743-4.161 11.906-3.908 16.368.553l39.662 39.662c4.872 4.872 4.631 12.815-.482 17.433C378.202 479.813 319.926 504 256 504 119.034 504 8.001 392.967 8 256.002 7.999 119.193 119.646 7.755 256.455 8z\",{mirror:!0}),Ni=Si(\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z\",{mirror:!0}),Ri=(Si(\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\",{width:24,height:24}),Si(\"M16 5l-1.42 1.42-1.59-1.59V16h-1.98V4.83L9.42 6.42 8 5l4-4 4 4zm4 5v11c0 1.1-.9 2-2 2H6c-1.11 0-2-.9-2-2V10c0-1.11.89-2 2-2h3v2H6v11h12V10h-3V8h3c1.1 0 2 .89 2 2z\",{width:24,height:24}),Si(c().createElement(\"path\",{stroke:\"currentColor\",strokeWidth:\"40\",fill:\"currentColor\",d:\"M148 560a318 318 0 0 0 522 110 316 316 0 0 0 0-450 316 316 0 0 0-450 0c-11 11-21 22-30 34v4h47c25 0 46 21 46 46s-21 45-46 45H90c-13 0-25-6-33-14-9-9-14-20-14-33V156c0-25 20-45 45-45s45 20 45 45v32l1 1a401 401 0 0 1 623 509l212 212a42 42 0 0 1-59 59L698 757A401 401 0 0 1 65 570a42 42 0 0 1 83-10z\"}),{width:1024})),Fi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M22 9.556C22 8.696 21.303 8 20.444 8H16v8H8v4.444C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Wi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M22 9.556C22 8.696 21.303 8 20.444 8H9.556C8.696 8 8 8.697 8 9.556v10.888C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Gi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M13 21a1 1 0 001 1h7a1 1 0 001-1v-7a1 1 0 00-1-1h-3v5h-5v3zM11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h3V6h5V3z\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Vi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\",fill:xi(t),stroke:xi(t),strokeLinejoin:\"round\",strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h8V3zM22 14a1 1 0 00-1-1h-7a1 1 0 00-1 1v7a1 1 0 001 1h8v-8z\",fill:Ei(t),stroke:Ei(t),strokeLinejoin:\"round\",strokeWidth:\"2\"})),{width:24,mirror:!0})})),Ki=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 2,5 H 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"M 6,7 C 5.446,7 5,7.446 5,8 v 9.999992 c 0,0.554 0.446,1 1,1 h 3.0000001 c 0.554,0 0.9999999,-0.446 0.9999999,-1 V 8 C 10,7.446 9.5540001,7 9.0000001,7 Z m 9,0 c -0.554,0 -1,0.446 -1,1 v 5.999992 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 V 8 C 19,7.446 18.554,7 18,7 Z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Ui=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 2,19 H 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"m 6,16.999992 c -0.554,0 -1,-0.446 -1,-1 V 6 C 5,5.446 5.446,5 6,5 H 9.0000001 C 9.5540001,5 10,5.446 10,6 v 9.999992 c 0,0.554 -0.4459999,1 -0.9999999,1 z m 9,0 c -0.554,0 -1,-0.446 -1,-1 V 10 c 0,-0.554 0.446,-1 1,-1 h 3 c 0.554,0 1,0.446 1,1 v 5.999992 c 0,0.554 -0.446,1 -1,1 z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Yi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 5,2 V 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"m 7.000004,5.999996 c 0,-0.554 0.446,-1 1,-1 h 9.999992 c 0.554,0 1,0.446 1,1 v 3.0000001 c 0,0.554 -0.446,0.9999999 -1,0.9999999 H 8.000004 c -0.554,0 -1,-0.4459999 -1,-0.9999999 z m 0,9 c 0,-0.554 0.446,-1 1,-1 h 5.999992 c 0.554,0 1,0.446 1,1 v 3 c 0,0.554 -0.446,1 -1,1 H 8.000004 c -0.554,0 -1,-0.446 -1,-1 z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24})})),Xi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 19,2 V 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"m 16.999996,5.999996 c 0,-0.554 -0.446,-1 -1,-1 H 6.000004 c -0.554,0 -1,0.446 -1,1 v 3.0000001 c 0,0.554 0.446,0.9999999 1,0.9999999 h 9.999992 c 0.554,0 1,-0.4459999 1,-0.9999999 z m 0,9 c 0,-0.554 -0.446,-1 -1,-1 h -5.999992 c -0.554,0 -1,0.446 -1,1 v 3 c 0,0.554 0.446,1 1,1 h 5.999992 c 0.554,0 1,-0.446 1,-1 z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24})})),Zi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M5 5V19Z\",fill:\"black\"}),c().createElement(\"path\",{d:\"M19 5V19M5 5V19\",stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"M15 9C15.554 9 16 9.446 16 10V14C16 14.554 15.554 15 15 15H9C8.446 15 8 14.554 8 14V10C8 9.446 8.446 9 9 9H15Z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24})})),qi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M5 5L19 5M5 19H19\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"M15 9C15.554 9 16 9.446 16 10V14C16 14.554 15.554 15 15 15H9C8.446 15 8 14.554 8 14V10C8 9.446 8.446 9 9 9H15Z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24})})),Qi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"m 5.000004,16.999996 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 v -10 c 0,-0.554 -0.446,-1 -1,-1 h -3 c -0.554,0 -1,0.446 -1,1 z m 9,-2 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 v -6 c 0,-0.554 -0.446,-1 -1,-1 h -3 c -0.554,0 -1,0.446 -1,1 z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M 2,12 H 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeDasharray:\"1, 2.8\",strokeLinecap:\"round\"})),{width:24,mirror:!0})})),$i=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 7 5 C 6.446 5 6 5.446 6 6 L 6 9 C 6 9.554 6.446 10 7 10 L 17 10 C 17.554 10 18 9.554 18 9 L 18 6 C 18 5.446 17.554 5 17 5 L 7 5 z M 9 14 C 8.446 14 8 14.446 8 15 L 8 18 C 8 18.554 8.446 19 9 19 L 15 19 C 15.554 19 16 18.554 16 18 L 16 15 C 16 14.446 15.554 14 15 14 L 9 14 z \",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M 12,2 V 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeDasharray:\"1, 2.8\",strokeLinecap:\"round\"})),{width:24})})),Ji=Si(\"M192 256c61.9 0 112-50.1 112-112S253.9 32 192 32 80 82.1 80 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C51.6 288 0 339.6 0 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zM480 256c53 0 96-43 96-96s-43-96-96-96-96 43-96 96 43 96 96 96zm48 32h-3.8c-13.9 4.8-28.6 8-44.2 8s-30.3-3.2-44.2-8H432c-20.4 0-39.2 5.9-55.7 15.4 24.4 26.3 39.7 61.2 39.7 99.8v38.4c0 2.2-.5 4.3-.6 6.4H592c26.5 0 48-21.5 48-48 0-61.9-50.1-112-112-112z\",{width:640,height:512,mirror:!0}),el=(Si(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z\"),Si(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z\"),Si(\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\",{width:352,height:512})),tl=Si(\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\",{width:320,height:512,style:{marginLeft:\"-0.2rem\"},mirror:!0}),nl=Si(\"M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z\",{mirror:!0}),rl=Si(\"M11.553 22.894a.998.998 0 00.894 0s3.037-1.516 5.465-4.097C19.616 16.987 21 14.663 21 12V5a1 1 0 00-.649-.936l-8-3a.998.998 0 00-.702 0l-8 3A1 1 0 003 5v7c0 2.663 1.384 4.987 3.088 6.797 2.428 2.581 5.465 4.097 5.465 4.097zm-1.303-8.481l6.644-6.644a.856.856 0 111.212 1.212l-7.25 7.25a.856.856 0 01-1.212 0l-3.75-3.75a.856.856 0 111.212-1.212l3.144 3.144z\",{width:24}),al=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M25 26H111V111H25\",fill:Ei(t)}),c().createElement(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M100 100H160V160H100\",fill:Ei(t)}),c().createElement(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"2.5\",y:\"149.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"147.5\",y:\"2.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"})),{width:182,height:182,mirror:!0})})),ol=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M25 26H111V111H25\",fill:Ei(t)}),c().createElement(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M100 100H160V160H100\",fill:Ei(t)}),c().createElement(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"78.5\",y:\"149.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"147.5\",y:\"78.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"105.5\",y:\"2.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"2.5\",y:\"102.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"})),{width:182,height:182,mirror:!0})})),il=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M20.101 16H28.0934L36 8.95989V4H33.5779L20.101 16ZM30.5704 4L17.0935 16H9.10101L22.5779 4H30.5704ZM19.5704 4L6.09349 16H4V10.7475L11.5779 4H19.5704ZM8.57036 4H4V8.06952L8.57036 4ZM36 11.6378L31.101 16H36V11.6378ZM2 2V18H38V2H2Z\",fill:Ei(t)}),{width:40,height:20})})),ll=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"g\",{fill:Ei(t),fillRule:\"evenodd\",clipRule:\"evenodd\"},c().createElement(\"path\",{d:\"M20.101 16H28.0934L36 8.95989V4H33.5779L20.101 16ZM30.5704 4L17.0935 16H9.10101L22.5779 4H30.5704ZM19.5704 4L6.09349 16H4V10.7475L11.5779 4H19.5704ZM8.57036 4H4V8.06952L8.57036 4ZM36 11.6378L31.101 16H36V11.6378ZM2 2V18H38V2H2Z\"}),c().createElement(\"path\",{d:\"M14.0001 18L3.00006 4.00002L4.5727 2.76438L15.5727 16.7644L14.0001 18ZM25.0001 18L14.0001 4.00002L15.5727 2.76438L26.5727 16.7644L25.0001 18ZM36.0001 18L25.0001 4.00002L26.5727 2.76438L37.5727 16.7644L36.0001 18Z\"})),{width:40,height:20})})),cl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M2 2H38V18H2V2Z\",fill:Ei(t)}),{width:40,height:20})})),sl=c().memo((function(e){var t=e.appearance,n=e.strokeWidth;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:n,fill:\"none\"}),{width:40,height:20})})),ul=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20})})),dl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:2.5,strokeDasharray:\"10, 8\",fill:\"none\"}),{width:40,height:20})})),pl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:2.5,strokeDasharray:\"4, 4\",fill:\"none\"}),{width:40,height:20})})),fl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M3.00098 16.1691C6.28774 13.9744 19.6399 2.8905 22.7215 3.00082C25.8041 3.11113 19.1158 15.5488 21.4962 16.8309C23.8757 18.1131 34.4155 11.7148 37.0001 10.6919\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),hl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M3 17C6.68158 14.8752 16.1296 9.09849 22.0648 6.54922C28 3.99995 22.2896 13.3209 25 14C27.7104 14.6791 36.3757 9.6471 36.3757 9.6471M6.40706 15C13 11.1918 20.0468 1.51045 23.0234 3.0052C26 4.49995 20.457 12.8659 22.7285 16.4329C25 20 36.3757 13 36.3757 13\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),ml=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M3 15.6468C6.93692 13.5378 22.5544 2.81528 26.6206 3.00242C30.6877 3.18956 25.6708 15.3346 27.4009 16.7705C29.1309 18.2055 35.4001 12.4762 37 11.6177M3.97143 10.4917C6.61158 9.24563 16.3706 2.61886 19.8104 3.01724C23.2522 3.41472 22.0773 12.2013 24.6181 12.8783C27.1598 13.5536 33.3179 8.04068 35.0571 7.07244\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),gl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M10 17L10 5L35 5\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),vl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M10 17V15C10 8 13 5 21 5L33.5 5\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),bl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20})})),yl=c().memo((function(e){var t=e.appearance,n=e.flip,r=void 0!==n&&n;return Si(c().createElement(\"g\",{transform:r?\"translate(40, 0) scale(-1, 1)\":\"\",stroke:Ei(t),strokeWidth:2,fill:\"none\"},c().createElement(\"path\",{d:\"M34 10H6M34 10L27 5M34 10L27 15\"}),c().createElement(\"path\",{d:\"M27.5 5L34.5 10L27.5 15\"})),{width:40,height:20})})),wl=c().memo((function(e){var t=e.appearance,n=e.flip,r=void 0!==n&&n;return Si(c().createElement(\"g\",{stroke:Ei(t),fill:Ei(t),transform:r?\"translate(40, 0) scale(-1, 1)\":\"\"},c().createElement(\"path\",{d:\"M32 10L6 10\",strokeWidth:2}),c().createElement(\"circle\",{r:\"4\",transform:\"matrix(-1 0 0 1 30 10)\"})),{width:40,height:20})})),xl=c().memo((function(e){var t=e.appearance,n=e.flip,r=void 0!==n&&n;return Si(c().createElement(\"g\",{transform:r?\"translate(40, 0) scale(-1, 1)\":\"\"},c().createElement(\"path\",{d:\"M34 10H5.99996M34 10L34 5M34 10L34 15\",stroke:Ei(t),strokeWidth:2,fill:\"none\"})),{width:40,height:20})})),El=[],kl=function(e){return El=El.concat(e),e};function Sl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sl(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ol=function(e,t){var n;if(e.editingGroupId){var r=Ir(ni(t),e.editingGroupId);if(r.length)return Cl(Cl({},e),{},{selectedElementIds:(n={},n[r[0].id]=!0,n)})}return e},Ml=kl({name:\"deleteSelectedElements\",perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.elementId,a=n.activePointIndex,o=n.startBindingElement,i=n.endBindingElement,l=ro.getElement(r);if(!l)return!1;if(null==a||-1===a||l.points.length<2){var c=e.filter((function(e){return e.id!==l.id}));return{elements:c,appState:Cl(Cl({},Ol(t,c)),{},{editingLinearElement:null}),commitToHistory:!1}}var s={startBindingElement:0===a?null:o,endBindingElement:a===l.points.length-1?null:i};return ro.movePoint(l,a,\"delete\"),{elements:e,appState:Cl(Cl({},t),{},{editingLinearElement:Cl(Cl(Cl({},t.editingLinearElement),s),{},{activePointIndex:a>0?a-1:0})}),commitToHistory:!0}}var u=function(e,t){return{elements:e.map((function(e){return t.selectedElementIds[e.id]?hr(e,{isDeleted:!0}):e})),appState:Cl(Cl({},t),{},{selectedElementIds:{}})}}(e,t),d=u.elements,p=u.appState;return _o(d,e.filter((function(e){var n=e.id;return t.selectedElementIds[n]}))),{elements:d,appState:Cl(Cl({},p=Ol(p,d)),{},{elementType:\"selection\",multiElement:null}),commitToHistory:li(ni(e),t)}},contextItemLabel:\"labels.delete\",keyTest:function(e){return e.key===Nt||e.key===Wt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{type:\"button\",icon:Pi,title:C(\"labels.delete\"),\"aria-label\":C(\"labels.delete\"),onClick:function(){return r(null)},visible:li(ni(t),n)})}}),Tl=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},Il=function(e,t){for(var n=[],r=[],a=null,o=-1;++o<e.length;)t.selectedElementIds[e[o].id]?(r.length&&(n=n.concat(r),r=[]),n.push(o),a=o+1):e[o].isDeleted&&a===o?(a=o+1,r.push(o)):r=[];return n},Pl=function(e,t,n,r){var a=t[n],o=function(t){return!t.isDeleted&&(!e.editingGroupId||t.groupIds.includes(e.editingGroupId))},i=\"left\"===r?function(e,t,n){void 0===n&&(n=e.length-1),n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length-1,Math.max(n,0)))+1;--r>-1;)if(t(e[r],r,e))return r;return-1}(t,o,Math.max(0,n-1)):function(e,t,n){void 0===n&&(n=0),n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length,Math.max(n,0)))-1;++r<e.length;)if(t(e[r],r,e))return r;return-1}(t,o,n+1),l=t[i];if(!l)return-1;if(e.editingGroupId){if((null==a?void 0:a.groupIds.join(\"\"))===(null==l?void 0:l.groupIds.join(\"\")))return i;if(null==l||!l.groupIds.includes(e.editingGroupId))return-1}if(!l.groupIds.length)return i;var c=e.editingGroupId?l.groupIds[l.groupIds.indexOf(e.editingGroupId)-1]:l.groupIds[l.groupIds.length-1],s=Ir(t,c);return s.length?\"left\"===r?t.indexOf(s[0]):t.indexOf(s[s.length-1]):i},Al=function(e,t,n){var r,a,o=Il(t,e),i=(a=0,(r=o).reduce((function(e,t,n){return n>0&&r[n-1]!==t-1&&(a=++a),(e[a]||(e[a]=[])).push(t),e}),[]));return\"right\"===n&&(i=i.reverse()),i.forEach((function(r,a){var o=r[0],i=r[r.length-1],l=\"left\"===n?o:i,c=Pl(e,t,l,n);if(-1!==c&&l!==c){var s=\"left\"===n?t.slice(0,c):t.slice(0,o),u=t.slice(o,i+1),d=\"left\"===n?t.slice(c,o):t.slice(i+1,c+1),p=\"left\"===n?t.slice(i+1):t.slice(c+1);t=Tl(\"left\"===n?Tl(Tl(Tl([],s),u),d):Tl(Tl(Tl([],s),d),u),p)}})),t},_l=function(e,t,n){var r,a,o=Il(e,t),i=[],l=[];if(\"left\"===n){if(t.editingGroupId){if(!(c=Ir(e,t.editingGroupId)).length)return e;r=e.indexOf(c[0])}else r=0;a=o[o.length-1]}else{if(t.editingGroupId){var c;if(!(c=Ir(e,t.editingGroupId)).length)return e;a=e.indexOf(c[c.length-1])}else a=e.length-1;r=o[0]}for(var s=r;s<a+1;s++)o.includes(s)?i.push(e[s]):l.push(e[s]);var u=e.slice(0,r),d=e.slice(a+1);return Tl(\"left\"===n?Tl(Tl(Tl([],u),i),l):Tl(Tl(Tl([],u),l),i),d)},Ll=function(e,t){return Al(t,e.slice(),\"left\")},Dl=function(e,t){return Al(t,e.slice(),\"right\")},jl=function(e,t){return _l(e,t,\"left\")},zl=function(e,t){return _l(e,t,\"right\")},Bl=kl({name:\"sendBackward\",perform:function(e,t){return{elements:Ll(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendBackward\",keyPriority:40,keyTest:function(e){return e[Ft]&&!e.shiftKey&&e.code===xt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return c().createElement(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(C(\"labels.sendBackward\"),\" \u2014 \").concat(In(\"CtrlOrCmd+[\"))},c().createElement(Wi,{appearance:n.appearance}))}}),Hl=kl({name:\"bringForward\",perform:function(e,t){return{elements:Dl(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringForward\",keyPriority:40,keyTest:function(e){return e[Ft]&&!e.shiftKey&&e.code===wt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return c().createElement(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(C(\"labels.bringForward\"),\" \u2014 \").concat(In(\"CtrlOrCmd+]\"))},c().createElement(Fi,{appearance:n.appearance}))}}),Nl=kl({name:\"sendToBack\",perform:function(e,t){return{elements:jl(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendToBack\",keyTest:function(e){return ft?e[Ft]&&e.altKey&&e.code===xt:e[Ft]&&e.shiftKey&&e.code===xt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return c().createElement(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(C(\"labels.sendToBack\"),\" \u2014 \").concat(In(ft?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\"))},c().createElement(Vi,{appearance:n.appearance}))}}),Rl=kl({name:\"bringToFront\",perform:function(e,t){return{elements:zl(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringToFront\",keyTest:function(e){return ft?e[Ft]&&e.altKey&&e.code===wt:e[Ft]&&e.shiftKey&&e.code===wt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return c().createElement(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(e){return t(null)},title:\"\".concat(C(\"labels.bringToFront\"),\" \u2014 \").concat(In(ft?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\"))},c().createElement(Gi,{appearance:n.appearance}))}});function Fl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fl(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Gl=kl({name:\"selectAll\",perform:function(e,t){return!t.editingLinearElement&&{appState:Mr(Wl(Wl({},t),{},{editingGroupId:null,selectedElementIds:e.reduce((function(e,t){return t.isDeleted||(e[t.id]=!0),e}),{})}),ni(e)),commitToHistory:!0}},contextItemLabel:\"labels.selectAll\",keyTest:function(e){return e[Ft]&&e.key===Xt}}),Vl=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function Kl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ul(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Kl(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Kl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Yl=kl({name:\"duplicateSelection\",perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.activePointIndex,a=n.elementId,o=ro.getElement(a);if(!o||null===r)return!1;var i=o.points,l=i[r],c=i[r+1];return fr(o,{points:Vl(Vl(Vl([],i.slice(0,r+1)),[c?[(l[0]+c[0])\/2,(l[1]+c[1])\/2]:[l[0]+30,l[1]+30]]),i.slice(r+1))}),{appState:Ul(Ul({},t),{},{editingLinearElement:Ul(Ul({},t.editingLinearElement),{},{activePointIndex:r+1})}),elements:e,commitToHistory:!0}}return Ul(Ul({},Xl(e,t)),{},{commitToHistory:!0})},contextItemLabel:\"labels.duplicateSelection\",keyTest:function(e){return e[Ft]&&e.key===Zt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{type:\"button\",icon:nl,title:\"\".concat(C(\"labels.duplicateSelection\"),\" \u2014 \").concat(In(\"CtrlOrCmd+D\")),\"aria-label\":C(\"labels.duplicateSelection\"),onClick:function(){return r(null)},visible:li(ni(t),n)})}}),Xl=function(e,t){for(var n=new Map,r=[],a=[],o=new Map,i=function(e){var i=Rr(t.editingGroupId,n,e,{x:e.x+s.k\/2,y:e.y+s.k\/2});return o.set(e.id,i.id),a.push(e),r.push(i),i},l=[],c=0;c<e.length;){var u=e[c];if(t.selectedElementIds[u.id]){if(u.groupIds.length){var d=Cr(t,u);if(d){var p=Ir(e,d);l.push.apply(l,Vl(Vl([],p),p.map((function(e){return i(e)})))),c+=p.length;continue}}l.push(u,i(u))}else l.push(u);c++}return Po(l,a,o),{elements:l,appState:Mr(Ul(Ul({},t),{},{selectedGroupIds:{},selectedElementIds:r.reduce((function(e,t){return e[t.id]=!0,e}),{})}),ni(l))}},Zl=function(e){var t=e.options,n=e.value,r=e.onChange,a=e.group;return c().createElement(\"div\",{className:\"buttonList buttonListIcon\"},t.map((function(e){return c().createElement(\"label\",{key:e.text,className:ze({active:n===e.value}),title:e.text},c().createElement(\"input\",{type:\"radio\",name:a,onChange:function(){return r(e.value)},checked:n===e.value}),e.icon)})))},ql=function(e){var t=e.options,n=e.value,r=e.onChange,a=e.group;return c().createElement(\"div\",{className:\"buttonList\"},t.map((function(e){return c().createElement(\"label\",{key:e.text,className:ze({active:n===e.value})},c().createElement(\"input\",{type:\"radio\",name:a,onChange:function(){return r(e.value)},checked:n===e.value}),e.text)})))},Ql=(n(2816),function(e){var t=e.children,n=e.left,r=e.top,a=e.onCloseRequest,o=e.fitInViewport,i=void 0!==o&&o,s=(0,l.useRef)(null);return(0,l.useLayoutEffect)((function(){if(i&&s.current){var e=s.current,t=e.getBoundingClientRect(),n=t.x,r=t.y,a=t.width,o=t.height,l=window.innerWidth;n+a>l&&(e.style.left=\"\".concat(l-a,\"px\"));var c=window.innerHeight;r+o>c&&(e.style.top=\"\".concat(c-o,\"px\"))}}),[i]),(0,l.useEffect)((function(){if(a){var e=function(e){var t;null!==(t=s.current)&&void 0!==t&&t.contains(e.target)||(0,pt.unstable_batchedUpdates)((function(){return a(e)}))};return document.addEventListener(\"pointerdown\",e,!1),function(){return document.removeEventListener(\"pointerdown\",e,!1)}}}),[a]),c().createElement(\"div\",{className:\"popover\",style:{top:r,left:n},ref:s},t)}),$l=(n(5574),function(e){var t=(new Option).style;return t.color=e,!!t.color}),Jl=[[\"1\",\"2\",\"3\",\"4\",\"5\"],[\"q\",\"w\",\"e\",\"r\",\"t\"],[\"a\",\"s\",\"d\",\"f\",\"g\"]].flat(),ec=function(e){var t=e.colors,n=e.color,r=e.onChange,a=e.onClose,o=e.label,i=e.showInput,l=void 0===i||i,s=e.type,u=c().useRef(),d=c().useRef(),p=c().useRef(),f=c().useRef();c().useEffect((function(){d.current?d.current.focus():f.current?f.current.focus():p.current&&p.current.focus()}),[]);return c().createElement(\"div\",{className:\"color-picker color-picker-type-\".concat(s),role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":C(\"labels.colorPicker\"),onKeyDown:function(e){if(e.key===Yt){var t,n=document.activeElement;if(e.shiftKey){if(n===u.current)null===(t=f.current)||void 0===t||t.focus(),e.preventDefault()}else if(n===f.current){var r;null===(r=u.current)||void 0===r||r.focus(),e.preventDefault()}}else if(sn(e.key)){n=document.activeElement;var o=k().rtl;if(-1!==(s=Array.prototype.indexOf.call(p.current.children,n))){var i=p.current.children.length-(l?1:0),c=e.key===(o?zt:Bt)?(s+1)%i:e.key===(o?Bt:zt)?(i+s-1)%i:e.key===jt?(s+5)%i:e.key===Ht?(i+s-5)%i:s;p.current.children[c].focus()}e.preventDefault()}else if(Jl.includes(e.key.toLowerCase())&&!vn(e.target)){var s=Jl.indexOf(e.key.toLowerCase());p.current.children[s].focus(),e.preventDefault()}else e.key!==Vt&&e.key!==Gt||(e.preventDefault(),a());e.nativeEvent.stopImmediatePropagation()}},c().createElement(\"div\",{className:\"color-picker-triangle color-picker-triangle-shadow\"}),c().createElement(\"div\",{className:\"color-picker-triangle\"}),c().createElement(\"div\",{className:\"color-picker-content\",ref:function(e){e&&(p.current=e)},tabIndex:0},t.map((function(e,t){return c().createElement(\"button\",{className:\"color-picker-swatch\",onClick:function(t){t.currentTarget.focus(),r(e)},title:\"\".concat(e,\" \u2014 \").concat(Jl[t].toUpperCase()),\"aria-label\":e,\"aria-keyshortcuts\":Jl[t],style:{color:e},key:e,ref:function(r){r&&0===t&&(u.current=r),r&&e===n&&(d.current=r)},onFocus:function(){r(e)}},\"transparent\"===e?c().createElement(\"div\",{className:\"color-picker-transparent\"}):void 0,c().createElement(\"span\",{className:\"color-picker-keybinding\"},Jl[t]))})),l&&c().createElement(tc,{color:n,label:o,onChange:function(e){r(e)},ref:f})))},tc=c().forwardRef((function(e,t){var n=e.color,r=e.onChange,a=e.label,o=c().useState(n),i=o[0],l=o[1],s=c().useRef(null);c().useEffect((function(){l(n)}),[n]),c().useImperativeHandle(t,(function(){return s.current}));var u=c().useCallback((function(e){var t=e.toLowerCase(),n=function(e){return\"transparent\"===e||$l(e)?e:$l(\"#\".concat(e))?\"#\".concat(e):null}(t);n&&r(n),l(t)}),[r]);return c().createElement(\"label\",{className:\"color-input-container\"},c().createElement(\"div\",{className:\"color-picker-hash\"},\"#\"),c().createElement(\"input\",{spellCheck:!1,className:\"color-picker-input\",\"aria-label\":a,onChange:function(e){return u(e.target.value)},value:(i||\"\").replace(\/^#\/,\"\"),onBlur:function(){return l(n)},ref:s}))})),nc=function(e){var t=e.type,n=e.color,r=e.onChange,a=e.label,o=c().useState(!1),i=o[0],l=o[1],s=c().useRef(null);return c().createElement(\"div\",null,c().createElement(\"div\",{className:\"color-picker-control-container\"},c().createElement(\"button\",{className:\"color-picker-label-swatch\",\"aria-label\":a,style:n?{\"--swatch-color\":n}:void 0,onClick:function(){return l(!i)},ref:s}),c().createElement(tc,{color:n,label:a,onChange:function(e){r(e)}})),c().createElement(c().Suspense,{fallback:\"\"},i?c().createElement(Ql,{onCloseRequest:function(e){return e.target!==s.current&&l(!1)}},c().createElement(ec,{colors:dt[t],color:n||null,onChange:function(e){r(e)},onClose:function(){var e;l(!1),null===(e=s.current)||void 0===e||e.focus()},label:a,showInput:!1,type:t})):null))},rc=n(6950),ac=n.n(rc);n(7143);function oc(e){var t=e.options,n=e.value,r=e.label,a=e.onChange,o=e.onClose,i=c().useRef(),l=c().useRef(),s=c().useRef(null);c().useEffect((function(){l.current?l.current.focus():s.current&&s.current.focus()}),[]);return c().createElement(\"div\",{className:\"picker\",role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":r,onKeyDown:function(e){var n=t.find((function(t){return t.keyBinding===e.key.toLowerCase()}));if(e.metaKey||e.altKey||e.ctrlKey||!n)if(e.key===Yt)setTimeout((function(){l.current!==document.activeElement&&o()}),0);else if(sn(e.key)){var r=document.activeElement,a=k().rtl;if(-1!==(u=Array.prototype.indexOf.call(s.current.children,r))){var i=t.length,c=u;switch(e.key){case a?zt:Bt:case jt:c=(u+1)%i;break;case a?Bt:zt:case Ht:c=(i+u-1)%i}s.current.children[c].focus()}e.preventDefault()}else e.key!==Vt&&e.key!==Gt||(e.preventDefault(),o());else{var u=t.indexOf(n);s.current.children[u].focus(),e.preventDefault()}e.nativeEvent.stopImmediatePropagation()}},c().createElement(\"div\",{className:\"picker-content\",ref:s},t.map((function(e,t){return c().createElement(\"button\",{className:\"picker-option\",onClick:function(t){t.currentTarget.focus(),a(e.value)},title:\"\".concat(e.text,\" \u2014 \").concat(e.keyBinding.toUpperCase()),\"aria-label\":e.text||\"none\",\"aria-keyshortcuts\":e.keyBinding,key:e.text,ref:function(r){r&&0===t&&(i.current=r),r&&e.value===n&&(l.current=r)},onFocus:function(){a(e.value)}},e.icon,c().createElement(\"span\",{className:\"picker-keybinding\"},e.keyBinding))}))))}function ic(e){var t,n=e.value,r=e.label,a=e.options,o=e.onChange,i=e.group,l=void 0===i?\"\":i,s=c().useState(!1),u=s[0],d=s[1],p=c().useRef(null),f=k().rtl;return c().createElement(\"label\",{className:\"picker-container\"},c().createElement(\"button\",{name:l,className:u?\"active\":\"\",\"aria-label\":r,onClick:function(){return d(!u)},ref:p},null===(t=a.find((function(e){return e.value===n})))||void 0===t?void 0:t.icon),c().createElement(c().Suspense,{fallback:\"\"},u?c().createElement(c().Fragment,null,c().createElement(Ql,ac()({onCloseRequest:function(e){return e.target!==p.current&&d(!1)}},f?{right:5.5}:{left:-5.5}),c().createElement(oc,{options:a,value:n,label:r,onChange:o,onClose:function(){var e;d(!1),null===(e=p.current)||void 0===e||e.focus()}})),c().createElement(\"div\",{className:\"picker-triangle\"})):null))}function lc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function cc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lc(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var sc=function(e,t,n){return e.map((function(e){var r;return t.selectedElementIds[e.id]||e.id===(null===(r=t.editingElement)||void 0===r?void 0:r.id)?n(e):e}))},uc=function(e,t,n,r){var a,o,i=t.editingElement,l=ni(e);return null!==(a=null!==(o=i&&n(i))&&void 0!==o?o:li(l,t)?function(e,t,n){var r=Array.from(new Set(ci(e,t).map((function(e){return n(e)}))));return 1===r.length?r[0]:null}(l,t,n):r)&&void 0!==a?a:null},dc=(kl({name:\"changeStrokeColor\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{strokeColor:n})})),appState:cc(cc({},t),{},{currentItemStrokeColor:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(c().Fragment,null,c().createElement(\"h3\",{\"aria-hidden\":\"true\"},C(\"labels.stroke\")),c().createElement(nc,{type:\"elementStroke\",label:C(\"labels.stroke\"),color:uc(t,n,(function(e){return e.strokeColor}),n.currentItemStrokeColor),onChange:r}))}}),kl({name:\"changeBackgroundColor\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{backgroundColor:n})})),appState:cc(cc({},t),{},{currentItemBackgroundColor:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(c().Fragment,null,c().createElement(\"h3\",{\"aria-hidden\":\"true\"},C(\"labels.background\")),c().createElement(nc,{type:\"elementBackground\",label:C(\"labels.background\"),color:uc(t,n,(function(e){return e.backgroundColor}),n.currentItemBackgroundColor),onChange:r}))}}),kl({name:\"changeFillStyle\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{fillStyle:n})})),appState:cc(cc({},t),{},{currentItemFillStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.fill\")),c().createElement(Zl,{options:[{value:\"hachure\",text:C(\"labels.hachure\"),icon:c().createElement(il,{appearance:n.appearance})},{value:\"cross-hatch\",text:C(\"labels.crossHatch\"),icon:c().createElement(ll,{appearance:n.appearance})},{value:\"solid\",text:C(\"labels.solid\"),icon:c().createElement(cl,{appearance:n.appearance})}],group:\"fill\",value:uc(t,n,(function(e){return e.fillStyle}),n.currentItemFillStyle),onChange:function(e){r(e)}}))}}),kl({name:\"changeStrokeWidth\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{strokeWidth:n})})),appState:cc(cc({},t),{},{currentItemStrokeWidth:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.strokeWidth\")),c().createElement(Zl,{group:\"stroke-width\",options:[{value:1,text:C(\"labels.thin\"),icon:c().createElement(sl,{appearance:n.appearance,strokeWidth:2})},{value:2,text:C(\"labels.bold\"),icon:c().createElement(sl,{appearance:n.appearance,strokeWidth:6})},{value:4,text:C(\"labels.extraBold\"),icon:c().createElement(sl,{appearance:n.appearance,strokeWidth:10})}],value:uc(t,n,(function(e){return e.strokeWidth}),n.currentItemStrokeWidth),onChange:function(e){return r(e)}}))}}),kl({name:\"changeSloppiness\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{seed:sr(),roughness:n})})),appState:cc(cc({},t),{},{currentItemRoughness:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.sloppiness\")),c().createElement(Zl,{group:\"sloppiness\",options:[{value:0,text:C(\"labels.architect\"),icon:c().createElement(fl,{appearance:n.appearance})},{value:1,text:C(\"labels.artist\"),icon:c().createElement(hl,{appearance:n.appearance})},{value:2,text:C(\"labels.cartoonist\"),icon:c().createElement(ml,{appearance:n.appearance})}],value:uc(t,n,(function(e){return e.roughness}),n.currentItemRoughness),onChange:function(e){return r(e)}}))}}),kl({name:\"changeStrokeStyle\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{strokeStyle:n})})),appState:cc(cc({},t),{},{currentItemStrokeStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.strokeStyle\")),c().createElement(Zl,{group:\"strokeStyle\",options:[{value:\"solid\",text:C(\"labels.strokeStyle_solid\"),icon:c().createElement(ul,{appearance:n.appearance})},{value:\"dashed\",text:C(\"labels.strokeStyle_dashed\"),icon:c().createElement(dl,{appearance:n.appearance})},{value:\"dotted\",text:C(\"labels.strokeStyle_dotted\"),icon:c().createElement(pl,{appearance:n.appearance})}],value:uc(t,n,(function(e){return e.strokeStyle}),n.currentItemStrokeStyle),onChange:function(e){return r(e)}}))}}),kl({name:\"changeOpacity\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{opacity:n})})),appState:cc(cc({},t),{},{currentItemOpacity:n}),commitToHistory:!0}},PanelComponent:function(e){var t,n=e.elements,r=e.appState,a=e.updateData;return c().createElement(\"label\",{className:\"control-label\"},C(\"labels.opacity\"),c().createElement(\"input\",{type:\"range\",min:\"0\",max:\"100\",step:\"10\",onChange:function(e){return a(+e.target.value)},onWheel:function(e){e.stopPropagation();var t=+e.target.value;e.deltaY<0&&t<100?a(t+10):e.deltaY>0&&t>0&&a(t-10)},value:null!==(t=uc(n,r,(function(e){return e.opacity}),r.currentItemOpacity))&&void 0!==t?t:void 0}))}}),kl({name:\"changeFontSize\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){if(Be(e)){var t=hr(e,{fontSize:n});return Zo(t),t}return e})),appState:cc(cc({},t),{},{currentItemFontSize:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.fontSize\")),c().createElement(ql,{group:\"font-size\",options:[{value:16,text:C(\"labels.small\")},{value:20,text:C(\"labels.medium\")},{value:28,text:C(\"labels.large\")},{value:36,text:C(\"labels.veryLarge\")}],value:uc(t,n,(function(e){return Be(e)&&e.fontSize}),n.currentItemFontSize||s.n5),onChange:function(e){return r(e)}}))}}),kl({name:\"changeFontFamily\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){if(Be(e)){var t=hr(e,{fontFamily:n});return Zo(t),t}return e})),appState:cc(cc({},t),{},{currentItemFontFamily:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,a=[{value:1,text:C(\"labels.handDrawn\")},{value:2,text:C(\"labels.normal\")},{value:3,text:C(\"labels.code\")}];return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.fontFamily\")),c().createElement(ql,{group:\"font-family\",options:a,value:uc(t,n,(function(e){return Be(e)&&e.fontFamily}),n.currentItemFontFamily||s.rk),onChange:function(e){return r(e)}}))}}),kl({name:\"changeTextAlign\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){if(Be(e)){var t=hr(e,{textAlign:n});return Zo(t),t}return e})),appState:cc(cc({},t),{},{currentItemTextAlign:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.textAlign\")),c().createElement(ql,{group:\"text-align\",options:[{value:\"left\",text:C(\"labels.left\")},{value:\"center\",text:C(\"labels.center\")},{value:\"right\",text:C(\"labels.right\")}],value:uc(t,n,(function(e){return Be(e)&&e.textAlign}),n.currentItemTextAlign),onChange:function(e){return r(e)}}))}}),kl({name:\"changeSharpness\",perform:function(e,t,n){var r=si(ni(e),t),a=r.length?r.every((function(e){return!He(e)})):!Ne(t.elementType),o=r.length?r.every(He):Ne(t.elementType);return{elements:sc(e,t,(function(e){return hr(e,{strokeSharpness:n})})),appState:cc(cc({},t),{},{currentItemStrokeSharpness:a?n:t.currentItemStrokeSharpness,currentItemLinearStrokeSharpness:o?n:t.currentItemLinearStrokeSharpness}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.edges\")),c().createElement(Zl,{group:\"edges\",options:[{value:\"sharp\",text:C(\"labels.sharp\"),icon:c().createElement(gl,{appearance:n.appearance})},{value:\"round\",text:C(\"labels.round\"),icon:c().createElement(vl,{appearance:n.appearance})}],value:uc(t,n,(function(e){return e.strokeSharpness}),hi(n.elementType)&&(Ne(n.elementType)?n.currentItemLinearStrokeSharpness:n.currentItemStrokeSharpness)||null),onChange:function(e){return r(e)}}))}}),kl({name:\"changeArrowhead\",perform:function(e,t,n){var r;return{elements:sc(e,t,(function(e){if(He(e)){var t=n.position,r=n.type;if(\"start\"===t)return hr(e,{startArrowhead:r});if(\"end\"===t)return hr(e,{endArrowhead:r})}return e})),appState:cc(cc({},t),{},(r={},r[\"start\"===n.position?\"currentItemStartArrowhead\":\"currentItemEndArrowhead\"]=n.type,r)),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,a=k().rtl;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.arrowheads\")),c().createElement(\"div\",{className:\"iconSelectList\"},c().createElement(ic,{label:\"arrowhead_start\",options:[{value:null,text:C(\"labels.arrowhead_none\"),icon:c().createElement(bl,{appearance:n.appearance}),keyBinding:\"q\"},{value:\"arrow\",text:C(\"labels.arrowhead_arrow\"),icon:c().createElement(yl,{appearance:n.appearance,flip:!a}),keyBinding:\"w\"},{value:\"bar\",text:C(\"labels.arrowhead_bar\"),icon:c().createElement(xl,{appearance:n.appearance,flip:!a}),keyBinding:\"e\"},{value:\"dot\",text:C(\"labels.arrowhead_dot\"),icon:c().createElement(wl,{appearance:n.appearance,flip:!a}),keyBinding:\"r\"}],value:uc(t,n,(function(e){return He(e)&&gi(e.type)?e.startArrowhead:n.currentItemStartArrowhead}),n.currentItemStartArrowhead),onChange:function(e){return r({position:\"start\",type:e})}}),c().createElement(ic,{label:\"arrowhead_end\",group:\"arrowheads\",options:[{value:null,text:C(\"labels.arrowhead_none\"),keyBinding:\"q\",icon:c().createElement(bl,{appearance:n.appearance})},{value:\"arrow\",text:C(\"labels.arrowhead_arrow\"),keyBinding:\"w\",icon:c().createElement(yl,{appearance:n.appearance,flip:a})},{value:\"bar\",text:C(\"labels.arrowhead_bar\"),keyBinding:\"e\",icon:c().createElement(xl,{appearance:n.appearance,flip:a})},{value:\"dot\",text:C(\"labels.arrowhead_dot\"),keyBinding:\"r\",icon:c().createElement(wl,{appearance:n.appearance,flip:a})}],value:uc(t,n,(function(e){return He(e)&&gi(e.type)?e.endArrowhead:n.currentItemEndArrowhead}),n.currentItemEndArrowhead),onChange:function(e){return r({position:\"end\",type:e})}})))}}),n(2189)),pc=n.n(dc),fc=c().createContext(!1),hc=function(){return window.matchMedia?window.matchMedia(pc().isMobileQuery):{matches:!1,addListener:function(){},removeListener:function(){}}},mc=function(e){var t=e.children,n=(0,l.useRef)();n.current||(n.current=hc());var r=(0,l.useState)(n.current.matches),a=r[0],o=r[1];return(0,l.useEffect)((function(){var e=function(){return o(n.current.matches)};return n.current.addListener(e),function(){return n.current.removeListener(e)}}),[]),c().createElement(fc.Provider,{value:a},t)},gc=function(){return hc().matches};function vc(){return(0,l.useContext)(fc)}function bc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?bc(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):bc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}kl({name:\"changeViewBackgroundColor\",perform:function(e,t,n){return{appState:yc(yc({},t),{},{viewBackgroundColor:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"div\",{style:{position:\"relative\"}},c().createElement(nc,{label:C(\"labels.canvasBackground\"),type:\"canvasBackground\",color:t.viewBackgroundColor,onChange:function(e){return n(e)}}))}}),kl({name:\"clearCanvas\",perform:function(e,t){return{elements:e.map((function(e){return hr(e,{isDeleted:!0})})),appState:yc(yc({},Rn()),{},{appearance:t.appearance,elementLocked:t.elementLocked,exportBackground:t.exportBackground,exportEmbedScene:t.exportEmbedScene,gridSize:t.gridSize,shouldAddWatermark:t.shouldAddWatermark,showStats:t.showStats,pasteDialog:t.pasteDialog}),commitToHistory:!0}},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Pi,title:C(\"buttons.clearReset\"),\"aria-label\":C(\"buttons.clearReset\"),showAriaLabel:vc(),onClick:function(){window.confirm(C(\"alerts.clearReset\"))&&t(null)}})}}),kl({name:\"zoomIn\",perform:function(e,t){var n=bi(yi(t.zoom.value+s.V4),t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2});return{appState:yc(yc({},t),{},{zoom:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Li,title:\"\".concat(C(\"buttons.zoomIn\"),\" \u2014 \").concat(In(\"CtrlOrCmd++\")),\"aria-label\":C(\"buttons.zoomIn\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===mt||e.code===vt)&&(e[Ft]||e.shiftKey)}}),kl({name:\"zoomOut\",perform:function(e,t){var n=bi(yi(t.zoom.value-s.V4),t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2});return{appState:yc(yc({},t),{},{zoom:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Di,title:\"\".concat(C(\"buttons.zoomOut\"),\" \u2014 \").concat(In(\"CtrlOrCmd+-\")),\"aria-label\":C(\"buttons.zoomOut\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===gt||e.code===bt)&&(e[Ft]||e.shiftKey)}}),kl({name:\"resetZoom\",perform:function(e,t){return{appState:yc(yc({},t),{},{zoom:bi(1,t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2})}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Ri,title:C(\"buttons.resetZoom\"),\"aria-label\":C(\"buttons.resetZoom\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===Ot||e.code===yt)&&(e[Ft]||e.shiftKey)}});var wc=function(e,t,n){var r=ni(e),a=ci(r,t),o=n&&a.length>0?ot(a):ot(r),i=function(e,t){var n=e[0],r=e[1],a=e[2],o=e[3],i=a-n,l=t.width\/i,c=o-r,u=t.height\/c,d=Math.min(l,u),p=Math.floor(d\/s.V4)*s.V4;return Math.min(Math.max(p,s.V4),1)}(o,{width:t.width,height:t.height}),l=bi(i,t.zoom,{left:t.offsetLeft,top:t.offsetTop}),c=o[0],u=o[1],d=(c+o[2])\/2,p=(u+o[3])\/2;return{appState:yc(yc(yc({},t),ui({scenePoint:{x:d,y:p},viewportDimensions:{width:t.width,height:t.height},zoom:l})),{},{zoom:l}),commitToHistory:!1}};kl({name:\"zoomToSelection\",perform:function(e,t){return wc(e,t,!0)},keyTest:function(e){return e.code===kt&&e.shiftKey&&!e.altKey&&!e[Ft]}}),kl({name:\"zoomToFit\",perform:function(e,t){return wc(e,t,!1)},keyTest:function(e){return e.code===Et&&e.shiftKey&&!e.altKey&&!e[Ft]}});function xc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ec(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xc(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var kc,Sc,Cc=kl({name:\"finalize\",perform:function(e,t,n,r){var a,o,i=r.canvas;if(t.editingLinearElement){var l=t.editingLinearElement,c=l.elementId,s=l.startBindingElement,u=l.endBindingElement,d=ro.getElement(c);if(d)return Re(d)&&lo(d,s,u),{elements:d.points.length<2||mr(d)?e.filter((function(e){return e.id!==d.id})):void 0,appState:Ec(Ec({},t),{},{editingLinearElement:null}),commitToHistory:!0}}var p=e;window.document.activeElement instanceof HTMLElement&&window.document.activeElement.blur();var f=t.multiElement?t.multiElement:\"draw\"===(null===(o=t.editingElement)||void 0===o?void 0:o.type)?t.editingElement:null;if(f){if(\"draw\"!==f.type&&\"touch\"!==t.lastPointerDownWith){var h=f.points,m=f.lastCommittedPoint;m&&h[h.length-1]===m||fr(f,{points:f.points.slice(0,-1)})}mr(f)&&(p=p.slice(0,-1));var g=Ye(f.points,t.zoom.value);if((\"line\"===f.type||\"draw\"===f.type)&&g){var v=f.points,b=v[0];fr(f,{points:v.map((function(e,t){return t===v.length-1?[b[0],b[1]]:e}))})}if(Re(f)&&!g&&f.points.length>1){var y=ro.getPointAtIndexGlobalCoordinates(f,-1),w=y[0],x=y[1];po(f,t,lr.getScene(f),{x:w,y:x})}t.elementLocked||\"draw\"===t.elementType||(t.selectedElementIds[f.id]=!0)}return(t.elementLocked||\"draw\"===t.elementType)&&f||Cn(i),{elements:p,appState:Ec(Ec({},t),{},{elementType:(t.elementLocked||\"draw\"===t.elementType)&&f?t.elementType:\"selection\",draggingElement:null,multiElement:null,editingElement:null,startBoundElement:null,suggestedBindings:[],selectedElementIds:f&&!t.elementLocked&&\"draw\"!==t.elementType?Ec(Ec({},t.selectedElementIds),{},(a={},a[f.id]=!0,a)):t.selectedElementIds}),commitToHistory:\"draw\"===t.elementType}},keyTest:function(e,t){return e.key===Vt&&(null!==t.editingLinearElement||!t.draggingElement&&null===t.multiElement)||(e.key===Vt||e.key===Gt)&&null!==t.multiElement},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(wi,{type:\"button\",icon:ji,title:C(\"buttons.done\"),\"aria-label\":C(\"buttons.done\"),onClick:n,visible:null!=t.multiElement})}}),Oc=\"undefined\"!=typeof process&&null!==(kc=process.env)&&void 0!==kc&&kc.REACT_APP_GOOGLE_ANALYTICS_ID&&\"undefined\"!=typeof window&&window.gtag?function(e,t,n,r){window.gtag(\"event\",t,{event_category:e,event_label:n,value:r})}:(\"undefined\"!=typeof process&&null!==(Sc=process.env)&&void 0!==Sc&&Sc.JEST_WORKER_ID,function(e,t,n,r){}),Mc=(n(8518),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Class extends value \"+String(n)+\" is not a constructor or null\");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Tc=function(e){function t(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r,a,o=this;return o=e.apply(this,t)||this,r=a=o,o.handleFocus=function(e){En(e.currentTarget)},o.handleBlur=function(e){var t=e.currentTarget.innerText.trim();t!==a.props.value&&a.props.onChange(t),kn()},o.handleKeyDown=function(e){if(\"Enter\"===e.key){if(e.preventDefault(),e.nativeEvent.isComposing||229===e.keyCode)return;e.currentTarget.blur()}},o.makeEditable=function(e){if(e)try{e.contentEditable=\"plaintext-only\"}catch(t){e.contentEditable=\"true\"}},r}return Mc(t,e),t.prototype.render=function(){return c().createElement(\"span\",{suppressContentEditableWarning:!0,ref:this.makeEditable,\"data-type\":\"wysiwyg\",className:\"TextInput\",role:\"textbox\",\"aria-label\":this.props.label,onBlur:this.handleBlur,onKeyDown:this.handleKeyDown,onFocus:this.handleFocus},this.props.value)},t}(l.Component),Ic=(n(2680),function(e){var t=e.children,n=e.label,r=e.position,a=void 0===r?\"below\":r,o=e.long,i=void 0!==o&&o;return c().createElement(\"div\",{className:\"Tooltip\"},c().createElement(\"span\",{className:\"above\"===a?\"Tooltip__label Tooltip__label--above\":\"Tooltip__label Tooltip__label--below\",style:{width:i?\"50ch\":\"10ch\"}},n),t)}),Pc=function(e){var t=e.title?e.title:\"dark\"===e.value?C(\"buttons.lightMode\"):C(\"buttons.darkMode\");return c().createElement(\"label\",{className:\"ToolIcon ToolIcon_type_floating ToolIcon_size_M\",title:t},c().createElement(\"input\",{className:\"ToolIcon_type_checkbox ToolIcon_toggle_opaque\",type:\"checkbox\",onChange:function(t){return e.onChange(t.target.checked?\"dark\":\"light\")},checked:\"dark\"===e.value,\"aria-label\":t}),c().createElement(\"div\",{className:\"ToolIcon__icon\"},\"light\"===e.value?Ac.MOON:Ac.SUN))},Ac={SUN:c().createElement(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\"},c().createElement(\"path\",{fill:\"currentColor\",d:\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\"})),MOON:c().createElement(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\"},c().createElement(\"path\",{fill:\"currentColor\",d:\"M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z\"}))};const _c=\"chooseFileSystemEntries\"in self?\"chooseFileSystemEntries\":\"showOpenFilePicker\"in self&&\"showOpenFilePicker\",Lc=_c?\"chooseFileSystemEntries\"===_c?n.e(736).then(n.bind(n,9012)):n.e(736).then(n.bind(n,499)):n.e(736).then(n.bind(n,5034));async function Dc(...e){return(await Lc).default(...e)}_c?\"chooseFileSystemEntries\"===_c?n.e(736).then(n.bind(n,6980)):n.e(736).then(n.bind(n,868)):n.e(736).then(n.bind(n,3110));const jc=_c?\"chooseFileSystemEntries\"===_c?n.e(736).then(n.bind(n,1170)):n.e(736).then(n.bind(n,7814)):n.e(736).then(n.bind(n,4001));async function zc(...e){return(await jc).default(...e)}var Bc,Hc=function(e,t){if(null!=t&&t.collaborators){var n=t.collaborators.get(e);if(null!=n&&n.color)return n.color}var r=e.split(\"\").reduce((function(e,t){return e+t.charCodeAt(0)}),0),a=dt.elementBackground.slice(1),o=dt.elementStroke.slice(1);return{background:a[r%a.length],stroke:o[r%o.length]}};!function(e){e.ACTIVE=\"active\",e.AWAY=\"away\",e.IDLE=\"idle\"}(Bc||(Bc={}));var Nc=function(){var e=document.createElement(\"canvas\").getContext(\"2d\");if(!e)return!1;return e.fillStyle=\"#f00\",e.textBaseline=\"top\",e.font=\"32px Arial\",e.fillText(\"\ud83d\ude00\",0,0),0!==e.getImageData(12,12,1,1).data[0]}(),Rc=function(e,t,n,r,a,o,i,l,c){void 0===c&&(c=!1),e.translate(o,i),e.rotate(l),c&&e.fillRect(t-o,n-i,r,a),e.strokeRect(t-o,n-i,r,a),e.rotate(-l),e.translate(-o,-i)},Fc=function(e,t,n,r){e.beginPath(),e.arc(t,n,r,0,2*Math.PI),e.fill(),e.stroke()},Wc=function(e,t,n,r,a,o,i,l){var c=void 0===l?{}:l,u=c.renderScrollbars,d=void 0===u||u,p=c.renderSelection,f=void 0===p||p,h=c.renderOptimizations,m=void 0!==h&&h,g=c.renderGrid,v=void 0===g||g;if(!o)return{atLeastOneVisibleElement:!1};var b=o.getContext(\"2d\");b.scale(r,r);var y=o.width\/r,w=o.height\/r;if(i.exportWithDarkMode&&(b.filter=s.Gi),\"string\"==typeof i.viewBackgroundColor){(\"transparent\"===i.viewBackgroundColor||5===i.viewBackgroundColor.length||9===i.viewBackgroundColor.length||\/(hsla|rgba)\\(\/.test(i.viewBackgroundColor))&&b.clearRect(0,0,y,w);var x=b.fillStyle;b.fillStyle=i.viewBackgroundColor,b.fillRect(0,0,y,w),b.fillStyle=x}else b.clearRect(0,0,y,w);var E=i.zoom.translation.x,S=i.zoom.translation.y;b.translate(E,S),b.scale(i.zoom.value,i.zoom.value),v&&t.gridSize&&function(e,t,n,r,a,o){var i=e.strokeStyle;e.strokeStyle=\"rgba(0,0,0,0.1)\",e.beginPath();for(var l=n;l<n+a+2*t;l+=t)e.moveTo(l,r-t),e.lineTo(l,r+o+2*t);for(var c=r;c<r+o+2*t;c+=t)e.moveTo(n-t,c),e.lineTo(n+a+2*t,c);e.stroke(),e.strokeStyle=i}(b,t.gridSize,-Math.ceil(E\/i.zoom.value\/t.gridSize)*t.gridSize+i.scrollX%t.gridSize,-Math.ceil(S\/i.zoom.value\/t.gridSize)*t.gridSize+i.scrollY%t.gridSize,y\/i.zoom.value,w\/i.zoom.value);var C,O=e.filter((function(e){return Xc(e,y,w,{zoom:i.zoom,offsetLeft:t.offsetLeft,offsetTop:t.offsetTop,scrollX:i.scrollX,scrollY:i.scrollY})}));if(O.forEach((function(e){ar(e,a,b,m,i)})),t.editingLinearElement){var M=ro.getElement(t.editingLinearElement.elementId);M&&function(e,t,n,r){e.translate(n.scrollX,n.scrollY);var a=e.strokeStyle,o=e.lineWidth;e.lineWidth=1\/n.zoom.value,ro.getPointsGlobalCoordinates(r).forEach((function(r,a){var o;e.strokeStyle=\"red\",e.setLineDash([]),e.fillStyle=(null===(o=t.editingLinearElement)||void 0===o?void 0:o.activePointIndex)===a?\"rgba(255, 127, 127, 0.9)\":\"rgba(255, 255, 255, 0.9)\";var i=ro.POINT_HANDLE_SIZE;Fc(e,r[0],r[1],i\/2\/n.zoom.value)})),e.setLineDash([]),e.lineWidth=o,e.translate(-n.scrollX,-n.scrollY),e.strokeStyle=a}(b,t,i,M)}if(n&&ar(n,a,b,m,i),io(t)&&t.suggestedBindings.filter((function(e){return null!=e})).forEach((function(e){Kc(b,i,e)})),f&&!t.multiElement&&!t.editingLinearElement){for(var T=e.reduce((function(e,n){var r=[];if(t.selectedElementIds[n.id]&&!Sr(t,n)&&r.push(ct.Sn),i.remoteSelectedElementIds[n.id]&&r.push.apply(r,i.remoteSelectedElementIds[n.id].map((function(e){return Hc(e,t).background}))),r.length){var a=et(n),o=a[0],l=a[1],c=a[2],s=a[3];e.push({angle:n.angle,elementX1:o,elementY1:l,elementX2:c,elementY2:s,selectionColors:r})}return e}),[]),I=function(t){var n=Ir(e,t),r=ot(n),a=r[0],o=r[1],i=r[2],l=r[3];T.push({angle:0,elementX1:a,elementX2:i,elementY1:o,elementY2:l,selectionColors:[ct.Sn]})},P=0,A=Or(t);P<A.length;P++){I(A[P])}t.editingGroupId&&I(t.editingGroupId),T.forEach((function(e){return Vc(b,i,e)}));var _=ci(e,t);if(b.translate(i.scrollX,i.scrollY),1===_.length){b.fillStyle=ct.ix;var L=Xr(_[0],i.zoom,\"mouse\");t.viewModeEnabled||Gc(b,i,L,_[0].angle)}else if(_.length>1&&!t.isRotating){var D=4\/i.zoom.value;b.fillStyle=ct.ix;var j=ot(_),z=j[0],B=j[1],H=j[2],N=j[3],R=b.getLineDash();b.setLineDash([2\/i.zoom.value]);var F=b.lineWidth;b.lineWidth=1\/i.zoom.value,Rc(b,z-D,B-D,H-z+2*D,N-B+2*D,(z+H)\/2,(B+N)\/2,0),b.lineWidth=F,b.setLineDash(R);L=Yr([z,B,H,N],0,i.zoom,\"mouse\",Wr);Gc(b,i,L,0)}b.translate(-i.scrollX,-i.scrollY)}for(var W in b.scale(1\/i.zoom.value,1\/i.zoom.value),b.translate(-E,-S),i.remotePointerViewportCoords){var G=i.remotePointerViewportCoords[W],V=G.x,K=G.y;V-=t.offsetLeft,K-=t.offsetTop;var U=V<0||V>y-9||K<0||K>w-14;V=Math.max(V,0),V=Math.min(V,y-9),K=Math.max(K,0),K=Math.min(K,w-14);var Y=Hc(W,t),X=Y.background,Z=Y.stroke,q=b.strokeStyle,Q=(x=b.fillStyle,b.globalAlpha);b.strokeStyle=Z,b.fillStyle=X;var $=i.remotePointerUserStates[W];(U||$===Bc.AWAY)&&(b.globalAlpha=.48),i.remotePointerButton&&\"down\"===i.remotePointerButton[W]&&(b.beginPath(),b.arc(V,K,15,0,2*Math.PI,!1),b.lineWidth=3,b.strokeStyle=\"#ffffff88\",b.stroke(),b.closePath(),b.beginPath(),b.arc(V,K,15,0,2*Math.PI,!1),b.lineWidth=1,b.strokeStyle=Z,b.stroke(),b.closePath()),b.beginPath(),b.moveTo(V,K),b.lineTo(V+1,K+14),b.lineTo(V+4,K+9),b.lineTo(V+9,K+10),b.lineTo(V,K),b.fill(),b.stroke();var J=i.remotePointerUsernames[W],ee=\"\";$===Bc.AWAY?ee=Nc?\"\u26ab\ufe0f\":\" (\".concat(Bc.AWAY,\")\"):$===Bc.IDLE?ee=Nc?\"\ud83d\udca4\":\" (\".concat(Bc.IDLE,\")\"):$===Bc.ACTIVE&&(ee=Nc?\"\ud83d\udfe2\":\"\");var te=\"\".concat(J?\"\".concat(J,\" \"):\"\").concat(ee);if(!U&&te){var ne=V+9,re=K+14,ae=b.measureText(te),oe=ae.actualBoundingBoxDescent+ae.actualBoundingBoxAscent;b.fillStyle=Z,b.fillRect(ne-1,re-1,ae.width+8+2,oe+8+2),b.fillStyle=X,b.fillRect(ne,re,ae.width+8,oe+8),b.fillStyle=ct.ix,b.fillText(te,ne+4,re+4+ae.actualBoundingBoxAscent)}b.strokeStyle=q,b.fillStyle=x,b.globalAlpha=Q,b.closePath()}if(d){C=function(e,t,n,r){var a=r.scrollX,o=r.scrollY,i=r.zoom;if(0===e.length)return{horizontal:null,vertical:null};var l=ot(e),c=l[0],s=l[1],u=l[2],d=l[3],p=t\/i.value,f=n\/i.value,h=t-p,m=n-f,g={top:parseInt(_n(\"sat\")),bottom:parseInt(_n(\"sab\")),left:parseInt(_n(\"sal\")),right:parseInt(_n(\"sar\"))},v=k().rtl,b=h\/2-a+g.left,y=m\/2-o+g.top,w=b+p-g.right,x=y+f-g.bottom,E=Math.min(c,b),S=Math.min(s,y),C=Math.max(u,w),O=Math.max(d,x);return{horizontal:b===E&&w===C?null:{x:Math.max(g.left,4)+(b-E)\/(C-E)*t,y:n-6-Math.max(4,g.bottom),width:(w-b)\/(C-E)*t-Math.max(8,g.left+g.right),height:6},vertical:y===S&&x===O?null:{x:v?Math.max(g.left,4):t-6-Math.max(g.right,4),y:(y-S)\/(O-S)*n+Math.max(g.top,4),width:6,height:(x-y)\/(O-S)*n-Math.max(8,g.top+g.bottom)}}}(e,y,w,i);x=b.fillStyle,q=b.strokeStyle;b.fillStyle=\"rgba(0,0,0,0.3)\",b.strokeStyle=\"rgba(255,255,255,0.8)\",[C.horizontal,C.vertical].forEach((function(e){e&&function(e,t,n,r,a,o){e.beginPath(),e.moveTo(t+o,n),e.lineTo(t+r-o,n),e.quadraticCurveTo(t+r,n,t+r,n+o),e.lineTo(t+r,n+a-o),e.quadraticCurveTo(t+r,n+a,t+r-o,n+a),e.lineTo(t+o,n+a),e.quadraticCurveTo(t,n+a,t,n+a-o),e.lineTo(t,n+o),e.quadraticCurveTo(t,n,t+o,n),e.closePath(),e.fill(),e.stroke()}(b,e.x,e.y,e.width,e.height,3)})),b.fillStyle=x,b.strokeStyle=q}return b.scale(1\/r,1\/r),{atLeastOneVisibleElement:O.length>0,scrollBars:C}},Gc=function(e,t,n,r){Object.keys(n).forEach((function(a){var o=n[a];if(void 0!==o){var i=e.lineWidth;e.lineWidth=1\/t.zoom.value,\"rotation\"===a?Fc(e,o[0]+o[2]\/2,o[1]+o[3]\/2,o[2]\/2):Rc(e,o[0],o[1],o[2],o[3],o[0]+o[2]\/2,o[1]+o[3]\/2,r,!0),e.lineWidth=i}}))},Vc=function(e,t,n){var r=n.angle,a=n.elementX1,o=n.elementY1,i=n.elementX2,l=n.elementY2,c=n.selectionColors,s=i-a,u=l-o,d=e.getLineDash(),p=e.lineWidth,f=e.lineDashOffset,h=e.strokeStyle,m=4\/t.zoom.value,g=8\/t.zoom.value,v=4\/t.zoom.value;e.lineWidth=1\/t.zoom.value,e.translate(t.scrollX,t.scrollY);for(var b=c.length,y=0;y<b;++y)e.strokeStyle=c[y],e.setLineDash([g,v+(g+v)*(b-1)]),e.lineDashOffset=(g+v)*y,Rc(e,a-m,o-m,s+2*m,u+2*m,a+s\/2,o+u\/2,r);e.lineDashOffset=f,e.strokeStyle=h,e.lineWidth=p,e.setLineDash(d),e.translate(-t.scrollX,-t.scrollY)},Kc=function(e,t,n){var r=e.strokeStyle,a=e.lineWidth,o=Array.isArray(n)?Yc:Uc;e.translate(t.scrollX,t.scrollY),o(e,n),e.strokeStyle=r,e.lineWidth=a,e.translate(-t.scrollX,-t.scrollY)},Uc=function(e,t){var n=et(t),r=n[0],a=n[1],o=n[2]-r,i=n[3]-a,l=ka(t,o,i);e.strokeStyle=\"rgba(0,0,0,.05)\",e.lineWidth=l-4;var c=2+l\/2;switch(t.type){case\"rectangle\":case\"text\":Rc(e,r-c,a-c,o+2*c,i+2*c,r+o\/2,a+i\/2,t.angle);break;case\"diamond\":var s=Math.hypot(o,i);!function(e,t,n,r,a,o){e.translate(r,a),e.rotate(o),e.beginPath(),e.moveTo(0,n\/2),e.lineTo(t\/2,0),e.lineTo(0,-n\/2),e.lineTo(-t\/2,0),e.closePath(),e.stroke(),e.rotate(-o),e.translate(-r,-a)}(e,o+2*(c*s\/i),i+2*(c*s\/o),r+o\/2,a+i\/2,t.angle);break;case\"ellipse\":!function(e,t,n,r,a,o){e.beginPath(),e.ellipse(r,a,t\/2,n\/2,o,0,2*Math.PI),e.stroke()}(e,o+2*c,i+2*c,r+o\/2,a+i\/2,t.angle)}},Yc=function(e,t){var n=t[0],r=t[1],a=t[2],o=ka(a,a.width,a.height);e.strokeStyle=\"rgba(0,0,0,0)\",e.fillStyle=\"rgba(0,0,0,.05)\",(\"both\"===r?[0,-1]:\"start\"===r?[0]:[-1]).forEach((function(t){var r=ro.getPointAtIndexGlobalCoordinates(n,t),a=r[0],i=r[1];Fc(e,a,i,o)}))},Xc=function(e,t,n,r){var a=at(e),o=a[0],i=a[1],l=a[2],c=a[3],s=Pn({clientX:r.offsetLeft,clientY:r.offsetTop},r),u=Pn({clientX:r.offsetLeft+t,clientY:r.offsetTop+n},r);return s.x<=l&&s.y<=c&&u.x>=o&&u.y>=i},Zc=function(e,t,n,r){var a=void 0===r?{}:r,o=a.offsetX,i=void 0===o?0:o,l=a.offsetY,c=void 0===l?0:l;n&&e.forEach((function(e){e.isDeleted||function(e,t,n,r,a){var o=et(e),i=o[0],l=o[1],c=o[2],s=o[3],u=(c-i)\/2-(e.x-i),d=(s-l)\/2-(e.y-l),p=180*e.angle\/Math.PI,f=t.generator;switch(e.type){case\"selection\":throw new Error(\"Selection rendering is not supported for SVG\");case\"rectangle\":case\"diamond\":case\"ellipse\":nr(e,f);var h=t.draw(Jn(e));1!=(v=e.opacity\/100)&&(h.setAttribute(\"stroke-opacity\",\"\".concat(v)),h.setAttribute(\"fill-opacity\",\"\".concat(v))),h.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(a||0,\") rotate(\").concat(p,\" \").concat(u,\" \").concat(d,\")\")),n.appendChild(h);break;case\"line\":case\"draw\":case\"arrow\":nr(e,f);var m=n.ownerDocument.createElementNS(fn,\"g\"),g=e.opacity\/100;Jn(e).forEach((function(n){var o=t.draw(n);1!==g&&(o.setAttribute(\"stroke-opacity\",\"\".concat(g)),o.setAttribute(\"fill-opacity\",\"\".concat(g))),o.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(a||0,\") rotate(\").concat(p,\" \").concat(u,\" \").concat(d,\")\")),\"line\"!==e.type&&\"draw\"!==e.type||!Ye(e.points)||\"transparent\"===e.backgroundColor||o.setAttribute(\"fill-rule\",\"evenodd\"),m.appendChild(o)})),n.appendChild(m);break;default:if(!Be(e))throw new Error(\"Unimplemented type \".concat(e.type));var v=e.opacity\/100;h=n.ownerDocument.createElementNS(fn,\"g\"),1!==v&&(h.setAttribute(\"stroke-opacity\",\"\".concat(v)),h.setAttribute(\"fill-opacity\",\"\".concat(v))),h.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(a||0,\") rotate(\").concat(p,\" \").concat(u,\" \").concat(d,\")\"));for(var b=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),y=e.height\/b.length,w=e.height-e.baseline,x=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,E=Dn(e.text)?\"rtl\":\"ltr\",k=\"center\"===e.textAlign?\"middle\":\"right\"===e.textAlign||\"rtl\"===E?\"end\":\"start\",S=0;S<b.length;S++){var C=n.ownerDocument.createElementNS(fn,\"text\");C.textContent=b[S],C.setAttribute(\"x\",\"\".concat(x)),C.setAttribute(\"y\",\"\".concat((S+1)*y-w)),C.setAttribute(\"font-family\",bn(e)),C.setAttribute(\"font-size\",\"\".concat(e.fontSize,\"px\")),C.setAttribute(\"fill\",e.strokeColor),C.setAttribute(\"text-anchor\",k),C.setAttribute(\"style\",\"white-space: pre;\"),C.setAttribute(\"direction\",E),h.appendChild(C)}n.appendChild(h)}}(e,t,n,e.x+i,e.y+c)}))},qc=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},Qc=\"\\x3c!-- svg-source:excalidraw --\\x3e\",$c=function(e,t,n,r){var a=n.exportBackground,o=n.exportPadding,i=void 0===o?10:o,l=n.viewBackgroundColor,c=n.scale,s=void 0===c?1:c,u=n.shouldAddWatermark;void 0===r&&(r=function(e,t){var n=document.createElement(\"canvas\");return n.width=e*s,n.height=t*s,{canvas:n,scale:s}});var d=es(e,u),p=ns(d,i,u),f=p[0],h=p[1],m=r(p[2],p[3]),g=m.canvas,v=m.scale;return Wc(d,t,null,void 0===v?s:v,De.canvas(g),g,{viewBackgroundColor:a?l:null,exportWithDarkMode:t.exportWithDarkMode,scrollX:-f+i,scrollY:-h+i,zoom:Rn().zoom,remotePointerViewportCoords:{},remoteSelectedElementIds:{},shouldCacheIgnoreZoom:!1,remotePointerUsernames:{},remotePointerUserStates:{}},{renderScrollbars:!1,renderSelection:!1,renderOptimizations:!1,renderGrid:!1}),g},Jc=function(e,t){var n=t.exportBackground,r=t.exportPadding,a=void 0===r?10:r,o=t.viewBackgroundColor,i=t.exportWithDarkMode,l=t.scale,c=void 0===l?1:l,u=t.shouldAddWatermark,d=t.metadata,p=void 0===d?\"\":d,f=es(e,u),h=ns(f,a,u),m=h[0],g=h[1],v=h[2],b=h[3],y=document.createElementNS(fn,\"svg\");if(y.setAttribute(\"version\",\"1.1\"),y.setAttribute(\"xmlns\",fn),y.setAttribute(\"viewBox\",\"0 0 \".concat(v,\" \").concat(b)),y.setAttribute(\"width\",\"\".concat(v*c)),y.setAttribute(\"height\",\"\".concat(b*c)),i&&y.setAttribute(\"filter\",s.Gi),y.innerHTML=\"\\n  \".concat(Qc,\"\\n  \").concat(p,'\\n  <defs>\\n    <style>\\n      @font-face {\\n        font-family: \"Virgil\";\\n        src: url(\"https:\/\/excalidraw.com\/Virgil.woff2\");\\n      }\\n      @font-face {\\n        font-family: \"Cascadia\";\\n        src: url(\"https:\/\/excalidraw.com\/Cascadia.woff2\");\\n      }\\n    <\/style>\\n  <\/defs>\\n  '),n&&o){var w=y.ownerDocument.createElementNS(fn,\"rect\");w.setAttribute(\"x\",\"0\"),w.setAttribute(\"y\",\"0\"),w.setAttribute(\"width\",\"\".concat(v)),w.setAttribute(\"height\",\"\".concat(b)),w.setAttribute(\"fill\",o),y.appendChild(w)}var x=De.svg(y);return Zc(f,x,y,{offsetX:-m+a,offsetY:-g+a}),y},es=function(e,t){var n=qc([],e);if(t){var r=ot(e),a=r[2],o=r[3];n=qc(qc([],n),[ts(a,o)])}return n},ts=function(e,t){return zr({text:C(\"labels.madeWithExcalidraw\"),fontSize:16,fontFamily:s.rk,textAlign:\"right\",verticalAlign:s.hs,x:e,y:t+16,strokeColor:ct.MA[5],backgroundColor:\"transparent\",fillStyle:\"hachure\",strokeWidth:1,strokeStyle:\"solid\",roughness:1,opacity:100,strokeSharpness:\"sharp\"})},ns=function(e,t,n){var r=ot(e),a=r[0],o=r[1],i=r[2],l=r[3];return[a,o,Sn(a,i)+2*t,Sn(o,l)+t+(n?0:t)]},rs=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function as(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function os(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?as(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):as(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var is=32,ls=12,cs=256,ss=\"NOT_SPREADSHEET\",us=\"VALID_SPREADSHEET\",ds=function(e){var t=\/^[$\u20ac\u00a3\u00a5\u20a9]?([0-9,]+(\\.[0-9]+)?)$\/.exec(e);return t?parseFloat(t[1].replace(\/,\/g,\"\")):null},ps=function(e,t){return e.slice(1).every((function(e){return null!==ds(e[t])}))},fs=function(e){var t=e[0].length;if(t>2)return{type:ss,reason:\"More than 2 columns\"};if(1===t){if(!ps(e,0))return{type:ss,reason:\"Value is not numeric\"};var n=null===ds(e[0][0]),r=(n?e.slice(1):e).map((function(e){return ds(e[0])}));return r.length<2?{type:ss,reason:\"Less than two rows\"}:{type:us,spreadsheet:{title:n?e[0][0]:null,labels:null,values:r}}}var a=ps(e,0)?0:1;if(!ps(e,a))return{type:ss,reason:\"Value is not numeric\"};var o=(a+1)%2,i=null===ds(e[0][a]),l=i?e.slice(1):e;return l.length<2?{type:ss,reason:\"Less than 2 rows\"}:{type:us,spreadsheet:{title:i?e[0][a]:null,labels:l.map((function(e){return e[o]})),values:l.map((function(e){return ds(e[a])}))}}},hs=dt.elementBackground.slice(2,dt.elementBackground.length),ms={fillStyle:\"hachure\",fontFamily:s.rk,fontSize:s.n5,opacity:100,roughness:1,strokeColor:dt.elementStroke[0],strokeSharpness:\"sharp\",strokeStyle:\"solid\",strokeWidth:1,verticalAlign:\"middle\"},gs=function(e){return{chartWidth:44*e.values.length+ls,chartHeight:280}},vs=function(e,t,n,r,a,o){var i=gs(e),l=i.chartWidth,c=i.chartHeight,u=e.title?zr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{text:e.title,x:t+l\/2,y:n-cs-24-s.n5,strokeSharpness:\"sharp\",strokeStyle:\"solid\",textAlign:\"center\"})):null,d=o?Dr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{type:\"rectangle\",x:t,y:n-c,width:l,height:c,strokeColor:dt.elementStroke[0],fillStyle:\"solid\",opacity:6})):null;return rs(rs(rs(rs(rs([],d?[d]:[]),u?[u]:[]),function(e,t,n,r,a){var o;return(null===(o=e.labels)||void 0===o?void 0:o.map((function(e,o){return zr(os(os({groupIds:[r],backgroundColor:a},ms),{},{text:e.length>8?\"\".concat(e.slice(0,5),\"...\"):e,x:t+44*o+24,y:n+6,width:is,angle:5.87,fontSize:16,textAlign:\"center\",verticalAlign:\"top\"}))})))||[]}(e,t,n,r,a)),function(e,t,n,r,a){var o=zr(os(os({groupIds:[r],backgroundColor:a},ms),{},{x:t-ls,y:n-ls,text:\"0\",textAlign:\"right\"}));return[o,zr(os(os({groupIds:[r],backgroundColor:a},ms),{},{x:t-ls,y:n-cs-o.height\/2,text:Math.max.apply(Math,e.values).toLocaleString(),textAlign:\"right\"}))]}(e,t,n,r,a)),function(e,t,n,r,a){var o=gs(e),i=o.chartWidth,l=o.chartHeight;return[Hr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,width:i,points:[[0,0],[i,0]]})),Hr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,height:l,points:[[0,0],[0,-l]]})),Hr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{type:\"line\",x:t,y:n-cs-ls,startArrowhead:null,endArrowhead:null,strokeStyle:\"dotted\",width:i,opacity:50,points:[[0,0],[i,0]]}))]}(e,t,n,r,a))},bs=function(e,t,n,r){return\"line\"===e?function(e,t,n){for(var r=Math.max.apply(Math,e.values),a=ur(),o=hs[Math.floor(Math.random()*hs.length)],i=0,l=[],c=0,u=e.values;c<u.length;c++){var d=44*i,p=-u[c]\/r*cs;l.push([d,p]),i++}var f=Math.max.apply(Math,l.map((function(e){return e[0]}))),h=Math.max.apply(Math,l.map((function(e){return e[1]}))),m=Math.min.apply(Math,l.map((function(e){return e[0]}))),g=Math.min.apply(Math,l.map((function(e){return e[1]}))),v=Hr(os(os({backgroundColor:o,groupIds:[a]},ms),{},{type:\"line\",x:t+ls+16,y:n-ls,startArrowhead:null,endArrowhead:null,height:h-g,width:f-m,strokeWidth:2,points:l})),b=e.values.map((function(e,i){var l=44*i+6,c=-e\/r*cs+6;return Dr(os(os({backgroundColor:o,groupIds:[a]},ms),{},{fillStyle:\"solid\",strokeWidth:2,type:\"ellipse\",x:t+l+16,y:n+c-24,width:ls,height:ls}))})),y=e.values.map((function(e,i){var l=44*i+6,c=e\/r*cs+6+ls;return Hr(os(os({backgroundColor:o,groupIds:[a]},ms),{},{type:\"line\",x:t+l+16+6,y:n-c,startArrowhead:null,endArrowhead:null,height:c,strokeStyle:\"dotted\",opacity:50,points:[[0,0],[0,c]]}))}));return rs(rs(rs(rs([],vs(e,t,n,a,o,\"production\"===s.Vi.DEVELOPMENT)),[v]),y),b)}(t,n,r):function(e,t,n){var r=Math.max.apply(Math,e.values),a=ur(),o=hs[Math.floor(Math.random()*hs.length)],i=e.values.map((function(e,i){var l=e\/r*cs;return Dr(os(os({backgroundColor:o,groupIds:[a]},ms),{},{type:\"rectangle\",x:t+44*i+ls,y:n-l-ls,width:is,height:l}))}));return rs(rs([],i),vs(e,t,n,a,o,\"production\"===s.Vi.DEVELOPMENT))}(t,n,r)},ys=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Class extends value \"+String(n)+\" is not a constructor or null\");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ws=function(e){function t(t,n){void 0===t&&(t=\"Couldn't export canvas.\"),void 0===n&&(n=\"CANVAS_ERROR\");var r=e.call(this)||this;return r.name=n,r.message=t,r}return ys(t,e),t}(Error);function xs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Es(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xs(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ks=function(e,t){var n,r,a,o,i,l,c,s,u={type:e.type,version:e.version||1,versionNonce:null!==(n=e.versionNonce)&&void 0!==n?n:0,isDeleted:null!==(r=e.isDeleted)&&void 0!==r&&r,id:e.id||ur(),fillStyle:e.fillStyle||\"hachure\",strokeWidth:e.strokeWidth||1,strokeStyle:null!==(a=e.strokeStyle)&&void 0!==a?a:\"solid\",roughness:null!==(o=e.roughness)&&void 0!==o?o:1,opacity:null==e.opacity?100:e.opacity,angle:e.angle||0,x:e.x||0,y:e.y||0,strokeColor:e.strokeColor,backgroundColor:e.backgroundColor,width:e.width||0,height:e.height||0,seed:null!==(i=e.seed)&&void 0!==i?i:1,groupIds:null!==(l=e.groupIds)&&void 0!==l?l:[],strokeSharpness:null!==(c=e.strokeSharpness)&&void 0!==c?c:Ne(e.type)?\"round\":\"sharp\",boundElementIds:null!==(s=e.boundElementIds)&&void 0!==s?s:[]};return Es(Es(Es({},u),vr(u)),t)},Ss=function(e){var t;switch(e.type){case\"text\":var n=e.fontSize,r=e.fontFamily;if(\"font\"in e){var a=e.font.split(\" \"),o=a[0],i=a[1];n=parseInt(o,10),r=function(e){for(var t=0,n=Object.entries(s.ut);t<n.length;t++){var r=n[t],a=r[0];if(r[1].includes(e))return parseInt(a)}return s.rk}(i)}return ks(e,{fontSize:n,fontFamily:r,text:null!==(t=e.text)&&void 0!==t?t:\"\",baseline:e.baseline,textAlign:e.textAlign||s.Hg,verticalAlign:e.verticalAlign||s.hs});case\"draw\":case\"line\":case\"arrow\":var l=e.startArrowhead,c=void 0===l?null:l,u=e.endArrowhead,d=void 0===u?\"arrow\"===e.type?\"arrow\":null:u;return ks(e,{startBinding:e.startBinding,endBinding:e.endBinding,points:!Array.isArray(e.points)||e.points.length<2?[[0,0],[e.width,e.height]]:e.points,lastCommittedPoint:null,startArrowhead:c,endArrowhead:d});case\"ellipse\":case\"rectangle\":case\"diamond\":return ks(e,{})}},Cs=function(e){return(e||[]).reduce((function(e,t){if(\"selection\"!==t.type&&!mr(t)){var n=Ss(t);n&&e.push(n)}return e}),[])},Os=function(e,t){e=e||{};for(var n=Rn(),r={},a=0,o=Object.entries(n);a<o.length;a++){var i=o[a],l=i[0],c=i[1],s=e[l],u=t?t[l]:void 0;r[l]=void 0!==s?s:void 0!==u?u:c}return Es(Es({},r),{},{offsetLeft:e.offsetLeft||0,offsetTop:e.offsetTop||0,zoom:\"number\"==typeof e.zoom?{value:e.zoom,translation:n.zoom.translation}:e.zoom||n.zoom})},Ms=function(e,t){return{elements:Cs(null==e?void 0:e.elements),appState:Os(null==e?void 0:e.appState,t||null)}},Ts=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},Is=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},Ps=function(){function e(){}return e.importLibrary=function(t){return p()((function(){var n,r,a,o;return Ts(this,(function(i){switch(i.label){case 0:return[4,Gs(t)];case 1:return(n=i.sent())&&n.library?(r=function(e,t){return!e.find((function(e){return e.length===t.length&&e.every((function(e,n){return e.id===t[n].id&&e.versionNonce===t[n].versionNonce}))}))},[4,e.loadLibrary()]):[2];case 2:return a=i.sent(),o=n.library.reduce((function(e,t){var n=ni(Cs(t));return r(a,n)&&e.push(n),e}),[]),e.saveLibrary(Is(Is([],a),o)),[2]}}))}))()},e}();Ps.libraryCache=null,Ps.resetLibrary=function(){Ps.libraryCache=null,localStorage.removeItem(s.I.LOCAL_STORAGE_LIBRARY)},Ps.loadLibrary=function(){return new Promise(function(){var e=p()((function(e){var t,n;return Ts(this,(function(r){if(Ps.libraryCache)return[2,e(JSON.parse(JSON.stringify(Ps.libraryCache)))];try{if(!(t=localStorage.getItem(s.I.LOCAL_STORAGE_LIBRARY)))return[2,e([])];n=JSON.parse(t).map((function(e){return Cs(e)})),Ps.libraryCache=JSON.parse(JSON.stringify(n)),e(n)}catch(t){console.error(t),e([])}return[2]}))}));return function(t){return e.apply(this,arguments)}}())},Ps.saveLibrary=function(e){var t=Ps.libraryCache;try{var n=JSON.stringify(e);Ps.libraryCache=JSON.parse(n),localStorage.setItem(s.I.LOCAL_STORAGE_LIBRARY,n)}catch(e){Ps.libraryCache=t,console.error(e)}};var As=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},_s=function(e,t){return JSON.stringify({type:\"excalidraw\",version:2,source:window.location.origin,elements:oi(e),appState:Gn(t)},null,2)},Ls=function(){var e=p()((function(e,t){var n;return As(this,(function(r){switch(r.label){case 0:return n=_s(e,t),[4,zc(new Blob([n],{type:\"application\/json\"}),{fileName:t.name,description:\"Excalidraw file\",extensions:[\".excalidraw\"]},t.fileHandle)];case 1:return[2,{fileHandle:r.sent()}]}}))}));return function(t,n){return e.apply(this,arguments)}}(),Ds=function(){var e=p()((function(e){var t;return As(this,(function(n){switch(n.label){case 0:return[4,Dc({description:\"Excalidraw files\",extensions:[\".json\",\".excalidraw\",\".png\",\".svg\"],mimeTypes:[\"application\/json\",\"image\/png\",\"image\/svg+xml\"]})];case 1:return t=n.sent(),[2,Ws(t,e)]}}))}));return function(t){return e.apply(this,arguments)}}(),js=function(){var e=p()((function(){var e,t;return As(this,(function(n){switch(n.label){case 0:return[4,Ps.loadLibrary()];case 1:return e=n.sent(),t=JSON.stringify({type:\"excalidrawlib\",version:1,library:e},null,2),\"library.excalidrawlib\",[4,zc(new Blob([t],{type:s.LO.excalidrawlib}),{fileName:\"library.excalidrawlib\",description:\"Excalidraw library file\",extensions:[\".excalidrawlib\"]})];case 2:return n.sent(),[2]}}))}));return function(){return e.apply(this,arguments)}}(),zs=function(){var e=p()((function(){var e;return As(this,(function(t){switch(t.label){case 0:return[4,Dc({description:\"Excalidraw library files\",extensions:[\".json\",\".excalidrawlib\"],mimeTypes:[\"application\/json\"]})];case 1:return e=t.sent(),Ps.importLibrary(e),[2]}}))}));return function(){return e.apply(this,arguments)}}(),Bs=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}};function Hs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ns(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Hs(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Hs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Rs=function(){var e=p()((function(e){var t;return Bs(this,(function(r){switch(r.label){case 0:if(\"image\/png\"!==e.type)return[3,6];r.label=1;case 1:return r.trys.push([1,4,,5]),[4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527))];case 2:return[4,r.sent().decodePngMetadata(e)];case 3:return[2,r.sent()];case 4:throw\"INVALID\"===r.sent().message?new Error(C(\"alerts.imageDoesNotContainScene\")):new Error(C(\"alerts.cannotRestoreFromImage\"));case 5:return[3,15];case 6:return\"text\"in Blob?[4,e.text()]:[3,8];case 7:return t=r.sent(),[3,10];case 8:return[4,new Promise((function(t){var n=new FileReader;n.readAsText(e,\"utf8\"),n.onloadend=function(){n.readyState===FileReader.DONE&&t(n.result)}}))];case 9:t=r.sent(),r.label=10;case 10:if(\"image\/svg+xml\"!==e.type)return[3,15];r.label=11;case 11:return r.trys.push([11,14,,15]),[4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527))];case 12:return[4,r.sent().decodeSvgMetadata({svg:t})];case 13:return[2,r.sent()];case 14:throw\"INVALID\"===r.sent().message?new Error(C(\"alerts.imageDoesNotContainScene\")):new Error(C(\"alerts.cannotRestoreFromImage\"));case 15:return[2,t]}}))}));return function(t){return e.apply(this,arguments)}}(),Fs=function(e){var t;if(\"string\"==typeof e)t=e;else{if(e.type)return e.type;t=e.name||\"\"}return\/\\.(excalidraw|json)$\/.test(t)?\"application\/json\":\/\\.png$\/.test(t)?\"image\/png\":\/\\.jpe?g$\/.test(t)?\"image\/jpeg\":\/\\.svg$\/.test(t)?\"image\/svg+xml\":\"\"},Ws=function(){var e=p()((function(e,t){var n,r;return Bs(this,(function(a){switch(a.label){case 0:return[4,Rs(e)];case 1:n=a.sent();try{if(!function(e){return\"excalidraw\"===(null==e?void 0:e.type)&&(!e.elements||Array.isArray(e.elements)&&(!e.appState||\"object\"==typeof e.appState))}(r=JSON.parse(n)))throw new Error(C(\"alerts.couldNotLoadInvalidFile\"));return[2,Ms({elements:oi(r.elements||[]),appState:Ns(Ns({appearance:null==t?void 0:t.appearance,fileHandle:e.handle&&[\"application\/json\",s.LO.excalidraw].includes(Fs(e))?e.handle:null},Gn(r.appState||{})),t?di(r.elements||[],t):{})},t)]}catch(e){throw console.error(e.message),new Error(C(\"alerts.couldNotLoadInvalidFile\"))}return[2]}}))}));return function(t,n){return e.apply(this,arguments)}}(),Gs=function(){var e=p()((function(e){var t,n;return Bs(this,(function(r){switch(r.label){case 0:return[4,Rs(e)];case 1:if(t=r.sent(),\"excalidrawlib\"!==(n=JSON.parse(t)).type)throw new Error(C(\"alerts.couldNotLoadInvalidFile\"));return[2,n]}}))}));return function(t){return e.apply(this,arguments)}}(),Vs=function(){var e=p()((function(e){return Bs(this,(function(t){return[2,new Promise((function(t,n){try{e.toBlob((function(e){if(!e)return n(new ws(C(\"canvasError.canvasTooBig\"),\"CANVAS_POSSIBLY_TOO_BIG\"));t(e)}))}catch(e){n(e)}}))]}))}));return function(t){return e.apply(this,arguments)}}(),Ks=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},Us=\"excalidraw\/elements\",Ys=\"\",Xs=!1,Zs=\"clipboard\"in navigator&&\"readText\"in navigator.clipboard,qs=\"clipboard\"in navigator&&\"writeText\"in navigator.clipboard,Qs=\"clipboard\"in navigator&&\"write\"in navigator.clipboard&&\"ClipboardItem\"in window&&\"toBlob\"in HTMLCanvasElement.prototype,$s=function(){var e=p()((function(e,t){var n,r,a;return Ks(this,(function(o){switch(o.label){case 0:n={type:Us,created:Date.now(),elements:ci(e,t)},r=JSON.stringify(n),Ys=r,o.label=1;case 1:return o.trys.push([1,3,,4]),Xs=!1,[4,au(r)];case 2:return o.sent(),[3,4];case 3:return a=o.sent(),Xs=!0,console.error(a),[3,4];case 4:return[2]}}))}));return function(t,n){return e.apply(this,arguments)}}(),Js=function(){if(!Ys)return{};try{return JSON.parse(Ys)}catch(e){return console.error(e),{}}},eu=function(e){var t=function(e){var t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\"\\t\")}));if(t.length&&2!==t[0].length&&(t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\",\")}))),0===t.length)return{type:ss,reason:\"No values\"};var n=t[0].length;if(!t.every((function(e){return e.length===n})))return{type:ss,reason:\"All rows don't have same number of columns\"};var r=fs(t);if(r.type!==us){var a=fs(function(e){for(var t=[],n=0;n<e[0].length;n++){for(var r=[],a=0;a<e.length;a++)r.push(e[a][n]);t.push(r)}return t}(t));if(a.type===us)return a}return r}(e);return t.type===us?{spreadsheet:t.spreadsheet}:null},tu=function(){var e=p()((function(e){var t,n,r;return Ks(this,(function(a){switch(a.label){case 0:return a.trys.push([0,5,,6]),e?(n=null===(t=e.clipboardData)||void 0===t?void 0:t.getData(\"text\/plain\").trim(),[3,4]):[3,1];case 1:return(r=Zs)?[4,navigator.clipboard.readText()]:[3,3];case 2:r=a.sent(),a.label=3;case 3:n=r,a.label=4;case 4:return[2,n||\"\"];case 5:return a.sent(),[2,\"\"];case 6:return[2]}}))}));return function(t){return e.apply(this,arguments)}}(),nu=function(){var e=p()((function(e){var t,n,r,a;return Ks(this,(function(o){switch(o.label){case 0:return[4,tu(e)];case 1:if(!(t=o.sent())||t.includes(Qc))return[2,Js()];if(n=eu(t))return[2,n];r=Js();try{return a=JSON.parse(t),(null==(i=a)?void 0:i.type)===Us&&(null==r||!r.created||r.created<a.created)?[2,{elements:a.elements}]:[2,r]}catch(e){return[2,Xs&&r.elements?r:{text:t}]}return[2]}var i}))}));return function(t){return e.apply(this,arguments)}}(),ru=function(){var e=p()((function(e){var t;return Ks(this,(function(n){switch(n.label){case 0:return[4,Vs(e)];case 1:return t=n.sent(),[4,navigator.clipboard.write([new window.ClipboardItem({\"image\/png\":t})])];case 2:return n.sent(),[2]}}))}));return function(t){return e.apply(this,arguments)}}(),au=function(){var e=p()((function(e){var t,n;return Ks(this,(function(r){switch(r.label){case 0:if(t=!1,!qs)return[3,4];r.label=1;case 1:return r.trys.push([1,3,,4]),[4,navigator.clipboard.writeText(e||\"\")];case 2:return r.sent(),t=!0,[3,4];case 3:return n=r.sent(),console.error(n),[3,4];case 4:if(!t&&!ou(e||\" \"))throw new Error(\"couldn't copy\");return[2]}}))}));return function(t){return e.apply(this,arguments)}}(),ou=function(e){var t=\"rtl\"===document.documentElement.getAttribute(\"dir\"),n=document.createElement(\"textarea\");n.style.border=\"0\",n.style.padding=\"0\",n.style.margin=\"0\",n.style.position=\"absolute\",n.style[t?\"right\":\"left\"]=\"-9999px\";var r=window.pageYOffset||document.documentElement.scrollTop;n.style.top=\"\".concat(r,\"px\"),n.style.fontSize=\"12pt\",n.setAttribute(\"readonly\",\"\"),n.value=e,document.body.appendChild(n);var a=!1;try{n.select(),n.setSelectionRange(0,n.value.length),a=document.execCommand(\"copy\")}catch(e){console.error(e)}return n.remove(),a},iu=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},lu=function(){var e=p()((function(e,t,r,a,o){var i,l,c,s,u,d,p,f,h,m=o.exportBackground,g=o.exportPadding,v=void 0===g?10:g,b=o.viewBackgroundColor,y=o.name,w=o.scale,x=void 0===w?1:w,E=o.shouldAddWatermark;return iu(this,(function(o){switch(o.label){case 0:if(0===t.length)throw new Error(C(\"alerts.cannotExportEmptyCanvas\"));return\"svg\"!==e&&\"clipboard-svg\"!==e?[3,7]:(l=Jc,c=[t],s={exportBackground:m,exportWithDarkMode:r.exportWithDarkMode,viewBackgroundColor:b,exportPadding:v,scale:x,shouldAddWatermark:E},r.exportEmbedScene&&\"svg\"===e?[4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527))]:[3,3]);case 1:return[4,o.sent().encodeSvgMetadata({text:_s(t,r)})];case 2:return u=o.sent(),[3,4];case 3:u=void 0,o.label=4;case 4:return i=l.apply(void 0,c.concat([(s.metadata=u,s)])),\"svg\"!==e?[3,6]:[4,zc(new Blob([i.outerHTML],{type:\"image\/svg+xml\"}),{fileName:\"\".concat(y,\".svg\"),extensions:[\".svg\"]})];case 5:return o.sent(),[2];case 6:if(\"clipboard-svg\"===e)return au(i.outerHTML),[2];o.label=7;case 7:return(d=$c(t,r,{exportBackground:m,viewBackgroundColor:b,exportPadding:v,scale:x,shouldAddWatermark:E})).style.display=\"none\",document.body.appendChild(d),\"png\"!==e?[3,13]:(p=\"\".concat(y,\".png\"),[4,Vs(d)]);case 8:return f=o.sent(),r.exportEmbedScene?[4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527))]:[3,11];case 9:return[4,o.sent().encodePngMetadata({blob:f,metadata:_s(t,r)})];case 10:f=o.sent(),o.label=11;case 11:return[4,zc(f,{fileName:p,extensions:[\".png\"]})];case 12:return o.sent(),[3,17];case 13:if(\"clipboard\"!==e)return[3,17];o.label=14;case 14:return o.trys.push([14,16,,17]),[4,ru(d)];case 15:return o.sent(),[3,17];case 16:if(\"CANVAS_POSSIBLY_TOO_BIG\"===(h=o.sent()).name)throw h;throw new Error(C(\"alerts.couldNotCopyToClipboard\"));case 17:return d!==a&&d.remove(),[2]}}))}));return function(t,n,r,a,o){return e.apply(this,arguments)}}(),cu=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}};function su(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function uu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?su(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):su(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var du,pu,fu;kl({name:\"changeProjectName\",perform:function(e,t,n){return Oc(\"change\",\"title\"),{appState:uu(uu({},t),{},{name:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(Tc,{label:C(\"labels.fileTitle\"),value:t.name||\"Unnamed\",onChange:function(e){return n(e)}})}}),kl({name:\"changeExportBackground\",perform:function(e,t,n){return{appState:uu(uu({},t),{},{exportBackground:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"label\",null,c().createElement(\"input\",{type:\"checkbox\",checked:t.exportBackground,onChange:function(e){return n(e.target.checked)}}),\" \",C(\"labels.withBackground\"))}}),kl({name:\"changeExportEmbedScene\",perform:function(e,t,n){return{appState:uu(uu({},t),{},{exportEmbedScene:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"label\",{style:{display:\"flex\"}},c().createElement(\"input\",{type:\"checkbox\",checked:t.exportEmbedScene,onChange:function(e){return n(e.target.checked)}}),\" \",C(\"labels.exportEmbedScene\"),c().createElement(Ic,{label:C(\"labels.exportEmbedScene_details\"),position:\"above\",long:!0},c().createElement(\"div\",{className:\"TooltipIcon\"},Ni)))}}),kl({name:\"changeShouldAddWatermark\",perform:function(e,t,n){return{appState:uu(uu({},t),{},{shouldAddWatermark:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"label\",null,c().createElement(\"input\",{type:\"checkbox\",checked:t.shouldAddWatermark,onChange:function(e){return n(e.target.checked)}}),\" \",C(\"labels.addWatermark\"))}}),kl({name:\"saveScene\",perform:(du=p()((function(e,t,n){var r,a,o;return cu(this,(function(n){switch(n.label){case 0:r=!!t.fileHandle,n.label=1;case 1:return n.trys.push([1,3,,4]),[4,Ls(e,t)];case 2:return a=n.sent().fileHandle,[2,{commitToHistory:!1,appState:uu(uu({},t),{},{fileHandle:a,toastMessage:r?a.name?C(\"toast.fileSavedToFilename\").replace(\"{filename}\",'\"'.concat(a.name,'\"')):C(\"toast.fileSaved\"):null})}];case 3:return\"AbortError\"!==(null==(o=n.sent())?void 0:o.name)&&console.error(o),[2,{commitToHistory:!1}];case 4:return[2]}}))})),function(e,t,n){return du.apply(this,arguments)}),keyTest:function(e){return e.key===nn&&e[Ft]&&!e.shiftKey},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Oi,title:C(\"buttons.save\"),\"aria-label\":C(\"buttons.save\"),showAriaLabel:vc(),onClick:function(){return t(null)}})}}),kl({name:\"saveAsScene\",perform:(pu=p()((function(e,t,n){var r,a;return cu(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,Ls(e,uu(uu({},t),{},{fileHandle:null}))];case 1:return r=n.sent().fileHandle,[2,{commitToHistory:!1,appState:uu(uu({},t),{},{fileHandle:r})}];case 2:return\"AbortError\"!==(null==(a=n.sent())?void 0:a.name)&&console.error(a),[2,{commitToHistory:!1}];case 3:return[2]}}))})),function(e,t,n){return pu.apply(this,arguments)}),keyTest:function(e){return e.key===nn&&e.shiftKey&&e[Ft]},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Mi,title:C(\"buttons.saveAs\"),\"aria-label\":C(\"buttons.saveAs\"),showAriaLabel:vc(),hidden:!(\"chooseFileSystemEntries\"in window||\"showOpenFilePicker\"in window),onClick:function(){return t(null)}})}}),kl({name:\"loadScene\",perform:(fu=p()((function(e,t){var n,r,a,o;return cu(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,Ds(t)];case 1:return n=i.sent(),r=n.elements,a=n.appState,[2,{elements:r,appState:a,commitToHistory:!0}];case 2:return\"AbortError\"===(null==(o=i.sent())?void 0:o.name)?[2,!1]:[2,{elements:e,appState:uu(uu({},t),{},{errorMessage:o.message}),commitToHistory:!1}];case 3:return[2]}}))})),function(e,t){return fu.apply(this,arguments)}),keyTest:function(e){return e[Ft]&&e.key===$t},PanelComponent:function(e){var t=e.updateData;e.appState;return c().createElement(wi,{type:\"button\",icon:Ti,title:C(\"buttons.load\"),\"aria-label\":C(\"buttons.load\"),showAriaLabel:vc(),onClick:t})}}),kl({name:\"exportWithDarkMode\",perform:function(e,t,n){return{appState:uu(uu({},t),{},{exportWithDarkMode:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginTop:\"-45px\",marginBottom:\"10px\"}},c().createElement(Pc,{value:t.exportWithDarkMode?\"dark\":\"light\",onChange:function(e){n(\"dark\"===e)},title:C(\"labels.toggleExportColorScheme\")}))}});function hu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hu(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var gu=\"{}\",vu=kl({name:\"copyStyles\",perform:function(e,t){var n=e.find((function(e){return t.selectedElementIds[e.id]}));return n&&(gu=JSON.stringify(n)),{appState:mu(mu({},t),{},{toastMessage:C(\"toast.copyStyles\")}),commitToHistory:!1}},contextItemLabel:\"labels.copyStyles\",keyTest:function(e){return e[Ft]&&e.altKey&&e.code===Mt}}),bu=kl({name:\"pasteStyles\",perform:function(e,t){var n,r=JSON.parse(gu);return\"text\"!==(null==(n=r)?void 0:n.type)&&\"diamond\"!==(null==n?void 0:n.type)&&\"rectangle\"!==(null==n?void 0:n.type)&&\"ellipse\"!==(null==n?void 0:n.type)&&\"arrow\"!==(null==n?void 0:n.type)&&\"draw\"!==(null==n?void 0:n.type)&&\"line\"!==(null==n?void 0:n.type)?{elements:e,commitToHistory:!1}:{elements:e.map((function(e){if(t.selectedElementIds[e.id]){var n=hr(e,{backgroundColor:null==r?void 0:r.backgroundColor,strokeWidth:null==r?void 0:r.strokeWidth,strokeColor:null==r?void 0:r.strokeColor,strokeStyle:null==r?void 0:r.strokeStyle,fillStyle:null==r?void 0:r.fillStyle,opacity:null==r?void 0:r.opacity,roughness:null==r?void 0:r.roughness});return Be(n)&&(fr(n,{fontSize:(null==r?void 0:r.fontSize)||s.n5,fontFamily:(null==r?void 0:r.fontFamily)||s.rk,textAlign:(null==r?void 0:r.textAlign)||s.Hg}),Zo(n)),n}return e})),commitToHistory:!0}},contextItemLabel:\"labels.pasteStyles\",keyTest:function(e){return e[Ft]&&e.altKey&&e.code===At}}),yu=function(e){return c().createElement(\"label\",{title:\"\".concat(e.title,\" \u2014 ?\"),className:\"help-icon\"},c().createElement(\"div\",{onClick:e.onClick},Ni))};function wu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wu(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}kl({name:\"toggleCanvasMenu\",perform:function(e,t){return{appState:xu(xu({},t),{},{openMenu:\"canvas\"===t.openMenu?null:\"canvas\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(wi,{type:\"button\",icon:zi,\"aria-label\":C(\"buttons.menu\"),onClick:n,selected:\"canvas\"===t.openMenu})}}),kl({name:\"toggleEditMenu\",perform:function(e,t){return{appState:xu(xu({},t),{},{openMenu:\"shape\"===t.openMenu?null:\"shape\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{visible:qo(n,ni(t)),type:\"button\",icon:Ai,\"aria-label\":C(\"buttons.edit\"),onClick:r,selected:\"shape\"===n.openMenu})}}),kl({name:\"toggleFullScreen\",perform:function(){return Tn()||document.documentElement.requestFullscreen(),Tn()&&document.exitFullscreen(),{commitToHistory:!1}},keyTest:function(e){return e.code===It&&!e[Ft]}}),kl({name:\"toggleShortcuts\",perform:function(e,t){return{appState:xu(xu({},t),{},{showHelpDialog:!t.showHelpDialog}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return c().createElement(yu,{title:C(\"helpDialog.title\"),onClick:t})},keyTest:function(e){return e.key===Kt}});var Eu=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function ku(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Su(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ku(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ku(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Cu=function(e,t){var n=ci(ni(e),t);return n.length>=2&&!function(e){if(e.length>=2)for(var t=function(t){if(e.reduce((function(e,n){return e&&Tr(n,t)}),!0))return{value:!0}},n=0,r=e[0].groupIds;n<r.length;n++){var a=t(r[n]);if(\"object\"==typeof a)return a.value}return!1}(n)},Ou=kl({name:\"group\",perform:function(e,t){var n=ci(ni(e),t);if(n.length<2)return{appState:t,elements:e,commitToHistory:!1};var r=Or(t);if(1===r.length){var a=r[0],o=new Set(Ir(e,a).map((function(e){return e.id}))),i=new Set(n.map((function(e){return e.id})));if(new Set(Eu(Eu([],Array.from(o)),Array.from(i))).size===o.size)return{appState:t,elements:e,commitToHistory:!1}}var l=ur(),c=e.map((function(e){return t.selectedElementIds[e.id]?hr(e,{groupIds:Pr(e.groupIds,l,t.editingGroupId)}):e})),s=Ir(c,l),u=s[s.length-1],d=c.lastIndexOf(u),p=c.slice(d+1),f=c.slice(0,d).filter((function(e){return!Tr(e,l)})),h=Eu(Eu(Eu([],f),s),p);return{appState:kr(l,Su(Su({},t),{},{selectedGroupIds:{}}),ni(h)),elements:h,commitToHistory:!0}},contextItemLabel:\"labels.group\",contextItemPredicate:function(e,t){return Cu(e,t)},keyTest:function(e){return!e.shiftKey&&e[Ft]&&e.code===Tt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Cu(t,n),type:\"button\",icon:c().createElement(al,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.group\"),\" \u2014 \").concat(In(\"CtrlOrCmd+G\")),\"aria-label\":C(\"labels.group\"),visible:li(ni(t),n)})}}),Mu=kl({name:\"ungroup\",perform:function(e,t){if(0===Or(t).length)return{appState:t,elements:e,commitToHistory:!1};var n=e.map((function(e){var n=function(e,t){return e.filter((function(e){return!t[e]}))}(e.groupIds,t.selectedGroupIds);return n.length===e.groupIds.length?e:hr(e,{groupIds:n})}));return{appState:Mr(Su(Su({},t),{},{selectedGroupIds:{}}),ni(n)),elements:n,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&e[Ft]&&e.code===Tt},contextItemLabel:\"labels.ungroup\",contextItemPredicate:function(e,t){return Or(t).length>0},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{type:\"button\",hidden:0===Or(n).length,icon:c().createElement(ol,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.ungroup\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+G\")),\"aria-label\":C(\"labels.ungroup\"),visible:li(ni(t),n)})}}),Tu=(n(1395),function(e){var t=e.children,n=e.color,r=e.border,a=e.onClick;return c().createElement(\"div\",{className:\"Avatar\",style:{background:n,border:\"1px solid \".concat(r)},onClick:a},t)});function Iu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Iu(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Iu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}kl({name:\"goToCollaborator\",perform:function(e,t,n){var r=n;return r?{appState:Pu(Pu(Pu({},t),ui({scenePoint:r,viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})),{},{openMenu:\"canvas\"===t.openMenu?null:t.openMenu}),commitToHistory:!1}:{appState:t,commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.id;if(!r)return null;var a=t.collaborators.get(r);if(!a)return null;var o=Hc(r,t),i=o.background,l=o.stroke,s=function(e){if(!e)return\"?\";var t=e.trim().split(\" \");if(t.length<2)return t[0].substring(0,2).toUpperCase();var n=t[0],r=t[t.length-1];return(n[0]+r[0]).toUpperCase()}(a.username);return c().createElement(Tu,{color:i,border:l,onClick:function(){return n(a.pointer)}},s)}});var Au=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},_u=kl({name:\"addToLibrary\",perform:function(e,t){var n=ci(ni(e),t);return Ps.loadLibrary().then((function(e){Ps.saveLibrary(Au(Au([],e),[n.map(Nr)]))})),!1},contextItemLabel:\"labels.addToLibrary\"}),Lu=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function Du(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ju(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Du(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Du(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var zu=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],r=t.get(n)||[];t.set(n,Lu(Lu([],r),[e]))})),Array.from(t.values())},Bu=function(e,t,n){var r,a,o,i=n.axis,l=n.position,c=Hu(e),s=\"x\"===i?[\"minX\",\"maxX\"]:[\"minY\",\"maxY\"],u=s[0],d=s[1],p={x:0,y:0};return ju(ju({},p),{},\"start\"===l?((r={})[i]=t[u]-c[u],r):\"end\"===l?((a={})[i]=t[d]-c[d],a):((o={})[i]=(t[u]+t[d])\/2-(c[u]+c[d])\/2,o))},Hu=function(e){var t=ot(e);return{minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]}},Nu=function(e,t){return ci(ni(e),t).length>1},Ru=function(e,t,n){var r=function(e,t){var n=zu(e),r=Hu(e);return n.flatMap((function(e){var n=Bu(e,r,t);return e.map((function(e){return hr(e,{x:e.x+n.x,y:e.y+n.y})}))}))}(ci(ni(e),t),n),a=ei(r);return e.map((function(e){return a[e.id]||e}))},Fu=(kl({name:\"alignTop\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"start\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key===Ht},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Ki,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.alignTop\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+Up\")),\"aria-label\":C(\"labels.alignTop\"),visible:li(ni(t),n)})}}),kl({name:\"alignBottom\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"end\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key===jt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Ui,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.alignBottom\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+Down\")),\"aria-label\":C(\"labels.alignBottom\"),visible:li(ni(t),n)})}}),kl({name:\"alignLeft\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"start\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key===zt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Yi,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.alignLeft\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+Left\")),\"aria-label\":C(\"labels.alignLeft\"),visible:li(ni(t),n)})}}),kl({name:\"alignRight\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"end\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key===Bt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Xi,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.alignRight\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+Right\")),\"aria-label\":C(\"labels.alignRight\"),visible:li(ni(t),n)})}}),kl({name:\"alignVerticallyCentered\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"center\",axis:\"y\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Qi,{appearance:n.appearance}),onClick:function(){return r(null)},title:C(\"labels.centerVertically\"),\"aria-label\":C(\"labels.centerVertically\"),visible:li(ni(t),n)})}}),kl({name:\"alignHorizontallyCentered\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"center\",axis:\"x\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement($i,{appearance:n.appearance}),onClick:function(){return r(null)},title:C(\"labels.centerHorizontally\"),\"aria-label\":C(\"labels.centerHorizontally\"),visible:li(ni(t),n)})}}),function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e}),Wu=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],r=t.get(n)||[];t.set(n,Fu(Fu([],r),[e]))})),Array.from(t.values())},Gu=function(e){var t=ot(e),n=t[0],r=t[1],a=t[2],o=t[3];return{minX:n,minY:r,maxX:a,maxY:o,width:a-n,height:o-r,midX:(n+a)\/2,midY:(r+o)\/2}},Vu=function(e,t){return ci(ni(e),t).length>1},Ku=function(e,t,n){var r=function(e,t){for(var n=\"x\"===t.axis?[\"minX\",\"midX\",\"maxX\",\"width\"]:[\"minY\",\"midY\",\"maxY\",\"height\"],r=n[0],a=n[1],o=n[2],i=n[3],l=Gu(e),c=Wu(e).map((function(e){return[e,Gu(e)]})).sort((function(e,t){return e[1][a]-t[1][a]})),s=0,u=0,d=c;u<d.length;u++)s+=d[u][1][i];var p=(l[i]-s)\/(c.length-1);if(p<0){var f=c.findIndex((function(e){return e[1][r]===l[r]})),h=c.findIndex((function(e){return e[1][o]===l[o]})),m=(c[h][1][a]-c[f][1][a])\/(c.length-1),g=c[f][1][a];return c.flatMap((function(e,n){var r=e[0],o=e[1],i={x:0,y:0};return n!==f&&n!==h&&(g+=m,i[t.axis]=g-o[a]),r.map((function(e){return hr(e,{x:e.x+i.x,y:e.y+i.y})}))}))}var v=l[r];return c.flatMap((function(e){var n=e[0],a=e[1],o={x:0,y:0};return o[t.axis]=v-a[r],v+=p,v+=a[i],n.map((function(e){return hr(e,{x:e.x+o.x,y:e.y+o.y})}))}))}(ci(ni(e),t),n),a=ei(r);return e.map((function(e){return a[e.id]||e}))},Uu=(kl({name:\"distributeHorizontally\",perform:function(e,t){return{appState:t,elements:Ku(e,t,{space:\"between\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e.altKey&&e.code===Pt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Vu(t,n),type:\"button\",icon:c().createElement(Zi,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.distributeHorizontally\"),\" \u2014 \").concat(In(\"Alt+H\")),\"aria-label\":C(\"labels.distributeHorizontally\"),visible:li(ni(t),n)})}}),kl({name:\"distributeVertically\",perform:function(e,t){return{appState:t,elements:Ku(e,t,{space:\"between\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e.altKey&&e.code===At},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Vu(t,n),type:\"button\",icon:c().createElement(qi,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.distributeVertically\"),\" \u2014 \").concat(In(\"Alt+V\")),\"aria-label\":C(\"labels.distributeVertically\"),visible:li(ni(t),n)})}}),function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}});function Yu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yu(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Zu=kl({name:\"copy\",perform:function(e,t){return $s(ni(e),t),{commitToHistory:!1}},contextItemLabel:\"labels.copy\"}),qu=kl({name:\"cut\",perform:function(e,t,n,r){return Zu.perform(e,t,n,r),Ml.perform(e,t,n,r)},contextItemLabel:\"labels.cut\",keyTest:function(e){return e[Ft]&&e.code===_t}}),Qu=kl({name:\"copyAsSvg\",perform:function(){var e=p()((function(e,t,n,r){var a,o;return Uu(this,(function(n){switch(n.label){case 0:if(!r.canvas)return[2,{commitToHistory:!1}];a=ci(ni(e),t),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,lu(\"clipboard-svg\",a.length?a:ni(e),t,r.canvas,t)];case 2:return n.sent(),[2,{commitToHistory:!1}];case 3:return o=n.sent(),console.error(o),[2,{appState:Xu(Xu({},t),{},{errorMessage:o.message}),commitToHistory:!1}];case 4:return[2]}}))}));return function(t,n,r,a){return e.apply(this,arguments)}}(),contextItemLabel:\"labels.copyAsSvg\"}),$u=kl({name:\"copyAsPng\",perform:function(){var e=p()((function(e,t,n,r){var a,o;return Uu(this,(function(n){switch(n.label){case 0:if(!r.canvas)return[2,{commitToHistory:!1}];a=ci(ni(e),t),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,lu(\"clipboard\",a.length?a:ni(e),t,r.canvas,t)];case 2:return n.sent(),[2,{appState:Xu(Xu({},t),{},{toastMessage:C(\"toast.copyToClipboardAsPng\",{exportSelection:a.length?C(\"toast.selection\"):C(\"toast.canvas\"),exportColorScheme:t.exportWithDarkMode?C(\"buttons.darkMode\"):C(\"buttons.lightMode\")})}),commitToHistory:!1}];case 3:return o=n.sent(),console.error(o),[2,{appState:Xu(Xu({},t),{},{errorMessage:o.message}),commitToHistory:!1}];case 4:return[2]}}))}));return function(t,n,r,a){return e.apply(this,arguments)}}(),contextItemLabel:\"labels.copyAsPng\",keyTest:function(e){return e.code===Mt&&e.altKey&&e.shiftKey}});function Ju(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ed(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ju(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ju(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var td=kl({name:\"gridMode\",perform:function(e,t){return Oc(\"view\",\"mode\",\"grid\"),{appState:ed(ed({},t),{},{gridSize:this.checked(t)?null:s.k}),commitToHistory:!1}},checked:function(e){return null!==e.gridSize},contextItemLabel:\"labels.showGrid\",keyTest:function(e){return e[Ft]&&e.code===Ct}});function nd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function rd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?nd(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):nd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ad=kl({name:\"zenMode\",perform:function(e,t){return Oc(\"view\",\"mode\",\"zen\"),{appState:rd(rd({},t),{},{zenModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.zenModeEnabled},contextItemLabel:\"buttons.zenMode\",keyTest:function(e){return!e[Ft]&&e.altKey&&e.code===Lt}});function od(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function id(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?od(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):od(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ld=kl({name:\"stats\",perform:function(e,t){return{appState:id(id({},t),{},{showStats:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.showStats},contextItemLabel:\"stats.title\"});function cd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function sd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?cd(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):cd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ud=function(e,t,n){var r=!1;if(!(t.multiElement||t.resizingElement||t.editingElement||t.draggingElement)){var a=n();if(null===a)return{commitToHistory:r};var o=ei(e),i=a.elements,l=ei(i),c=e.filter((function(e){return!l.hasOwnProperty(e.id)})),s=i.map((function(e){return hr(o[e.id]||e,e)})).concat(c.map((function(e){return hr(e,{isDeleted:!0})})));return _o(s,c),{elements:s,appState:sd(sd({},t),a.appState),commitToHistory:r,syncHistory:!0}}return{commitToHistory:r}},dd=function(){function e(e,t,n,r){var a=this;this.actions={},this.renderAction=function(e,t){if(a.actions[e]&&\"PanelComponent\"in a.actions[e]){var n=a.actions[e],r=n.PanelComponent;return c().createElement(r,{elements:a.getElementsIncludingDeleted(),appState:a.getAppState(),updateData:function(e){a.updater(n.perform(a.getElementsIncludingDeleted(),a.getAppState(),e,a.app))},id:t})}return null},this.updater=function(t){if(!t||!(\"then\"in t))return e(t);t.then((function(t){return e(t)}))},this.getAppState=t,this.getElementsIncludingDeleted=n,this.app=r}return e.prototype.registerAction=function(e){this.actions[e.name]=e},e.prototype.registerAll=function(e){var t=this;e.forEach((function(e){return t.registerAction(e)}))},e.prototype.handleKeyDown=function(e){var t=this,n=Object.values(this.actions).sort((function(e,t){return(t.keyPriority||0)-(e.keyPriority||0)})).filter((function(n){return n.keyTest&&n.keyTest(e,t.getAppState(),t.getElementsIncludingDeleted())}));return 0!==n.length&&(!(this.getAppState().viewModeEnabled&&!Object.values(s.EH).includes(n[0].name))&&(e.preventDefault(),this.updater(n[0].perform(this.getElementsIncludingDeleted(),this.getAppState(),null,this.app)),!0))},e.prototype.executeAction=function(e){this.updater(e.perform(this.getElementsIncludingDeleted(),this.getAppState(),null,this.app))},e}(),pd=function(e){var t=Array.from(e.values());return{x:hd(t,(function(e){return e.x}))\/t.length,y:hd(t,(function(e){return e.y}))\/t.length}},fd=function(e){var t=e[0],n=e[1];return Math.hypot(t.x-n.x,t.y-n.y)},hd=function(e,t){return e.reduce((function(e,n){return e+t(n)}),0)};function md(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?md(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):md(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vd,bd=function(e){return{selectedElementIds:e.selectedElementIds,viewBackgroundColor:e.viewBackgroundColor,editingLinearElement:e.editingLinearElement,editingGroupId:e.editingGroupId,name:e.name}},yd=function(){function e(){var e=this;this.elementCache=new Map,this.recording=!0,this.stateHistory=[],this.redoStack=[],this.lastEntry=null,this.generateEntry=function(t,n){return e.dehydrateHistoryEntry({appState:bd(t),elements:n.reduce((function(e,n){if(He(n)&&t.multiElement&&t.multiElement.id===n.id){if(t.multiElement&&t.multiElement.id===n.id&&n.points.length<2)return e;e.push(gd(gd({},n),{},{points:n.lastCommittedPoint!==n.points[n.points.length-1]?n.points.slice(0,-1):n.points}))}else e.push(n);return e}),[])})}}return e.prototype.hydrateHistoryEntry=function(e){var t=e.appState,n=e.elements,r=this;return{appState:JSON.parse(t),elements:n.map((function(e){var t,n=null===(t=r.elementCache.get(e.id))||void 0===t?void 0:t.get(e.versionNonce);if(!n)throw new Error(\"Element not found: \".concat(e.id,\":\").concat(e.versionNonce));return n}))}},e.prototype.dehydrateHistoryEntry=function(e){var t=e.appState,n=e.elements,r=this;return{appState:JSON.stringify(t),elements:n.map((function(e){r.elementCache.has(e.id)||r.elementCache.set(e.id,new Map);var t=r.elementCache.get(e.id);return t.has(e.versionNonce)||t.set(e.versionNonce,Nr(e)),{id:e.id,versionNonce:e.versionNonce}}))}},e.prototype.getSnapshotForTest=function(){var e=this;return{recording:this.recording,stateHistory:this.stateHistory.map((function(t){return e.hydrateHistoryEntry(t)})),redoStack:this.redoStack.map((function(t){return e.hydrateHistoryEntry(t)}))}},e.prototype.clear=function(){this.stateHistory.length=0,this.redoStack.length=0,this.lastEntry=null,this.elementCache.clear()},e.prototype.shouldCreateEntry=function(e){var t,n=this.lastEntry;if(!n)return!0;if(e.elements.length!==n.elements.length)return!0;for(var r=e.elements.length-1;r>-1;r--){var a=e.elements[r],o=n.elements[r];if(!a||!o||a.id!==o.id||a.versionNonce!==o.versionNonce)return!0}for(t in e.appState){var i,l;if(\"editingLinearElement\"===t)if((null===(i=e.appState[t])||void 0===i?void 0:i.elementId)===(null===(l=n.appState[t])||void 0===l?void 0:l.elementId))continue;if(\"selectedElementIds\"!==t&&e.appState[t]!==n.appState[t])return!0}return!1},e.prototype.pushEntry=function(e,t){var n=this.generateEntry(e,t),r=this.hydrateHistoryEntry(n);if(r){if(!this.shouldCreateEntry(r))return;this.stateHistory.push(n),this.lastEntry=r,this.clearRedoStack()}},e.prototype.clearRedoStack=function(){this.redoStack.splice(0,this.redoStack.length)},e.prototype.redoOnce=function(){if(0===this.redoStack.length)return null;var e=this.redoStack.pop();return void 0!==e?(this.stateHistory.push(e),this.hydrateHistoryEntry(e)):null},e.prototype.undoOnce=function(){if(1===this.stateHistory.length)return null;var e=this.stateHistory.pop(),t=this.stateHistory[this.stateHistory.length-1];return void 0!==e?(this.redoStack.push(e),this.hydrateHistoryEntry(t)):null},e.prototype.setCurrentState=function(e,t){this.lastEntry=this.hydrateHistoryEntry(this.generateEntry(e,t))},e.prototype.resumeRecording=function(){this.recording=!0},e.prototype.record=function(e,t){this.recording&&(this.pushEntry(e,t),this.recording=!1)},e}(),wd=[{icon:c().createElement(\"svg\",{viewBox:\"0 0 320 512\",className:\"\"},c().createElement(\"path\",{d:\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\"})),value:\"selection\",key:[an,nn]},{icon:c().createElement(\"svg\",{viewBox:\"0 0 448 512\"},c().createElement(\"path\",{d:\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\"})),value:\"rectangle\",key:tn},{icon:c().createElement(\"svg\",{viewBox:\"0 0 223.646 223.646\"},c().createElement(\"path\",{d:\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\"})),value:\"diamond\",key:Zt},{icon:c().createElement(\"svg\",{viewBox:\"0 0 512 512\"},c().createElement(\"path\",{d:\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\"})),value:\"ellipse\",key:qt},{icon:c().createElement(\"svg\",{viewBox:\"0 0 448 512\",className:\"rtl-mirror\"},c().createElement(\"path\",{d:\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\"})),value:\"arrow\",key:Xt},{icon:c().createElement(\"svg\",{viewBox:\"0 0 6 6\"},c().createElement(\"line\",{x1:\"0\",y1:\"3\",x2:\"6\",y2:\"3\",stroke:\"currentColor\",strokeLinecap:\"round\"})),value:\"line\",key:[Jt,Qt]},{icon:c().createElement(\"svg\",{viewBox:\"0 0 512 512\"},c().createElement(\"path\",{fill:\"currentColor\",d:\"M290.74 93.24l128.02 128.02-277.99 277.99-114.14 12.6C11.35 513.54-1.56 500.62.14 485.34l12.7-114.22 277.9-277.88zm207.2-19.06l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.76 18.75-49.16 0-67.91z\"})),value:\"draw\",key:on},{icon:c().createElement(\"svg\",{viewBox:\"0 0 448 512\"},c().createElement(\"path\",{d:\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\"})),value:\"text\",key:rn}],xd=(n(4518),{cut:[In(\"CtrlOrCmd+X\")],copy:[In(\"CtrlOrCmd+C\")],paste:[In(\"CtrlOrCmd+V\")],copyStyles:[In(\"CtrlOrCmd+Alt+C\")],pasteStyles:[In(\"CtrlOrCmd+Alt+V\")],selectAll:[In(\"CtrlOrCmd+A\")],deleteSelectedElements:[In(\"Del\")],duplicateSelection:[In(\"CtrlOrCmd+D\"),In(\"Alt+\".concat(C(\"helpDialog.drag\")))],sendBackward:[In(\"CtrlOrCmd+[\")],bringForward:[In(\"CtrlOrCmd+]\")],sendToBack:[In(ft?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")],bringToFront:[In(ft?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")],copyAsPng:[In(\"Shift+Alt+C\")],copyAsSvg:[],group:[In(\"CtrlOrCmd+G\")],ungroup:[In(\"CtrlOrCmd+Shift+G\")],gridMode:[In(\"CtrlOrCmd+'\")],zenMode:[In(\"Alt+Z\")],stats:[],addToLibrary:[],viewMode:[In(\"Alt+R\")]}),Ed=function(e){var t,n=e.options,r=e.onCloseRequest,a=e.top,o=e.left,i=e.actionManager,l=e.appState,s=!(null===(t=document.querySelector(\".excalidraw\"))||void 0===t||!t.classList.contains(\"Appearance_dark\"));return c().createElement(\"div\",{className:ze(\"excalidraw\",{\"Appearance_dark Appearance_dark-background-none\":s})},c().createElement(Ql,{onCloseRequest:r,top:a,left:o,fitInViewport:!0},c().createElement(\"ul\",{className:\"context-menu\",onContextMenu:function(e){return e.preventDefault()}},n.map((function(e,t){var n;if(\"separator\"===e)return c().createElement(\"hr\",{key:t,className:\"context-menu-option-separator\"});var a,o=e.name,s=e.contextItemLabel?C(e.contextItemLabel):\"\";return c().createElement(\"li\",{key:t,\"data-testid\":o,onClick:r},c().createElement(\"button\",{className:ze(\"context-menu-option\",{dangerous:\"deleteSelectedElements\"===o,checkmark:null===(n=e.checked)||void 0===n?void 0:n.call(e,l)}),onClick:function(){return i.executeAction(e)}},c().createElement(\"div\",{className:\"context-menu-option__label\"},s),c().createElement(\"kbd\",{className:\"context-menu-option__shortcut\"},o?(a=xd[o])&&a.length>0?a[0]:\"\":\"\")))})))))},kd=function(){if(vd)return vd;var e=document.createElement(\"div\");return document.body.appendChild(e),vd=e},Sd=function(){(0,pt.unmountComponentAtNode)(kd())};const Cd=function(e){var t=Array.of();e.options.forEach((function(e){e&&t.push(e)})),t.length&&(0,pt.render)(c().createElement(Ed,{top:e.top,left:e.left,options:t,onCloseRequest:Sd,actionManager:e.actionManager,appState:e.appState}),kd())};n(1575);function Od(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Md(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Od(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Od(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const Td=function(e){var t=e.children,n=e.gap,r=e.align,a=e.justifyContent,o=e.className,i=e.style;return c().createElement(\"div\",{className:ze(\"Stack Stack_horizontal\",o),style:Md({\"--gap\":n,alignItems:r,justifyContent:a},i)},t)},Id=function(e){var t=e.children,n=e.gap,r=e.align,a=e.justifyContent,o=e.className;return c().createElement(\"div\",{className:ze(\"Stack Stack_vertical\",o),style:{\"--gap\":n,justifyItems:r,justifyContent:a}},t)};var Pd=function(e){var t=e.appState,n=e.elements,r=e.renderAction,a=e.elementType,o=si(ni(n),t),i=Boolean(t.editingElement),l=vc(),s=\"rtl\"===document.documentElement.getAttribute(\"dir\"),u=pi(a)||o.some((function(e){return pi(e.type)&&(t=e.backgroundColor,n=5===t.length&&\"0\"===t.substr(4,1),r=9===t.length&&\"00\"===t.substr(7,2),!(n||r||t===dt.elementBackground[0]));var t,n,r})),d=pi(a)||o.some((function(e){return pi(e.type)}));return c().createElement(\"div\",{className:\"panelColumn\"},r(\"changeStrokeColor\"),d&&r(\"changeBackgroundColor\"),u&&r(\"changeFillStyle\"),(fi(a)||o.some((function(e){return fi(e.type)})))&&c().createElement(c().Fragment,null,r(\"changeStrokeWidth\"),r(\"changeStrokeStyle\"),r(\"changeSloppiness\")),(hi(a)||o.some((function(e){return hi(e.type)})))&&c().createElement(c().Fragment,null,r(\"changeSharpness\")),(mi(a)||o.some((function(e){return mi(e.type)})))&&c().createElement(c().Fragment,null,r(\"changeFontSize\"),r(\"changeFontFamily\"),r(\"changeTextAlign\")),(gi(a)||o.some((function(e){return gi(e.type)})))&&c().createElement(c().Fragment,null,r(\"changeArrowhead\")),r(\"changeOpacity\"),c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.layers\")),c().createElement(\"div\",{className:\"buttonList\"},r(\"sendToBack\"),r(\"sendBackward\"),r(\"bringToFront\"),r(\"bringForward\"))),o.length>1&&c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.align\")),c().createElement(\"div\",{className:\"buttonList\"},s?c().createElement(c().Fragment,null,r(\"alignRight\"),r(\"alignHorizontallyCentered\"),r(\"alignLeft\")):c().createElement(c().Fragment,null,r(\"alignLeft\"),r(\"alignHorizontallyCentered\"),r(\"alignRight\")),o.length>2&&r(\"distributeHorizontally\"),c().createElement(\"div\",{className:\"iconRow\"},r(\"alignTop\"),r(\"alignVerticallyCentered\"),r(\"alignBottom\"),o.length>2&&r(\"distributeVertically\")))),!l&&!i&&o.length>0&&c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.actions\")),c().createElement(\"div\",{className:\"buttonList\"},r(\"duplicateSelection\"),r(\"deleteSelectedElements\"),r(\"group\"),r(\"ungroup\"))))},Ad=c().createElement(\"svg\",{viewBox:\"0 0 512 512\"},c().createElement(\"path\",{d:\"M296 32h192c13.255 0 24 10.745 24 24v160c0 13.255-10.745 24-24 24H296c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24zm-80 0H24C10.745 32 0 42.745 0 56v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zM0 296v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm296 184h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H296c-13.255 0-24 10.745-24 24v160c0 13.255 10.745 24 24 24z\"})),_d=function(e){var t=e.canvas,n=e.elementType,r=e.setAppState,a=e.isLibraryOpen;return c().createElement(c().Fragment,null,wd.map((function(e,a){var o=e.value,i=e.icon,l=e.key,s=C(\"toolBar.\".concat(o)),u=\"string\"==typeof l?l:l[0],d=\"\".concat(gn(u),\" \").concat(C(\"helpDialog.or\"),\" \").concat(a+1);return c().createElement(wi,{className:\"Shape\",key:o,type:\"radio\",icon:i,checked:n===o,name:\"editor-current-shape\",title:\"\".concat(gn(s),\" \u2014 \").concat(d),keyBindingLabel:\"\".concat(a+1),\"aria-label\":gn(s),\"aria-keyshortcuts\":d,\"data-testid\":o,onChange:function(){r({elementType:o,multiElement:null,selectedElementIds:{}}),Mn(t,o),r({})}})})),c().createElement(wi,{className:\"Shape ToolIcon_type_button__library\",type:\"button\",icon:Ad,name:\"editor-library\",keyBindingLabel:\"9\",\"aria-keyshortcuts\":\"9\",title:\"\".concat(gn(C(\"toolBar.library\")),\" \u2014 9\"),\"aria-label\":gn(C(\"toolBar.library\")),onClick:function(){r({isLibraryOpen:!a})}}))},Ld=function(e){var t=e.renderAction,n=e.zoom;return c().createElement(Id,{gap:1},c().createElement(Td,{gap:1,align:\"center\"},t(\"zoomIn\"),t(\"zoomOut\"),t(\"resetZoom\"),c().createElement(\"div\",{style:{marginInlineStart:4}},(100*n.value).toFixed(0),\"%\")))},Dd=function(e){var t=e.appState,n=e.setAppState,r=e.actionManager;return c().createElement(\"div\",{style:{display:\"flex\"}},r.renderAction(\"changeViewBackgroundColor\"),c().createElement(\"div\",{style:{marginInlineStart:\"0.25rem\"}},c().createElement(Pc,{value:t.appearance,onChange:function(e){n({appearance:e})}})))};n(3211);const jd=function(e){var t=e.isCollaborating,n=e.collaboratorCount,r=e.onClick;return c().createElement(c().Fragment,null,c().createElement(wi,{className:ze(\"CollabButton\",{\"is-collaborating\":t}),onClick:r,icon:Ji,type:\"button\",title:C(\"labels.liveCollaboration\"),\"aria-label\":C(\"labels.liveCollaboration\"),showAriaLabel:vc()},n>0&&c().createElement(\"div\",{className:\"CollabButton-collaborators\"},n)))};n(3040),n(7428);function zd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zd(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Hd=c().forwardRef((function(e,t){var n=e.children,r=e.padding,a=e.className,o=e.style;return c().createElement(\"div\",{className:ze(\"Island\",a),style:Bd({\"--padding\":r},o),ref:t},n)})),Nd=(n(205),function(e){var t=Rd();if(!t)return null;return(0,pt.createPortal)(c().createElement(\"div\",{className:ze(\"Modal\",e.className),role:\"dialog\",\"aria-modal\":\"true\",onKeyDown:function(t){t.key===Vt&&(t.nativeEvent.stopImmediatePropagation(),e.onCloseRequest())},\"aria-labelledby\":e.labelledBy},c().createElement(\"div\",{className:\"Modal__background\",onClick:e.onCloseRequest}),c().createElement(\"div\",{className:\"Modal__content\",style:{\"--max-width\":\"\".concat(e.maxWidth,\"px\")}},e.children)),t)}),Rd=function(){var e=(0,l.useState)(null),t=e[0],n=e[1];return(0,l.useLayoutEffect)((function(){var e,t=!(null===(e=document.querySelector(\".excalidraw\"))||void 0===e||!e.classList.contains(\"Appearance_dark\")),r=document.createElement(\"div\");return r.classList.add(\"excalidraw\",\"excalidraw-modal-container\"),t&&(r.classList.add(\"Appearance_dark\"),r.classList.add(\"Appearance_dark-background-none\")),document.body.appendChild(r),n(r),function(){document.body.removeChild(r)}}),[]),t},Fd=function(e){var t=function(){var e=(0,l.useState)(null),t=e[0],n=e[1];return[t,(0,l.useCallback)((function(e){return n(e)}),[])]}(),n=t[0],r=t[1];(0,l.useEffect)((function(){if(n){var t=a(n);t.length>0&&!1!==e.autofocus&&(t[1]||t[0]).focus();var r=function(e){if(e.key===Yt){var t=a(n),r=document.activeElement,o=t.findIndex((function(e){return e===r}));0===o&&e.shiftKey?(t[t.length-1].focus(),e.preventDefault()):o!==t.length-1||e.shiftKey||(t[0].focus(),e.preventDefault())}};return n.addEventListener(\"keydown\",r),function(){return n.removeEventListener(\"keydown\",r)}}}),[n,e.autofocus]);var a=function(e){var t=e.querySelectorAll(\"button, a, input, select, textarea, div[tabindex]\");return t?Array.from(t):[]};return c().createElement(Nd,{className:ze(\"Dialog\",e.className),labelledBy:\"dialog-title\",maxWidth:e.small?550:800,onCloseRequest:e.onCloseRequest},c().createElement(Hd,{ref:r},c().createElement(\"h2\",{id:\"dialog-title\",className:\"Dialog__title\"},c().createElement(\"span\",{className:\"Dialog__titleContent\"},e.title),c().createElement(\"button\",{className:\"Modal__close\",onClick:e.onCloseRequest,\"aria-label\":C(\"buttons.close\")},vc()?tl:el)),c().createElement(\"div\",{className:\"Dialog__content\"},e.children)))},Wd=function(e){var t=e.message,n=e.onClose,r=(0,l.useState)(!!t),a=r[0],o=r[1],i=c().useCallback((function(){o(!1),n&&n()}),[n]);return c().createElement(c().Fragment,null,a&&c().createElement(Fd,{small:!0,onCloseRequest:i,title:C(\"errorDialog.title\")},c().createElement(\"div\",null,t.split(\"\\n\").map((function(e){return c().createElement(c().Fragment,null,e,c().createElement(\"br\",null))})))))},Gd=(n(8623),[1,2,3]),Vd=Gd.includes(devicePixelRatio)?devicePixelRatio:1,Kd=\"filter\"in document.createElement(\"canvas\").getContext(\"2d\"),Ud=function(){return c().createElement(\"div\",null,c().createElement(\"h3\",null,C(\"canvasError.cannotShowPreview\")),c().createElement(\"p\",null,c().createElement(\"span\",null,C(\"canvasError.canvasTooBig\"))),c().createElement(\"em\",null,\"(\",C(\"canvasError.canvasTooBigTip\"),\")\"))},Yd=function(e,t){(0,pt.unmountComponentAtNode)(t),t.innerHTML=\"\",e instanceof HTMLCanvasElement?t.appendChild(e):(0,pt.render)(c().createElement(Ud,null),t)},Xd=function(e){var t=e.elements,n=e.appState,r=e.exportPadding,a=void 0===r?10:r,o=e.actionManager,i=e.onExportToPng,s=e.onExportToSvg,u=e.onExportToClipboard,d=e.onExportToBackend,p=li(t,n),f=(0,l.useState)(Vd),h=f[0],m=f[1],g=(0,l.useState)(p),v=g[0],b=g[1],y=(0,l.useRef)(null),w=n.exportBackground,x=n.viewBackgroundColor,E=n.shouldAddWatermark,k=v?ci(t,n):t;return(0,l.useEffect)((function(){b(p)}),[p]),(0,l.useEffect)((function(){var e=y.current;if(e)try{var t=$c(k,n,{exportBackground:w,viewBackgroundColor:x,exportPadding:a,scale:h,shouldAddWatermark:E});Vs(t).then((function(){Yd(t,e)})).catch((function(t){console.error(t),Yd(new ws,e)}))}catch(t){console.error(t),Yd(new ws,e)}}),[n,k,w,a,x,h,E]),c().createElement(\"div\",{className:\"ExportDialog\"},c().createElement(\"div\",{className:\"ExportDialog__preview\",ref:y}),Kd&&o.renderAction(\"exportWithDarkMode\"),c().createElement(Id,{gap:2,align:\"center\"},c().createElement(\"div\",{className:\"ExportDialog__actions\"},c().createElement(Td,{gap:2},c().createElement(wi,{type:\"button\",label:\"PNG\",title:C(\"buttons.exportToPng\"),\"aria-label\":C(\"buttons.exportToPng\"),onClick:function(){return i(k,h)}}),c().createElement(wi,{type:\"button\",label:\"SVG\",title:C(\"buttons.exportToSvg\"),\"aria-label\":C(\"buttons.exportToSvg\"),onClick:function(){return s(k,h)}}),Qs&&c().createElement(wi,{type:\"button\",icon:Ii,title:C(\"buttons.copyPngToClipboard\"),\"aria-label\":C(\"buttons.copyPngToClipboard\"),onClick:function(){return u(k,h)}}),d&&c().createElement(wi,{type:\"button\",icon:Ci,title:C(\"buttons.getShareableLink\"),\"aria-label\":C(\"buttons.getShareableLink\"),onClick:function(){return d(k)}})),c().createElement(\"div\",{className:\"ExportDialog__name\"},o.renderAction(\"changeProjectName\")),c().createElement(Td,{gap:2},Gd.map((function(e){var t=function(e,t,n,r){var a=es(e,n),o=ns(a,t,n).map((function(e){return Math.trunc(e*r)}));return[o[2],o[3]]}(k,a,E,e),n=t[0],r=t[1],o=\"\".concat(C(\"buttons.scale\"),\" \").concat(e,\"x (\").concat(n,\"x\").concat(r,\")\");return c().createElement(wi,{key:e,size:\"s\",type:\"radio\",icon:\"\".concat(e,\"x\"),name:\"export-canvas-scale\",title:o,\"aria-label\":o,id:\"export-canvas-scale\",checked:e===h,onChange:function(){return m(e)}})})))),o.renderAction(\"changeExportBackground\"),p&&c().createElement(\"div\",null,c().createElement(\"label\",null,c().createElement(\"input\",{type:\"checkbox\",checked:v,onChange:function(e){return b(e.currentTarget.checked)}}),\" \",C(\"labels.onlySelected\"))),o.renderAction(\"changeExportEmbedScene\"),o.renderAction(\"changeShouldAddWatermark\")))},Zd=function(e){var t=e.elements,n=e.appState,r=e.exportPadding,a=void 0===r?10:r,o=e.actionManager,i=e.onExportToPng,s=e.onExportToSvg,u=e.onExportToClipboard,d=e.onExportToBackend,p=(0,l.useState)(!1),f=p[0],h=p[1],m=(0,l.useRef)(null),g=c().useCallback((function(){var e;h(!1),null===(e=m.current)||void 0===e||e.focus()}),[]);return c().createElement(c().Fragment,null,c().createElement(wi,{onClick:function(){h(!0)},icon:_i,type:\"button\",\"aria-label\":C(\"buttons.export\"),showAriaLabel:vc(),title:C(\"buttons.export\"),ref:m}),f&&c().createElement(Fd,{onCloseRequest:g,title:C(\"buttons.export\")},c().createElement(Xd,{elements:t,appState:n,exportPadding:a,actionManager:o,onExportToPng:i,onExportToSvg:s,onExportToClipboard:u,onExportToBackend:d,onCloseRequest:g})))},qd=(n(4193),function(e){var t=e.children,n=e.side,r=e.className;return c().createElement(\"div\",{className:ze(\"FixedSideContainer\",\"FixedSideContainer_side_\".concat(n),r)},t)}),Qd=c().memo((function(e){var t=e.appearance;return c().createElement(\"svg\",{xmlns:\"http:\/\/www.w3.org\/2000\/svg\",width:\"40\",height:\"40\",viewBox:\"0 0 250 250\",className:\"github-corner rtl-mirror\"},c().createElement(\"a\",{href:\"https:\/\/github.com\/excalidraw\/excalidraw\",target:\"_blank\",rel:\"noopener noreferrer\",\"aria-label\":\"GitHub repository\"},c().createElement(\"path\",{d:\"M0 0l115 115h15l12 27 108 108V0z\",fill:\"light\"===t?ct.MA[6]:ct.MA[8]}),c().createElement(\"path\",{className:\"octo-arm\",d:\"M128 109c-15-9-9-19-9-19 3-7 2-11 2-11-1-7 3-2 3-2 4 5 2 11 2 11-3 10 5 15 9 16\",style:{transformOrigin:\"130px 106px\"},fill:\"light\"===t?ct.ix:ct.Sn}),c().createElement(\"path\",{className:\"octo-body\",d:\"M115 115s4 2 5 0l14-14c3-2 6-3 8-3-8-11-15-24 2-41 5-5 10-7 16-7 1-2 3-7 12-11 0 0 5 3 7 16 4 2 8 5 12 9s7 8 9 12c14 3 17 7 17 7-4 8-9 11-11 11 0 6-2 11-7 16-16 16-30 10-41 2 0 3-1 7-5 11l-12 11c-1 1 1 5 1 5z\",fill:\"light\"===t?ct.ix:ct.Sn})))})),$d=(n(9705),function(e){var t=function(e){var t=e.appState,n=e.elements,r=t.elementType,a=t.isResizing,o=t.isRotating,i=t.lastPointerDownWith,l=null!==t.multiElement;if(\"arrow\"===r||\"line\"===r)return C(l?\"hints.linearElementMulti\":\"hints.linearElement\");if(\"draw\"===r)return C(\"hints.freeDraw\");if(\"text\"===r)return C(\"hints.text\");var c=ci(n,t);if(a&&\"mouse\"===i&&1===c.length){var s=c[0];return He(s)&&2===s.points.length?C(\"hints.lockAngle\"):C(\"hints.resize\")}return o&&\"mouse\"===i?C(\"hints.rotate\"):1===c.length&&He(c[0])?t.editingLinearElement?t.editingLinearElement.activePointIndex?C(\"hints.lineEditor_pointSelected\"):C(\"hints.lineEditor_nothingSelected\"):C(\"hints.lineEditor_info\"):null}({appState:e.appState,elements:e.elements});return t?(t=In(t),c().createElement(\"div\",{className:\"HintViewer\"},c().createElement(\"span\",null,t))):null}),Jd=(n(8465),n(8680),c().createElement(\"svg\",{viewBox:\"0 0 1792 1792\"},c().createElement(\"path\",{fill:\"currentColor\",d:\"M1600 736v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z\"}))),ep=function(e){var t=e.elements,n=e.pendingElements,r=e.onRemoveFromLibrary,a=e.onClick,o=(0,l.useRef)(null);(0,l.useEffect)((function(){var e=t||n;if(e){for(var r=Jc(e,{exportBackground:!1,viewBackgroundColor:ct.ix,shouldAddWatermark:!1}),a=0,i=o.current.children;a<i.length;a++){var l=i[a];\"svg\"===l.tagName&&o.current.removeChild(l)}o.current.appendChild(r);var c=o.current;return function(){c.removeChild(r)}}}),[t,n]);var i=(0,l.useState)(!1),u=i[0],d=i[1],p=vc(),f=(u||p)&&n&&c().createElement(\"div\",{className:\"library-unit__adder\"},Jd);return c().createElement(\"div\",{className:ze(\"library-unit\",{\"library-unit__active\":t||n}),onMouseEnter:function(){return d(!0)},onMouseLeave:function(){return d(!1)}},c().createElement(\"div\",{className:ze(\"library-unit__dragger\",{\"library-unit__pulse\":!!n}),ref:o,draggable:!!t,onClick:t||n?a:void 0,onDragStart:function(e){d(!1),e.dataTransfer.setData(s.LO.excalidrawlib,JSON.stringify(t))}}),f,t&&(u||p)&&c().createElement(\"button\",{className:\"library-unit__removeFromLibrary\",\"aria-label\":C(\"labels.removeFromLibrary\"),onClick:r},el))},tp={CHECKED:c().createElement(\"svg\",{width:\"1792\",height:\"1792\",viewBox:\"0 0 1792 1792\",xmlns:\"http:\/\/www.w3.org\/2000\/svg\"},c().createElement(\"path\",{d:\"M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z\"})),UNCHECKED:c().createElement(\"svg\",{width:\"1792\",height:\"1792\",viewBox:\"0 0 1792 1792\",xmlns:\"http:\/\/www.w3.org\/2000\/svg\",className:\"unlocked-icon rtl-mirror\"},c().createElement(\"path\",{d:\"M1728 576v256q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45v-256q0-106-75-181t-181-75-181 75-75 181v192h96q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h672v-192q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5z\"}))},np=function(e){return c().createElement(\"label\",{className:ze(\"ToolIcon ToolIcon__lock ToolIcon_type_floating zen-mode-visibility\",\"ToolIcon_size_\".concat(e.size||\"m\"),{\"zen-mode-visibility--hidden\":e.zenModeEnabled}),title:\"\".concat(e.title,\" \u2014 Q\")},c().createElement(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:e.name,id:e.id,onChange:e.onChange,checked:e.checked,\"aria-label\":e.title}),c().createElement(\"div\",{className:\"ToolIcon__icon\"},e.checked?tp.CHECKED:tp.UNCHECKED))},rp=function(e){var t=e.heading,n=e.children,r=yr()(e,[\"heading\",\"children\"]),a=c().createElement(\"h2\",{className:\"visually-hidden\",id:\"\".concat(t,\"-title\")},C(\"headings.\".concat(t)));return c().createElement(\"section\",ac()({},r,{\"aria-labelledby\":\"\".concat(t,\"-title\")}),\"function\"==typeof n?n(a):c().createElement(c().Fragment,null,a,n))},ap=(n(3142),function(e){var t=e.children,n=e.className,r=e.mobile;return c().createElement(\"div\",{className:ze(\"UserList\",n,{UserList_mobile:r})},t)});function op(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var ip=function(e){var t=e.appState,n=e.elements,r=e.libraryMenu,a=e.actionManager,o=e.exportButton,i=e.setAppState,l=e.onCollabButtonClick,s=e.onLockToggle,u=e.canvas,d=e.isCollaborating,p=e.renderCustomFooter,f=e.viewModeEnabled;return c().createElement(c().Fragment,null,!f&&c().createElement(qd,{side:\"top\",className:\"App-top-bar\"},c().createElement(rp,{heading:\"shapes\"},(function(e){return c().createElement(Id,{gap:4,align:\"center\"},c().createElement(Td,{gap:1},c().createElement(Hd,{padding:1},e,c().createElement(Td,{gap:1},c().createElement(_d,{canvas:u,elementType:t.elementType,setAppState:i,isLibraryOpen:t.isLibraryOpen}))),c().createElement(np,{checked:t.elementLocked,onChange:s,title:C(\"toolBar.lock\")})),r)})),c().createElement($d,{appState:t,elements:n})),c().createElement(\"div\",{className:\"App-bottom-bar\",style:{marginBottom:14,marginLeft:14,marginRight:14}},c().createElement(Hd,{padding:0},\"canvas\"===t.openMenu?c().createElement(rp,{className:\"App-mobile-menu\",heading:\"canvasActions\"},c().createElement(\"div\",{className:\"panelColumn\"},c().createElement(Id,{gap:4},f?c().createElement(c().Fragment,null,a.renderAction(\"saveScene\"),a.renderAction(\"saveAsScene\"),o):c().createElement(c().Fragment,null,a.renderAction(\"loadScene\"),a.renderAction(\"saveScene\"),a.renderAction(\"saveAsScene\"),o,a.renderAction(\"clearCanvas\"),l&&c().createElement(jd,{isCollaborating:d,collaboratorCount:t.collaborators.size,onClick:l}),c().createElement(Dd,{actionManager:a,appState:t,setAppState:i})),null==p?void 0:p(!0),t.collaborators.size>0&&c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.collaborators\")),c().createElement(ap,{mobile:!0},Array.from(t.collaborators).filter((function(e){e[0];var t=e[1];return 0!==Object.keys(t).length})).map((function(e){var t=e[0];e[1];return c().createElement(c().Fragment,{key:t},a.renderAction(\"goToCollaborator\",t))}))))))):\"shape\"===t.openMenu&&!f&&qo(t,n)?c().createElement(rp,{className:\"App-mobile-menu\",heading:\"selectedShapeActions\"},c().createElement(Pd,{appState:t,elements:n,renderAction:a.renderAction,elementType:t.elementType})):null,c().createElement(\"footer\",{className:\"App-toolbar\"},f?c().createElement(\"div\",{className:\"App-toolbar-content\"},a.renderAction(\"toggleCanvasMenu\")):c().createElement(\"div\",{className:\"App-toolbar-content\"},a.renderAction(\"toggleCanvasMenu\"),a.renderAction(\"toggleEditMenu\"),a.renderAction(\"undo\"),a.renderAction(\"redo\"),a.renderAction(t.multiElement?\"finalize\":\"duplicateSelection\"),a.renderAction(\"deleteSelectedElements\")),t.scrolledOutside&&!t.openMenu&&c().createElement(\"button\",{className:\"scroll-back-to-content\",onClick:function(){i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?op(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):op(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},di(n,t)))}},C(\"buttons.scrollBackToContent\"))))))},lp=(n(8416),function(e){var t=(0,l.useRef)(null),n=(0,l.useState)(null),r=n[0],a=n[1];return(0,l.useLayoutEffect)((function(){if(e.spreadsheet){var n=bs(e.chartType,e.spreadsheet,0,0);a(n);var r=Jc(n,{exportBackground:!1,viewBackgroundColor:ct.ix,shouldAddWatermark:!1}),o=t.current;return o.appendChild(r),e.selected&&o.parentNode.focus(),function(){o.removeChild(r)}}}),[e.spreadsheet,e.chartType,e.selected]),c().createElement(\"button\",{className:\"ChartPreview\",onClick:function(){r&&e.onClick(e.chartType,r)}},c().createElement(\"div\",{ref:t}))}),cp=function(e){var t=e.setAppState,n=e.appState,r=e.onClose,a=e.onInsertChart,o=c().useCallback((function(){r&&r()}),[r]),i=function(e,n){a(n),Oc(\"magic\",\"chart\",e),t({currentChartType:e,pasteDialog:{shown:!1,data:null}})};return c().createElement(Fd,{small:!0,onCloseRequest:o,title:C(\"labels.pasteCharts\"),className:\"PasteChartDialog\",autofocus:!1},c().createElement(\"div\",{className:\"container\"},c().createElement(lp,{chartType:\"bar\",spreadsheet:n.pasteDialog.data,selected:\"bar\"===n.currentChartType,onClick:i}),c().createElement(lp,{chartType:\"line\",spreadsheet:n.pasteDialog.data,selected:\"line\"===n.currentChartType,onClick:i})))},sp=(n(341),function(){return c().createElement(\"div\",{className:\"HelpDialog--header\"},c().createElement(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw#documentation\",target:\"_blank\",rel:\"noopener noreferrer\"},C(\"helpDialog.documentation\")),c().createElement(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/blog.excalidraw.com\",target:\"_blank\",rel:\"noopener noreferrer\"},C(\"helpDialog.blog\")),c().createElement(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw\/issues\",target:\"_blank\",rel:\"noopener noreferrer\"},C(\"helpDialog.github\")))}),up=function(e){return c().createElement(c().Fragment,null,c().createElement(\"h3\",null,e.title),e.children)},dp=function(e){return c().createElement(\"div\",{style:{display:\"flex\",flexDirection:\"row\",flexWrap:\"wrap\",justifyContent:\"space-between\"}},e.children)},pp=function(e){return c().createElement(\"div\",{style:{width:\"49%\"}},e.children)},fp=function(e){return c().createElement(\"div\",{className:\"HelpDialog--island\"},c().createElement(\"h3\",{className:\"HelpDialog--island-title\"},e.caption),e.children)},hp=function(e){return c().createElement(\"div\",{className:\"HelpDialog--shortcut\"},c().createElement(\"div\",{style:{display:\"flex\",margin:\"0\",padding:\"4px 8px\",alignItems:\"center\"}},c().createElement(\"div\",{style:{lineHeight:1.4}},e.label),c().createElement(\"div\",{style:{display:\"flex\",flex:\"0 0 auto\",justifyContent:\"flex-end\",marginInlineStart:\"auto\",minWidth:\"30%\"}},e.shortcuts.map((function(t,n){return c().createElement(c().Fragment,{key:n},c().createElement(mp,null,t),e.isOr&&n!==e.shortcuts.length-1&&C(\"helpDialog.or\"))})))))};hp.defaultProps={isOr:!0};var mp=function(e){return c().createElement(\"kbd\",ac()({className:\"HelpDialog--key\"},e))},gp=function(e){var t=e.onClose,n=c().useCallback((function(){t&&t()}),[t]);return c().createElement(c().Fragment,null,c().createElement(Fd,{onCloseRequest:n,title:C(\"helpDialog.title\"),className:\"HelpDialog\"},c().createElement(sp,null),c().createElement(up,{title:C(\"helpDialog.shortcuts\")},c().createElement(dp,null,c().createElement(pp,null,c().createElement(fp,{caption:C(\"helpDialog.shapes\")},c().createElement(hp,{label:C(\"toolBar.selection\"),shortcuts:[\"V\",\"1\"]}),c().createElement(hp,{label:C(\"toolBar.rectangle\"),shortcuts:[\"R\",\"2\"]}),c().createElement(hp,{label:C(\"toolBar.diamond\"),shortcuts:[\"D\",\"3\"]}),c().createElement(hp,{label:C(\"toolBar.ellipse\"),shortcuts:[\"E\",\"4\"]}),c().createElement(hp,{label:C(\"toolBar.arrow\"),shortcuts:[\"A\",\"5\"]}),c().createElement(hp,{label:C(\"toolBar.line\"),shortcuts:[\"P\",\"6\"]}),c().createElement(hp,{label:C(\"toolBar.draw\"),shortcuts:[\"Shift+P\",\"7\"]}),c().createElement(hp,{label:C(\"toolBar.text\"),shortcuts:[\"T\",\"8\"]}),c().createElement(hp,{label:C(\"helpDialog.textNewLine\"),shortcuts:[In(\"Enter\"),In(\"Shift+Enter\")]}),c().createElement(hp,{label:C(\"helpDialog.textFinish\"),shortcuts:[In(\"Esc\"),In(\"CtrlOrCmd+Enter\")]}),c().createElement(hp,{label:C(\"helpDialog.curvedArrow\"),shortcuts:[\"A\",C(\"helpDialog.click\"),C(\"helpDialog.click\"),C(\"helpDialog.click\")],isOr:!1}),c().createElement(hp,{label:C(\"helpDialog.curvedLine\"),shortcuts:[\"L\",C(\"helpDialog.click\"),C(\"helpDialog.click\"),C(\"helpDialog.click\")],isOr:!1}),c().createElement(hp,{label:C(\"toolBar.lock\"),shortcuts:[\"Q\"]}),c().createElement(hp,{label:C(\"helpDialog.preventBinding\"),shortcuts:[In(\"CtrlOrCmd\")]})),c().createElement(fp,{caption:C(\"helpDialog.view\")},c().createElement(hp,{label:C(\"buttons.zoomIn\"),shortcuts:[In(\"CtrlOrCmd++\")]}),c().createElement(hp,{label:C(\"buttons.zoomOut\"),shortcuts:[In(\"CtrlOrCmd+-\")]}),c().createElement(hp,{label:C(\"buttons.resetZoom\"),shortcuts:[In(\"CtrlOrCmd+0\")]}),c().createElement(hp,{label:C(\"helpDialog.zoomToFit\"),shortcuts:[\"Shift+1\"]}),c().createElement(hp,{label:C(\"helpDialog.zoomToSelection\"),shortcuts:[\"Shift+2\"]}),c().createElement(hp,{label:C(\"buttons.fullScreen\"),shortcuts:[\"F\"]}),c().createElement(hp,{label:C(\"buttons.zenMode\"),shortcuts:[In(\"Alt+Z\")]}),c().createElement(hp,{label:C(\"labels.showGrid\"),shortcuts:[In(\"CtrlOrCmd+'\")]}),c().createElement(hp,{label:C(\"labels.viewMode\"),shortcuts:[In(\"Alt+R\")]}))),c().createElement(pp,null,c().createElement(fp,{caption:C(\"helpDialog.editor\")},c().createElement(hp,{label:C(\"labels.selectAll\"),shortcuts:[In(\"CtrlOrCmd+A\")]}),c().createElement(hp,{label:C(\"labels.multiSelect\"),shortcuts:[In(\"Shift+\".concat(C(\"helpDialog.click\")))]}),c().createElement(hp,{label:C(\"labels.moveCanvas\"),shortcuts:[In(\"Space+\".concat(C(\"helpDialog.drag\"))),In(\"Wheel+\".concat(C(\"helpDialog.drag\")))],isOr:!0}),c().createElement(hp,{label:C(\"labels.cut\"),shortcuts:[In(\"CtrlOrCmd+X\")]}),c().createElement(hp,{label:C(\"labels.copy\"),shortcuts:[In(\"CtrlOrCmd+C\")]}),c().createElement(hp,{label:C(\"labels.paste\"),shortcuts:[In(\"CtrlOrCmd+V\")]}),c().createElement(hp,{label:C(\"labels.copyAsPng\"),shortcuts:[In(\"Shift+Alt+C\")]}),c().createElement(hp,{label:C(\"labels.copyStyles\"),shortcuts:[In(\"CtrlOrCmd+Alt+C\")]}),c().createElement(hp,{label:C(\"labels.pasteStyles\"),shortcuts:[In(\"CtrlOrCmd+Alt+V\")]}),c().createElement(hp,{label:C(\"labels.delete\"),shortcuts:[In(\"Del\")]}),c().createElement(hp,{label:C(\"labels.sendToBack\"),shortcuts:[In(ft?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")]}),c().createElement(hp,{label:C(\"labels.bringToFront\"),shortcuts:[In(ft?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")]}),c().createElement(hp,{label:C(\"labels.sendBackward\"),shortcuts:[In(\"CtrlOrCmd+[\")]}),c().createElement(hp,{label:C(\"labels.bringForward\"),shortcuts:[In(\"CtrlOrCmd+]\")]}),c().createElement(hp,{label:C(\"labels.alignTop\"),shortcuts:[In(\"CtrlOrCmd+Shift+Up\")]}),c().createElement(hp,{label:C(\"labels.alignBottom\"),shortcuts:[In(\"CtrlOrCmd+Shift+Down\")]}),c().createElement(hp,{label:C(\"labels.alignLeft\"),shortcuts:[In(\"CtrlOrCmd+Shift+Left\")]}),c().createElement(hp,{label:C(\"labels.alignRight\"),shortcuts:[In(\"CtrlOrCmd+Shift+Right\")]}),c().createElement(hp,{label:C(\"labels.duplicateSelection\"),shortcuts:[In(\"CtrlOrCmd+D\"),In(\"Alt+\".concat(C(\"helpDialog.drag\")))]}),c().createElement(hp,{label:C(\"buttons.undo\"),shortcuts:[In(\"CtrlOrCmd+Z\")]}),c().createElement(hp,{label:C(\"buttons.redo\"),shortcuts:ht?[In(\"CtrlOrCmd+Y\"),In(\"CtrlOrCmd+Shift+Z\")]:[In(\"CtrlOrCmd+Shift+Z\")]}),c().createElement(hp,{label:C(\"labels.group\"),shortcuts:[In(\"CtrlOrCmd+G\")]}),c().createElement(hp,{label:C(\"labels.ungroup\"),shortcuts:[In(\"CtrlOrCmd+Shift+G\")]})))))))},vp=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},bp=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function yp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var wp=function(e){var t=e.library,n=e.onRemoveFromLibrary,r=e.onAddToLibrary,a=e.onInsertShape,o=e.pendingElements,i=e.setAppState,l=e.setLibraryItems,s=vc(),u=t.length+(o.length>0?1:0),d=s?4:6,p=Math.max(1,Math.ceil(u\/d)),f=[],h=!1;f.push(c().createElement(\"div\",{className:\"layer-ui__library-header\"},c().createElement(wi,{key:\"import\",type:\"button\",title:C(\"buttons.load\"),\"aria-label\":C(\"buttons.load\"),icon:Ti,onClick:function(){zs().then((function(){i({isLibraryOpen:!1})})).catch(zn).catch((function(e){i({errorMessage:e.message})}))}}),c().createElement(wi,{key:\"export\",type:\"button\",title:C(\"buttons.export\"),\"aria-label\":C(\"buttons.export\"),icon:_i,onClick:function(){js().catch(zn).catch((function(e){i({errorMessage:e.message})}))}}),c().createElement(wi,{key:\"reset\",type:\"button\",title:C(\"buttons.resetLibrary\"),\"aria-label\":C(\"buttons.resetLibrary\"),icon:Pi,onClick:function(){window.confirm(C(\"alerts.resetLibrary\"))&&(Ps.resetLibrary(),l([]))}}),c().createElement(\"a\",{href:\"https:\/\/libraries.excalidraw.com\",target:\"_excalidraw_libraries\"},C(\"labels.libraries\"))));for(var m=0;m<p;m++){for(var g=d*m,v=[],b=0;b<d;b++){var y=o.length>0&&!h&&g+b>=t.length;h=h||y,v.push(c().createElement(Id,{key:b},c().createElement(ep,{elements:t[g+b],pendingElements:y?o:void 0,onRemoveFromLibrary:n.bind(null,g+b),onClick:y?r.bind(null,o):a.bind(null,t[g+b])})))}f.push(c().createElement(Td,{align:\"center\",gap:1,key:m},v))}return c().createElement(Id,{align:\"start\",gap:1,className:\"layer-ui__library-items\"},f)},xp=function(e){var t=e.onClickOutside,n=e.onInsertShape,r=e.pendingElements,a=e.onAddToLibrary,o=e.setAppState,i=(0,l.useRef)(null);!function(e,t){(0,l.useEffect)((function(){var n=function(n){e.current&&(n.target instanceof Element&&(e.current.contains(n.target)||!document.body.contains(n.target))||t(n))};return document.addEventListener(\"pointerdown\",n,!1),function(){document.removeEventListener(\"pointerdown\",n)}}),[e,t])}(i,(function(e){e.target.closest(\".ToolIcon_type_button__library\")||t(e)}));var s=(0,l.useState)([]),u=s[0],d=s[1],f=(0,l.useState)(\"preloading\"),h=f[0],m=f[1],g=(0,l.useRef)(null);(0,l.useEffect)((function(){return Promise.race([new Promise((function(e){g.current=setTimeout((function(){e(\"loading\")}),100)})),Ps.loadLibrary().then((function(e){d(e),m(\"ready\")}))]).then((function(e){\"loading\"===e&&m(\"loading\")})),function(){clearTimeout(g.current)}}),[]);var v=(0,l.useCallback)(function(){var e=p()((function(e){var t,n;return vp(this,(function(r){switch(r.label){case 0:return[4,Ps.loadLibrary()];case 1:return t=r.sent(),n=t.filter((function(t,n){return n!==e})),Ps.saveLibrary(n),d(n),[2]}}))}));return function(t){return e.apply(this,arguments)}}(),[]),b=(0,l.useCallback)(function(){var e=p()((function(e){var t,n;return vp(this,(function(r){switch(r.label){case 0:return[4,Ps.loadLibrary()];case 1:return t=r.sent(),n=bp(bp([],t),[e]),a(),Ps.saveLibrary(n),d(n),[2]}}))}));return function(t){return e.apply(this,arguments)}}(),[a]);return\"preloading\"===h?null:c().createElement(Hd,{padding:1,ref:i,className:\"layer-ui__library\"},\"loading\"===h?c().createElement(\"div\",{className:\"layer-ui__library-message\"},C(\"labels.libraryLoadingMessage\")):c().createElement(wp,{library:u,onRemoveFromLibrary:v,onAddToLibrary:b,onInsertShape:n,pendingElements:r,setAppState:o,setLibraryItems:d}))},Ep=function(e){var t,n=e.actionManager,r=e.appState,a=e.setAppState,o=e.canvas,i=e.elements,u=e.onCollabButtonClick,d=e.onLockToggle,f=e.onInsertElements,h=e.zenModeEnabled,m=e.showExitZenModeBtn,g=e.toggleZenMode,v=e.isCollaborating,b=e.onExportToBackend,y=e.renderCustomFooter,w=e.viewModeEnabled,x=vc(),E=function(){var e=function(e){return function(){var t=p()((function(t,n){return vp(this,(function(i){switch(i.label){case 0:return o?[4,lu(e,t,r,o,{exportBackground:r.exportBackground,name:r.name,viewBackgroundColor:r.viewBackgroundColor,scale:n,shouldAddWatermark:r.shouldAddWatermark}).catch(zn).catch((function(e){console.error(e),a({errorMessage:e.message})}))]:[3,2];case 1:i.sent(),i.label=2;case 2:return[2]}}))}));return function(e,n){return t.apply(this,arguments)}}()};return c().createElement(Zd,{elements:i,appState:r,actionManager:n,onExportToPng:e(\"png\"),onExportToSvg:e(\"svg\"),onExportToClipboard:e(\"clipboard\"),onExportToBackend:b?function(e){b&&b(e,r,o)}:void 0})},k=(0,l.useCallback)((function(e){a({isLibraryOpen:!1})}),[a]),S=(0,l.useCallback)((function(){a({selectedElementIds:{},selectedGroupIds:{}})}),[a]),M=r.isLibraryOpen?c().createElement(xp,{pendingElements:ci(i,r),onClickOutside:k,onInsertShape:f,onAddToLibrary:S,setAppState:a}):null,T=c().createElement(c().Fragment,null,r.isLoading&&c().createElement(O,null),r.errorMessage&&c().createElement(Wd,{message:r.errorMessage,onClose:function(){return a({errorMessage:null})}}),r.showHelpDialog&&c().createElement(gp,{onClose:function(){return a({showHelpDialog:!1})}}),r.pasteDialog.shown&&c().createElement(cp,{setAppState:a,appState:r,onInsertChart:f,onClose:function(){return a({pasteDialog:{shown:!1,data:null}})}}));return x?c().createElement(c().Fragment,null,T,c().createElement(ip,{appState:r,elements:i,actionManager:n,libraryMenu:M,exportButton:E(),setAppState:a,onCollabButtonClick:u,onLockToggle:d,canvas:o,isCollaborating:v,renderCustomFooter:y,viewModeEnabled:w})):c().createElement(\"div\",{className:ze(\"layer-ui__wrapper\",{\"disable-pointerEvents\":r.draggingElement||r.resizingElement||r.editingElement&&!Be(r.editingElement)})},T,(t=qo(r,i),c().createElement(qd,{side:\"top\"},c().createElement(\"div\",{className:\"App-menu App-menu_top\"},c().createElement(Id,{gap:4,className:ze({\"disable-pointerEvents\":h})},w?c().createElement(rp,{heading:\"canvasActions\",className:ze(\"zen-mode-transition\",{\"transition-left\":h})},c().createElement(Hd,{padding:2,style:{zIndex:1}},c().createElement(Id,{gap:4},c().createElement(Td,{gap:1,justifyContent:\"space-between\"},n.renderAction(\"saveScene\"),n.renderAction(\"saveAsScene\"),E())))):c().createElement(rp,{heading:\"canvasActions\",className:ze(\"zen-mode-transition\",{\"transition-left\":h})},c().createElement(Hd,{padding:2,style:{zIndex:1}},c().createElement(Id,{gap:4},c().createElement(Td,{gap:1,justifyContent:\"space-between\"},n.renderAction(\"loadScene\"),n.renderAction(\"saveScene\"),n.renderAction(\"saveAsScene\"),E(),n.renderAction(\"clearCanvas\"),u&&c().createElement(jd,{isCollaborating:v,collaboratorCount:r.collaborators.size,onClick:u})),c().createElement(Dd,{actionManager:n,appState:r,setAppState:a})))),t&&c().createElement(rp,{heading:\"selectedShapeActions\",className:ze(\"zen-mode-transition\",{\"transition-left\":h})},c().createElement(Hd,{className:s.$C.SHAPE_ACTIONS_MENU,padding:2,style:{maxHeight:\"\".concat(r.height-200,\"px\")}},c().createElement(Pd,{appState:r,elements:i,renderAction:n.renderAction,elementType:r.elementType})))),!w&&c().createElement(rp,{heading:\"shapes\"},(function(e){return c().createElement(Id,{gap:4,align:\"start\"},c().createElement(Td,{gap:1},c().createElement(Hd,{padding:1,className:ze({\"zen-mode\":h})},c().createElement($d,{appState:r,elements:i}),e,c().createElement(Td,{gap:1},c().createElement(_d,{canvas:o,elementType:r.elementType,setAppState:a,isLibraryOpen:r.isLibraryOpen}))),c().createElement(np,{zenModeEnabled:h,checked:r.elementLocked,onChange:d,title:C(\"toolBar.lock\")})),M)})),c().createElement(ap,{className:ze(\"zen-mode-transition\",{\"transition-right\":h})},r.collaborators.size>0&&Array.from(r.collaborators).filter((function(e){e[0];var t=e[1];return 0!==Object.keys(t).length})).map((function(e){var t=e[0],r=e[1];return c().createElement(Ic,{label:r.username||\"Unknown user\",key:t},n.renderAction(\"goToCollaborator\",t))})))))),c().createElement(\"div\",{className:ze(\"App-menu App-menu_bottom zen-mode-transition\",{\"App-menu_bottom--transition-left\":h})},c().createElement(Id,{gap:2},c().createElement(rp,{heading:\"canvasActions\"},c().createElement(Hd,{padding:1},c().createElement(Ld,{renderAction:n.renderAction,zoom:r.zoom})),c().createElement(\"a\",{className:ze(\"encrypted-icon tooltip zen-mode-visibility\",{\"zen-mode-visibility--hidden\":h}),href:\"https:\/\/blog.excalidraw.com\/end-to-end-encryption\/\",target:\"_blank\",rel:\"noopener noreferrer\"},c().createElement(Ic,{label:C(\"encrypted.tooltip\"),position:\"above\",long:!0},rl))))),c().createElement(\"aside\",{className:ze(\"layer-ui__wrapper__github-corner zen-mode-transition\",{\"transition-right\":h})},c().createElement(Qd,{appearance:r.appearance})),c().createElement(\"footer\",{role:\"contentinfo\",className:\"layer-ui__wrapper__footer\"},c().createElement(\"div\",{className:ze(\"zen-mode-transition\",{\"transition-right disable-pointerEvents\":h})},null==y?void 0:y(!1),n.renderAction(\"toggleShortcuts\")),c().createElement(\"button\",{className:ze(\"disable-zen-mode\",{\"disable-zen-mode--visible\":m}),onClick:g},C(\"buttons.exitZenMode\"))),r.scrolledOutside&&c().createElement(\"button\",{className:\"scroll-back-to-content\",onClick:function(){a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yp(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},di(i,r)))}},C(\"buttons.scrollBackToContent\")))},kp=function(e,t){var n=function(e){e.suggestedBindings,e.startBoundElement;return yr()(e,[\"suggestedBindings\",\"startBoundElement\"])},r=n(e.appState),a=n(t.appState),o=Object.keys(r);return e.renderCustomFooter===t.renderCustomFooter&&e.langCode===t.langCode&&e.elements===t.elements&&o.every((function(e){return r[e]===a[e]}))};const Sp=c().memo(Ep,kp);var Cp=\"excalidraw\",Op=\"excalidraw-state\",Mp=\"excalidraw-collab\",Tp=function(){try{var e=localStorage.getItem(Cp);return e?JSON.stringify(e).length:0}catch(e){return console.error(e),0}},Ip=function(){try{var e=localStorage.getItem(Op),t=localStorage.getItem(Mp),n=localStorage.getItem(s.I.LOCAL_STORAGE_LIBRARY);return(e?JSON.stringify(e).length:0)+(t?JSON.stringify(t).length:0)+(n?JSON.stringify(n).length:0)+Tp()}catch(e){return console.error(e),0}},Pp=(n(7287),function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}}),Ap=xn((function(e){e({scene:Tp(),total:Ip()})}),500),_p=function(e){var t=vc(),n=(0,l.useState)({scene:0,total:0}),r=n[0],a=n[1];(0,l.useEffect)((function(){Ap((function(e){a(e)}))})),(0,l.useEffect)((function(){return function(){return Ap.cancel()}}),[]);var o=ot(e.elements),i=si(e.elements,e.appState),u=ot(i);if(t&&e.appState.openMenu)return null;var d,f,h=Nn();return h!==s.eQ?(f=h.slice(0,16).replace(\"T\",\" \"),d=h.slice(21)):f=C(\"stats.versionNotAvailable\"),c().createElement(\"div\",{className:\"Stats\"},c().createElement(Hd,{padding:2},c().createElement(\"div\",{className:\"close\",onClick:e.onClose},el),c().createElement(\"h3\",null,C(\"stats.title\")),c().createElement(\"table\",null,c().createElement(\"tbody\",null,c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.scene\"))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.elements\")),c().createElement(\"td\",null,e.elements.length)),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.width\")),c().createElement(\"td\",null,Math.round(o[2])-Math.round(o[0]))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.height\")),c().createElement(\"td\",null,Math.round(o[3])-Math.round(o[1]))),c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.storage\"))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.scene\")),c().createElement(\"td\",null,Hn(r.scene,1))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.total\")),c().createElement(\"td\",null,Hn(r.total,1))),1===i.length&&c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.element\"))),i.length>1&&c().createElement(c().Fragment,null,c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.selected\"))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.elements\")),c().createElement(\"td\",null,i.length))),i.length>0&&c().createElement(c().Fragment,null,c().createElement(\"tr\",null,c().createElement(\"td\",null,\"x\"),c().createElement(\"td\",null,Math.round(1===i.length?i[0].x:u[0]))),c().createElement(\"tr\",null,c().createElement(\"td\",null,\"y\"),c().createElement(\"td\",null,Math.round(1===i.length?i[0].y:u[1]))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.width\")),c().createElement(\"td\",null,Math.round(1===i.length?i[0].width:u[2]-u[0]))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.height\")),c().createElement(\"td\",null,Math.round(1===i.length?i[0].height:u[3]-u[1])))),1===i.length&&c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.angle\")),c().createElement(\"td\",null,\"\".concat(Math.round(180*i[0].angle\/Math.PI),\"\u00b0\"))),c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.version\"))),c().createElement(\"tr\",null,c().createElement(\"td\",{colSpan:2,style:{textAlign:\"center\",cursor:\"pointer\"},onClick:p()((function(){return Pp(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,au(Nn())];case 1:return t.sent(),e.setAppState({toastMessage:C(\"toast.copyToClipboard\")}),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}}))})),title:C(\"stats.versionCopy\")},f,c().createElement(\"br\",null),d))))))},Lp=(n(5849),function(e){var t=e.message,n=e.clearToast,r=(0,l.useRef)(0),a=(0,l.useCallback)((function(){return r.current=window.setTimeout((function(){return n()}),s.Lg)}),[n]);return(0,l.useEffect)((function(){return a(),function(){return clearTimeout(r.current)}}),[a,t]),c().createElement(\"div\",{className:\"Toast\",onMouseEnter:function(){return clearTimeout(null==r?void 0:r.current)},onMouseLeave:a},c().createElement(\"p\",{className:\"Toast__message\"},t))});function Dp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function jp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dp(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var zp=kl({name:\"viewMode\",perform:function(e,t){return Oc(\"view\",\"mode\",\"view\"),{appState:jp(jp({},t),{},{viewModeEnabled:!this.checked(t),selectedElementIds:{}}),commitToHistory:!1}},checked:function(e){return e.viewModeEnabled},contextItemLabel:\"labels.viewMode\",keyTest:function(e){return!e[Ft]&&e.altKey&&e.code===Dt}}),Bp=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Class extends value \"+String(n)+\" is not a constructor or null\");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Hp=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},Np=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function Rp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rp(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Wp=new yd,Gp=!1,Vp=0,Kp=0,Up=0,Yp=!1,Xp=!1,Zp=!1,qp={horizontal:null,vertical:null},Qp=0,$p=!1,Jp=null,ef={pointers:new Map,lastCenter:null,initialDistance:null,initialScale:null},tf=function(e){function t(t){var n,r=this;r=e.call(this,t)||this,n=r,nf.call(r);var a,o,i,l,u=Rn(),d=t.width,p=void 0===d?window.innerWidth:d,f=t.height,h=void 0===f?window.innerHeight:f,m=t.offsetLeft,g=t.offsetTop,v=t.excalidrawRef,b=t.viewModeEnabled,y=void 0!==b&&b,w=t.zenModeEnabled,x=void 0!==w&&w,E=t.gridModeEnabled,k=void 0!==E&&E;if(r.state=Fp(Fp(Fp({},u),{},{isLoading:!0,width:p,height:h},r.getCanvasOffsets({offsetLeft:m,offsetTop:g})),{},{viewModeEnabled:y,zenModeEnabled:x,gridSize:k?s.k:null}),v){var S,O=\"current\"in v&&(null===(S=v.current)||void 0===S?void 0:S.readyPromise)||((i=new Promise((function(e,t){a=e,o=t}))).resolve=a,i.reject=o,i),M={ready:!0,readyPromise:O,updateScene:r.updateScene,resetScene:r.resetScene,getSceneElementsIncludingDeleted:r.getSceneElementsIncludingDeleted,history:{clear:r.resetHistory},setScrollToCenter:r.setScrollToCenter,getSceneElements:r.getSceneElements,getAppState:function(){return n.state}};\"function\"==typeof v?v(M):v.current=M,O.resolve(M)}return r.scene=new lr,r.actionManager=new dd(r.syncActionResult,(function(){return n.state}),(function(){return n.scene.getElementsIncludingDeleted()}),r),r.actionManager.registerAll(El),r.actionManager.registerAction((l=Wp,{name:\"undo\",perform:function(e,t){return ud(e,t,(function(){return l.undoOnce()}))},keyTest:function(e){return e[Ft]&&e.key.toLowerCase()===cn&&!e.shiftKey},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Bi,\"aria-label\":C(\"buttons.undo\"),onClick:t})},commitToHistory:function(){return!1}})),r.actionManager.registerAction(function(e){return{name:\"redo\",perform:function(t,n){return ud(t,n,(function(){return e.redoOnce()}))},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key.toLowerCase()===cn||ht&&e.ctrlKey&&!e.shiftKey&&e.key===ln},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Hi,\"aria-label\":C(\"buttons.redo\"),onClick:t})},commitToHistory:function(){return!1}}}(Wp)),r}return Bp(t,e),t.prototype.renderCanvas=function(){var e=window.devicePixelRatio,t=this.state,n=t.width,r=t.height,a=n*e,o=r*e;return t.viewModeEnabled?c().createElement(\"canvas\",{id:\"canvas\",style:{width:n,height:r,cursor:\"grabbing\"},width:a,height:o,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.removePointer,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,onPointerDown:this.handleCanvasPointerDown},C(\"labels.drawingCanvas\")):c().createElement(\"canvas\",{id:\"canvas\",style:{width:n,height:r},width:a,height:o,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerDown:this.handleCanvasPointerDown,onDoubleClick:this.handleCanvasDoubleClick,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.removePointer,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,onDrop:this.handleCanvasOnDrop},C(\"labels.drawingCanvas\"))},t.prototype.render=function(){var e,t=this,n=this.state,r=n.zenModeEnabled,a=n.width,o=n.height,i=n.viewModeEnabled,l=this.props,s=l.onCollabButtonClick,u=l.onExportToBackend,d=l.renderFooter,p=a\/2,f=o\/2;return c().createElement(\"div\",{className:ze(\"excalidraw\",{\"excalidraw--view-mode\":i}),ref:this.excalidrawContainerRef,style:{width:a,height:o}},c().createElement(Sp,{canvas:this.canvas,appState:this.state,setAppState:this.setAppState,actionManager:this.actionManager,elements:this.scene.getElements(),onCollabButtonClick:s,onLockToggle:this.toggleLock,onInsertElements:function(e){return t.addElementsFromPasteOrLibrary(e,p,f)},zenModeEnabled:r,toggleZenMode:this.toggleZenMode,langCode:k().code,isCollaborating:this.props.isCollaborating||!1,onExportToBackend:u,renderCustomFooter:d,viewModeEnabled:i,showExitZenModeBtn:void 0===(null===(e=this.props)||void 0===e?void 0:e.zenModeEnabled)&&r}),c().createElement(\"div\",{className:\"excalidraw-textEditorContainer\"}),this.state.showStats&&c().createElement(_p,{appState:this.state,setAppState:this.setAppState,elements:this.scene.getElements(),onClose:this.toggleStats}),null!==this.state.toastMessage&&c().createElement(Lp,{message:this.state.toastMessage,clearToast:this.clearToast}),c().createElement(\"main\",null,this.renderCanvas()))},t.prototype.componentDidMount=function(){var e=this;return p()((function(){return Hp(this,(function(t){return\"production\"!==s.Vi.TEST&&\"production\"!==s.Vi.DEVELOPMENT||(e.setState.bind(e),Object.defineProperties(window.h,{state:{configurable:!0,get:function(){return e.state}},setState:{configurable:!0,value:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.setState.apply(e,t)}},app:{configurable:!0,value:e}})),e.scene.addCallback(e.onSceneUpdated),e.addEventListeners(),\"number\"==typeof e.props.offsetLeft&&\"number\"==typeof e.props.offsetTop?e.initializeScene():e.setState(e.getCanvasOffsets(e.props),(function(){e.initializeScene()})),[2]}))}))()},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.removeEventListeners(),this.scene.destroy(),clearTimeout(Qp),Qp=0},t.prototype.removeEventListeners=function(){document.removeEventListener(s.Ks.COPY,this.onCopy),document.removeEventListener(s.Ks.PASTE,this.pasteFromClipboard),document.removeEventListener(s.Ks.CUT,this.onCut),document.removeEventListener(s.Ks.KEYDOWN,this.onKeyDown,!1),document.removeEventListener(s.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition,!1),document.removeEventListener(s.Ks.KEYUP,this.onKeyUp),window.removeEventListener(s.Ks.RESIZE,this.onResize,!1),window.removeEventListener(s.Ks.UNLOAD,this.onUnload,!1),window.removeEventListener(s.Ks.BLUR,this.onBlur,!1),window.removeEventListener(s.Ks.DRAG_OVER,this.disableEvent,!1),window.removeEventListener(s.Ks.DROP,this.disableEvent,!1),document.removeEventListener(s.Ks.GESTURE_START,this.onGestureStart,!1),document.removeEventListener(s.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.removeEventListener(s.Ks.GESTURE_END,this.onGestureEnd,!1)},t.prototype.addEventListeners=function(){var e,t;this.removeEventListeners(),document.addEventListener(s.Ks.COPY,this.onCopy),document.addEventListener(s.Ks.KEYDOWN,this.onKeyDown,!1),document.addEventListener(s.Ks.KEYUP,this.onKeyUp,{passive:!0}),document.addEventListener(s.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition),null===(e=document.fonts)||void 0===e||null===(t=e.addEventListener)||void 0===t||t.call(e,\"loadingdone\",this.onFontLoaded),document.addEventListener(s.Ks.GESTURE_START,this.onGestureStart,!1),document.addEventListener(s.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.addEventListener(s.Ks.GESTURE_END,this.onGestureEnd,!1),this.state.viewModeEnabled||(document.addEventListener(s.Ks.PASTE,this.pasteFromClipboard),document.addEventListener(s.Ks.CUT,this.onCut),document.addEventListener(s.Ks.SCROLL,this.onScroll),window.addEventListener(s.Ks.RESIZE,this.onResize,!1),window.addEventListener(s.Ks.UNLOAD,this.onUnload,!1),window.addEventListener(s.Ks.BLUR,this.onBlur,!1),window.addEventListener(s.Ks.DRAG_OVER,this.disableEvent,!1),window.addEventListener(s.Ks.DROP,this.disableEvent,!1))},t.prototype.componentDidUpdate=function(e,t){var n,r,a,o,i=this;(e.langCode!==this.props.langCode&&this.updateLanguage(),e.width!==this.props.width||e.height!==this.props.height||\"number\"==typeof this.props.offsetLeft&&e.offsetLeft!==this.props.offsetLeft||\"number\"==typeof this.props.offsetTop&&e.offsetTop!==this.props.offsetTop)&&this.setState(Fp({width:null!==(a=this.props.width)&&void 0!==a?a:window.innerWidth,height:null!==(o=this.props.height)&&void 0!==o?o:window.innerHeight},this.getCanvasOffsets(this.props)));e.viewModeEnabled!==this.props.viewModeEnabled&&this.setState({viewModeEnabled:!!this.props.viewModeEnabled},this.addEventListeners),t.viewModeEnabled!==this.state.viewModeEnabled&&this.addEventListeners(),e.zenModeEnabled!==this.props.zenModeEnabled&&this.setState({zenModeEnabled:!!this.props.zenModeEnabled}),e.gridModeEnabled!==this.props.gridModeEnabled&&this.setState({gridSize:this.props.gridModeEnabled?s.k:null}),null===(n=document.querySelector(\".excalidraw\"))||void 0===n||n.classList.toggle(\"Appearance_dark\",\"dark\"===this.state.appearance),this.state.editingLinearElement&&!this.state.selectedElementIds[this.state.editingLinearElement.elementId]&&setTimeout((function(){i.actionManager.executeAction(Cc)}));var l=t.multiElement;t.elementType!==this.state.elementType&&null!=l&&io(this.state)&&Re(l)&&po(l,this.state,this.scene,jn(ro.getPointAtIndexGlobalCoordinates(l,-1)));var c={},u={},d={},p={},f={};this.state.collaborators.forEach((function(e,t){if(e.selectedElementIds)for(var n=0,r=Object.keys(e.selectedElementIds);n<r.length;n++){var a=r[n];a in d||(d[a]=[]),d[a].push(t)}e.pointer&&(e.username&&(p[t]=e.username),e.userState&&(f[t]=e.userState),u[t]=An({sceneX:e.pointer.x,sceneY:e.pointer.y},i.state),c[t]=e.button)}));var h=this.scene.getElements(),m=Wc(h.filter((function(e){return!i.state.editingElement||\"text\"!==i.state.editingElement.type||e.id!==i.state.editingElement.id})),this.state,this.state.selectionElement,window.devicePixelRatio,this.rc,this.canvas,{scrollX:this.state.scrollX,scrollY:this.state.scrollY,viewBackgroundColor:this.state.viewBackgroundColor,zoom:this.state.zoom,remotePointerViewportCoords:u,remotePointerButton:c,remoteSelectedElementIds:d,remotePointerUsernames:p,remotePointerUserStates:f,shouldCacheIgnoreZoom:this.state.shouldCacheIgnoreZoom},{renderOptimizations:!0,renderScrollbars:!gc()}),g=m.atLeastOneVisibleElement,v=m.scrollBars;v&&(qp=v);var b,y,w=\"text\"!==(null===(r=this.state.editingElement)||void 0===r?void 0:r.type)&&(!g&&h.length>0);(this.state.scrolledOutside!==w&&this.setState({scrolledOutside:w}),Wp.record(this.state,this.scene.getElementsIncludingDeleted()),this.state.isLoading)||(null===(b=(y=this.props).onChange)||void 0===b||b.call(y,this.scene.getElementsIncludingDeleted(),this.state))},t.resetTapTwice=function(){Gp=!1},t.prototype.addTextFromPaste=function(e){var t,n=Pn({clientX:Kp,clientY:Up},this.state),r=n.x,a=n.y,o=zr({x:r,y:a,strokeColor:this.state.currentItemStrokeColor,backgroundColor:this.state.currentItemBackgroundColor,fillStyle:this.state.currentItemFillStyle,strokeWidth:this.state.currentItemStrokeWidth,strokeStyle:this.state.currentItemStrokeStyle,roughness:this.state.currentItemRoughness,opacity:this.state.currentItemOpacity,strokeSharpness:this.state.currentItemStrokeSharpness,text:e,fontSize:this.state.currentItemFontSize,fontFamily:this.state.currentItemFontFamily,textAlign:this.state.currentItemTextAlign,verticalAlign:s.hs});this.scene.replaceAllElements(Np(Np([],this.scene.getElementsIncludingDeleted()),[o])),this.setState({selectedElementIds:(t={},t[o.id]=!0,t)}),Wp.resumeRecording()},t.prototype.selectShapeTool=function(e){var t;Yp||Mn(this.canvas,e),(t=document.activeElement)instanceof HTMLElement&&t.className.includes(\"ToolIcon\")&&document.activeElement.blur(),Ne(e)||this.setState({suggestedBindings:[]}),\"selection\"!==e?this.setState({elementType:e,selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}):this.setState({elementType:e})},t.prototype.handleTextWysiwyg=function(e,t){var n=t.isExistingElement,r=void 0!==n&&n,a=this,o=function(t,n){void 0===n&&(n=!1),a.scene.replaceAllElements(Np([],a.scene.getElementsIncludingDeleted().map((function(r){return r.id===e.id&&Be(r)?Br(r,{text:t,isDeleted:n}):r}))))};!function(e){var t=e.id,n=e.appState,r=e.onChange,a=e.onSubmit,o=e.getViewportCoords,i=e.element,l=e.canvas,c=function(){var e,r=null===(e=lr.getScene(i))||void 0===e?void 0:e.getElement(t);if(r&&Be(r)){var a=o(r.x,r.y),l=a[0],c=a[1],s=r.textAlign,d=r.angle;u.value=r.text;var p=r.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),f=r.height\/p.length,h=(n.offsetLeft+n.width-l-8)\/n.zoom.value-Number(getComputedStyle(document.querySelector(\".excalidraw\").parentNode).marginRight.slice(0,-2));Object.assign(u.style,{font:yn(r),lineHeight:\"\".concat(f,\"px\"),width:\"\".concat(r.width,\"px\"),height:\"\".concat(r.height,\"px\"),left:\"\".concat(l,\"px\"),top:\"\".concat(c,\"px\"),transform:Xo(r.width,r.height,d,n,h),textAlign:s,color:r.strokeColor,opacity:r.opacity\/100,filter:\"var(--appearance-filter)\",maxWidth:\"\".concat(h,\"px\")})}},u=document.createElement(\"textarea\");u.dir=\"auto\",u.tabIndex=0,u.dataset.type=\"wysiwyg\",u.wrap=\"off\",Object.assign(u.style,{position:\"absolute\",display:\"inline-block\",minHeight:\"1em\",backfaceVisibility:\"hidden\",margin:0,padding:0,border:0,outline:0,resize:\"none\",background:\"transparent\",overflow:\"hidden\",whiteSpace:\"pre\",zIndex:\"var(--zIndex-wysiwyg)\"}),c(),r&&(u.oninput=function(){r(Yo(u.value))}),u.onkeydown=function(e){if(e.key===Vt)e.preventDefault(),p();else if(e.key===Gt&&e[Ft]){if(e.preventDefault(),e.isComposing||229===e.keyCode)return;p()}else e.key!==Gt||e.altKey||e.stopPropagation()};var d=function(e){e.preventDefault(),e.stopPropagation()},p=function(){a(Yo(u.value)),f()},f=function(){v||(v=!0,u.onblur=null,u.oninput=null,u.onkeydown=null,b&&b.disconnect(),window.removeEventListener(\"resize\",c),window.removeEventListener(\"wheel\",d,!0),window.removeEventListener(\"pointerdown\",m),window.removeEventListener(\"pointerup\",h),window.removeEventListener(\"blur\",p),g(),u.remove())},h=function(){window.removeEventListener(\"pointerup\",h),setTimeout((function(){u.onblur=p,u.focus()}))},m=function(e){e.target instanceof HTMLElement&&e.target.closest(\".\".concat(s.$C.SHAPE_ACTIONS_MENU))&&!vn(e.target)&&(u.onblur=null,window.addEventListener(\"pointerup\",h),window.addEventListener(\"blur\",p))},g=lr.getScene(i).addCallback((function(){c(),u.focus()})),v=!1;u.onblur=p;var b=null;l&&\"ResizeObserver\"in window?(b=new window.ResizeObserver((function(){c()}))).observe(l):window.addEventListener(\"resize\",c),window.addEventListener(\"pointerdown\",m),window.addEventListener(\"wheel\",d,{passive:!1,capture:!0}),document.querySelector(\".excalidraw-textEditorContainer\").appendChild(u),u.focus(),u.select()}({id:e.id,appState:this.state,canvas:this.canvas,getViewportCoords:function(e,t){var n=An({sceneX:e,sceneY:t},a.state),r=n.x,o=n.y;return[r-a.state.offsetLeft,o-a.state.offsetTop]},onChange:Bn((function(t){o(t),ri(e)&&wo(e)})),onSubmit:Bn((function(t){var n=!t.trim();o(t,n),n?_o(a.scene.getElements(),[e]):a.setState((function(t){var n;return{selectedElementIds:Fp(Fp({},t.selectedElementIds),{},(n={},n[e.id]=!0,n))}})),n&&!r||Wp.resumeRecording(),a.setState({draggingElement:null,editingElement:null}),a.state.elementLocked&&Mn(a.canvas,a.state.elementType)})),element:e}),this.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}),o(e.text)},t.prototype.getTextElementAtPosition=function(e,t){var n=this.getElementAtPosition(e,t);return n&&Be(n)&&!n.isDeleted?n:null},t.prototype.getElementAtPosition=function(e,t){var n=this.getElementsAtPosition(e,t);if(n.length>1){var r=n[n.length-1];return ba(r,this.state,e,t)?n[n.length-2]:r}return 1===n.length?n[0]:null},t.prototype.getElementsAtPosition=function(e,t){var n,r,a=this;return n=this.scene.getElements(),r=function(n){return function(e,t,n,r){var a=10\/t.zoom.value,o=[n,r];return wa(t,e)?xa(e,o,a):ya(e,t,o)}(n,a.state,e,t)},n.filter((function(e){return!e.isDeleted&&r(e)}))},t.prototype.maybeCleanupAfterMissingPointerUp=function(e){null!==Jp&&Jp(e)},t.prototype.updateGestureOnPointerDown=function(e){ef.pointers.set(e.pointerId,{x:e.clientX,y:e.clientY}),2===ef.pointers.size&&(ef.lastCenter=pd(ef.pointers),ef.initialScale=this.state.zoom.value,ef.initialDistance=fd(Array.from(ef.pointers.values())))},t.prototype.initialPointerDownState=function(e){var t=Pn(e,this.state),n=ci(this.scene.getElements(),this.state),r=ot(n),a=r[0],o=r[1],i=r[2],l=r[3];return{origin:t,originInGrid:jn($e(t.x,t.y,this.state.gridSize)),scrollbars:ii(qp,e.clientX-this.state.offsetLeft,e.clientY-this.state.offsetTop),lastCoords:Fp({},t),originalElements:this.scene.getElements().reduce((function(e,t){return e.set(t.id,Nr(t)),e}),new Map),resize:{handleType:!1,isResizing:!1,offset:{x:0,y:0},arrowDirection:\"origin\",center:{x:(i+a)\/2,y:(l+o)\/2}},hit:{element:null,allHitElements:[],wasAddedToSelection:!1,hasBeenDuplicated:!1,hasHitCommonBoundingBoxOfSelectedElements:this.isHittingCommonBoundingBoxOfSelectedElements(t,n)},drag:{hasOccurred:!1,offset:null},eventListeners:{onMove:null,onUp:null,onKeyUp:null,onKeyDown:null}}},t.prototype.handleDraggingScrollBar=function(e,t){var n=this;if(!t.scrollbars.isOverEither||this.state.multiElement)return!1;Zp=!0,t.lastCoords.x=e.clientX,t.lastCoords.y=e.clientY;var r=Bn((function(e){e.target instanceof HTMLElement&&n.handlePointerMoveOverScrollbars(e,t)})),a=Bn((function(){Zp=!1,Mn(n.canvas,n.state.elementType),Jp=null,n.setState({cursorButton:\"up\"}),n.savePointer(e.clientX,e.clientY,\"up\"),window.removeEventListener(s.Ks.POINTER_MOVE,r),window.removeEventListener(s.Ks.POINTER_UP,a)}));return Jp=a,window.addEventListener(s.Ks.POINTER_MOVE,r),window.addEventListener(s.Ks.POINTER_UP,a),!0},t.prototype.isASelectedElement=function(e){return null!=e&&this.state.selectedElementIds[e.id]},t.prototype.isHittingCommonBoundingBoxOfSelectedElements=function(e,t){if(t.length<2)return!1;var n=10\/this.state.zoom.value,r=ot(t),a=r[0],o=r[1],i=r[2],l=r[3];return e.x>a-n&&e.x<i+n&&e.y>o-n&&e.y<l+n},t.prototype.onKeyDownFromPointerDownHandler=function(e){var t=this;return Bn((function(n){t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))},t.prototype.onKeyUpFromPointerDownHandler=function(e){var t=this;return Bn((function(n){n.key===Rt&&n.preventDefault(),t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))},t.prototype.onPointerMoveFromPointerDownHandler=function(e){var t=this;return Bn((function(n){var r;if(null===e.drag.offset&&(e.drag.offset=jn(function(e,t,n){var r=ot(e);return[t-r[0],n-r[1]]}(ci(t.scene.getElements(),t.state),e.origin.x,e.origin.y))),n.target instanceof HTMLElement&&!t.handlePointerMoveOverScrollbars(n,e)){var a=Pn(n,t.state),o=$e(a.x,a.y,t.state.gridSize),i=o[0],l=o[1];if(e.drag.hasOccurred||\"arrow\"!==t.state.elementType&&\"line\"!==t.state.elementType||!(Ue(a.x,a.y,e.origin.x,e.origin.y)<s.f)){if(e.resize.isResizing&&(e.lastCoords.x=a.x,e.lastCoords.y=a.y,t.maybeHandleResize(e,n)))return!0;if(t.state.editingLinearElement)if(ro.handlePointDragging(t.state,(function(e){return t.setState(e)}),a.x,a.y,(function(e,n){t.maybeSuggestBindingForLinearElementAtCursor(e,n,a)})))return e.lastCoords.x=a.x,void(e.lastCoords.y=a.y);if(e.hit.allHitElements.some((function(e){return t.isASelectedElement(e)}))||e.hit.hasHitCommonBoundingBoxOfSelectedElements){e.drag.hasOccurred=!0;var c=ci(t.scene.getElements(),t.state);if(c.length>0){var u=$e(a.x-e.drag.offset.x,a.y-e.drag.offset.y,t.state.gridSize),d=u[0],p=u[1],f=[Math.abs(a.x-e.origin.x),Math.abs(a.y-e.origin.y)],h=f[0],m=f[1],g=n.shiftKey;if(function(e,t,n,r,a,o,i,l){void 0===o&&(o=!1),void 0===i&&(i=0),void 0===l&&(l=0);var c=ot(t),s=c[0],u=c[1],d=n-s,p=r-u;t.forEach((function(n){var r,a;if(o){var c=o&&i<l,s=o&&i>l,u=e.originalElements.get(n.id);r=c&&u?u.x:n.x+d,a=s&&u?u.y:n.y+p}else r=n.x+d,a=n.y+p;fr(n,{x:r,y:a}),wo(n,{simultaneouslyUpdated:t})}))}(e,c,d,p,t.scene,g,h,m),t.maybeSuggestBindingForAll(c),n.altKey&&!e.hit.hasBeenDuplicated){e.hit.hasBeenDuplicated=!0;for(var v=[],b=[],y=new Map,w=new Map,x=e.hit.element,E=0,k=t.scene.getElementsIncludingDeleted();E<k.length;E++){var S=k[E];if(t.state.selectedElementIds[S.id]||S.id===(null==x?void 0:x.id)&&e.hit.wasAddedToSelection){var C=Rr(t.state.editingGroupId,y,S),O=$e(e.origin.x-e.drag.offset.x,e.origin.y-e.drag.offset.y,t.state.gridSize),M=O[0],T=O[1];fr(C,{x:C.x+(M-d),y:C.y+(T-p)}),v.push(C),b.push(S),w.set(S.id,C.id)}else v.push(S)}var I=Np(Np([],v),b);Po(I,b,w,\"duplicatesServeAsOld\"),t.scene.replaceAllElements(I)}return}}var P=t.state.draggingElement;if(P){if(He(P)){e.drag.hasOccurred=!0;var A=P.points,_=void 0,L=void 0;\"draw\"===P.type?(_=a.x-P.x,L=a.y-P.y):(_=i-P.x,L=l-P.y),pn(n)&&2===A.length&&(_=(r=gr(t.state.elementType,_,L)).width,L=r.height),1===A.length?fr(P,{points:Np(Np([],A),[[_,L]])}):A.length>1&&(\"draw\"===P.type?fr(P,{points:z(Np(Np([],A),[[_,L]]),.7\/t.state.zoom.value)}):fr(P,{points:Np(Np([],A.slice(0,-1)),[[_,L]])})),Re(P)&&t.maybeSuggestBindingForLinearElementAtCursor(P,\"end\",a,t.state.startBoundElement)}else e.lastCoords.x=a.x,e.lastCoords.y=a.y,t.maybeDragNewGenericElement(e,n);if(\"selection\"===t.state.elementType){var D=t.scene.getElements();!n.shiftKey&&li(D,t.state)&&t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null});var j=function(e,t){var n=et(t),r=n[0],a=n[1],o=n[2],i=n[3];return e.filter((function(e){var t=at(e),n=t[0],l=t[1],c=t[2],s=t[3];return\"selection\"!==e.type&&r<=n&&a<=l&&o>=c&&i>=s}))}(D,P);t.setState((function(e){return Mr(Fp(Fp({},e),{},{selectedElementIds:Fp(Fp({},e.selectedElementIds),j.reduce((function(e,t){return e[t.id]=!0,e}),{}))}),t.scene.getElements())}))}}}}}))},t.prototype.handlePointerMoveOverScrollbars=function(e,t){if(t.scrollbars.isOverHorizontal){var n=e.clientX,r=n-t.lastCoords.x;return this.setState({scrollX:this.state.scrollX-r\/this.state.zoom.value}),t.lastCoords.x=n,!0}if(t.scrollbars.isOverVertical){var a=e.clientY,o=a-t.lastCoords.y;return this.setState({scrollY:this.state.scrollY-o\/this.state.zoom.value}),t.lastCoords.y=a,!0}return!1},t.prototype.onPointerUpFromPointerDownHandler=function(e){var t=this;return Bn((function(n){var r=t.state,a=r.draggingElement,o=r.resizingElement,i=r.multiElement,l=r.elementType,c=r.elementLocked,u=r.isResizing,d=r.isRotating;if(t.setState({isResizing:!1,isRotating:!1,resizingElement:null,selectionElement:null,cursorButton:\"up\",editingElement:i||Be(t.state.editingElement)?t.state.editingElement:null}),t.savePointer(n.clientX,n.clientY,\"up\"),t.state.editingLinearElement){var p=ro.handlePointerUp(n,t.state.editingLinearElement,t.state);p!==t.state.editingLinearElement&&t.setState({editingLinearElement:p,suggestedBindings:[]})}if(Jp=null,window.removeEventListener(s.Ks.POINTER_MOVE,e.eventListeners.onMove),window.removeEventListener(s.Ks.POINTER_UP,e.eventListeners.onUp),window.removeEventListener(s.Ks.KEYDOWN,e.eventListeners.onKeyDown),window.removeEventListener(s.Ks.KEYUP,e.eventListeners.onKeyUp),\"draw\"!==(null==a?void 0:a.type))if(He(a)){a.points.length>1&&Wp.resumeRecording();var f=Pn(n,t.state);e.drag.hasOccurred||!a||i?e.drag.hasOccurred&&!i&&(io(t.state)&&Re(a)&&po(a,t.state,t.scene,f),t.setState({suggestedBindings:[],startBoundElement:null}),c||\"draw\"===l?t.setState((function(e){var n;return{draggingElement:null,selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(n={},n[t.state.draggingElement.id]=!0,n))}})):(Cn(t.canvas),t.setState((function(e){var n;return{draggingElement:null,elementType:\"selection\",selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(n={},n[t.state.draggingElement.id]=!0,n))}})))):(fr(a,{points:Np(Np([],a.points),[[f.x-a.x,f.y-a.y]])}),t.setState({multiElement:a,editingElement:t.state.draggingElement}))}else{if(\"selection\"!==l&&a&&mr(a))return t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().slice(0,-1)),void t.setState({draggingElement:null});a&&fr(a,vr(a)),o&&Wp.resumeRecording(),o&&mr(o)&&t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==o.id})));var h=e.hit.element;if(h&&!e.drag.hasOccurred&&!e.hit.wasAddedToSelection)if(n.shiftKey)if(t.state.selectedElementIds[h.id])if(Sr(t.state,h)){var m=h.groupIds.flatMap((function(e){return Ir(t.scene.getElements(),e)})).map((function(e){var t;return(t={})[e.id]=!1,t})).reduce((function(e,t){return Fp(Fp({},e),t)}),{});t.setState((function(e){return{selectedGroupIds:Fp(Fp({},e.selectedElementIds),h.groupIds.map((function(e){var t;return(t={})[e]=!1,t})).reduce((function(e,t){return Fp(Fp({},e),t)}),{})),selectedElementIds:Fp(Fp({},e.selectedElementIds),m)}}))}else t.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[h.id]=!1,t))}}));else t.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[h.id]=!0,t))}}));else t.setState((function(e){var n;return Fp({},Mr(Fp(Fp({},e),{},{selectedElementIds:(n={},n[h.id]=!0,n)}),t.scene.getElements()))}));t.state.editingLinearElement||e.drag.hasOccurred||t.state.isResizing||!(h&&ba(h,t.state,e.origin.x,e.origin.y)||!h&&e.hit.hasHitCommonBoundingBoxOfSelectedElements)?(!c&&\"draw\"!==l&&a&&t.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[a.id]=!0,t))}})),(\"selection\"!==l||li(t.scene.getElements(),t.state))&&Wp.resumeRecording(),(e.drag.hasOccurred||u||d)&&(io(t.state)?so:go)(ci(t.scene.getElements(),t.state)),c||\"draw\"===l?t.setState({draggingElement:null,suggestedBindings:[]}):(Cn(t.canvas),t.setState({draggingElement:null,suggestedBindings:[],elementType:\"selection\"}))):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}else t.actionManager.executeAction(Cc)}))},t.prototype.maybeSuggestBindingForAll=function(e){var t,n,r=(t=e,n=new Set(t.map((function(e){return e.id}))),t.flatMap((function(e){return Re(e)?Co(e).filter((function(e){return!n.has(e.id)})):We(e)?To(e).filter((function(e){return!n.has(e[0].id)})):[]})));this.setState({suggestedBindings:r})},t.prototype.clearSelection=function(e){this.setState((function(t){return{selectedElementIds:{},selectedGroupIds:{},editingGroupId:t.editingGroupId&&null!=e&&Tr(e,t.editingGroupId)?t.editingGroupId:null}})),this.setState({selectedElementIds:{},previousSelectedElementIds:this.state.selectedElementIds})},t.prototype.getTextWysiwygSnappedToCenterPosition=function(e,t,n,r,a){var o=function(e,t,n){for(var r=null,a=e.length-1;a>=0;--a)if(!e[a].isDeleted){var o=et(e[a]),i=o[0],l=o[1],c=o[2],s=o[3];if(i<t&&t<c&&l<n&&n<s){r=e[a];break}}return r}(this.scene.getElementsIncludingDeleted().filter((function(e){return!Be(e)})),e,t);if(o){var i=o.x+o.width\/2,l=o.y+o.height\/2;if(Math.hypot(e-i,t-l)<s.wZ){var c=An({sceneX:i,sceneY:l},n);return{viewportX:c.x,viewportY:c.y,elementCenterX:i,elementCenterY:l}}}},t.prototype.getCanvasOffsets=function(e){var t,n;if(\"number\"==typeof(null==e?void 0:e.offsetLeft)&&\"number\"==typeof(null==e?void 0:e.offsetTop))return{offsetLeft:e.offsetLeft,offsetTop:e.offsetTop};if(null!==(t=this.excalidrawContainerRef)&&void 0!==t&&null!==(n=t.current)&&void 0!==n&&n.parentElement){var r=this.excalidrawContainerRef.current.parentElement.getBoundingClientRect(),a=r.left,o=r.top;return{offsetLeft:\"number\"==typeof(null==e?void 0:e.offsetLeft)?e.offsetLeft:a,offsetTop:\"number\"==typeof(null==e?void 0:e.offsetTop)?e.offsetTop:o}}return{offsetLeft:\"number\"==typeof(null==e?void 0:e.offsetLeft)?e.offsetLeft:0,offsetTop:\"number\"==typeof(null==e?void 0:e.offsetTop)?e.offsetTop:0}},t.prototype.updateLanguage=function(){var e=this;return p()((function(){var t;return Hp(this,(function(n){switch(n.label){case 0:return t=v.find((function(t){return t.code===e.props.langCode}))||g,[4,E(t)];case 1:return n.sent(),e.setAppState({}),[2]}}))}))()},t}(c().Component);tf.defaultProps={width:window.innerWidth,height:window.innerHeight};var nf=function(){var e=this;this.canvas=null,this.rc=null,this.unmounted=!1,this.excalidrawContainerRef=c().createRef(),this.getSceneElementsIncludingDeleted=function(){return e.scene.getElementsIncludingDeleted()},this.getSceneElements=function(){return e.scene.getElements()},this.syncActionResult=Bn((function(t){if(!e.unmounted&&!1!==t){var n=null;if(t.elements&&(t.elements.forEach((function(t){var r;(null===(r=e.state.editingElement)||void 0===r?void 0:r.id)===t.id&&e.state.editingElement!==t&&ri(t)&&(n=t)})),e.scene.replaceAllElements(t.elements),t.commitToHistory&&Wp.resumeRecording()),t.appState||n){var r,a,o;t.commitToHistory&&Wp.resumeRecording();var i=(null==t||null===(r=t.appState)||void 0===r?void 0:r.viewModeEnabled)||!1,l=(null==t||null===(a=t.appState)||void 0===a?void 0:a.zenModeEnabled)||!1,c=(null==t||null===(o=t.appState)||void 0===o?void 0:o.gridSize)||null;void 0!==e.props.viewModeEnabled&&(i=e.props.viewModeEnabled),void 0!==e.props.zenModeEnabled&&(l=e.props.zenModeEnabled),void 0!==e.props.gridModeEnabled&&(c=e.props.gridModeEnabled?s.k:null),e.setState((function(e){var r;return Object.assign(t.appState||{},{editingElement:n||(null===(r=t.appState)||void 0===r?void 0:r.editingElement)||null,width:e.width,height:e.height,offsetTop:e.offsetTop,offsetLeft:e.offsetLeft,viewModeEnabled:i,zenModeEnabled:l,gridSize:c})}),(function(){t.syncHistory&&Wp.setCurrentState(e.state,e.scene.getElementsIncludingDeleted())}))}}})),this.onBlur=Bn((function(){Yp=!1,e.setState({isBindingEnabled:!0})})),this.onUnload=function(){e.onBlur()},this.disableEvent=function(e){e.preventDefault()},this.onFontLoaded=function(){e.scene.getElementsIncludingDeleted().forEach((function(e){Be(e)&&er(e)})),e.onSceneUpdated()},this.importLibraryFromUrl=function(){var t=p()((function(t){var n,r,a,o,i;return Hp(this,(function(l){switch(l.label){case 0:window.history.replaceState({},s.iC,window.location.origin),l.label=1;case 1:return l.trys.push([1,7,,8]),[4,fetch(t)];case 2:return[4,l.sent().blob()];case 3:return n=l.sent(),o=(a=JSON).parse,[4,n.text()];case 4:if(!function(e){return\"object\"==typeof e&&e&&\"excalidrawlib\"===e.type&&1===e.version}(r=o.apply(a,[l.sent()])))throw new Error;return window.confirm(C(\"alerts.confirmAddLibrary\",{numShapes:r.library.length}))?[4,Ps.importLibrary(n)]:[3,6];case 5:l.sent(),e.setState({isLibraryOpen:!0}),l.label=6;case 6:return[3,8];case 7:return i=l.sent(),window.alert(C(\"alerts.errorLoadingLibrary\")),console.error(i),[3,8];case 8:return[2]}}))}));return function(e){return t.apply(this,arguments)}}(),this.resetHistory=function(){Wp.clear()},this.resetScene=Bn((function(t){e.scene.replaceAllElements([]),e.setState((function(n){return Fp(Fp({},Rn()),{},{isLoading:(null==t||!t.resetLoadingState)&&n.isLoading,appearance:e.state.appearance})})),e.resetHistory()})),this.initializeScene=p()((function(){var t,n,r,a,o;return Hp(this,(function(i){switch(i.label){case 0:\"launchQueue\"in window&&\"LaunchParams\"in window&&window.launchQueue.setConsumer(function(){var t=p()((function(t){var n,r;return Hp(this,(function(a){switch(a.label){case 0:return t.files.length?[4,(n=t.files[0]).getFile()]:[2];case 1:return(r=a.sent()).handle=n,Ws(r,e.state).then((function(t){var n=t.elements,r=t.appState;return e.syncActionResult({elements:n,appState:Fp(Fp({},r||e.state),{},{isLoading:!1}),commitToHistory:!0})})).catch((function(t){e.setState({isLoading:!1,errorMessage:t.message})})),[2]}}))}));return function(e){return t.apply(this,arguments)}}()),e.state.isLoading||e.setState({isLoading:!0}),n=null,i.label=1;case 1:return i.trys.push([1,3,,4]),[4,e.props.initialData];case 2:return n=i.sent()||null,[3,4];case 3:return r=i.sent(),console.error(r),[3,4];case 4:return(a=Ms(n,null)).appState=Fp(Fp({},a.appState),{},{isLoading:!1}),null!==(t=n)&&void 0!==t&&t.scrollToCenter&&(a.appState=Fp(Fp({},a.appState),di(a.elements,Fp(Fp({},a.appState),{},{width:e.state.width,height:e.state.height,offsetTop:e.state.offsetTop,offsetLeft:e.state.offsetLeft})))),e.resetHistory(),e.syncActionResult(Fp(Fp({},a),{},{commitToHistory:!0})),(o=new URLSearchParams(window.location.search).get(\"addLibrary\"))?[4,e.importLibraryFromUrl(o)]:[3,6];case 5:i.sent(),i.label=6;case 6:return[2]}}))})),this.onResize=Bn((function(){e.scene.getElementsIncludingDeleted().forEach((function(e){return er(e)})),e.setState({})})),this.onScroll=xn((function(){var t=e.getCanvasOffsets(),n=t.offsetTop,r=t.offsetLeft;e.setState((function(e){return e.offsetLeft===r&&e.offsetTop===n?null:{offsetTop:n,offsetLeft:r}}))}),s.HM),this.onCut=Bn((function(t){vn(t.target)||(e.cutAll(),t.preventDefault())})),this.onCopy=Bn((function(t){var n=document.getSelection();null!=n&&n.anchorNode&&!e.excalidrawContainerRef.current.contains(n.anchorNode)||vn(t.target)||(e.copyAll(),t.preventDefault())})),this.cutAll=function(){e.copyAll(),e.actionManager.executeAction(Ml)},this.copyAll=function(){$s(e.scene.getElements(),e.state)},this.onTapStart=function(t){if(!Gp)return Gp=!0,clearTimeout(Vp),void(Vp=window.setTimeout(tf.resetTapTwice,s.Gj));if(Gp&&1===t.touches.length){var n=t.touches[0];e.handleCanvasDoubleClick({clientX:n.clientX,clientY:n.clientY}),Gp=!1,clearTimeout(Vp)}t.preventDefault(),2===t.touches.length&&e.setState({selectedElementIds:{}})},this.onTapEnd=function(t){t.preventDefault(),t.touches.length>0&&e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds})},this.pasteFromClipboard=Bn(function(){var t=p()((function(t){var n,r,a;return Hp(this,(function(o){switch(o.label){case 0:return n=document.activeElement,r=document.elementFromPoint(Kp,Up),!t||r instanceof HTMLCanvasElement&&!vn(n)?[4,nu(t)]:[2];case 1:return(a=o.sent()).errorMessage?e.setState({errorMessage:a.errorMessage}):a.spreadsheet?e.setState({pasteDialog:{data:a.spreadsheet,shown:!0}}):a.elements?e.addElementsFromPasteOrLibrary(a.elements):a.text&&e.addTextFromPaste(a.text),e.selectShapeTool(\"selection\"),null==t||t.preventDefault(),[2]}}))}));return function(e){return t.apply(this,arguments)}}()),this.addElementsFromPasteOrLibrary=function(t,n,r){void 0===n&&(n=Kp),void 0===r&&(r=Up);var a=ot(t),o=a[0],i=a[1],l=a[2],c=a[3],s=Sn(o,l)\/2,u=Sn(i,c)\/2,d=Pn({clientX:n,clientY:r},e.state),p=d.x-s,f=d.y-u,h=new Map,m=$e(p,f,e.state.gridSize),g=m[0],v=m[1],b=new Map,y=t.map((function(t){var n=Rr(e.state.editingGroupId,h,t,{x:t.x+g-o,y:t.y+v-i});return b.set(t.id,n.id),n})),w=Np(Np([],e.scene.getElementsIncludingDeleted()),y);Po(w,t,b),e.scene.replaceAllElements(w),Wp.resumeRecording(),e.setState(Mr(Fp(Fp({},e.state),{},{isLibraryOpen:!1,selectedElementIds:y.reduce((function(e,t){return e[t.id]=!0,e}),{}),selectedGroupIds:{}}),e.scene.getElements()))},this.setAppState=function(t){e.setState(t)},this.removePointer=function(e){\"touch\"===e.pointerType&&Qp&&(clearTimeout(Qp),Qp=0,$p=!1),ef.pointers.delete(e.pointerId)},this.toggleLock=function(){e.setState((function(e){return{elementLocked:!e.elementLocked,elementType:e.elementLocked?\"selection\":e.elementType}}))},this.toggleZenMode=function(){e.actionManager.executeAction(ad)},this.toggleStats=function(){e.state.showStats||Oc(\"dialog\",\"stats\"),e.actionManager.executeAction(ld)},this.setScrollToCenter=function(t){e.setState(Fp({},di(ni(t),e.state,e.canvas)))},this.clearToast=function(){e.setState({toastMessage:null})},this.updateScene=Bn((function(t){var n;t.commitToHistory&&Wp.resumeRecording(),null!==(n=t.appState)&&void 0!==n&&n.viewBackgroundColor&&e.setState({viewBackgroundColor:t.appState.viewBackgroundColor}),t.elements&&e.scene.replaceAllElements(t.elements),t.collaborators&&e.setState({collaborators:t.collaborators})})),this.onSceneUpdated=function(){e.setState({})},this.updateCurrentCursorPosition=Bn((function(e){Kp=e.x,Up=e.y})),this.onKeyDown=Bn((function(t){var n;if((\"Proxy\"in window&&(!t.shiftKey&&\/^[A-Z]$\/.test(t.key)||t.shiftKey&&\/^[a-z]$\/.test(t.key))&&(t=new Proxy(t,{get:function(e,n){var r=e[n];return\"function\"==typeof r?r.bind(e):\"key\"===n?t.shiftKey?e.key.toUpperCase():e.key.toLowerCase():r}})),!(vn(t.target)&&t.key!==Vt||sn(t.key)&&(n=t.target,n instanceof HTMLElement&&\"wysiwyg\"===n.dataset.type||n instanceof HTMLBRElement||n instanceof HTMLInputElement||n instanceof HTMLTextAreaElement||n instanceof HTMLSelectElement)))&&(t.key===Kt&&e.setState({showHelpDialog:!0}),!e.actionManager.handleKeyDown(t)&&!e.state.viewModeEnabled)){if(t[Ft]&&e.setState({isBindingEnabled:!1}),t.code===St&&e.setState({isLibraryOpen:!e.state.isLibraryOpen}),sn(t.key)){var r=e.state.gridSize&&(t.shiftKey?s.$e:e.state.gridSize)||(t.shiftKey?s.Iw:s.$e),a=e.scene.getElements().filter((function(t){return e.state.selectedElementIds[t.id]})),o=0,i=0;t.key===zt?o=-r:t.key===Bt?o=r:t.key===Ht?i=-r:t.key===jt&&(i=r),a.forEach((function(e){fr(e,{x:e.x+o,y:e.y+i}),wo(e,{simultaneouslyUpdated:a})})),e.maybeSuggestBindingForAll(a),t.preventDefault()}else if(t.key===Gt){var l=ci(e.scene.getElements(),e.state);if(1===l.length&&He(l[0]))e.state.editingLinearElement&&e.state.editingLinearElement.elementId===l[0].id||(Wp.resumeRecording(),e.setState({editingLinearElement:new ro(l[0],e.scene)}));else if(1===l.length&&!He(l[0])){var c=l[0];return e.startTextEditing({sceneX:c.x+c.width\/2,sceneY:c.y+c.height\/2}),void t.preventDefault()}}else if(!t.ctrlKey&&!t.altKey&&!t.metaKey&&null===e.state.draggingElement){var u=function(e){var t=wd.find((function(t,n){return e===(n+1).toString()||(\"string\"==typeof t.key?t.key===e:t.key.includes(e))}));return(null==t?void 0:t.value)||null}(t.key);u?e.selectShapeTool(u):t.key===en&&e.toggleLock()}t.key===Ut&&0===ef.pointers.size&&(Yp=!0,On(e.canvas,s.oc.GRABBING))}})),this.onKeyUp=Bn((function(t){if(t.key===Ut&&(\"selection\"===e.state.elementType?Cn(e.canvas):(Mn(e.canvas,e.state.elementType),e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})),Yp=!1),t[Ft]||e.state.isBindingEnabled||e.setState({isBindingEnabled:!0}),sn(t.key)){var n=ci(e.scene.getElements(),e.state);io(e.state)?so(n):go(n),e.setState({suggestedBindings:[]})}})),this.onGestureStart=Bn((function(t){t.preventDefault(),e.setState({selectedElementIds:{}}),ef.initialScale=e.state.zoom.value})),this.onGestureChange=Bn((function(t){if(t.preventDefault(),2!==ef.pointers.size){var n=ef.initialScale;n&&e.setState((function(e){var r=e.zoom,a=e.offsetLeft,o=e.offsetTop;return{zoom:bi(yi(n*t.scale),r,{left:a,top:o},{x:Kp,y:Up})}}))}})),this.onGestureEnd=Bn((function(t){t.preventDefault(),e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds}),ef.initialScale=null})),this.startTextEditing=function(t){var n=t.sceneX,r=t.sceneY,a=t.insertAtParentCenter,o=void 0===a||a,i=e.getTextElementAtPosition(n,r),l=o&&e.getTextWysiwygSnappedToCenterPosition(n,r,e.state,e.canvas,window.devicePixelRatio),c=i||zr({x:l?l.elementCenterX:n,y:l?l.elementCenterY:r,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemStrokeSharpness,text:\"\",fontSize:e.state.currentItemFontSize,fontFamily:e.state.currentItemFontFamily,textAlign:l?\"center\":e.state.currentItemTextAlign,verticalAlign:l?\"middle\":s.hs});e.setState({editingElement:c}),i?l&&\"center\"===c.textAlign||fr(c,{verticalAlign:s.hs}):(e.scene.replaceAllElements(Np(Np([],e.scene.getElementsIncludingDeleted()),[c])),l||fr(c,{y:c.y-c.baseline\/2})),e.setState({editingElement:c}),e.handleTextWysiwyg(c,{isExistingElement:!!i})},this.handleCanvasDoubleClick=function(t){if(!e.state.multiElement&&\"selection\"===e.state.elementType){var n=ci(e.scene.getElements(),e.state);if(1===n.length&&He(n[0]))e.state.editingLinearElement&&e.state.editingLinearElement.elementId===n[0].id||(Wp.resumeRecording(),e.setState({editingLinearElement:new ro(n[0],e.scene)}));else{Cn(e.canvas);var r=Pn(t,e.state),a=r.x,o=r.y;if(Or(e.state).length>0){var i=e.getElementAtPosition(a,o),l=i&&function(e,t){return e.groupIds.find((function(e){return t[e]}))}(i,e.state.selectedGroupIds);if(l)return void e.setState((function(t){var n;return Mr(Fp(Fp({},t),{},{editingGroupId:l,selectedElementIds:(n={},n[i.id]=!0,n),selectedGroupIds:{}}),e.scene.getElements())}))}Cn(e.canvas),t[Ft]||e.startTextEditing({sceneX:a,sceneY:o,insertAtParentCenter:!t.altKey})}}},this.handleCanvasPointerMove=function(t){e.savePointer(t.clientX,t.clientY,e.state.cursorButton),ef.pointers.has(t.pointerId)&&ef.pointers.set(t.pointerId,{x:t.clientX,y:t.clientY});var n=ef.initialScale;if(2===ef.pointers.size&&ef.lastCenter&&n&&ef.initialDistance){var r=pd(ef.pointers),a=r.x-ef.lastCenter.x,o=r.y-ef.lastCenter.y;ef.lastCenter=r;var i=fd(Array.from(ef.pointers.values()))\/ef.initialDistance;e.setState((function(e){var t=e.zoom,l=e.scrollX,c=e.scrollY,s=e.offsetLeft,u=e.offsetTop;return{scrollX:l+a\/t.value,scrollY:c+o\/t.value,zoom:bi(yi(n*i),t,{left:s,top:u},r),shouldCacheIgnoreZoom:!0}})),e.resetShouldCacheIgnoreZoomDebounced()}else ef.lastCenter=ef.initialDistance=ef.initialScale=null;if(!(Yp||Xp||Zp)){var l=ii(qp,t.clientX-e.state.offsetLeft,t.clientY-e.state.offsetTop).isOverEither;e.state.draggingElement||e.state.multiElement||(l?Cn(e.canvas):Mn(e.canvas,e.state.elementType));var c=Pn(t,e.state),u=c.x,d=c.y;if(e.state.editingLinearElement&&!e.state.editingLinearElement.isDragging){var p=ro.handlePointerMove(t,u,d,e.state.editingLinearElement,e.state.gridSize);p!==e.state.editingLinearElement&&e.setState({editingLinearElement:p}),null!=p.lastUncommittedPoint?e.maybeSuggestBindingAtCursor(c):e.setState({suggestedBindings:[]})}if(Fe(e.state.elementType)){var f=e.state.draggingElement;Re(f)?e.maybeSuggestBindingForLinearElementAtCursor(f,\"end\",c,e.state.startBoundElement):e.maybeSuggestBindingAtCursor(c)}if(e.state.multiElement){var h=e.state.multiElement,m=h.x,g=h.y,v=h.points,b=h.lastCommittedPoint,y=v[v.length-1];return Mn(e.canvas,e.state.elementType),void(y===b?Ue(u-m,d-g,y[0],y[1])>=s.qx?fr(h,{points:Np(Np([],v),[[u-m,d-g]])}):On(e.canvas,s.oc.POINTER):v.length>2&&b&&Ue(u-m,d-g,b[0],b[1])<s.qx?(On(e.canvas,s.oc.POINTER),fr(h,{points:v.slice(0,-1)})):(Ye(v,e.state.zoom.value)&&On(e.canvas,s.oc.POINTER),fr(h,{points:Np(Np([],v.slice(0,-1)),[[u-m,d-g]])})))}if(!(Boolean(t.buttons)||\"selection\"!==e.state.elementType&&\"text\"!==e.state.elementType)){var w=e.scene.getElements(),x=ci(w,e.state);if(1!==x.length||l||e.state.editingLinearElement){if(x.length>1&&!l){var E=Qa(ot(x),u,d,e.state.zoom,t.pointerType);if(E)return void On(e.canvas,Ja({transformHandleType:E}))}}else{var k=qa(w,e.state,u,d,e.state.zoom,t.pointerType);if(k&&k.transformHandleType)return void On(e.canvas,Ja(k))}var S=e.getElementAtPosition(c.x,c.y);\"text\"===e.state.elementType?On(e.canvas,Be(S)?s.oc.TEXT:s.oc.CROSSHAIR):l?On(e.canvas,s.oc.AUTO):S||e.isHittingCommonBoundingBoxOfSelectedElements(c,x)?On(e.canvas,s.oc.MOVE):On(e.canvas,s.oc.AUTO)}}},this.handleTouchMove=function(e){$p=!0},this.handleCanvasPointerDown=function(t){if(t.persist(),e.maybeOpenContextMenuAfterPointerDownOnTouchDevices(t),e.maybeCleanupAfterMissingPointerUp(t),!Xp&&(e.setState({lastPointerDownWith:t.pointerType,cursorButton:\"down\"}),e.savePointer(t.clientX,t.clientY,\"down\"),!e.handleCanvasPanUsingWheelOrSpaceDrag(t)&&!(t.button!==s.Oh.MAIN&&t.button!==s.Oh.TOUCH||(e.updateGestureOnPointerDown(t),t.preventDefault(),document.activeElement instanceof HTMLElement&&document.activeElement.blur(),ef.pointers.size>1)))){var n=e.initialPointerDownState(t);if(!e.handleDraggingScrollBar(t,n)&&(e.clearSelectionIfNotUsingSelection(),e.updateBindingEnabledOnPointerMove(t),!e.handleSelectionOnPointerDown(t,n)))if(\"text\"!==e.state.elementType){\"arrow\"===e.state.elementType||\"draw\"===e.state.elementType||\"line\"===e.state.elementType?e.handleLinearElementOnPointerDown(t,e.state.elementType,n):e.createGenericElementOnPointerDown(e.state.elementType,n);var r=e.onPointerMoveFromPointerDownHandler(n),a=e.onPointerUpFromPointerDownHandler(n),o=e.onKeyDownFromPointerDownHandler(n),i=e.onKeyUpFromPointerDownHandler(n);Jp=a,e.state.viewModeEnabled||(window.addEventListener(s.Ks.POINTER_MOVE,r),window.addEventListener(s.Ks.POINTER_UP,a),window.addEventListener(s.Ks.KEYDOWN,o),window.addEventListener(s.Ks.KEYUP,i),n.eventListeners.onMove=r,n.eventListeners.onUp=a,n.eventListeners.onKeyUp=i,n.eventListeners.onKeyDown=o)}else e.handleTextOnPointerDown(t,n)}},this.maybeOpenContextMenuAfterPointerDownOnTouchDevices=function(t){\"touch\"===t.pointerType&&($p=!1,Qp?$p=!0:Qp=window.setTimeout((function(){Qp=0,$p||e.openContextMenu({clientX:t.clientX,clientY:t.clientY})}),s.nM))},this.handleCanvasPanUsingWheelOrSpaceDrag=function(t){if(0!==ef.pointers.size||!(t.button===s.Oh.WHEEL||t.button===s.Oh.MAIN&&Yp||e.state.viewModeEnabled))return!1;Xp=!0;var n=!1,r=\/Linux\/.test(window.navigator.platform);On(e.canvas,s.oc.GRABBING);var a=t.clientX,o=t.clientY,i=Bn((function(t){var i=a-t.clientX,l=o-t.clientY;if(a=t.clientX,o=t.clientY,r&&!n&&(Math.abs(i)>1||Math.abs(l)>1)){n=!0;var c=function(e){document.body.removeEventListener(s.Ks.PASTE,c),e.stopPropagation()},u=function(){setTimeout((function(){document.body.removeEventListener(s.Ks.PASTE,c),window.removeEventListener(s.Ks.POINTER_UP,u)}),100)};document.body.addEventListener(s.Ks.PASTE,c),window.addEventListener(s.Ks.POINTER_UP,u)}e.setState({scrollX:e.state.scrollX-i\/e.state.zoom.value,scrollY:e.state.scrollY-l\/e.state.zoom.value})})),l=Bn(Jp=function(){Jp=null,Xp=!1,Yp||Mn(e.canvas,e.state.elementType),e.setState({cursorButton:\"up\"}),e.savePointer(t.clientX,t.clientY,\"up\"),window.removeEventListener(s.Ks.POINTER_MOVE,i),window.removeEventListener(s.Ks.POINTER_UP,l),window.removeEventListener(s.Ks.BLUR,l)});return window.addEventListener(s.Ks.BLUR,l),window.addEventListener(s.Ks.POINTER_MOVE,i,{passive:!0}),window.addEventListener(s.Ks.POINTER_UP,l),!0},this.clearSelectionIfNotUsingSelection=function(){\"selection\"!==e.state.elementType&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})},this.handleSelectionOnPointerDown=function(t,n){if(\"selection\"===e.state.elementType){var r=e.scene.getElements(),a=ci(r,e.state);if(1!==a.length||e.state.editingLinearElement)a.length>1&&(n.resize.handleType=Qa(ot(a),n.origin.x,n.origin.y,e.state.zoom,t.pointerType));else{var o=qa(r,e.state,n.origin.x,n.origin.y,e.state.zoom,t.pointerType);null!=o&&(e.setState({resizingElement:o.element}),n.resize.handleType=o.transformHandleType)}if(n.resize.handleType)On(e.canvas,Ja({transformHandleType:n.resize.handleType})),n.resize.isResizing=!0,n.resize.offset=jn(function(e,t,n,r){var a,o=1===t.length?et(t[0]):ot(t),i=o[0],l=o[1],c=o[2],s=o[3],u=(i+c)\/2,d=(l+s)\/2,p=1===t.length?t[0].angle:0;switch(n=(a=Ge(n,r,u,d,-p))[0],r=a[1],e){case\"n\":return Ge(n-(i+c)\/2,r-l,0,0,p);case\"s\":return Ge(n-(i+c)\/2,r-s,0,0,p);case\"w\":return Ge(n-i,r-(l+s)\/2,0,0,p);case\"e\":return Ge(n-c,r-(l+s)\/2,0,0,p);case\"nw\":return Ge(n-i,r-l,0,0,p);case\"ne\":return Ge(n-c,r-l,0,0,p);case\"sw\":return Ge(n-i,r-s,0,0,p);case\"se\":return Ge(n-c,r-s,0,0,p);default:return[0,0]}}(n.resize.handleType,a,n.origin.x,n.origin.y)),1===a.length&&He(a[0])&&2===a[0].points.length&&(n.resize.arrowDirection=(u=n.resize.handleType,d=a[0],p=d.points[1],f=p[0],h=p[1],\"nw\"===u&&(f<0||h<0)||\"ne\"===u&&f>=0||\"sw\"===u&&f<=0||\"se\"===u&&(f>0||h>0)?\"end\":\"origin\"));else{var i;if(e.state.editingLinearElement){var l=ro.handlePointerDown(t,e.state,(function(t){return e.setState(t)}),Wp,n.origin);if(l.hitElement&&(n.hit.element=l.hitElement),l.didAddPoint)return!0}n.hit.element=null!==(i=n.hit.element)&&void 0!==i?i:e.getElementAtPosition(n.origin.x,n.origin.y),n.hit.allHitElements=e.getElementsAtPosition(n.origin.x,n.origin.y);var c=n.hit.element,s=n.hit.allHitElements.some((function(t){return e.isASelectedElement(t)}));if(null!==c&&s||t.shiftKey||n.hit.hasHitCommonBoundingBoxOfSelectedElements||e.clearSelection(c),null!=c){if(t[Ft])return e.setState((function(t){return Fp(Fp({},function(e,t){var n;return Er(Er({},e),{},{editingGroupId:t.groupIds.length?t.groupIds[0]:null,selectedGroupIds:{},selectedElementIds:(n={},n[t.id]=!0,n)})}(t,c)),{},{previousSelectedElementIds:e.state.selectedElementIds})})),!1;e.state.selectedElementIds[c.id]||(e.state.editingGroupId&&!Tr(c,e.state.editingGroupId)&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}),s||n.hit.hasHitCommonBoundingBoxOfSelectedElements||(e.setState((function(t){var n;return Mr(Fp(Fp({},t),{},{selectedElementIds:Fp(Fp({},t.selectedElementIds),{},(n={},n[c.id]=!0,n))}),e.scene.getElements())})),n.hit.wasAddedToSelection=!0))}e.setState({previousSelectedElementIds:e.state.selectedElementIds})}}var u,d,p,f,h;return!1},this.handleTextOnPointerDown=function(t,n){var r;\"text\"!==(null===(r=e.state.editingElement)||void 0===r?void 0:r.type)&&(e.startTextEditing({sceneX:n.origin.x,sceneY:n.origin.y,insertAtParentCenter:!t.altKey}),Cn(e.canvas),e.state.elementLocked||e.setState({elementType:\"selection\"}))},this.handleLinearElementOnPointerDown=function(t,n,r){if(e.state.multiElement){var a=e.state.multiElement;if(\"line\"===a.type&&Ye(a.points,e.state.zoom.value))return fr(a,{lastCommittedPoint:a.points[a.points.length-1]}),void e.actionManager.executeAction(Cc);var o=a.x,i=a.y,l=a.lastCommittedPoint;if(a.points.length>1&&l&&Ue(r.origin.x-o,r.origin.y-i,l[0],l[1])<s.qx)return void e.actionManager.executeAction(Cc);e.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[a.id]=!0,t))}})),fr(a,{lastCommittedPoint:a.points[a.points.length-1]}),On(e.canvas,s.oc.POINTER)}else{var c=$e(r.origin.x,r.origin.y,\"draw\"===n?null:e.state.gridSize),u=c[0],d=c[1],p=e.state,f=p.currentItemStartArrowhead,h=p.currentItemEndArrowhead,m=\"arrow\"===n?[f,h]:[null,null],g=m[0],v=m[1],b=Hr({type:n,x:u,y:d,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemLinearStrokeSharpness,startArrowhead:g,endArrowhead:v});e.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[b.id]=!1,t))}})),fr(b,{points:Np(Np([],b.points),[[0,0]])});var y=bo(r.origin,e.scene);e.scene.replaceAllElements(Np(Np([],e.scene.getElementsIncludingDeleted()),[b])),e.setState({draggingElement:b,editingElement:b,startBoundElement:y,suggestedBindings:[]})}},this.createGenericElementOnPointerDown=function(t,n){var r=$e(n.origin.x,n.origin.y,e.state.gridSize),a=r[0],o=r[1],i=Dr({type:t,x:a,y:o,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemStrokeSharpness});\"selection\"===i.type?e.setState({selectionElement:i,draggingElement:i}):(e.scene.replaceAllElements(Np(Np([],e.scene.getElementsIncludingDeleted()),[i])),e.setState({multiElement:null,draggingElement:i,editingElement:i}))},this.updateBindingEnabledOnPointerMove=function(t){var n=function(e){return!e[Ft]}(t);e.state.isBindingEnabled!==n&&e.setState({isBindingEnabled:n})},this.maybeSuggestBindingAtCursor=function(t){var n=bo(t,e.scene);e.setState({suggestedBindings:null!=n?[n]:[]})},this.maybeSuggestBindingForLinearElementAtCursor=function(t,n,r,a){var o=bo(r,e.scene);e.setState({suggestedBindings:null==o||mo(t,null==a?void 0:a.id,o)?[]:[o]})},this.handleCanvasRef=function(t){var n,r,a;null!==t?(e.canvas=t,e.rc=De.canvas(e.canvas),e.canvas.addEventListener(s.Ks.WHEEL,e.handleWheel,{passive:!1}),e.canvas.addEventListener(s.Ks.TOUCH_START,e.onTapStart),e.canvas.addEventListener(s.Ks.TOUCH_END,e.onTapEnd)):(null===(n=e.canvas)||void 0===n||n.removeEventListener(s.Ks.WHEEL,e.handleWheel),null===(r=e.canvas)||void 0===r||r.removeEventListener(s.Ks.TOUCH_START,e.onTapStart),null===(a=e.canvas)||void 0===a||a.removeEventListener(s.Ks.TOUCH_END,e.onTapEnd))},this.handleCanvasOnDrop=function(){var t=p()((function(t){var n,r,a,o,i,l,c,u,d,p,f;return Hp(this,(function(h){switch(h.label){case 0:return h.trys.push([0,3,,4]),\"image\/png\"!==(null==(r=t.dataTransfer.files[0])?void 0:r.type)&&\"image\/svg+xml\"!==(null==r?void 0:r.type)?[3,2]:[4,Ws(r,e.state)];case 1:return a=h.sent(),o=a.elements,i=a.appState,e.syncActionResult({elements:o,appState:Fp(Fp({},i||e.state),{},{isLoading:!1}),commitToHistory:!0}),[2];case 2:return[3,4];case 3:return l=h.sent(),[2,e.setState({isLoading:!1,errorMessage:l.message})];case 4:if(\"\"!==(c=t.dataTransfer.getData(s.LO.excalidrawlib)))return e.addElementsFromPasteOrLibrary(JSON.parse(c),t.clientX,t.clientY),[2];if(!(\"application\/json\"===(null==(u=null===(n=t.dataTransfer)||void 0===n?void 0:n.files[0])?void 0:u.type)||null!=u&&u.name.endsWith(\".excalidraw\")))return[3,9];if(e.setState({isLoading:!0}),!(\"chooseFileSystemEntries\"in window)&&!(\"showOpenFilePicker\"in window))return[3,8];h.label=5;case 5:return h.trys.push([5,7,,8]),d=t.dataTransfer.items[0],p=u,[4,d.getAsFileSystemHandle()];case 6:return p.handle=h.sent(),[3,8];case 7:return f=h.sent(),console.warn(f.name,f.message),[3,8];case 8:return Ws(u,e.state).then((function(t){var n=t.elements,r=t.appState;return e.syncActionResult({elements:n,appState:Fp(Fp({},r||e.state),{},{isLoading:!1}),commitToHistory:!0})})).catch((function(t){e.setState({isLoading:!1,errorMessage:t.message})})),[3,10];case 9:(null==u?void 0:u.type)===s.LO.excalidrawlib||null!=u&&u.name.endsWith(\".excalidrawlib\")?Ps.importLibrary(u).then((function(){e.setState({isLibraryOpen:!1})})).catch((function(t){return e.setState({isLoading:!1,errorMessage:t.message})})):e.setState({isLoading:!1,errorMessage:C(\"alerts.couldNotLoadInvalidFile\")}),h.label=10;case 10:return[2]}}))}));return function(e){return t.apply(this,arguments)}}(),this.handleCanvasContextMenu=function(t){t.preventDefault(),e.openContextMenu(t)},this.maybeDragNewGenericElement=function(t,n){var r=e.state.draggingElement,a=t.lastCoords;if(r)if(\"selection\"===r.type)Uo(r,e.state.elementType,t.origin.x,t.origin.y,a.x,a.y,Sn(t.origin.x,a.x),Sn(t.origin.y,a.y),dn(n),un(n));else{var o=$e(a.x,a.y,e.state.gridSize),i=o[0],l=o[1];Uo(r,e.state.elementType,t.originInGrid.x,t.originInGrid.y,i,l,Sn(t.originInGrid.x,i),Sn(t.originInGrid.y,l),dn(n),un(n)),e.maybeSuggestBindingForAll([r])}},this.maybeHandleResize=function(t,n){var r=ci(e.scene.getElements(),e.state),a=t.resize.handleType;e.setState({isResizing:a&&\"rotation\"!==a,isRotating:\"rotation\"===a});var o=t.lastCoords,i=$e(o.x-t.resize.offset.x,o.y-t.resize.offset.y,e.state.gridSize),l=i[0],c=i[1];return!!function(e,t,n,r,a,o,i,l,c,s,u){if(1===n.length){var d=n[0];return\"rotation\"===t?(Ho(d,l,c,a),wo(d)):!He(d)||2!==d.points.length||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?!Be(d)||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?t&&Go(e.originalElements.get(d.id),i,d,t,o,l,c):(Wo(d,t,o,l,c),wo(d)):No(d,r,a,l,c),!0}if(n.length>1){if(\"rotation\"===t)return Ko(e,n,l,c,a,s,u),!0;if(\"nw\"===t||\"ne\"===t||\"sw\"===t||\"se\"===t)return Vo(n,t,l,c),!0}return!1}(t,a,r,t.resize.arrowDirection,pn(n),un(n),dn(n),l,c,t.resize.center.x,t.resize.center.y)&&(e.maybeSuggestBindingForAll(r),!0)},this.openContextMenu=function(t){var n,r=t.clientX,a=t.clientY,o=Pn({clientX:r,clientY:a},e.state),i=o.x,l=o.y,c=Ou.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),s=Mu.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),u=\"separator\",d=gc(),p=e.scene.getElements(),f=e.getElementAtPosition(i,l),h=[];if(Qs&&p.length>0&&h.push($u),qs&&p.length>0&&h.push(Qu),f)e.state.selectedElementIds[f.id]||e.setState({selectedElementIds:(n={},n[f.id]=!0,n)}),e.state.viewModeEnabled?Cd({options:Np([navigator.clipboard&&Zu],h),top:a,left:r,actionManager:e.actionManager,appState:e.state}):Cd({options:Np(Np([d&&qu,d&&navigator.clipboard&&Zu,d&&navigator.clipboard&&{name:\"paste\",perform:function(t,n){return e.pasteFromClipboard(null),{commitToHistory:!1}},contextItemLabel:\"labels.paste\"},d&&u],h),[u,vu,bu,u,c&&Ou,s&&Mu,(c||s)&&u,_u,u,Bl,Hl,Nl,Rl,u,Yl,Ml]),top:a,left:r,actionManager:e.actionManager,appState:e.state});else{var m=Np(Np([],h),[void 0===e.props.gridModeEnabled&&td,void 0===e.props.zenModeEnabled&&ad,void 0===e.props.viewModeEnabled&&zp,ld]);if(Cd({options:m,top:a,left:r,actionManager:e.actionManager,appState:e.state}),e.state.viewModeEnabled)return;Cd({options:[d&&navigator.clipboard&&{name:\"paste\",perform:function(t,n){return e.pasteFromClipboard(null),{commitToHistory:!1}},contextItemLabel:\"labels.paste\"},d&&navigator.clipboard&&u,Qs&&p.length>0&&$u,qs&&p.length>0&&Qu,(Qs&&p.length>0||qs&&p.length>0)&&u,Gl,u,void 0===e.props.gridModeEnabled&&td,void 0===e.props.zenModeEnabled&&ad,void 0===e.props.viewModeEnabled&&zp,ld],top:a,left:r,actionManager:e.actionManager,appState:e.state})}},this.handleWheel=Bn((function(t){if(t.preventDefault(),!Xp){var n=t.deltaX,r=t.deltaY,a=e.state,o=a.selectedElementIds,i=a.previousSelectedElementIds;if(t.metaKey||t.ctrlKey){var l=Math.sign(r),c=Math.abs(r);c>10&&(c=10),c*=l,0!==Object.keys(i).length&&setTimeout((function(){e.setState({selectedElementIds:i,previousSelectedElementIds:{}})}),1e3);var u=e.state.zoom.value-c\/100;return u+=Math.log10(Math.max(1,e.state.zoom.value))*-l,u=Math.round(u*s.V4*100)\/(100*s.V4),e.setState((function(e){var t=e.zoom,n=e.offsetLeft,r=e.offsetTop;return{zoom:bi(yi(u),t,{left:n,top:r},{x:Kp,y:Up}),selectedElementIds:{},previousSelectedElementIds:0!==Object.keys(o).length?o:i,shouldCacheIgnoreZoom:!0}})),void e.resetShouldCacheIgnoreZoomDebounced()}t.shiftKey?e.setState((function(e){var t=e.zoom;return{scrollX:e.scrollX-(r||n)\/t.value}})):e.setState((function(e){var t=e.zoom,a=e.scrollX,o=e.scrollY;return{scrollX:a-n\/t.value,scrollY:o-r\/t.value}}))}})),this.savePointer=function(t,n,r){var a,o;if(t&&n){var i=Pn({clientX:t,clientY:n},e.state);isNaN(i.x)||isNaN(i.y),null===(a=(o=e.props).onPointerUpdate)||void 0===a||a.call(o,{pointer:i,button:r,pointersMap:ef.pointers})}},this.resetShouldCacheIgnoreZoomDebounced=xn((function(){e.unmounted||e.setState({shouldCacheIgnoreZoom:!1})}),300)};\"production\"!==s.Vi.TEST&&\"production\"!==s.Vi.DEVELOPMENT||(window.h=window.h||{},Object.defineProperties(window.h,{elements:{configurable:!0,get:function(){return this.app.scene.getElementsIncludingDeleted()},set:function(e){return this.app.scene.replaceAllElements(e)}},history:{configurable:!0,get:function(){return Wp}},library:{configurable:!0,value:Ps}}));const rf=tf;n(8234),n(4651);var af=function(e){var t=e.width,n=e.height,r=e.offsetLeft,a=e.offsetTop,o=e.onChange,i=e.initialData,s=e.excalidrawRef,u=e.onCollabButtonClick,d=e.isCollaborating,p=e.onPointerUpdate,f=e.onExportToBackend,h=e.renderFooter,m=e.langCode,v=void 0===m?g.code:m,b=e.viewModeEnabled,y=e.zenModeEnabled,w=e.gridModeEnabled;return(0,l.useEffect)((function(){var e=function(e){\"number\"==typeof e.scale&&1!==e.scale&&e.preventDefault()};return document.addEventListener(\"touchmove\",e,{passive:!1}),function(){document.removeEventListener(\"touchmove\",e)}}),[]),c().createElement(I,{langCode:v},c().createElement(mc,null,c().createElement(rf,{width:t,height:n,offsetLeft:r,offsetTop:a,onChange:o,initialData:i,excalidrawRef:s,onCollabButtonClick:u,isCollaborating:d,onPointerUpdate:p,onExportToBackend:f,renderFooter:h,langCode:v,viewModeEnabled:b,zenModeEnabled:y,gridModeEnabled:w})))},of=function(e,t){e.initialData;var n=i()(e,[\"initialData\"]),r=(t.initialData,i()(t,[\"initialData\"])),a=Object.keys(e),o=Object.keys(t);return a.length===o.length&&a.every((function(e){return n[e]===r[e]}))};af.defaultProps={lanCode:g.code};var lf=(0,l.forwardRef)((function(e,t){return c().createElement(af,a()({},e,{excalidrawRef:t}))}));const cf=c().memo(lf,of);n(6009);const sf=cf},4698:t=>{\"use strict\";t.exports=e},6207:e=>{\"use strict\";e.exports=t}},l={};function c(e){if(l[e])return l[e].exports;var t=l[e]={id:e,exports:{}};return i[e](t,t.exports,c),t.exports}return c.m=i,c.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return c.d(t,{a:t}),t},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,c.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if(\"object\"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&\"function\"==typeof e.then)return e}var a=Object.create(null);c.r(a);var o={};n=n||[null,r({}),r([]),r(r)];for(var i=2&t&&e;\"object\"==typeof i&&!~n.indexOf(i);i=r(i))Object.getOwnPropertyNames(i).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,c.d(a,o),a},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.f={},c.e=e=>Promise.all(Object.keys(c.f).reduce(((t,n)=>(c.f[n](e,t),t)),[])),c.u=e=>\"excalidraw-assets\/\"+{9:\"image\",43:\"i18n-de-DE-json\",60:\"i18n-ko-KR-json\",62:\"i18n-zh-TW-json\",137:\"i18n-ja-JP-json\",149:\"i18n-pt-PT-json\",164:\"i18n-kab-KAB-json\",196:\"i18n-nl-NL-json\",213:\"i18n-tr-TR-json\",242:\"i18n-my-MM-json\",246:\"i18n-nb-NO-json\",262:\"i18n-he-IL-json\",280:\"i18n-pa-IN-json\",304:\"i18n-zh-CN-json\",317:\"i18n-es-ES-json\",351:\"i18n-ca-ES-json\",364:\"i18n-fr-FR-json\",381:\"i18n-pt-BR-json\",384:\"i18n-bg-BG-json\",401:\"i18n-sk-SK-json\",465:\"i18n-it-IT-json\",472:\"i18n-fi-FI-json\",491:\"i18n-id-ID-json\",526:\"i18n-el-GR-json\",558:\"i18n-ar-SA-json\",565:\"i18n-oc-FR-json\",583:\"i18n-uk-UA-json\",661:\"i18n-hu-HU-json\",698:\"i18n-sv-SE-json\",710:\"i18n-fa-IR-json\",736:\"vendor\",752:\"i18n-ro-RO-json\",852:\"i18n-pl-PL-json\",869:\"i18n-ru-RU-json\",920:\"i18n-nn-NO-json\",933:\"i18n-hi-IN-json\"}[e]+\"-\"+{9:\"4c2d5c85067885b645af\",43:\"4823c48393124a3bc5fc\",60:\"75e2d73e015b1ef6a00d\",62:\"a0c2b649e55b974d40c5\",137:\"f474ca90ec8965ba76bc\",149:\"c9da04f1ebc22a355f86\",164:\"2fe8f05383d9a2909403\",196:\"2f881bef64ae25c364ac\",213:\"c242fdecb3c6041308d2\",242:\"ce2b98acffdb55807b6f\",246:\"c2cc1faff5c7d28c9137\",262:\"31401716f9d4fa7a8bbe\",280:\"e7099ca1ca91c8c95b90\",304:\"79915d2ad7106b7382fd\",317:\"7cd687c81182a9b5ed38\",351:\"6ac46acbf7738365c825\",364:\"61ce1bd7bc0a3d36b14d\",381:\"364638bb52b1d6ba5d98\",384:\"a01c652fed411bb7e219\",401:\"0e83170f656b45bc1b89\",465:\"29c2adfbbe19b39bc050\",472:\"0890c5432a9aab3f4334\",491:\"43dd7122a92d9af1cc73\",526:\"71e0e6e546481de5271a\",558:\"3be99fb5f680b3d25ba6\",565:\"deee05849e45de2af8e7\",583:\"0605fca3af66a20c3875\",661:\"b10cefa097a941371ce6\",698:\"2e1cd9ef4c7da46616c6\",710:\"cb2081671627c079b0fe\",736:\"3525c448906ddcdcb701\",752:\"22baa4391c498a5fffc5\",852:\"488381cf4df470095153\",869:\"f6493c191c20d85e2b08\",920:\"ee5d2b7fda6783d75f36\",933:\"f3ae9dac7b038b673e45\"}[e]+\".js\",c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a={},o=\"Excalidraw:\",c.l=(e,t,n,r)=>{if(a[e])a[e].push(t);else{var i,l;if(void 0!==n)for(var s=document.getElementsByTagName(\"script\"),u=0;u<s.length;u++){var d=s[u];if(d.getAttribute(\"src\")==e||d.getAttribute(\"data-webpack\")==o+n){i=d;break}}i||(l=!0,(i=document.createElement(\"script\")).charset=\"utf-8\",i.timeout=120,c.nc&&i.setAttribute(\"nonce\",c.nc),i.setAttribute(\"data-webpack\",o+n),i.src=e),a[e]=[t];var p=(t,n)=>{i.onerror=i.onload=null,clearTimeout(f);var r=a[e];if(delete a[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(n))),t)return t(n)},f=setTimeout(p.bind(null,void 0,{type:\"timeout\",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),l&&document.head.appendChild(i)}},c.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},c.p=\"\",(()=>{var e={163:0};c.f.j=(t,n)=>{var r=c.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var a=new Promise(((n,a)=>{r=e[t]=[n,a]}));n.push(r[2]=a);var o=c.p+c.u(t),i=new Error;c.l(o,(n=>{if(c.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var a=n&&(\"load\"===n.type?\"missing\":n.type),o=n&&n.target&&n.target.src;i.message=\"Loading chunk \"+t+\" failed.\\n(\"+a+\": \"+o+\")\",i.name=\"ChunkLoadError\",i.type=a,i.request=o,r[1](i)}}),\"chunk-\"+t,t)}};var t=(t,n)=>{for(var r,a,[o,i,l]=n,s=0,u=[];s<o.length;s++)a=o[s],c.o(e,a)&&e[a]&&u.push(e[a][0]),e[a]=0;for(r in i)c.o(i,r)&&(c.m[r]=i[r]);for(l&&l(c),t&&t(n);u.length;)u.shift()()},n=self.webpackChunkExcalidraw=self.webpackChunkExcalidraw||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),c(3956)})()}));\n};"],"names":["shadow$provide","global","require","module","exports","process","e","t","define","amd","Excalidraw","React","ReactDOM","self","c","l","id","i","n","r","a","5374","o","value","done","Promise","resolve","then","e.exports","arguments","apply","566","Object","defineProperty","enumerable","configurable","writable","6950","assign","length","prototype","hasOwnProperty","call","5474","getOwnPropertySymbols","indexOf","propertyIsEnumerable","8387","keys","6009","__esModule","default","insert","singleton","locals","1395","3211","5574","4518","3040","8623","4193","341","9705","7143","7428","8465","8680","205","8416","2816","1575","7287","8518","5849","9478","2680","3142","8234","4651","2189","487","identifier","base","s","u","concat","d","p","css","media","sourceMap","references","updater","push","g","document","createElement","attributes","nonce","nc","forEach","setAttribute","Error","appendChild","styleSheet","cssText","createTextNode","childNodes","removeChild","insertBefore","f","removeAttribute","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","m","h","bind","parentNode","querySelector","window","HTMLIFrameElement","contentDocument","head","filter","Boolean","join","all","atob","toString","splice","2829","parse","2051","788","code","slice","map","a.keys","7154","6479","7316","8328","Z","6121","2510","7972","190","6718","3623","103","7061","1498","666","849","6915","7030","3994","700","287","5657","7392","6065","83","1554","1970","961","4878","1988","3245","isMobileQuery","appearanceFilter","3645","t.toString","t.i","1667","test","hash","needQuotes","replace","9638","7464","8288","iC","qx","Iw","$e","wZ","ay","oc","Oh","Ks","Vi","$C","ut","v","_D","b","n5","y","rk","w","Hg","x","hs","E","eQ","k","S","LO","C","I","O","Gj","M","nM","T","Lg","HM","P","V4","A","EH","_","Gi","L","Math","PI","TEXT","CROSSHAIR","GRABBING","POINTER","MOVE","AUTO","MAIN","WHEEL","SECONDARY","TOUCH","COPY","PASTE","CUT","KEYDOWN","KEYUP","MOUSE_MOVE","RESIZE","UNLOAD","BLUR","DRAG_OVER","DROP","GESTURE_END","BEFORE_UNLOAD","GESTURE_START","GESTURE_CHANGE","POINTER_MOVE","POINTER_UP","STATE_CHANGE","TOUCH_START","TOUCH_END","HASHCHANGE","VISIBILITY_CHANGE","SCROLL","TEST","DEVELOPMENT","SHAPE_ACTIONS_MENU","excalidraw","excalidrawlib","LOCAL_STORAGE_LIBRARY","VIEW","ZEN","GRID","3956","pow","D","j","sqrt","z","B","max","min","H","N","cos","sin","R","F","W","Number","MAX_SAFE_INTEGER","K","V","G","U","round","hachureAngle","hachureGap","strokeWidth","ymin","ymax","islope","sort","abs","edge","re","match","type","text","RegExp","$1","parseFloat","substr","te","key","data","ae","oe","le","ie","asin","toFixed","tan","ue","xe","ops","pe","ke","roughness","disableMultiStroke","randomizer","seed","fe","curveStepCount","curveFitting","we","increment","rx","ry","he","Ce","ye","Se","estimatedPoints","opset","me","Oe","op","ge","maxRandomnessOffset","ve","ce","fillStyle","J","X","q","Q","$","Y","fillPolygon","be","ee","next","disableMultiStrokeFill","Ee","bowing","curveTightness","Me","je","Array","isArray","ze","Vn","getOwnPropertyDescriptor","Kn","getOwnPropertyDescriptors","defineProperties","dr","pr","xr","Er","Ar","_r","to","no","oo","jo","zo","Qo","$o","Sl","Cl","Fl","Wl","Kl","Ul","options","label","onChange","onClose","useRef","useEffect","current","focus","className","role","onKeyDown","find","keyBinding","toLowerCase","metaKey","altKey","ctrlKey","Yt","setTimeout","activeElement","sn","rtl","children","zt","Bt","jt","Ht","preventDefault","Vt","Gt","nativeEvent","stopImmediatePropagation","ref","onClick","currentTarget","title","toUpperCase","onFocus","icon","ic","group","useState","name","Suspense","fallback","Fragment","Ql","ac","onCloseRequest","target","right","left","lc","cc","vc","useContext","fc","bc","yc","xc","Ec","Dc","Lc","zc","jc","as","os","xs","Es","Hs","Ns","su","uu","hu","mu","wu","xu","ku","Su","Iu","Pu","Du","ju","Yu","Xu","Ju","ed","nd","rd","od","cd","sd","md","gd","Od","Md","zd","Bd","yp","Dp","jp","Rp","Fp","sf","defaultLang","getElementMap","ei","getSceneVersion","ti","getSyncableElements","Jo","languages","restore","Ms","restoreAppState","Os","restoreElements","Cs","EXCALIDRAW_ASSET_PATH","u2","i8","TypeError","return","throw","pop","trys","sent","Symbol","iterator","unshift","documentElement","dir","lang","startsWith","split","setPrototypeOf","__proto__","constructor","String","create","state","isLoading","componentDidMount","t.prototype.componentDidMount","props","langCode","setState","render","t.prototype.render","Component","helper","_fillPolygon","connectingLines","renderLines","doubleLineOps","splitOnIntersections","midPointInPolygon","point","distance","shift","dotsOnLines","fillWeight","ceil","randOffsetWithRange","ellipse","dashedLine","dashOffset","dashGap","floor","atan","zigzagOffset","zigzagLines","imul","random","randOffset","Pe","defaultOptions","stroke","combineNestedSvgPaths","config","_o","newSeed","_d","shape","sets","line","rectangle","fill","Ie","circle","linearPath","arc","curve","polygon","path","simplification","opsToPath","trim","toPaths","fillSketch","Ae","canvas","ctx","getContext","gen","draw","getDefaultOptions","save","strokeStyle","lineWidth","strokeLineDash","setLineDash","strokeLineDashOffset","lineDashOffset","_drawToContext","fillLineDash","fillLineDashOffset","beginPath","moveTo","bezierCurveTo","lineTo","Le","svg","ownerDocument","createElementNS","_e","De","generator","Be","He","Ne","Re","We","Ge","Ve","Ke","Ye","hypot","Xe","qe","Ze","Je","et","rt","width","height","tt","nt","reduce","minY","minX","maxX","maxY","points","$n","get","at","angle","ot","it","strokeSharpness","tr","lt","ct","st","Q6","iQ","pl","ht","QN","iN","sl","ek","LR","er","$y","dt","canvasBackground","ix","MA","elementBackground","elementStroke","Sn","pt","ft","navigator","platform","Ft","gn","charAt","vn","HTMLElement","dataset","HTMLBRElement","HTMLTextAreaElement","HTMLInputElement","yn","fontFamily","fontSize","wn","body","style","position","whiteSpace","font","innerText","offsetWidth","offsetHeight","display","overflow","offsetTop","baseline","xn","clearTimeout","flush","a.flush","cancel","a.cancel","Cn","cursor","On","Mn","Tn","fullscreenElement","nodeName","In","Pn","zoom","clientX","translation","offsetLeft","scrollX","clientY","scrollY","An","sceneX","sceneY","_n","getComputedStyle","getPropertyValue","Ln","jn","zn","Bn","unstable_batchedUpdates","Hn","symbol","Nn","content","Rn","Map","innerHeight","Date","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","appearance","collaborators","currentChartType","currentItemBackgroundColor","currentItemEndArrowhead","currentItemFillStyle","currentItemFontFamily","currentItemFontSize","currentItemLinearStrokeSharpness","currentItemOpacity","currentItemRoughness","currentItemStartArrowhead","currentItemStrokeColor","currentItemStrokeSharpness","currentItemStrokeStyle","currentItemStrokeWidth","currentItemTextAlign","cursorButton","draggingElement","editingElement","editingGroupId","editingLinearElement","elementLocked","elementType","errorMessage","exportBackground","exportEmbedScene","exportWithDarkMode","fileHandle","gridSize","isBindingEnabled","isLibraryOpen","isResizing","isRotating","lastPointerDownWith","multiElement","openMenu","pasteDialog","shown","previousSelectedElementIds","resizingElement","scrolledOutside","selectedElementIds","selectedGroupIds","selectionElement","shouldAddWatermark","shouldCacheIgnoreZoom","showHelpDialog","showStats","startBoundElement","suggestedBindings","toastMessage","viewBackgroundColor","innerWidth","zenModeEnabled","viewModeEnabled","Fn","browser","export","Wn","Un","Xn","Zn","qn","globalAlpha","opacity","isConnected","strokeColor","textAlign","fillText","remove","Qn","WeakMap","backgroundColor","nr","delete","startArrowhead","endArrowhead","arrow","bar","dot","set","ar","translate","fillRect","canvasZoom","devicePixelRatio","Yn","scale","element","canvasOffsetX","canvasOffsetY","rotate","drawImage","ir","callbacks","Set","nonDeletedElements","elements","elementsMap","mapElementToScene","e.mapElementToScene","sceneMapById","sceneMapByElement","getScene","e.getScene","getElementsIncludingDeleted","e.prototype.getElementsIncludingDeleted","getElements","e.prototype.getElements","getElement","e.prototype.getElement","getNonDeletedElement","e.prototype.getNonDeletedElement","isDeleted","getNonDeletedElements","e.prototype.getNonDeletedElements","replaceAllElements","e.prototype.replaceAllElements","clear","ni","informMutation","e.prototype.informMutation","from","addCallback","e.prototype.addCallback","has","add","destroy","e.prototype.destroy","cr","now","sr","ur","crypto","getRandomValues","Uint8Array","fr","version","versionNonce","hr","mr","gr","sign","vr","br","yr","wr","kr","groupIds","includes","fromEntries","Cr","Or","entries","Mr","ci","Ir","Lr","boundElementIds","Dr","jr","verticalAlign","zr","Hr","lastCommittedPoint","startBinding","endBinding","Nr","getPrototypeOf","Rr","Fr","mouse","pen","touch","Wr","Gr","Vr","nw","se","Kr","ne","sw","Ur","Yr","rotation","Xr","Zr","qr","Qr","$r","Jr","ta","na","ra","aa","la","sa","ua","da","ga","va","ba","ya","xa","Oa","Sa","threshold","check","Ea","ka","Ia","Ca","Da","console","warn","ja","La","Ma","Ta","some","Xa","Ba","za","Na","Ra","flatMap","Ga","Ua","Za","qa","transformHandleType","Qa","$a","Ja","eo","ro","elementId","normalizePoints","lastUncommittedPoint","activePointIndex","isDragging","pointerOffset","endBindingElement","startBindingElement","e.getElement","handlePointDragging","e.handlePointDragging","createPointAt","movePoint","handlePointerUp","e.handlePointerUp","bo","getPointAtIndexGlobalCoordinates","handlePointerDown","e.handlePointerDown","didAddPoint","hitElement","resumeRecording","getPointIndexUnderCursor","lo","handlePointerMove","e.handlePointerMove","getPointsGlobalCoordinates","e.getPointsGlobalCoordinates","e.getPointAtIndexGlobalCoordinates","pointFromAbsoluteCoords","e.pointFromAbsoluteCoords","e.getPointIndexUnderCursor","POINT_HANDLE_SIZE","e.createPointAt","e.normalizePoints","movePointByOffset","e.movePointByOffset","e.movePoint","ao","co","ho","fo","so","Oo","uo","To","po","yo","go","vi","gap","wo","newSize","Eo","simultaneouslyUpdated","So","ko","Co","Io","Po","Ao","Lo","Do","Bo","Ro","Fo","size","Vo","Ko","atan2","originalElements","Uo","Yo","Zo","qo","ai","ii","horizontal","vertical","isOverEither","isOverHorizontal","isOverVertical","li","si","ui","scenePoint","viewportDimensions","di","pi","fi","hi","bi","top","yi","wi","forwardRef","useImperativeHandle","visible","hidden","ToolIcon","selected","keyBindingLabel","showAriaLabel","checked","defaultProps","xi","Ei","ki","Si","mirror","focusable","viewBox","Ci","Oi","Mi","Ti","Ii","Pi","Ai","_i","Li","Di","ji","zi","Bi","Hi","Ni","Ri","Fi","memo","Wi","strokeLinejoin","Ki","strokeLinecap","Ui","Yi","Xi","Zi","qi","Qi","strokeDasharray","$i","Ji","el","tl","marginLeft","nl","rl","al","ol","il","fillRule","clipRule","ll","cl","ul","dl","fl","hl","ml","gl","vl","bl","yl","flip","transform","wl","xl","El","kl","Ol","Ml","perform","appState","commitToHistory","contextItemLabel","keyTest","Nt","Wt","PanelComponent","updateData","Tl","Il","Pl","Al","reverse","_l","Bl","keyPriority","shiftKey","xt","Hl","wt","Nl","Rl","Gl","Xt","Vl","Yl","Xl","Zt","Zl","active","ql","fitInViewport","useLayoutEffect","getBoundingClientRect","contains","addEventListener","removeEventListener","$l","Option","color","Jl","flat","ec","colors","showInput","tabIndex","tc","useCallback","spellCheck","onBlur","rc","sc","uc","dc","step","onWheel","stopPropagation","deltaY","every","pc","createContext","hc","matchMedia","matches","addListener","removeListener","mc","Provider","confirm","mt","vt","gt","bt","Ot","yt","wc","kt","Et","kc","Sc","Cc","blur","Oc","env","REACT_APP_GOOGLE_ANALYTICS_ID","gtag","event_category","event_label","JEST_WORKER_ID","Mc","Tc","handleFocus","o.handleFocus","getSelection","createRange","selectNodeContents","removeAllRanges","addRange","handleBlur","o.handleBlur","handleKeyDown","o.handleKeyDown","isComposing","keyCode","makeEditable","o.makeEditable","contentEditable","suppressContentEditableWarning","Ic","long","Pc","Ac","MOON","SUN","_c","Bc","Hc","charCodeAt","background","ACTIVE","AWAY","IDLE","Nc","textBaseline","getImageData","Rc","strokeRect","Fc","Wc","renderScrollbars","renderSelection","renderOptimizations","renderGrid","atLeastOneVisibleElement","clearRect","Yc","Uc","remoteSelectedElementIds","elementX1","elementY1","elementX2","elementY2","selectionColors","getLineDash","Gc","remotePointerViewportCoords","remotePointerUserStates","remotePointerButton","closePath","remotePointerUsernames","measureText","actualBoundingBoxDescent","actualBoundingBoxAscent","parseInt","bottom","quadraticCurveTo","scrollBars","Zc","offsetX","offsetY","fn","textContent","qc","$c","exportPadding","es","ns","Jc","metadata","innerHTML","Qc","rs","ds","exec","ps","fs","ss","reason","us","spreadsheet","labels","values","ms","gs","chartWidth","ls","chartHeight","vs","cs","is","toLocaleString","bs","ys","ws","message","ks","Ts","Is","Ps","importLibrary","e.importLibrary","Gs","library","loadLibrary","saveLibrary","libraryCache","resetLibrary","Ps.resetLibrary","localStorage","removeItem","Ps.loadLibrary","getItem","error","Ps.saveLibrary","setItem","As","_s","source","location","origin","Ls","Blob","fileName","description","extensions","Ds","mimeTypes","Ws","js","zs","Bs","Rs","decodePngMetadata","FileReader","readAsText","onloadend","n.onloadend","readyState","DONE","result","decodeSvgMetadata","handle","Vs","toBlob","Ys","Xs","Zs","clipboard","qs","Qs","HTMLCanvasElement","$s","Us","created","au","Js","eu","tu","clipboardData","getData","readText","nu","ru","write","ClipboardItem","writeText","getAttribute","border","padding","margin","pageYOffset","scrollTop","select","setSelectionRange","execCommand","iu","lu","encodeSvgMetadata","outerHTML","encodePngMetadata","blob","cu","du","pu","fu","nn","$t","justifyContent","marginTop","marginBottom","gu","vu","Mt","bu","At","yu","requestFullscreen","exitFullscreen","It","Kt","Eu","Cu","Ou","lastIndexOf","contextItemPredicate","Tt","Mu","Tu","substring","username","pointer","Au","_u","Lu","zu","Bu","axis","Hu","Nu","Ru","Fu","Wu","Gu","midX","midY","Vu","Ku","findIndex","Uu","space","Pt","Zu","qu","_t","Qu","$u","exportSelection","exportColorScheme","td","Ct","ad","Lt","ld","ud","syncHistory","dd","actions","renderAction","this.renderAction","getAppState","app","this.updater","registerAction","e.prototype.registerAction","registerAll","e.prototype.registerAll","e.prototype.handleKeyDown","executeAction","e.prototype.executeAction","pd","hd","fd","vd","yd","elementCache","recording","stateHistory","redoStack","lastEntry","generateEntry","this.generateEntry","dehydrateHistoryEntry","hydrateHistoryEntry","e.prototype.hydrateHistoryEntry","e.prototype.dehydrateHistoryEntry","getSnapshotForTest","e.prototype.getSnapshotForTest","e.prototype.clear","shouldCreateEntry","e.prototype.shouldCreateEntry","pushEntry","e.prototype.pushEntry","clearRedoStack","e.prototype.clearRedoStack","redoOnce","e.prototype.redoOnce","undoOnce","e.prototype.undoOnce","setCurrentState","e.prototype.setCurrentState","e.prototype.resumeRecording","record","e.prototype.record","wd","an","tn","qt","x1","y1","x2","y2","Jt","Qt","on","rn","xd","cut","copy","paste","copyStyles","pasteStyles","selectAll","deleteSelectedElements","duplicateSelection","sendBackward","bringForward","sendToBack","bringToFront","copyAsPng","copyAsSvg","ungroup","gridMode","zenMode","stats","addToLibrary","viewMode","Ed","actionManager","classList","onContextMenu","dangerous","checkmark","kd","Sd","unmountComponentAtNode","Cd","Td","align","alignItems","Id","justifyItems","Pd","Ad","setAppState","Ld","marginInlineStart","Dd","jd","isCollaborating","collaboratorCount","Hd","Nd","Rd","createPortal","labelledBy","maxWidth","Fd","autofocus","querySelectorAll","small","Wd","Gd","Vd","Kd","Ud","Yd","Xd","onExportToPng","onExportToSvg","onExportToClipboard","onExportToBackend","catch","trunc","Zd","qd","side","Qd","xmlns","href","rel","transformOrigin","$d","Jd","ep","pendingElements","onRemoveFromLibrary","tagName","onMouseEnter","onMouseLeave","draggable","onDragStart","dataTransfer","setData","np","CHECKED","UNCHECKED","rp","heading","ap","mobile","UserList_mobile","ip","libraryMenu","exportButton","onCollabButtonClick","onLockToggle","renderCustomFooter","marginRight","lp","chartType","cp","onInsertChart","sp","up","dp","flexDirection","flexWrap","pp","fp","caption","hp","lineHeight","flex","minWidth","shortcuts","mp","isOr","gp","vp","bp","wp","onAddToLibrary","onInsertShape","setLibraryItems","xp","onClickOutside","Element","closest","race","Sp","Ep","onInsertElements","showExitZenModeBtn","toggleZenMode","zIndex","maxHeight","kp","Tp","Cp","Pp","Ap","Op","Mp","scene","total","_p","colSpan","Lp","clearToast","zp","Dt","Bp","Hp","Np","Wp","Gp","Vp","Kp","Up","Yp","Xp","Zp","qp","Qp","$p","Jp","tf","nf","excalidrawRef","gridModeEnabled","getCanvasOffsets","readyPromise","reject","ready","updateScene","resetScene","getSceneElementsIncludingDeleted","history","resetHistory","setScrollToCenter","getSceneElements","syncActionResult","cn","ln","renderCanvas","t.prototype.renderCanvas","handleCanvasRef","handleCanvasContextMenu","onPointerMove","handleCanvasPointerMove","onPointerUp","removePointer","onPointerCancel","onTouchMove","handleTouchMove","onPointerDown","handleCanvasPointerDown","onDoubleClick","handleCanvasDoubleClick","onDrop","handleCanvasOnDrop","renderFooter","excalidrawContainerRef","toggleLock","addElementsFromPasteOrLibrary","toggleStats","onSceneUpdated","addEventListeners","initializeScene","componentWillUnmount","t.prototype.componentWillUnmount","unmounted","removeEventListeners","t.prototype.removeEventListeners","onCopy","pasteFromClipboard","onCut","updateCurrentCursorPosition","onKeyUp","onResize","onUnload","disableEvent","onGestureStart","onGestureChange","onGestureEnd","t.prototype.addEventListeners","passive","fonts","onFontLoaded","onScroll","componentDidUpdate","t.prototype.componentDidUpdate","updateLanguage","toggle","userState","button","resetTapTwice","t.resetTapTwice","addTextFromPaste","t.prototype.addTextFromPaste","selectShapeTool","t.prototype.selectShapeTool","handleTextWysiwyg","t.prototype.handleTextWysiwyg","isExistingElement","isFinite","onSubmit","getViewportCoords","wrap","minHeight","backfaceVisibility","outline","resize","oninput","u.oninput","onkeydown","u.onkeydown","onblur","disconnect","observe","ResizeObserver","capture","getTextElementAtPosition","t.prototype.getTextElementAtPosition","getElementAtPosition","t.prototype.getElementAtPosition","getElementsAtPosition","t.prototype.getElementsAtPosition","maybeCleanupAfterMissingPointerUp","t.prototype.maybeCleanupAfterMissingPointerUp","updateGestureOnPointerDown","t.prototype.updateGestureOnPointerDown","pointers","pointerId","lastCenter","initialScale","initialDistance","initialPointerDownState","t.prototype.initialPointerDownState","originInGrid","scrollbars","lastCoords","handleType","offset","arrowDirection","center","hit","allHitElements","wasAddedToSelection","hasBeenDuplicated","hasHitCommonBoundingBoxOfSelectedElements","isHittingCommonBoundingBoxOfSelectedElements","drag","hasOccurred","eventListeners","onMove","onUp","handleDraggingScrollBar","t.prototype.handleDraggingScrollBar","handlePointerMoveOverScrollbars","savePointer","isASelectedElement","t.prototype.isASelectedElement","t.prototype.isHittingCommonBoundingBoxOfSelectedElements","onKeyDownFromPointerDownHandler","t.prototype.onKeyDownFromPointerDownHandler","maybeHandleResize","maybeDragNewGenericElement","onKeyUpFromPointerDownHandler","t.prototype.onKeyUpFromPointerDownHandler","Rt","onPointerMoveFromPointerDownHandler","t.prototype.onPointerMoveFromPointerDownHandler","maybeSuggestBindingForLinearElementAtCursor","maybeSuggestBindingForAll","t.prototype.handlePointerMoveOverScrollbars","onPointerUpFromPointerDownHandler","t.prototype.onPointerUpFromPointerDownHandler","t.prototype.maybeSuggestBindingForAll","clearSelection","t.prototype.clearSelection","getTextWysiwygSnappedToCenterPosition","t.prototype.getTextWysiwygSnappedToCenterPosition","viewportX","viewportY","elementCenterX","elementCenterY","t.prototype.getCanvasOffsets","parentElement","t.prototype.updateLanguage","createRef","this.getSceneElementsIncludingDeleted","this.getSceneElements","this.onUnload","this.disableEvent","this.onFontLoaded","importLibraryFromUrl","replaceState","fetch","numShapes","alert","this.resetHistory","resetLoadingState","launchQueue","setConsumer","files","getFile","initialData","scrollToCenter","URLSearchParams","search","cutAll","anchorNode","copyAll","this.cutAll","this.copyAll","onTapStart","this.onTapStart","touches","onTapEnd","this.onTapEnd","elementFromPoint","this.addElementsFromPasteOrLibrary","this.setAppState","this.removePointer","pointerType","this.toggleLock","this.toggleZenMode","this.toggleStats","this.setScrollToCenter","this.clearToast","this.onSceneUpdated","Proxy","HTMLSelectElement","St","startTextEditing","en","Ut","this.startTextEditing","insertAtParentCenter","this.handleCanvasDoubleClick","this.handleCanvasPointerMove","resetShouldCacheIgnoreZoomDebounced","maybeSuggestBindingAtCursor","buttons","this.handleTouchMove","this.handleCanvasPointerDown","persist","maybeOpenContextMenuAfterPointerDownOnTouchDevices","handleCanvasPanUsingWheelOrSpaceDrag","clearSelectionIfNotUsingSelection","updateBindingEnabledOnPointerMove","handleSelectionOnPointerDown","handleLinearElementOnPointerDown","createGenericElementOnPointerDown","handleTextOnPointerDown","this.maybeOpenContextMenuAfterPointerDownOnTouchDevices","openContextMenu","this.handleCanvasPanUsingWheelOrSpaceDrag","this.clearSelectionIfNotUsingSelection","this.handleSelectionOnPointerDown","this.handleTextOnPointerDown","this.handleLinearElementOnPointerDown","this.createGenericElementOnPointerDown","this.updateBindingEnabledOnPointerMove","this.maybeSuggestBindingAtCursor","this.maybeSuggestBindingForLinearElementAtCursor","this.handleCanvasRef","handleWheel","endsWith","items","getAsFileSystemHandle","this.handleCanvasContextMenu","this.maybeDragNewGenericElement","this.maybeHandleResize","this.openContextMenu","deltaX","log10","this.savePointer","isNaN","onPointerUpdate","pointersMap","af","lanCode","lf","cf","of","4698","6207","c.n","c.t","getOwnPropertyNames","o.default","c.d","c.e","c.u","c.o","c.l","getElementsByTagName","charset","timeout","src","onerror","onload","c.r","toStringTag","c.f.j","request","webpackChunkExcalidraw"]}},{"offset":{"line":741,"column":0},"map":{"version":3,"file":"excalidraw.js","lineCount":93,"mappings":"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\/B,CAAA,CAAA,EAe+BA,IAf\/B,CAAA,EAAA,+CAAA,CAAAzD;AAkCA+E,IAAAA,CAAAA,sCAAAA,GAAAzE,IAAAA,CAAAA,sBAAA,CAAU0E,IAAAA,CAAAA,sBAAV,EAAUA,QAAAA,CACPtE,mBADOsE,CACPtE;AADH,MAEQuE,qBAAM7G,IAAAA,CAAAA,kCAAD,EAFb,EAGQ8G,6BAASvE,IAAAA,CAAAA,qBAAA,CAAA,IAACwE,IAAAA,CAAAA,6BAAD,CAACA,IAAD,EAACA,CAAD,EAACA,CAAD,EAACA,IAAAA,CAAAA,wCAAD,EAACA,CAAAA,IAAAA,CAAAA,sDAAAA,EAA8BF,kBAA9BE,CAAD,EAA+BF,IAA\/B,CAAA,CAHjB;AAAA,SAKoBG,IAAAA,CAAAA,kCAAD,CAAkBH,kBAAlB,CALnB,IAK4ClD,IAAAA,CAAAA,gBAAAA,CAAImD,0BAAJnD,CAL5C,IAK2DA,IAAAA,CAAAA,gBAAD,CAAMsD,IAAAA,CAAAA,gCAAD,EAAL,CAL1D,GAAA,IAAA,GAMO9B,gDAAAA,CAAe7C,mBAAf6C,CANP;AACG7C,CADH,EAAA,IAAAwC,IAAAA,CAAAA,6BAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAAC,IAAAA,CAAAA,wCAAA,EAAA,CAAAC,IAAAA,CAAAA,oBAAA,CAAA,EAAA,IAAA,CAAA,EAAA,qCAAA,CAAA2B;ACzCgBO,IAAAA,CAAAA,mBAAGC,CAAAA,WAAjB,EAAA;;","sources":["frontend\/handler\/draw.cljs","frontend\/extensions\/excalidraw.cljs","shadow\/loader.js","shadow\/module\/excalidraw\/prepend.js","node_modules\/@excalidraw\/excalidraw\/dist\/excalidraw.min.js","frontend\/rum.cljs","cljs\/core.cljs","frontend\/state.cljs"],"sourcesContent":["(ns frontend.handler.draw\n  (:refer-clojure :exclude [load-file])\n  (:require [frontend.config :as config]\n            [frontend.date :as date]\n            [frontend.db :as db]\n            [frontend.fs :as fs]\n            [frontend.handler.file :as file-handler]\n            [frontend.state :as state]\n            [frontend.util :as util]\n            [promesa.core :as p]))\n\n(defn create-draws-directory!\n  [repo]\n  (when repo\n    (let [repo-dir (config\/get-repo-dir repo)]\n      (util\/p-handle\n       (fs\/mkdir! (str repo-dir (str \"\/\" config\/default-draw-directory)))\n       (fn [_result] nil)\n       (fn [_error] nil)))))\n\n(defn save-excalidraw!\n  [file data]\n  (let [path file\n        repo (state\/get-current-repo)]\n    (when repo\n      (let [repo-dir (config\/get-repo-dir repo)]\n        (->\n         (p\/do!\n          (create-draws-directory! repo)\n          (fs\/write-file! repo repo-dir path data nil)\n          (db\/transact! repo\n                        [{:file\/path path\n                          :block\/name file\n                          :block\/file {:file\/path path}\n                          :block\/journal? false}]))\n         (p\/catch (fn [error]\n                    (prn \"Write file failed, path: \" path \", data: \" data)\n                    (js\/console.dir error))))))))\n\n(defn load-excalidraw-file\n  [file ok-handler]\n  (when-let [repo (state\/get-current-repo)]\n    (util\/p-handle\n     (file-handler\/load-file repo file)\n     (fn [content]\n       (ok-handler content))\n     (fn [error]\n       (println \"Error loading \" file \": \"\n                error)))))\n\n(defonce default-content\n  (util\/format\n   \"{\\n  \\\"type\\\": \\\"excalidraw\\\",\\n  \\\"version\\\": 2,\\n  \\\"source\\\": \\\"%s\\\",\\n  \\\"elements\\\": [],\\n  \\\"appState\\\": {\\n    \\\"viewBackgroundColor\\\": \\\"#FFF\\\",\\n    \\\"gridSize\\\": null\\n  }\\n}\"\n   config\/website))\n\n(defn file-name\n  []\n  (str (date\/get-date-time-string-2) \".excalidraw\"))\n\n(defn create-draw-with-default-content\n  [current-file]\n  (when-let [repo (state\/get-current-repo)]\n    (p\/let [exists? (fs\/file-exists? (config\/get-repo-dir repo)\n                                     (str config\/default-draw-directory current-file))]\n      (when-not exists?\n        (save-excalidraw! current-file default-content)))))\n","(ns frontend.extensions.excalidraw\n  (:require [\"@excalidraw\/excalidraw\" :as Excalidraw]\n            [cljs-bean.core :as bean]\n            [clojure.string :as string]\n            [frontend.config :as config]\n            [frontend.handler.draw :as draw]\n            [frontend.handler.notification :as notification]\n            [frontend.handler.ui :as ui-handler]\n            [frontend.rum :as r]\n            [frontend.state :as state]\n            [frontend.ui :as ui]\n            [frontend.util :as util]\n            [goog.object :as gobj]\n            [rum.core :as rum]))\n\n(def excalidraw (r\/adapt-class (gobj\/get Excalidraw \"default\")))\n\n(defn from-json\n  [text]\n  (when-not (string\/blank? text)\n    (try\n      (js\/JSON.parse text)\n      (catch js\/Error e\n        (println \"from json error:\")\n        (js\/console.dir e)\n        (notification\/show!\n         (util\/format \"Could not load this invalid excalidraw file\")\n         :error)))))\n\n(defonce *bounding-width (atom nil))\n(defn- get-bounding-width\n  [ref]\n  (when ref\n    (when-let [current (gobj\/get ref \"current\")]\n      (-> current\n         (.getBoundingClientRect)\n         (gobj\/get \"width\")))))\n\n(defn- update-draw-content-width\n  [state]\n  (let [el ^js (rum\/dom-node state)\n        el (and el (.querySelector el \".draw-wrap\"))\n        width (and el (.-clientWidth el))]\n    (reset! (::draw-width state) width)\n    state))\n\n(rum\/defcs draw-inner < rum\/reactive\n  (rum\/local 800 ::draw-width)\n  (rum\/local true ::zen-mode?)\n  (rum\/local false ::view-mode?)\n  (rum\/local nil ::elements)\n  {:did-mount update-draw-content-width}\n  {:did-update update-draw-content-width}\n  [state data option]\n  (let [current-repo (state\/sub :git\/current-repo)\n        bounding-width (rum\/react *bounding-width)\n        *draw-width (get state ::draw-width)\n        *zen-mode? (get state ::zen-mode?)\n        *view-mode? (get state ::view-mode?)\n        wide-mode? (state\/sub :ui\/wide-mode?)\n        *elements (get state ::elements)\n        file (:file option)]\n    (when data\n      [:div.overflow-hidden {:on-mouse-down (fn [e] (util\/stop e))}\n       [:div.my-1 {:style {:font-size 10}}\n        [:a.mr-2 {:on-click ui-handler\/toggle-wide-mode!}\n         (util\/format \"Wide Mode (%s)\" (if wide-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *zen-mode? not)}\n         (util\/format \"Zen Mode (%s)\" (if @*zen-mode? \"ON\" \"OFF\"))]\n        [:a.mr-2 {:on-click #(swap! *view-mode? not)}\n         (util\/format \"View Mode (%s)\" (if @*view-mode? \"ON\" \"OFF\"))]]\n       [:div.draw-wrap\n        {:on-mouse-down (fn [e]\n                          (util\/stop e)\n                          (state\/set-block-component-editing-mode! true))\n         :on-blur #(state\/set-block-component-editing-mode! false)}\n        (excalidraw\n         (merge\n          {:on-change (fn [elements state]\n                        (let [elements->clj (bean\/->clj elements)]\n                          (when (and (seq elements->clj)\n                                     (not= elements @*elements))\n                            (let [state (bean\/->clj state)]\n                              (draw\/save-excalidraw!\n                               file\n                               (-> {:type \"excalidraw\"\n                                    :version 2\n                                    :source config\/website\n                                    :elements elements\n                                    :appState (select-keys state [:gridSize :viewBackgroundColor])}\n                                   bean\/->js\n                                   (js\/JSON.stringify)))\n                              (reset! *elements elements)))))\n           :zen-mode-enabled @*zen-mode?\n           :view-mode-enabled @*view-mode?\n           :grid-mode-enabled false\n           :initial-data data\n           :width  @*draw-width}\n          (if wide-mode?\n            {:height 650}\n            {:height 500})))]])))\n\n(rum\/defcs draw-container < rum\/reactive\n  {:init (fn [state]\n           (let [[option] (:rum\/args state)\n                 file (:file option)\n                 *data (atom nil)\n                 *loading? (atom true)]\n             (when file\n               (draw\/load-excalidraw-file\n                file\n                (fn [data]\n                  (let [data (from-json data)]\n                    (reset! *data data)\n                    (reset! *loading? false)))))\n             (assoc state\n                    ::data *data\n                    ::loading? *loading?)))}\n  [state option]\n  (let [*data (get state ::data)\n        *loading? (get state ::loading?)\n        loading? (rum\/react *loading?)\n        data (rum\/react *data)\n        db-restoring? (state\/sub :db\/restoring?)]\n    (when (:file option)\n      (cond\n        db-restoring?\n        [:div.ls-center\n         (ui\/loading \"Loading\")]\n\n        (false? loading?)\n        (draw-inner data option)\n\n        :else                           ; loading\n        nil))))\n\n(rum\/defc draw < rum\/reactive\n  [option]\n  (let [repo (state\/get-current-repo)\n        granted? (state\/sub [:nfs\/user-granted? repo])]\n    ;; Web granted\n    (when-not (and (config\/local-db? repo) (not granted?) (not (util\/electron?)))\n      (draw-container option))))\n","goog.provide(\"shadow.loader\");\ngoog.require(\"goog.module.ModuleManager\");\ngoog.require(\"goog.module.ModuleLoader\");\ngoog.require(\"goog.object\");\ngoog.require(\"goog.html.uncheckedconversions\");\ngoog.require(\"goog.string.Const\");\n\n\/** @define {boolean} *\/\nshadow.loader.TEST = goog.define(\"shadow.loader.TEST\", false);\n\n\/\/ this is written in JS so it doesn't depend on cljs.core\n\nshadow.loader.ml = new goog.module.ModuleLoader();\nshadow.loader.ml.setSourceUrlInjection(true);\n\nshadow.loader.mm = goog.module.ModuleManager.getInstance();\nshadow.loader.mm.setLoader(shadow.loader.ml);\n\nshadow.loader.initCalled = false;\n\nshadow.loader.ensureInitWasCalled = function () {\n  if (!shadow.loader.initCalled) {\n    throw new Error(\n      \"shadow.loader API was called before shadow.loader.init!\\n\" +\n        \"You are probably calling module loader too early before shadow-cljs got fully initialized.\"\n    );\n  }\n};\n\nshadow.loader.init = function (uriPrefix) {\n  if (shadow.loader.TEST) return;\n\n  if (shadow.loader.initCalled) {\n    throw new Error(\n      \"shadow.loader.init was already called! If you are calling it manually set :module-loader-init false in your config.\"\n    );\n  }\n\n  if (goog.global.shadow$modules) {\n    var mm = shadow.loader.mm;\n    mm.setAllModuleInfo(goog.global.shadow$modules[\"infos\"]);\n\n    var uris = goog.global.shadow$modules[\"uris\"];\n\n    \/\/ this is absurd. the uris are generated by the compiler. should be trusted already.\n    \/\/ I would really like to know how Google integrates this data into their builds\n    var trustReason = goog.string.Const.from(\"generated by compiler\");\n\n    goog.object.getKeys(uris).forEach(function (key) {\n      var module_uris = uris[key];\n      if (module_uris.length == 0) {\n        \/\/ default module is added without uris since it will always be loaded\n        \/\/ when this is called\n        mm.getModuleInfo(key).setLoaded();\n      } else {\n        var trusted_uris = [];\n        module_uris.forEach(function (module_uri) {\n          var trusted =\n            goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract(\n              trustReason,\n              uriPrefix + module_uri\n            );\n          trusted_uris.push(trusted);\n        });\n        mm.getModuleInfo(key).setTrustedUris(trusted_uris);\n      }\n    });\n\n    shadow.loader.initCalled = true;\n  }\n};\n\nshadow.loader.getModuleManager = function () {\n  return shadow.loader.mm;\n};\n\nshadow.loader.getModuleLoader = function () {\n  return shadow.loader.ml;\n};\n\n\/\/ allow calling (shadow.loader\/load :with-a-keyword)\nshadow.loader.string_id = function (id) {\n  var result = id.toString();\n  if (result.charAt(0) == \":\") {\n    result = result.substring(1);\n  }\n  return result;\n};\n\nshadow.loader.set_load_start = function (id) {\n  shadow.loader.mm.beforeLoadModuleCode(id);\n};\n\n\/\/ FIXME: id no longer required, just keeping it in case someone ends up using old closure lib\nshadow.loader.set_loaded = function (id) {\n  shadow.loader.mm.setLoaded(id);\n};\n\n\/\/ ignored. only for cljs.loader compat\nshadow.loader.set_loaded_BANG_ = function () {};\n\nshadow.loader.loaded_QMARK_ = function (id) {\n  if (shadow.loader.TEST) {\n    return true;\n  }\n\n  return shadow.loader.mm.getModuleInfo(shadow.loader.string_id(id)).isLoaded();\n};\n\nshadow.loader.with_module = function (\n  moduleId,\n  fn,\n  opt_handler,\n  opt_noLoad,\n  opt_userInitiated,\n  opt_preferSynchronous\n) {\n  shadow.loader.ensureInitWasCalled();\n  return shadow.loader.mm.execOnLoad(\n    shadow.loader.string_id(moduleId),\n    fn,\n    opt_handler,\n    opt_noLoad,\n    opt_userInitiated,\n    opt_preferSynchronous\n  );\n};\n\nshadow.loader.load = function (id, cb) {\n  if (shadow.loader.TEST) {\n    var result = goog.async.Deferred.succeed();\n    if (cb) {\n      result = result.then(cb);\n    }\n    return result;\n  }\n\n  shadow.loader.ensureInitWasCalled();\n  id = shadow.loader.string_id(id);\n  if (cb) {\n    shadow.loader.mm.execOnLoad(id, cb);\n  }\n  return shadow.loader.mm.load(id);\n};\n\nshadow.loader.load_multiple = function (ids, opt_userInitiated) {\n  if (shadow.loader.TEST) {\n    var result = {};\n    for (const id of ids) {\n      result[id] = goog.async.Deferred.succeed();\n    }\n    return result;\n  }\n  shadow.loader.ensureInitWasCalled();\n  return shadow.loader.mm.loadMultiple(ids, opt_userInitiated);\n};\n\nshadow.loader.prefetch = function (id) {\n  if (shadow.loader.TEST) return;\n\n  shadow.loader.ensureInitWasCalled();\n  shadow.loader.mm.prefetchModule(shadow.loader.string_id(id));\n};\n\nshadow.loader.preload = function (id) {\n  if (shadow.loader.TEST) return;\n\n  shadow.loader.ensureInitWasCalled();\n  return shadow.loader.mm.preloadModule(shadow.loader.string_id(id));\n};\n","\nshadow.loader.set_load_start('excalidraw');","shadow$provide[556] = function(global,require,module,exports) {\nvar process = require('process');\n\/*! For license information please see excalidraw.min.js.LICENSE.txt *\/\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t(require(\"react\"),require(\"react-dom\")):\"function\"==typeof define&&define.amd?define([\"react\",\"react-dom\"],t):\"object\"==typeof exports?exports.Excalidraw=t(require(\"react\"),require(\"react-dom\")):e.Excalidraw=t(e.React,e.ReactDOM)}(self,(function(e,t){return(()=>{var n,r,a,o,i={5374:e=>{function t(e,t,n,r,a,o,i){try{var l=e[o](i),c=l.value}catch(e){return void n(e)}l.done?t(c):Promise.resolve(c).then(r,a)}e.exports=function(e){return function(){var n=this,r=arguments;return new Promise((function(a,o){var i=e.apply(n,r);function l(e){t(i,a,o,l,c,\"next\",e)}function c(e){t(i,a,o,l,c,\"throw\",e)}l(void 0)}))}}},566:e=>{e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},6950:e=>{function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},t.apply(this,arguments)}e.exports=t},5474:(e,t,n)=>{var r=n(8387);e.exports=function(e,t){if(null==e)return{};var n,a,o=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}},8387:e=>{e.exports=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}},6009:(e,t,n)=>{var r=n(487),a=n(8328);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},1395:(e,t,n)=>{var r=n(487),a=n(6121);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},3211:(e,t,n)=>{var r=n(487),a=n(2510);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},5574:(e,t,n)=>{var r=n(487),a=n(7972);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},4518:(e,t,n)=>{var r=n(487),a=n(190);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},3040:(e,t,n)=>{var r=n(487),a=n(6718);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8623:(e,t,n)=>{var r=n(487),a=n(3623);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},4193:(e,t,n)=>{var r=n(487),a=n(103);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},341:(e,t,n)=>{var r=n(487),a=n(7061);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},9705:(e,t,n)=>{var r=n(487),a=n(1498);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},7143:(e,t,n)=>{var r=n(487),a=n(666);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},7428:(e,t,n)=>{var r=n(487),a=n(849);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8465:(e,t,n)=>{var r=n(487),a=n(6915);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8680:(e,t,n)=>{var r=n(487),a=n(7030);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},205:(e,t,n)=>{var r=n(487),a=n(3994);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8416:(e,t,n)=>{var r=n(487),a=n(700);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},2816:(e,t,n)=>{var r=n(487),a=n(287);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},1575:(e,t,n)=>{var r=n(487),a=n(5657);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},7287:(e,t,n)=>{var r=n(487),a=n(7392);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8518:(e,t,n)=>{var r=n(487),a=n(6065);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},5849:(e,t,n)=>{var r=n(487),a=n(83);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},9478:(e,t,n)=>{var r=n(487),a=n(1554);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},2680:(e,t,n)=>{var r=n(487),a=n(1970);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},3142:(e,t,n)=>{var r=n(487),a=n(961);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},8234:(e,t,n)=>{var r=n(487),a=n(4878);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},4651:(e,t,n)=>{var r=n(487),a=n(1988);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},2189:(e,t,n)=>{var r=n(487),a=n(3245);\"string\"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.id,a,\"\"]]);var o={insert:\"head\",singleton:!1};r(a,o);e.exports=a.locals||{}},487:(e,t,n)=>{\"use strict\";var r,a=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function l(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],a=0;a<e.length;a++){var o=e[a],c=t.base?o[0]+t.base:o[0],s=n[c]||0,u=\"\".concat(c,\" \").concat(s);n[c]=s+1;var d=l(u),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:u,updater:g(p,t),references:1}),r.push(u)}return r}function s(e){var t=document.createElement(\"style\"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),\"function\"==typeof e.insert)e.insert(t);else{var i=o(e.insert||\"head\");if(!i)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");i.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join(\"\\n\")});function p(e,t,n,r){var a=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function f(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute(\"media\",a):e.removeAttribute(\"media\"),o&&\"undefined\"!=typeof btoa&&(r+=\"\\n\/*# sourceMappingURL=data:application\/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o)))),\" *\/\")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,m=0;function g(e,t){var n,r,a;if(t.singleton){var o=m++;n=h||(h=s(t)),r=p.bind(null,n,o,!1),a=p.bind(null,n,o,!0)}else n=s(t),r=f.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||\"boolean\"==typeof t.singleton||(t.singleton=a());var n=c(e=e||[],t);return function(e){if(e=e||[],\"[object Array]\"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=l(n[r]);i[a].references--}for(var o=c(e,t),s=0;s<n.length;s++){var u=l(n[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=o}}}},2829:e=>{\"use strict\";e.exports=JSON.parse('{\"labels\":{\"paste\":\"Paste\",\"pasteCharts\":\"Paste charts\",\"selectAll\":\"Select all\",\"multiSelect\":\"Add element to selection\",\"moveCanvas\":\"Move canvas\",\"cut\":\"Cut\",\"copy\":\"Copy\",\"copyAsPng\":\"Copy to clipboard as PNG\",\"copyAsSvg\":\"Copy to clipboard as SVG\",\"bringForward\":\"Bring forward\",\"sendToBack\":\"Send to back\",\"bringToFront\":\"Bring to front\",\"sendBackward\":\"Send backward\",\"delete\":\"Delete\",\"copyStyles\":\"Copy styles\",\"pasteStyles\":\"Paste styles\",\"stroke\":\"Stroke\",\"background\":\"Background\",\"fill\":\"Fill\",\"strokeWidth\":\"Stroke width\",\"strokeStyle\":\"Stroke style\",\"strokeStyle_solid\":\"Solid\",\"strokeStyle_dashed\":\"Dashed\",\"strokeStyle_dotted\":\"Dotted\",\"sloppiness\":\"Sloppiness\",\"opacity\":\"Opacity\",\"textAlign\":\"Text align\",\"edges\":\"Edges\",\"sharp\":\"Sharp\",\"round\":\"Round\",\"arrowheads\":\"Arrowheads\",\"arrowhead_none\":\"None\",\"arrowhead_arrow\":\"Arrow\",\"arrowhead_bar\":\"Bar\",\"arrowhead_dot\":\"Dot\",\"fontSize\":\"Font size\",\"fontFamily\":\"Font family\",\"onlySelected\":\"Only selected\",\"withBackground\":\"With background\",\"exportEmbedScene\":\"Embed scene into exported file\",\"exportEmbedScene_details\":\"Scene data will be saved into the exported PNG\/SVG file so that the scene can be restored from it.\\\\nWill increase exported file size.\",\"addWatermark\":\"Add \\\\\"Made with Excalidraw\\\\\"\",\"handDrawn\":\"Hand-drawn\",\"normal\":\"Normal\",\"code\":\"Code\",\"small\":\"Small\",\"medium\":\"Medium\",\"large\":\"Large\",\"veryLarge\":\"Very large\",\"solid\":\"Solid\",\"hachure\":\"Hachure\",\"crossHatch\":\"Cross-hatch\",\"thin\":\"Thin\",\"bold\":\"Bold\",\"left\":\"Left\",\"center\":\"Center\",\"right\":\"Right\",\"extraBold\":\"Extra bold\",\"architect\":\"Architect\",\"artist\":\"Artist\",\"cartoonist\":\"Cartoonist\",\"fileTitle\":\"File title\",\"colorPicker\":\"Color picker\",\"canvasBackground\":\"Canvas background\",\"drawingCanvas\":\"Drawing canvas\",\"layers\":\"Layers\",\"actions\":\"Actions\",\"language\":\"Language\",\"liveCollaboration\":\"Live collaboration\",\"duplicateSelection\":\"Duplicate\",\"untitled\":\"Untitled\",\"name\":\"Name\",\"yourName\":\"Your name\",\"madeWithExcalidraw\":\"Made with Excalidraw\",\"group\":\"Group selection\",\"ungroup\":\"Ungroup selection\",\"collaborators\":\"Collaborators\",\"showGrid\":\"Show grid\",\"addToLibrary\":\"Add to library\",\"removeFromLibrary\":\"Remove from library\",\"libraryLoadingMessage\":\"Loading library\u2026\",\"libraries\":\"Browse libraries\",\"loadingScene\":\"Loading scene\u2026\",\"align\":\"Align\",\"alignTop\":\"Align top\",\"alignBottom\":\"Align bottom\",\"alignLeft\":\"Align left\",\"alignRight\":\"Align right\",\"centerVertically\":\"Center vertically\",\"centerHorizontally\":\"Center horizontally\",\"distributeHorizontally\":\"Distribute horizontally\",\"distributeVertically\":\"Distribute vertically\",\"viewMode\":\"View mode\",\"toggleExportColorScheme\":\"Toggle export color scheme\",\"share\":\"Share\"},\"buttons\":{\"clearReset\":\"Reset the canvas\",\"export\":\"Export\",\"exportToPng\":\"Export to PNG\",\"exportToSvg\":\"Export to SVG\",\"copyToClipboard\":\"Copy to clipboard\",\"copyPngToClipboard\":\"Copy PNG to clipboard\",\"scale\":\"Scale\",\"save\":\"Save\",\"saveAs\":\"Save as\",\"load\":\"Load\",\"getShareableLink\":\"Get shareable link\",\"close\":\"Close\",\"selectLanguage\":\"Select language\",\"scrollBackToContent\":\"Scroll back to content\",\"zoomIn\":\"Zoom in\",\"zoomOut\":\"Zoom out\",\"resetZoom\":\"Reset zoom\",\"menu\":\"Menu\",\"done\":\"Done\",\"edit\":\"Edit\",\"undo\":\"Undo\",\"redo\":\"Redo\",\"resetLibrary\":\"Reset library\",\"createNewRoom\":\"Create new room\",\"fullScreen\":\"Full screen\",\"darkMode\":\"Dark mode\",\"lightMode\":\"Light mode\",\"zenMode\":\"Zen mode\",\"exitZenMode\":\"Exit zen mode\"},\"alerts\":{\"clearReset\":\"This will clear the whole canvas. Are you sure?\",\"couldNotCreateShareableLink\":\"Couldn\\'t create shareable link.\",\"couldNotCreateShareableLinkTooBig\":\"Couldn\\'t create shareable link: the scene is too big\",\"couldNotLoadInvalidFile\":\"Couldn\\'t load invalid file\",\"importBackendFailed\":\"Importing from backend failed.\",\"cannotExportEmptyCanvas\":\"Cannot export empty canvas.\",\"couldNotCopyToClipboard\":\"Couldn\\'t copy to clipboard. Try using Chrome browser.\",\"decryptFailed\":\"Couldn\\'t decrypt data.\",\"uploadedSecurly\":\"The upload has been secured with end-to-end encryption, which means that Excalidraw server and third parties can\\'t read the content.\",\"loadSceneOverridePrompt\":\"Loading external drawing will replace your existing content. Do you wish to continue?\",\"collabStopOverridePrompt\":\"Stopping the session will overwrite your previous, locally stored drawing. Are you sure?\\\\n\\\\n(If you want to keep your local drawing, simply close the browser tab instead.)\",\"errorLoadingLibrary\":\"There was an error loading the third party library.\",\"confirmAddLibrary\":\"This will add {{numShapes}} shape(s) to your library. Are you sure?\",\"imageDoesNotContainScene\":\"Importing images isn\\'t supported at the moment.\\\\n\\\\nDid you want to import a scene? This image does not seem to contain any scene data. Have you enabled this during export?\",\"cannotRestoreFromImage\":\"Scene couldn\\'t be restored from this image file\",\"invalidSceneUrl\":\"Couldn\\'t import scene from the supplied URL. It\\'s either malformed, or doesn\\'t contain valid Excalidraw JSON data.\",\"resetLibrary\":\"This will clear your library. Are you sure?\"},\"toolBar\":{\"selection\":\"Selection\",\"draw\":\"Free draw\",\"rectangle\":\"Rectangle\",\"diamond\":\"Diamond\",\"ellipse\":\"Ellipse\",\"arrow\":\"Arrow\",\"line\":\"Line\",\"text\":\"Text\",\"library\":\"Library\",\"lock\":\"Keep selected tool active after drawing\"},\"headings\":{\"canvasActions\":\"Canvas actions\",\"selectedShapeActions\":\"Selected shape actions\",\"shapes\":\"Shapes\"},\"hints\":{\"linearElement\":\"Click to start multiple points, drag for single line\",\"freeDraw\":\"Click and drag, release when you\\'re finished\",\"text\":\"Tip: you can also add text by double-clicking anywhere with the selection tool\",\"linearElementMulti\":\"Click on last point or press Escape or Enter to finish\",\"lockAngle\":\"You can constrain angle by holding SHIFT\",\"resize\":\"You can constrain proportions by holding SHIFT while resizing,\\\\nhold ALT to resize from the center\",\"rotate\":\"You can constrain angles by holding SHIFT while rotating\",\"lineEditor_info\":\"Double-click or press Enter to edit points\",\"lineEditor_pointSelected\":\"Press Delete to remove point, CtrlOrCmd+D to duplicate, or drag to move\",\"lineEditor_nothingSelected\":\"Select a point to move or remove, or hold Alt and click to add new points\"},\"canvasError\":{\"cannotShowPreview\":\"Cannot show preview\",\"canvasTooBig\":\"The canvas may be too big.\",\"canvasTooBigTip\":\"Tip: try moving the farthest elements a bit closer together.\"},\"errorSplash\":{\"headingMain_pre\":\"Encountered an error. Try \",\"headingMain_button\":\"reloading the page.\",\"clearCanvasMessage\":\"If reloading doesn\\'t work, try \",\"clearCanvasMessage_button\":\"clearing the canvas.\",\"clearCanvasCaveat\":\" This will result in loss of work \",\"trackedToSentry_pre\":\"The error with identifier \",\"trackedToSentry_post\":\" was tracked on our system.\",\"openIssueMessage_pre\":\"We were very cautious not to include your scene information on the error. If your scene is not private, please consider following up on our \",\"openIssueMessage_button\":\"bug tracker.\",\"openIssueMessage_post\":\" Please include information below by copying and pasting into the GitHub issue.\",\"sceneContent\":\"Scene content:\"},\"roomDialog\":{\"desc_intro\":\"You can invite people to your current scene to collaborate with you.\",\"desc_privacy\":\"Don\\'t worry, the session uses end-to-end encryption, so whatever you draw will stay private. Not even our server will be able to see what you come up with.\",\"button_startSession\":\"Start session\",\"button_stopSession\":\"Stop session\",\"desc_inProgressIntro\":\"Live-collaboration session is now in progress.\",\"desc_shareLink\":\"Share this link with anyone you want to collaborate with:\",\"desc_exitSession\":\"Stopping the session will disconnect you from the room, but you\\'ll be able to continue working with the scene, locally. Note that this won\\'t affect other people, and they\\'ll still be able to collaborate on their version.\",\"shareTitle\":\"Join a live collaboration session on Excalidraw\"},\"errorDialog\":{\"title\":\"Error\"},\"helpDialog\":{\"blog\":\"Read our blog\",\"click\":\"click\",\"curvedArrow\":\"Curved arrow\",\"curvedLine\":\"Curved line\",\"documentation\":\"Documentation\",\"drag\":\"drag\",\"editor\":\"Editor\",\"github\":\"Found an issue? Submit\",\"howto\":\"Follow our guides\",\"or\":\"or\",\"preventBinding\":\"Prevent arrow binding\",\"shapes\":\"Shapes\",\"shortcuts\":\"Keyboard shortcuts\",\"textFinish\":\"Finish editing (text)\",\"textNewLine\":\"Add new line (text)\",\"title\":\"Help\",\"view\":\"View\",\"zoomToFit\":\"Zoom to fit all elements\",\"zoomToSelection\":\"Zoom to selection\"},\"encrypted\":{\"tooltip\":\"Your drawings are end-to-end encrypted so Excalidraw\\'s servers will never see them.\"},\"stats\":{\"angle\":\"Angle\",\"element\":\"Element\",\"elements\":\"Elements\",\"height\":\"Height\",\"scene\":\"Scene\",\"selected\":\"Selected\",\"storage\":\"Storage\",\"title\":\"Stats for nerds\",\"total\":\"Total\",\"version\":\"Version\",\"versionCopy\":\"Click to copy\",\"versionNotAvailable\":\"Version not available\",\"width\":\"Width\"},\"toast\":{\"copyStyles\":\"Copied styles.\",\"copyToClipboard\":\"Copied to clipboard.\",\"copyToClipboardAsPng\":\"Copied {{exportSelection}} to clipboard as PNG\\\\n({{exportColorScheme}})\",\"fileSaved\":\"File saved.\",\"fileSavedToFilename\":\"Saved to {filename}\",\"canvas\":\"canvas\",\"selection\":\"selection\"}}')},2051:e=>{\"use strict\";e.exports=JSON.parse('{\"ar-SA\":84,\"bg-BG\":95,\"ca-ES\":95,\"de-DE\":100,\"el-GR\":99,\"en\":100,\"es-ES\":100,\"fa-IR\":91,\"fi-FI\":100,\"fr-FR\":100,\"he-IL\":92,\"hi-IN\":93,\"hu-HU\":83,\"id-ID\":99,\"it-IT\":100,\"ja-JP\":97,\"kab-KAB\":98,\"ko-KR\":95,\"my-MM\":78,\"nb-NO\":100,\"nl-NL\":99,\"nn-NO\":86,\"oc-FR\":100,\"pa-IN\":96,\"pl-PL\":97,\"pt-BR\":100,\"pt-PT\":98,\"ro-RO\":100,\"ru-RU\":100,\"sk-SK\":99,\"sv-SE\":100,\"tr-TR\":83,\"uk-UA\":96,\"zh-CN\":98,\"zh-TW\":100}')},788:(e,t,n)=>{var r={\".\/ar-SA.json\":[7294,558],\".\/bg-BG.json\":[3860,384],\".\/ca-ES.json\":[750,351],\".\/de-DE.json\":[7439,43],\".\/el-GR.json\":[9422,526],\".\/en.json\":[2829],\".\/es-ES.json\":[2863,317],\".\/fa-IR.json\":[3853,710],\".\/fi-FI.json\":[5472,472],\".\/fr-FR.json\":[3280,364],\".\/he-IL.json\":[3970,262],\".\/hi-IN.json\":[5599,933],\".\/hu-HU.json\":[1516,661],\".\/id-ID.json\":[7992,491],\".\/it-IT.json\":[5963,465],\".\/ja-JP.json\":[1323,137],\".\/kab-KAB.json\":[9230,164],\".\/ko-KR.json\":[7552,60],\".\/my-MM.json\":[1778,242],\".\/nb-NO.json\":[8751,246],\".\/nl-NL.json\":[4675,196],\".\/nn-NO.json\":[7558,920],\".\/oc-FR.json\":[9945,565],\".\/pa-IN.json\":[863,280],\".\/percentages.json\":[2051],\".\/pl-PL.json\":[122,852],\".\/pt-BR.json\":[7443,381],\".\/pt-PT.json\":[2560,149],\".\/ro-RO.json\":[5654,752],\".\/ru-RU.json\":[5609,869],\".\/sk-SK.json\":[8684,401],\".\/sv-SE.json\":[1570,698],\".\/tr-TR.json\":[8146,213],\".\/uk-UA.json\":[9746,583],\".\/zh-CN.json\":[9044,304],\".\/zh-TW.json\":[2939,62]};function a(e){if(!n.o(r,e))return Promise.resolve().then((()=>{var t=new Error(\"Cannot find module '\"+e+\"'\");throw t.code=\"MODULE_NOT_FOUND\",t}));var t=r[e],a=t[0];return Promise.all(t.slice(1).map(n.e)).then((()=>n.t(a,3)))}a.keys=()=>Object.keys(r),a.id=788,e.exports=a},7154:e=>{function t(){return e.exports=t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},t.apply(this,arguments)}e.exports=t},6479:(e,t,n)=>{var r=n(7316);e.exports=function(e,t){if(null==e)return{};var n,a,o=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}},7316:e=>{e.exports=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}},8328:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>p});var r=n(3645),a=n.n(r),o=n(1667),i=n.n(o),l=n(7464),c=n(9638),s=a()((function(e){return e[1]})),u=i()(l.Z),d=i()(c.Z);s.push([e.id,'@font-face{font-family:\"Virgil\";src:url('+u+');font-display:swap}@font-face{font-family:\"Cascadia\";src:url('+d+\");font-display:swap}\",\"\"]);const p=s},6121:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Avatar{width:2.5rem;height:2.5rem;border-radius:1.25rem;display:flex;justify-content:center;align-items:center;color:#fff;cursor:pointer;font-size:.8rem;font-weight:500}\",\"\"]);const o=a},2510:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .CollabButton.is-collaborating{background-color:var(--button-special-active-bg-color)}.excalidraw .CollabButton.is-collaborating .ToolIcon__icon svg,.excalidraw .CollabButton.is-collaborating .ToolIcon__label{color:var(--icon-green-fill-color)}.excalidraw .CollabButton-collaborators{min-width:1em;position:absolute;bottom:-5px;padding:3px;border-radius:50%;background-color:#40c057;color:#fff;font-size:.7em;font-family:var(--ui-font)}:root[dir=ltr] .excalidraw .CollabButton-collaborators{right:-5px}:root[dir=rtl] .excalidraw .CollabButton-collaborators{left:-5px}\",\"\"]);const o=a},7972:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .color-picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}:root[dir=ltr] .excalidraw .color-picker{left:-5.5px}:root[dir=rtl] .excalidraw .color-picker{right:-5.5px}.excalidraw .color-picker-control-container{display:grid;grid-template-columns:auto 1fr;align-items:center}.excalidraw .color-picker-triangle{width:0;height:0;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent var(--popup-bg-color);position:absolute;top:-10px}:root[dir=ltr] .excalidraw .color-picker-triangle{left:12px}:root[dir=rtl] .excalidraw .color-picker-triangle{right:12px}.excalidraw .color-picker-triangle-shadow{border-color:transparent transparent rgba(0,0,0,.1);top:-11px}.excalidraw .color-picker-content{padding:.5rem;display:grid;grid-template-columns:repeat(5, auto);grid-gap:.5rem;border-radius:4px}.excalidraw .color-picker-content:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-picker-content .color-input-container{grid-column:1\/span 5}.excalidraw .color-picker-swatch{position:relative;height:1.875rem;width:1.875rem;cursor:pointer;border-radius:4px;margin:0;box-sizing:border-box;border:1px solid #ddd;background-color:currentColor !important;filter:var(--appearance-filter)}.excalidraw .color-picker-swatch:focus{box-shadow:0 0 4px 1px currentColor;border-color:var(--select-highlight-color)}.excalidraw .color-picker-transparent{border-radius:4px;box-shadow:rgba(0,0,0,.1) 0 0 0 1px inset;position:absolute;top:0;right:0;bottom:0;left:0}.excalidraw .color-picker-transparent,.excalidraw .color-picker-label-swatch{background:url(\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\") left center}.excalidraw .color-picker-hash{background:var(--input-border-color);height:1.875rem;width:1.875rem;color:var(--input-label-color);display:flex;align-items:center;justify-content:center;position:relative}:root[dir=ltr] .excalidraw .color-picker-hash{border-radius:4px 0 0 4px}:root[dir=rtl] .excalidraw .color-picker-hash{border-radius:0 4px 4px 0}.excalidraw .color-input-container:focus-within .color-picker-hash{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .color-input-container:focus-within .color-picker-hash::before,.excalidraw .color-input-container:focus-within .color-picker-hash::after{content:\"\";width:1px;height:100%;position:absolute;top:0}.excalidraw .color-input-container:focus-within .color-picker-hash::before{background:var(--input-border-color)}:root[dir=ltr] .excalidraw .color-input-container:focus-within .color-picker-hash::before{right:-1px}:root[dir=rtl] .excalidraw .color-input-container:focus-within .color-picker-hash::before{left:-1px}.excalidraw .color-input-container:focus-within .color-picker-hash::after{background:var(--input-bg-color)}:root[dir=ltr] .excalidraw .color-input-container:focus-within .color-picker-hash::after{right:-2px}:root[dir=rtl] .excalidraw .color-input-container:focus-within .color-picker-hash::after{left:-2px}.excalidraw .color-input-container{display:flex}.excalidraw .color-picker-input{width:12ch;margin:0;font-size:1rem;background-color:var(--input-bg-color);color:var(--text-primary-color);border:0;outline:none;height:1.75em;box-shadow:var(--input-border-color) 0 0 0 1px inset;float:left;padding:1px;padding-inline-start:.5em;appearance:none}:root[dir=ltr] .excalidraw .color-picker-input{border-radius:0 4px 4px 0}:root[dir=rtl] .excalidraw .color-picker-input{border-radius:4px 0 0 4px}.excalidraw .color-picker-label-swatch{height:1.875rem;width:1.875rem;margin-inline-end:.25rem;border:1px solid #dee2e6;position:relative;overflow:hidden;background-color:transparent !important;filter:var(--appearance-filter)}.excalidraw .color-picker-label-swatch:after{content:\"\";position:absolute;top:0;left:0;width:100%;height:100%;background:var(--swatch-color)}.excalidraw .color-picker-keybinding{position:absolute;bottom:2px;font-size:.7em}:root[dir=ltr] .excalidraw .color-picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .color-picker-keybinding{left:2px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .color-picker-keybinding{display:none}}.excalidraw .color-picker-type-canvasBackground .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementBackground .color-picker-keybinding{color:#fff}.excalidraw .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#aaa}.excalidraw .color-picker-type-elementStroke .color-picker-keybinding{color:#d4d4d4}.excalidraw.Appearance_dark .color-picker-type-elementBackground .color-picker-keybinding{color:#000}.excalidraw.Appearance_dark .color-picker-swatch[aria-label=transparent] .color-picker-keybinding{color:#000}',\"\"]);const o=a},190:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .context-menu{position:relative;border-radius:4px;box-shadow:0 3px 10px rgba(0,0,0,.2);padding:0;list-style:none;user-select:none;margin:-0.25rem 0 0 .125rem;padding:.5rem 0;background-color:var(--popup-secondary-bg-color);border:1px solid var(--button-gray-3);cursor:default}.excalidraw .context-menu button{color:var(--popup-text-color)}.excalidraw .context-menu-option{position:relative;width:100%;min-width:9.5rem;margin:0;padding:.25rem 1rem .25rem 1.25rem;text-align:start;border-radius:0;background-color:transparent;border:none;white-space:nowrap;display:grid;grid-template-columns:1fr .2fr;align-items:center}.excalidraw .context-menu-option.checkmark::before{position:absolute;left:6px;margin-bottom:1px;content:\"\u2713\"}.excalidraw .context-menu-option.dangerous .context-menu-option__label{color:#f03e3e}.excalidraw .context-menu-option .context-menu-option__label{justify-self:start;margin-inline-end:20px}.excalidraw .context-menu-option .context-menu-option__shortcut{justify-self:end;opacity:.6;font-family:inherit;font-size:.7rem}.excalidraw .context-menu-option:hover{color:var(--popup-bg-color);background-color:var(--select-highlight-color)}.excalidraw .context-menu-option:hover.dangerous{background-color:#fa5252}.excalidraw .context-menu-option:hover.dangerous .context-menu-option__label{color:var(--popup-bg-color)}.excalidraw .context-menu-option:focus{z-index:1}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .context-menu-option{display:block}.excalidraw .context-menu-option .context-menu-option__label{margin-inline-end:0}.excalidraw .context-menu-option .context-menu-option__shortcut{display:none}}.excalidraw .context-menu-option-separator{border:none;border-top:1px solid #adb5bd}',\"\"]);const o=a},6718:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Dialog{user-select:text;cursor:auto}.excalidraw .Dialog__title{display:grid;align-items:center;margin-top:0;grid-template-columns:1fr calc(var(--space-factor) * 7);grid-gap:var(--metric);padding:calc(var(--space-factor) * 2);text-align:center;font-variant:small-caps;font-size:1.2em}.excalidraw .Dialog__titleContent{flex:1}.excalidraw .Dialog .Modal__close{color:var(--icon-fill-color);margin:0}.excalidraw .Dialog__content{padding:0 16px 16px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .Dialog{--metric: calc(var(--space-factor) * 4);--inset-left: max(var(--metric), var(--sal));--inset-right: max(var(--metric), var(--sar))}.excalidraw .Dialog__title{grid-template-columns:calc(var(--space-factor) * 7) 1fr calc( var(--space-factor) * 7 );position:sticky;top:0;padding:calc(var(--space-factor) * 2);background:var(--island-bg-color);font-size:1.25em;box-sizing:border-box;border-bottom:1px solid var(--button-gray-2);z-index:1}.excalidraw .Dialog__titleContent{text-align:center}.excalidraw .Dialog .Island{width:100vw;height:100%;box-sizing:border-box;overflow-y:auto;padding-left:max(calc(var(--padding) * var(--space-factor)), var(--sal));padding-right:max(calc(var(--padding) * var(--space-factor)), var(--sar));padding-bottom:max(calc(var(--padding) * var(--space-factor)), var(--sab))}.excalidraw .Dialog .Modal__close{order:-1}}\",\"\"]);const o=a},3623:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .ExportDialog__preview{--preview-padding: calc(var(--space-factor) * 4);background:url(\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAMUlEQVQ4T2NkYGAQYcAP3uCTZhw1gGGYhAGBZIA\/nYDCgBDAm9BGDWAAJyRCgLaBCAAgXwixzAS0pgAAAABJRU5ErkJggg==\") left center;text-align:center;padding:var(--preview-padding);margin-bottom:calc(var(--space-factor) * 3)}.excalidraw .ExportDialog__preview canvas{max-width:calc(100% - var(--preview-padding) * 2);max-height:25rem}.excalidraw.Appearance_dark .ExportDialog__preview canvas{filter:none}.excalidraw .ExportDialog__actions{width:100%;display:flex;grid-gap:calc(var(--space-factor) * 2);align-items:top;justify-content:space-between}.excalidraw .ExportDialog__name{grid-column:project-name;margin:auto}.excalidraw .ExportDialog__name .TextInput{height:calc(1rem - 3px)}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .ExportDialog{display:flex;flex-direction:column}.excalidraw .ExportDialog__actions{flex-direction:column;align-items:center}.excalidraw .ExportDialog__actions>*{margin-bottom:calc(var(--space-factor) * 3)}.excalidraw .ExportDialog__preview canvas{max-height:30vh}.excalidraw .ExportDialog__dialog,.excalidraw .ExportDialog__dialog .Island{height:100%;box-sizing:border-box}.excalidraw .ExportDialog__dialog .Island{overflow-y:auto}}',\"\"]);const o=a},103:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .FixedSideContainer{--margin: 0.25rem;position:absolute;pointer-events:none}.excalidraw .FixedSideContainer>*{pointer-events:all}.excalidraw .FixedSideContainer_side_top{left:var(--margin);top:var(--margin);right:var(--margin);z-index:2}.excalidraw .FixedSideContainer_side_top.zen-mode{right:42px}\",\"\"]);const o=a},7061:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .HelpDialog h3{border-bottom:1px solid var(--button-gray-2);padding-bottom:4px}.excalidraw .HelpDialog--island{border:1px solid var(--button-gray-2);margin-bottom:16px}.excalidraw .HelpDialog--island-title{margin:0;padding:4px;background-color:var(--button-gray-1);text-align:center}.excalidraw .HelpDialog--shortcut{border-top:1px solid var(--button-gray-2)}.excalidraw .HelpDialog--key{word-break:keep-all;border:1px solid var(--button-gray-2);padding:2px 8px;margin:auto 4px;background-color:var(--button-gray-1);border-radius:2px;font-size:.8em;min-height:26px;box-sizing:border-box;display:flex;align-items:center;font-family:inherit}.excalidraw .HelpDialog--header{display:flex;flex-direction:row;justify-content:space-evenly;margin-bottom:32px;padding-bottom:16px}.excalidraw .HelpDialog--btn{border:1px solid var(--link-color);padding:8px 32px;border-radius:4px}.excalidraw .HelpDialog--btn:hover{text-decoration:none}\",\"\"]);const o=a},1498:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .HintViewer{pointer-events:none;box-sizing:border-box;position:absolute;display:flex;justify-content:center;left:0;top:100%;max-width:100%;width:100%;margin-top:6px;text-align:center;color:#868e96;font-size:.8rem}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .HintViewer{position:static;padding-right:2em}}.excalidraw .HintViewer>span{padding:.2rem .4rem;background-color:var(--overlay-bg-color);border-radius:4px}\",\"\"]);const o=a},666:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .picker-container{display:inline-block;box-sizing:border-box;margin-right:.25rem}.excalidraw .picker{background:var(--popup-bg-color);border:0 solid rgba(255,255,255,.25);box-shadow:rgba(0,0,0,.25) 0 1px 4px;border-radius:4px;position:absolute}.excalidraw .picker-container button,.excalidraw .picker button{position:relative;display:flex;align-items:center;justify-content:center}.excalidraw .picker-container button:focus,.excalidraw .picker button:focus{outline:transparent;background-color:var(--button-gray-2)}.excalidraw .picker-container button:focus svg,.excalidraw .picker button:focus svg{opacity:1}.excalidraw .picker-container button:hover,.excalidraw .picker button:hover{background-color:var(--button-gray-2)}.excalidraw .picker-container button:active,.excalidraw .picker button:active{background-color:var(--button-gray-3)}.excalidraw .picker-container button:disabled,.excalidraw .picker button:disabled{cursor:not-allowed}.excalidraw .picker-container button svg,.excalidraw .picker button svg{margin:0;width:36px;height:18px;opacity:.6;pointer-events:none}.excalidraw .picker button{padding:.25rem .28rem .35rem .25rem}.excalidraw .picker-triangle{width:0;height:0;position:relative;top:-10px;z-index:10}:root[dir=ltr] .excalidraw .picker-triangle{left:12px}:root[dir=rtl] .excalidraw .picker-triangle{right:12px}.excalidraw .picker-triangle:before{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent rgba(0,0,0,.1);top:-1px}.excalidraw .picker-triangle:after{content:\"\";position:absolute;border-style:solid;border-width:0 9px 10px;border-color:transparent transparent var(--popup-bg-color)}.excalidraw .picker-content{padding:.5rem;display:grid;grid-auto-flow:column;grid-gap:.5rem;border-radius:4px}:root[dir=rtl] .excalidraw .picker-content{padding:.4rem}.excalidraw .picker-keybinding{position:absolute;bottom:2px;font-size:.7em;color:var(--keybinding-color)}:root[dir=ltr] .excalidraw .picker-keybinding{right:2px}:root[dir=rtl] .excalidraw .picker-keybinding{left:2px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .picker-keybinding{display:none}}.excalidraw .picker-type-canvasBackground .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementBackground .picker-keybinding{color:#fff}.excalidraw .picker-swatch[aria-label=transparent] .picker-keybinding{color:#aaa}.excalidraw .picker-type-elementStroke .picker-keybinding{color:#d4d4d4}.excalidraw.Appearance_dark .picker-type-elementBackground .picker-keybinding{color:#000}.excalidraw.Appearance_dark .picker-swatch[aria-label=transparent] .picker-keybinding{color:#000}',\"\"]);const o=a},849:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .Island{--padding: 0;background-color:var(--island-bg-color);backdrop-filter:saturate(100%) blur(10px);box-shadow:var(--shadow-island);border-radius:4px;padding:calc(var(--padding) * var(--space-factor));position:relative;transition:box-shadow .5s ease-in-out}.excalidraw .Island.zen-mode{box-shadow:none}\",\"\"]);const o=a},6915:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .layer-ui__library{margin:auto;display:flex;align-items:center;justify-content:center}.excalidraw .layer-ui__library .layer-ui__library-header{display:flex;align-items:center;width:100%;margin:2px 0}.excalidraw .layer-ui__library .layer-ui__library-header button{margin:0 2px}.excalidraw .layer-ui__library .layer-ui__library-header a{margin-inline-start:auto;padding-inline-end:18px;white-space:nowrap}.excalidraw .layer-ui__library-message{padding:10px 20px;max-width:200px}.excalidraw .layer-ui__library-items{max-height:50vh;overflow:auto}.excalidraw .layer-ui__wrapper{z-index:var(--zIndex-layerUI)}.excalidraw .layer-ui__wrapper .encrypted-icon{position:relative;margin-inline-start:15px;display:flex;justify-content:center;align-items:center;border-radius:var(--space-factor);color:#2b8a3e}.excalidraw .layer-ui__wrapper .encrypted-icon svg{width:1.2rem;height:1.2rem}.excalidraw .layer-ui__wrapper__github-corner{top:0;position:absolute;width:40px}:root[dir=ltr] .excalidraw .layer-ui__wrapper__github-corner{right:0}:root[dir=rtl] .excalidraw .layer-ui__wrapper__github-corner{left:0}.excalidraw .layer-ui__wrapper__footer{position:absolute;z-index:100;bottom:0;width:190px}:root[dir=ltr] .excalidraw .layer-ui__wrapper__footer{right:0}:root[dir=rtl] .excalidraw .layer-ui__wrapper__footer{left:0}.excalidraw .layer-ui__wrapper .zen-mode-transition{transition:transform .5s ease-in-out}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-left{transform:translate(999px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.transition-right{transform:translate(-999px, 0)}:root[dir=ltr] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left{transform:translate(-92px, 0)}:root[dir=rtl] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left{transform:translate(92px, 0)}.excalidraw .layer-ui__wrapper .disable-zen-mode{height:30px;position:absolute;bottom:10px;font-size:10px;padding:10px;font-weight:500;opacity:0;visibility:hidden;transition:visibility 0s linear 0s,opacity .5s}[dir=ltr] .excalidraw .layer-ui__wrapper .disable-zen-mode{right:15px}[dir=rtl] .excalidraw .layer-ui__wrapper .disable-zen-mode{left:15px}.excalidraw .layer-ui__wrapper .disable-zen-mode--visible{opacity:1;visibility:visible;transition:visibility 0s linear 300ms,opacity .5s;transition-delay:.8s}\",\"\"]);const o=a},7030:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .library-unit{align-items:center;border:1px solid var(--button-gray-2);display:flex;justify-content:center;position:relative;width:63px;height:63px}.excalidraw .library-unit__dragger{display:flex;height:100%;width:100%}.excalidraw .library-unit__dragger>svg{filter:var(--appearance-filter);flex-grow:1;max-height:100%;max-width:100%}.excalidraw .library-unit__removeFromLibrary,.excalidraw .library-unit__removeFromLibrary:hover,.excalidraw .library-unit__removeFromLibrary:active{align-items:center;background:none;border:none;color:var(--icon-fill-color);display:flex;justify-content:center;margin:0;padding:0;position:absolute;right:5px;top:5px}.excalidraw .library-unit__removeFromLibrary>svg{height:16px;width:16px}.excalidraw .library-unit__pulse{transform:scale(1);animation:library-unit__pulse-animation 1s ease-in infinite}.excalidraw .library-unit__adder{position:absolute;left:50%;top:50%;width:20px;height:20px;margin-left:-10px;margin-top:-10px;pointer-events:none}.excalidraw .library-unit__active{cursor:pointer}@keyframes library-unit__pulse-animation{0%{transform:scale(0.95)}50%{transform:scale(1)}100%{transform:scale(0.95)}}\",\"\"]);const o=a},3994:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw.excalidraw-modal-container{position:absolute;z-index:10}.excalidraw .Modal{position:absolute;top:0;left:0;right:0;bottom:0;display:flex;align-items:center;justify-content:center;overflow:auto;padding:calc(var(--space-factor) * 10)}.excalidraw .Modal__background{position:absolute;top:0;left:0;right:0;bottom:0;z-index:1;background-color:rgba(0,0,0,.3);backdrop-filter:blur(2px)}.excalidraw .Modal__content{position:relative;z-index:2;width:100%;max-width:var(--max-width);max-height:100%;opacity:0;transform:translateY(10px);animation:Modal__content_fade-in .1s ease-out .05s forwards;position:relative;overflow-y:auto;background:var(--island-bg-color);backdrop-filter:none;border:1px solid var(--dialog-border-color);box-shadow:0 2px 10px rgba(0,0,0,.25);border-radius:6px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .Modal__content{max-width:100%;border:0;border-radius:0}}@keyframes Modal__content_fade-in{from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}.excalidraw .Modal__close{width:calc(var(--space-factor) * 7);height:calc(var(--space-factor) * 7);display:flex;align-items:center;justify-content:center}.excalidraw .Modal__close svg{height:calc(var(--space-factor) * 5)}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .Modal{padding:0}.excalidraw .Modal__content{position:absolute;top:0;left:0;right:0;bottom:0}}\",\"\"]);const o=a},700:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .PasteChartDialog .Island{display:flex;flex-direction:column}}.excalidraw .PasteChartDialog .container{display:flex;align-items:center;justify-content:space-around;flex-wrap:wrap}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .PasteChartDialog .container{flex-direction:column;justify-content:center}}.excalidraw .PasteChartDialog .ChartPreview{margin:8px;text-align:center;width:192px;height:128px;border-radius:2px;padding:1px;border:1px solid #ced4da;display:flex;align-items:center;justify-content:center;background:transparent}.excalidraw .PasteChartDialog .ChartPreview div{display:inline-block}.excalidraw .PasteChartDialog .ChartPreview svg{max-height:120px;max-width:186px}.excalidraw .PasteChartDialog .ChartPreview:hover{padding:0;border:2px solid #339af0}\",\"\"]);const o=a},287:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .popover{position:fixed;z-index:10}\",\"\"]);const o=a},5657:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .Stack{--gap: 0;display:grid;gap:calc(var(--space-factor) * var(--gap))}.excalidraw .Stack_vertical{grid-template-columns:auto;grid-auto-flow:row;grid-auto-rows:min-content}.excalidraw .Stack_horizontal{grid-template-rows:auto;grid-auto-flow:column;grid-auto-columns:min-content}\",\"\"]);const o=a},7392:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Stats{position:absolute;top:64px;right:12px;font-size:12px;z-index:999}.excalidraw .Stats h3{margin:0 24px 8px 0;white-space:nowrap}.excalidraw .Stats .close{float:right;height:16px;width:16px;cursor:pointer}.excalidraw .Stats .close svg{width:100%;height:100%}.excalidraw .Stats table{width:100%}.excalidraw .Stats table th{border-bottom:1px solid var(--input-border-color);padding:4px}.excalidraw .Stats table tr td:nth-child(2){min-width:24px;text-align:right}:root[dir=rtl] .excalidraw .Stats{left:12px;right:initial}:root[dir=rtl] .excalidraw .Stats h3{margin:0 0 8px 24px}:root[dir=rtl] .excalidraw .Stats .close{float:left}\",\"\"]);const o=a},6065:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .TextInput{color:var(--text-primary-color);display:inline-block;border:1.5px solid var(--button-gray-1);line-height:1;padding:.75rem;white-space:nowrap;border-radius:var(--space-factor);background-color:var(--input-bg-color)}.excalidraw .TextInput:not(:focus):hover{background-color:var(--input-hover-bg-color)}.excalidraw .TextInput:focus{outline:none;box-shadow:0 0 0 2px var(--focus-highlight-color)}\",\"\"]);const o=a},83:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Toast{animation:fade-in .5s;background-color:var(--button-gray-1);border-radius:4px;bottom:10px;box-sizing:border-box;cursor:default;left:50%;margin-left:-150px;padding:4px 0;position:absolute;text-align:center;width:300px;z-index:999999}.excalidraw .Toast__message{color:var(--popup-text-color);white-space:pre-wrap}@keyframes fade-in{from{opacity:0}to{opacity:1}}\",\"\"]);const o=a},1554:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\":export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .ToolIcon{display:inline-flex;align-items:center;position:relative;font-family:Cascadia;cursor:pointer;background-color:var(--button-gray-1);-webkit-tap-highlight-color:transparent;border-radius:var(--space-factor)}.excalidraw .ToolIcon__icon{width:2.5rem;height:2.5rem;color:var(--icon-fill-color);display:flex;justify-content:center;align-items:center;border-radius:var(--space-factor)}.excalidraw .ToolIcon__icon svg{position:relative;height:1em;fill:var(--icon-fill-color);color:var(--icon-fill-color)}.excalidraw .ToolIcon__icon+.ToolIcon__label{margin-inline-start:0}.excalidraw .ToolIcon__label{color:var(--icon-fill-color);font-family:var(--ui-font);margin:0 .8em;text-overflow:ellipsis}.excalidraw .ToolIcon_size_s .ToolIcon__icon{width:1.4rem;height:1.4rem;font-size:.8em}.excalidraw .excalidraw .ToolIcon_type_button,.excalidraw .Modal .ToolIcon_type_button,.excalidraw .ToolIcon_type_button{padding:0;border:none;margin:0;font-size:inherit}.excalidraw .excalidraw .ToolIcon_type_button:hover,.excalidraw .Modal .ToolIcon_type_button:hover,.excalidraw .ToolIcon_type_button:hover{background-color:var(--button-gray-1)}.excalidraw .excalidraw .ToolIcon_type_button:active,.excalidraw .Modal .ToolIcon_type_button:active,.excalidraw .ToolIcon_type_button:active{background-color:var(--button-gray-2)}.excalidraw .excalidraw .ToolIcon_type_button:focus,.excalidraw .Modal .ToolIcon_type_button:focus,.excalidraw .ToolIcon_type_button:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .excalidraw .ToolIcon_type_button.ToolIcon--selected,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected,.excalidraw .ToolIcon_type_button.ToolIcon--selected{background-color:var(--button-gray-2)}.excalidraw .excalidraw .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .Modal .ToolIcon_type_button.ToolIcon--selected:active,.excalidraw .ToolIcon_type_button.ToolIcon--selected:active{background-color:var(--button-gray-3)}.excalidraw .excalidraw .ToolIcon_type_button--show,.excalidraw .Modal .ToolIcon_type_button--show,.excalidraw .ToolIcon_type_button--show{visibility:visible}.excalidraw .excalidraw .ToolIcon_type_button--hide,.excalidraw .Modal .ToolIcon_type_button--hide,.excalidraw .ToolIcon_type_button--hide{visibility:hidden}.excalidraw .ToolIcon_type_radio,.excalidraw .ToolIcon_type_checkbox{position:absolute;opacity:0;pointer-events:none}.excalidraw .ToolIcon_type_radio:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:not(.ToolIcon_toggle_opaque):checked+.ToolIcon__icon{background-color:var(--button-gray-2)}.excalidraw .ToolIcon_type_radio:focus+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:focus+.ToolIcon__icon{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .ToolIcon_type_radio:active+.ToolIcon__icon,.excalidraw .ToolIcon_type_checkbox:active+.ToolIcon__icon{background-color:var(--button-gray-3)}.excalidraw .ToolIcon_type_floating{background-color:transparent}.excalidraw .ToolIcon_type_floating:hover{background-color:transparent}.excalidraw .ToolIcon_type_floating:active{background-color:transparent}.excalidraw .ToolIcon_type_floating:focus{box-shadow:none}.excalidraw .ToolIcon_type_floating .ToolIcon__icon{width:2rem;height:2em}.excalidraw .ToolIcon.ToolIcon__lock.ToolIcon_type_floating{margin-left:.1rem}.excalidraw .ToolIcon__keybinding{position:absolute;bottom:2px;right:3px;font-size:.5em;color:var(--keybinding-color);font-family:var(--ui-font);user-select:none}@media(max-width: 425px){.excalidraw .Shape .ToolIcon__icon{width:2rem;height:2rem}.excalidraw .Shape .ToolIcon__icon svg{height:.8em}}@media(max-width: 760px){.excalidraw .ToolIcon.ToolIcon__lock{display:inline-block;position:absolute;top:60px;right:-8px;margin-left:0;border-radius:20px 0 0 20px;z-index:1;background-color:var(--button-gray-1)}.excalidraw .ToolIcon.ToolIcon__lock:hover{background-color:var(--button-gray-1)}.excalidraw .ToolIcon.ToolIcon__lock:active{background-color:var(--button-gray-2)}.excalidraw .ToolIcon.ToolIcon__lock .ToolIcon__icon{border-radius:inherit}.excalidraw .ToolIcon.ToolIcon__lock svg{position:static}}.excalidraw .TooltipIcon{width:.9em;height:.9em;margin-left:5px;margin-top:1px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw .TooltipIcon{display:none}}:root[dir=ltr] .excalidraw .unlocked-icon{left:2px}:root[dir=rtl] .excalidraw .unlocked-icon{right:2px}\",\"\"]);const o=a},1970:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw .Tooltip{position:relative}.excalidraw .Tooltip__label{--arrow-size: 4px;visibility:hidden;background:#000;color:#fff;text-align:center;border-radius:6px;padding:8px;position:absolute;z-index:10;font-size:13px;line-height:1.5;font-weight:500;left:calc(50% + var(--arrow-size) \/ 2 - 1px);transform:translateX(-50%);word-wrap:break-word}.excalidraw .Tooltip__label::after{content:\"\";border:var(--arrow-size) solid transparent;position:absolute;left:calc(50% - var(--arrow-size))}.excalidraw .Tooltip__label--above{bottom:calc(100% + var(--arrow-size) + 3px)}.excalidraw .Tooltip__label--above::after{border-top-color:#000;top:100%}.excalidraw .Tooltip__label--below{top:calc(100% + var(--arrow-size) + 3px)}.excalidraw .Tooltip__label--below::after{border-bottom-color:#000;bottom:100%}.excalidraw .Tooltip:hover .Tooltip__label{visibility:visible}.excalidraw .Tooltip__label:hover{visibility:visible}',\"\"]);const o=a},961:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".excalidraw .UserList{pointer-events:none;padding:var(--space-factor) 40px var(--space-factor) var(--space-factor);display:flex;flex-wrap:wrap;justify-content:flex-end}.excalidraw .UserList>*{pointer-events:all;margin:0 0 var(--space-factor) var(--space-factor)}.excalidraw .UserList_mobile{padding:0;justify-content:normal}.excalidraw .UserList_mobile>*{margin:0 var(--space-factor) var(--space-factor) 0}\",\"\"]);const o=a},4878:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\".visually-hidden{position:absolute !important;height:1px;width:1px;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);white-space:nowrap}.LoadingMessage{position:absolute;top:0;right:0;bottom:0;left:0;z-index:999;display:flex;align-items:center;justify-content:center;pointer-events:none}.LoadingMessage span{background-color:var(--button-gray-1);border-radius:5px;padding:.8em 1.2em;color:var(--popup-text-color);font-size:1.3em}\",\"\"]);const o=a},1988:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,':export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}:export{isMobileQuery:(max-width: 600px), (max-height: 500px) and (max-width: 1000px);appearanceFilter:invert(93%) hue-rotate(180deg)}.excalidraw{--appearance-filter: none;--button-destructive-bg-color: #ffe3e3;--button-destructive-color: #c92a2a;--button-gray-1: #e9ecef;--button-gray-2: #ced4da;--button-gray-3: #adb5bd;--button-special-active-bg-color: #ebfbee;--dialog-border-color: #868e96;--dropdown-icon: url(\\'data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>\\');--focus-highlight-color: #a5d8ff;--icon-fill-color: #000000;--icon-green-fill-color: #2b8a3e;--input-bg-color: #ffffff;--input-border-color: #dee2e6;--input-hover-bg-color: #f1f3f5;--input-label-color: #495057;--island-bg-color: rgba(255, 255, 255, 0.9);--keybinding-color: #adb5bd;--link-color: #1c7ed6;--overlay-bg-color: rgba(255, 255, 255, 0.88);--popup-bg-color: #ffffff;--popup-secondary-bg-color: #f1f3f5;--popup-text-color: #000000;--popup-text-inverted-color: #ffffff;--sab: env(safe-area-inset-bottom);--sal: env(safe-area-inset-left);--sar: env(safe-area-inset-right);--sat: env(safe-area-inset-top);--select-highlight-color: #339af0;--shadow-island: 0 1px 5px rgba(0, 0, 0, 0.15);--space-factor: 0.25rem;--text-primary-color: #343a40}.excalidraw.Appearance_dark{background:#000}.excalidraw.Appearance_dark.Appearance_dark-background-none{background:none}.excalidraw.Appearance_dark{--appearance-filter: invert(93%) hue-rotate(180deg);--button-destructive-bg-color: #5a0000;--button-destructive-color: #ffa8a8;--button-gray-1: #363636;--button-gray-2: #272727;--button-gray-3: #222;--button-special-active-bg-color: #204624;--dialog-border-color: #212529;--dropdown-icon: url(\\'data:image\/svg+xml,<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"292.4\" height=\"292.4\" viewBox=\"0 0 292 292\"><path fill=\"%23ced4da\" d=\"M287 197L159 69c-4-3-8-5-13-5s-9 2-13 5L5 197c-3 4-5 8-5 13s2 9 5 13c4 4 8 5 13 5h256c5 0 9-1 13-5s5-8 5-13-1-9-5-13z\"\/><\/svg>\\');--focus-highlight-color: #228be6;--icon-fill-color: #ced4da;--icon-green-fill-color: #69db7c;--input-bg-color: #121212;--input-border-color: #2e2e2e;--input-hover-bg-color: #181818;--input-label-color: #e9ecef;--island-bg-color: #1e1e1e;--keybinding-color: #868e96;--overlay-bg-color: rgba(52, 58, 64, 0.12);--popup-bg-color: #2c2c2c;--popup-secondary-bg-color: #222;--popup-text-color: #ced4da;--popup-text-inverted-color: #2c2c2c;--select-highlight-color: #4dabf7;--shadow-island: 0 1px 5px rgba(0, 0, 0, 0.3);--text-primary-color: #ced4da}:root{--zIndex-canvas: 1;--zIndex-wysiwyg: 2;--zIndex-layerUI: 3}.excalidraw{position:relative;overflow:hidden;color:var(--text-primary-color);display:flex;top:0;bottom:0;left:0;right:0}.excalidraw a{font-weight:500;text-decoration:none;color:var(--link-color)}.excalidraw a:hover{text-decoration:underline}.excalidraw canvas{touch-action:none;user-select:none;image-rendering:pixelated;image-rendering:-moz-crisp-edges;z-index:var(--zIndex-canvas)}.excalidraw.Appearance_dark canvas{filter:var(--appearance-filter)}.excalidraw .FixedSideContainer{padding-top:var(--sat, 0);padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0)}.excalidraw .panelRow{display:flex;justify-content:space-between}.excalidraw .panelColumn{display:flex;flex-direction:column}.excalidraw .panelColumn h3,.excalidraw .panelColumn legend,.excalidraw .panelColumn .control-label{margin-top:.333rem;margin-bottom:.333rem;font-size:.75rem;color:var(--text-primary-color);font-weight:bold;display:block}.excalidraw .panelColumn .control-label input{display:block;width:100%}.excalidraw .panelColumn h3:first-child,.excalidraw .panelColumn legend:first-child,.excalidraw .panelColumn .control-label:first-child{margin-top:0}.excalidraw .panelColumn legend{padding:0}.excalidraw .panelColumn .iconSelectList{flex-wrap:wrap;position:relative}.excalidraw .panelColumn .buttonList{flex-wrap:wrap}.excalidraw .panelColumn .buttonList label{margin-right:.25rem;font-size:.75rem;display:inline-block}.excalidraw .panelColumn .buttonList input[type=radio],.excalidraw .panelColumn .buttonList input[type=button]{opacity:0;position:absolute;pointer-events:none}.excalidraw .panelColumn .buttonList .iconRow{margin-top:8px}.excalidraw .panelColumn .buttonList .ToolIcon{margin:0;margin-inline-end:8px}.excalidraw .panelColumn .buttonList .ToolIcon:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .panelColumn .buttonList .ToolIcon:hover{background-color:var(--button-gray-2)}.excalidraw .panelColumn .buttonList .ToolIcon:active{background-color:var(--button-gray-3)}.excalidraw .panelColumn .buttonList .ToolIcon:disabled{cursor:not-allowed}.excalidraw .panelColumn .buttonList .ToolIcon__icon{width:28px;height:28px}.excalidraw .panelColumn fieldset{margin:0;margin-top:.333rem;padding:0;border:none}.excalidraw .divider{width:1px;background-color:#e9ecef;margin:1px}.excalidraw .buttonList label:focus-within,.excalidraw input:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw button,.excalidraw .buttonList label{user-select:none;background-color:var(--button-gray-1);border:0;border-radius:4px;margin:.125rem 0;padding:.25rem;white-space:nowrap;cursor:pointer}.excalidraw button:focus,.excalidraw .buttonList label:focus{outline:transparent;box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw button:hover,.excalidraw .buttonList label:hover{background-color:var(--button-gray-2)}.excalidraw button:active,.excalidraw .buttonList label:active{background-color:var(--button-gray-3)}.excalidraw button:disabled,.excalidraw .buttonList label:disabled{cursor:not-allowed}.excalidraw .active,.excalidraw .buttonList label.active{background-color:var(--button-gray-2)}.excalidraw .active:hover,.excalidraw .buttonList label.active:hover{background-color:var(--button-gray-2)}.excalidraw .active:active,.excalidraw .buttonList label.active:active{background-color:var(--button-gray-3)}.excalidraw .buttonList.buttonListIcon label{display:inline-flex;justify-content:center;align-items:center}.excalidraw .buttonList.buttonListIcon label svg{width:36px;height:18px;opacity:.6}.excalidraw .buttonList.buttonListIcon label.active svg{opacity:1}.excalidraw .App-top-bar{z-index:var(--zIndex-layerUI);display:flex;flex-direction:column;align-items:center}.excalidraw .App-bottom-bar{position:absolute;top:0;bottom:0;left:0;right:0;--bar-padding: calc(4 * var(--space-factor));padding-top:max(var(--bar-padding), var(--sat,0));padding-right:var(--sar, 0);padding-bottom:var(--sab, 0);padding-left:var(--sal, 0);z-index:4;display:flex;align-items:flex-end;pointer-events:none}.excalidraw .App-bottom-bar>.Island{width:100%;max-width:100%;min-width:100%;box-sizing:border-box;max-height:100%;display:flex;flex-direction:column;pointer-events:initial}.excalidraw .App-bottom-bar>.Island .panelColumn{padding:8px 8px 0 8px}.excalidraw .App-toolbar{width:100%;box-sizing:border-box}.excalidraw .App-toolbar-content{display:flex;align-items:center;justify-content:space-between;padding:8px}.excalidraw .App-mobile-menu{width:100%;overflow-x:visible;overflow-y:auto;box-sizing:border-box;margin-bottom:var(--bar-padding)}.excalidraw .App-menu{display:grid;color:var(--icon-fill-color)}.excalidraw .App-menu_top{grid-template-columns:1fr auto 1fr;grid-gap:4px;align-items:flex-start;cursor:default;pointer-events:none !important}.excalidraw .layer-ui__wrapper:not(.disable-pointerEvents) .App-menu_top>*{pointer-events:all}.excalidraw .App-menu_top>*:first-child{justify-self:flex-start}.excalidraw .App-menu_top>*:last-child{justify-self:flex-end}.excalidraw .App-menu_bottom{position:absolute;bottom:0;grid-template-columns:1fr auto 1fr;grid-gap:4px;align-items:flex-start;cursor:default;pointer-events:none !important;z-index:100}:root[dir=ltr] .excalidraw .App-menu_bottom{left:.25rem}:root[dir=rtl] .excalidraw .App-menu_bottom{right:.25rem}.excalidraw .App-menu_bottom--transition-left section{width:185px}.excalidraw .App-menu_bottom section{display:flex}.excalidraw .layer-ui__wrapper:not(.disable-pointerEvents) .App-menu_bottom>*{pointer-events:all}.excalidraw .App-menu_bottom>*:first-child{justify-self:flex-start}.excalidraw .App-menu_bottom>*:last-child{justify-self:flex-end}.excalidraw .App-menu_left{grid-template-rows:1fr auto 1fr;height:100%}.excalidraw .App-menu_right{grid-template-rows:1fr;height:100%}.excalidraw .App-menu__left{overflow-y:auto}.excalidraw .dropdown-select{height:1.5rem;padding:0;padding-inline-start:.5rem;padding-inline-end:1.5rem;color:var(--icon-fill-color);background-color:var(--button-gray-1);border-radius:var(--space-factor);border:1px solid var(--button-gray-2);font-size:.8rem;outline:none;appearance:none;background-image:var(--dropdown-icon);background-repeat:no-repeat;background-position:right .7rem top 50%,0 0;background-size:.65em auto,100%}:root[dir=rtl] .excalidraw .dropdown-select{background-position:left .7rem top 50%,0 0}.excalidraw .dropdown-select:focus{box-shadow:0 0 0 2px var(--focus-highlight-color)}.excalidraw .dropdown-select:hover{background-color:var(--button-gray-2)}.excalidraw .dropdown-select:active{background-color:var(--button-gray-2)}.excalidraw .dropdown-select.dropdown-select--floating{position:absolute;margin:.5em}.excalidraw .dropdown-select__language.dropdown-select--floating{position:absolute;bottom:10px}:root[dir=ltr] .excalidraw .dropdown-select__language.dropdown-select--floating{right:44px}:root[dir=rtl] .excalidraw .dropdown-select__language.dropdown-select--floating{left:44px}.excalidraw .zIndexButton{margin:0;margin-inline-end:8px;padding:5px;display:inline-flex;align-items:center;justify-content:center}.excalidraw .zIndexButton svg{width:18px;height:18px}.excalidraw .scroll-back-to-content{color:var(--popup-text-color);position:absolute;left:50%;bottom:30px;transform:translateX(-50%);padding:10px 20px}.excalidraw .help-icon{position:absolute;cursor:pointer;fill:#868e96;bottom:14px;width:1.5rem}:root[dir=ltr] .excalidraw .help-icon{right:14px}:root[dir=rtl] .excalidraw .help-icon{left:14px}@media(max-width: 600px),(max-height: 500px)and (max-width: 1000px){.excalidraw aside{display:none}.excalidraw .scroll-back-to-content{bottom:calc(80px + var(--sab, 0));z-index:-1}}:root[dir=rtl] .excalidraw .rtl-mirror{transform:scaleX(-1)}.excalidraw .github-corner{position:absolute;top:0;z-index:2}:root[dir=ltr] .excalidraw .github-corner{right:0}:root[dir=rtl] .excalidraw .github-corner{left:0}.excalidraw .zen-mode-visibility{visibility:visible;opacity:1;height:auto;width:auto;transition:opacity .5s}.excalidraw .zen-mode-visibility.zen-mode-visibility--hidden{visibility:hidden;opacity:0;height:0;width:0;transition:opacity .5s}.excalidraw .disable-pointerEvents{pointer-events:none !important}.excalidraw.excalidraw--view-mode .App-menu{display:flex;justify-content:space-between}@media print{.excalidraw .App-bottom-bar,.excalidraw .FixedSideContainer,.excalidraw .layer-ui__wrapper{display:none}}.ErrorSplash.excalidraw{min-height:100vh;padding:20px 0;overflow:auto;display:flex;align-items:center;justify-content:center;user-select:text}.ErrorSplash.excalidraw .ErrorSplash-messageContainer{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:40px;background-color:#ffe3e3;border:3px solid #c92a2a}.ErrorSplash.excalidraw .ErrorSplash-paragraph{margin:15px 0;max-width:600px}.ErrorSplash.excalidraw .ErrorSplash-paragraph.align-center{text-align:center}.ErrorSplash.excalidraw .bigger,.ErrorSplash.excalidraw .bigger button{font-size:1.1em}.ErrorSplash.excalidraw .smaller,.ErrorSplash.excalidraw .smaller button{font-size:.9em}.ErrorSplash.excalidraw .ErrorSplash-details{display:flex;flex-direction:column;align-items:flex-start}.ErrorSplash.excalidraw .ErrorSplash-details textarea{width:100%;margin:10px 0;font-family:\"Cascadia\";font-size:.8em}',\"\"]);const o=a},3245:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>o});var r=n(3645),a=n.n(r)()((function(e){return e[1]}));a.push([e.id,\"\",\"\"]),a.locals={isMobileQuery:\"(max-width: 600px), (max-height: 500px) and (max-width: 1000px)\",appearanceFilter:\"invert(93%) hue-rotate(180deg)\"};const o=a},3645:e=>{\"use strict\";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?\"@media \".concat(t[2],\" {\").concat(n,\"}\"):n})).join(\"\")},t.i=function(e,n,r){\"string\"==typeof e&&(e=[[null,e,\"\"]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&a[c[0]]||(n&&(c[2]?c[2]=\"\".concat(n,\" and \").concat(c[2]):c[2]=n),t.push(c))}},t}},1667:e=>{\"use strict\";e.exports=function(e,t){return t||(t={}),\"string\"!=typeof(e=e&&e.__esModule?e.default:e)?e:(\/^['\"].*['\"]$\/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),\/[\"'() \\t\\n]\/.test(e)||t.needQuotes?'\"'.concat(e.replace(\/\"\/g,'\\\\\"').replace(\/\\n\/g,\"\\\\n\"),'\"'):e)}},9638:(e,t,n)=>{\"use strict\";n.d(t,{Z:()=>r});const r=n.p+\"excalidraw-assets\/Cascadia.woff2\"},7464:(e,t,n)=>{\"use strict\";n.d(t,{Z:()=>r});const r=n.p+\"excalidraw-assets\/Virgil.woff2\"},8288:(e,t,n)=>{\"use strict\";n.d(t,{iC:()=>i,f:()=>l,qx:()=>c,Iw:()=>s,$e:()=>u,wZ:()=>d,ay:()=>p,oc:()=>f,Oh:()=>h,Ks:()=>r,Vi:()=>m,$C:()=>g,ut:()=>v,_D:()=>b,n5:()=>y,rk:()=>w,Hg:()=>x,hs:()=>E,eQ:()=>k,k:()=>S,LO:()=>C,I:()=>O,Gj:()=>M,nM:()=>T,Lg:()=>I,HM:()=>P,V4:()=>A,EH:()=>_,Gi:()=>L});var r,a=n(2189),o=n.n(a),i=\"Excalidraw\",l=10,c=8,s=5,u=1,d=30,p=Math.PI\/12,f={TEXT:\"text\",CROSSHAIR:\"crosshair\",GRABBING:\"grabbing\",POINTER:\"pointer\",MOVE:\"move\",AUTO:\"\"},h={MAIN:0,WHEEL:1,SECONDARY:2,TOUCH:-1};!function(e){e.COPY=\"copy\",e.PASTE=\"paste\",e.CUT=\"cut\",e.KEYDOWN=\"keydown\",e.KEYUP=\"keyup\",e.MOUSE_MOVE=\"mousemove\",e.RESIZE=\"resize\",e.UNLOAD=\"unload\",e.BLUR=\"blur\",e.DRAG_OVER=\"dragover\",e.DROP=\"drop\",e.GESTURE_END=\"gestureend\",e.BEFORE_UNLOAD=\"beforeunload\",e.GESTURE_START=\"gesturestart\",e.GESTURE_CHANGE=\"gesturechange\",e.POINTER_MOVE=\"pointermove\",e.POINTER_UP=\"pointerup\",e.STATE_CHANGE=\"statechange\",e.WHEEL=\"wheel\",e.TOUCH_START=\"touchstart\",e.TOUCH_END=\"touchend\",e.HASHCHANGE=\"hashchange\",e.VISIBILITY_CHANGE=\"visibilitychange\",e.SCROLL=\"scroll\"}(r||(r={}));var m={TEST:\"test\",DEVELOPMENT:\"development\"},g={SHAPE_ACTIONS_MENU:\"App-menu__left\"},v={1:\"Virgil\",2:\"Helvetica\",3:\"Cascadia\"},b=\"Segoe UI Emoji\",y=20,w=1,x=\"left\",E=\"top\",k=\"{version}\",S=20,C={excalidraw:\"application\/vnd.excalidraw+json\",excalidrawlib:\"application\/vnd.excalidrawlib+json\"},O={LOCAL_STORAGE_LIBRARY:\"excalidraw-library\"},M=300,T=500,I=5e3,P=100,A=.1,_={VIEW:\"viewMode\",ZEN:\"zenMode\",GRID:\"gridMode\"},L=o().appearanceFilter},3956:(e,t,n)=>{\"use strict\";n.r(t),n.d(t,{default:()=>sf,defaultLang:()=>g,getElementMap:()=>ei,getSceneVersion:()=>ti,getSyncableElements:()=>Jo,languages:()=>v,restore:()=>Ms,restoreAppState:()=>Os,restoreElements:()=>Cs});var r=n(7154),a=n.n(r),o=n(6479),i=n.n(o),l=n(4698),c=n.n(l),s=n(8288);const u=JSON.parse('{\"u2\":\"@excalidraw\/excalidraw\",\"i8\":\"0.4.3\"}');\"production\"!==s.Vi.TEST&&(n.p=window.EXCALIDRAW_ASSET_PATH||\"https:\/\/unpkg.com\/\".concat(u.u2,\"@\").concat(u.i8,\"\/dist\/\"));var d=n(5374),p=n.n(d),f=n(2829),h=n(2051),m=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},g={code:\"en\",label:\"English\"},v=[{code:\"ar-SA\",label:\"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\",rtl:!0},{code:\"bg-BG\",label:\"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\"},{code:\"ca-ES\",label:\"Catal\u00e0\"},{code:\"de-DE\",label:\"Deutsch\"},{code:\"el-GR\",label:\"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\"},{code:\"es-ES\",label:\"Espa\u00f1ol\"},{code:\"fa-IR\",label:\"\u0641\u0627\u0631\u0633\u06cc\",rtl:!0},{code:\"fi-FI\",label:\"Suomi\"},{code:\"fr-FR\",label:\"Fran\u00e7ais\"},{code:\"he-IL\",label:\"\u05e2\u05d1\u05e8\u05d9\u05ea\",rtl:!0},{code:\"hi-IN\",label:\"\u0939\u093f\u0928\u094d\u0926\u0940\"},{code:\"hu-HU\",label:\"Magyar\"},{code:\"id-ID\",label:\"Bahasa Indonesia\"},{code:\"it-IT\",label:\"Italiano\"},{code:\"ja-JP\",label:\"\u65e5\u672c\u8a9e\"},{code:\"kab-KAB\",label:\"Taqbaylit\"},{code:\"ko-KR\",label:\"\ud55c\uad6d\uc5b4\"},{code:\"my-MM\",label:\"Burmese\"},{code:\"nb-NO\",label:\"Norsk bokm\u00e5l\"},{code:\"nl-NL\",label:\"Nederlands\"},{code:\"nn-NO\",label:\"Norsk nynorsk\"},{code:\"oc-FR\",label:\"Occitan\"},{code:\"pa-IN\",label:\"\u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40\"},{code:\"pl-PL\",label:\"Polski\"},{code:\"pt-BR\",label:\"Portugu\u00eas Brasileiro\"},{code:\"pt-PT\",label:\"Portugu\u00eas\"},{code:\"ro-RO\",label:\"Rom\u00e2n\u0103\"},{code:\"ru-RU\",label:\"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\"},{code:\"sk-SK\",label:\"Sloven\u010dina\"},{code:\"sv-SE\",label:\"Svenska\"},{code:\"tr-TR\",label:\"T\u00fcrk\u00e7e\"},{code:\"uk-UA\",label:\"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\"},{code:\"zh-CN\",label:\"\u7b80\u4f53\u4e2d\u6587\"},{code:\"zh-TW\",label:\"\u7e41\u9ad4\u4e2d\u6587\"}].concat([g]).sort((function(e,t){return e.label>t.label?1:-1})).filter((function(e){return h[e.code]>=85})),b=\"__test__\";\"production\"===s.Vi.DEVELOPMENT&&v.unshift({code:b,label:\"test language\"},{code:\"\".concat(b,\".rtl\"),label:\"\u202atest language (rtl)\u202c\",rtl:!0});var y,w=g,x={},E=function(){var e=p()((function(e){return m(this,(function(t){switch(t.label){case 0:return w=e,document.documentElement.dir=w.rtl?\"rtl\":\"ltr\",document.documentElement.lang=w.code,e.code.startsWith(b)?(x={},[3,3]):[3,1];case 1:return[4,n(788)(\".\/\".concat(w.code,\".json\"))];case 2:x=t.sent(),t.label=3;case 3:return[2]}}))}));return function(t){return e.apply(this,arguments)}}(),k=function(){return w},S=function(e,t){for(var n=0;n<t.length;++n){var r=t[n];if(void 0===e[r])return;e=e[r]}if(\"string\"==typeof e)return e},C=function(e,t){if(w.code.startsWith(b)){var n=t?\"\".concat(e,\"(\").concat(JSON.stringify(t).slice(1,-1),\")\"):e;return\"\u202a[[\".concat(n,\"]]\u202c\")}var r=e.split(\".\"),a=S(x,r)||S(f,r);if(void 0===a)throw new Error(\"Can't find translation for \".concat(e));if(t)for(var o in t)a=a.replace(\"{{\".concat(o,\"}}\"),t[o]);return a},O=function(){return c().createElement(\"div\",{className:\"LoadingMessage\"},c().createElement(\"span\",null,C(\"labels.loadingScene\")))},M=(y=function(e,t){return(y=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Class extends value \"+String(t)+\" is not a constructor or null\");function n(){this.constructor=e}y(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),T=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},I=function(e){function t(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r,a=this;return r=a=e.apply(this,t)||this,a.state={isLoading:!0},r}return M(t,e),t.prototype.componentDidMount=function(){var e=this;return p()((function(){var t;return T(this,(function(n){switch(n.label){case 0:return t=v.find((function(t){return t.code===e.props.langCode}))||g,[4,E(t)];case 1:return n.sent(),e.setState({isLoading:!1}),[2]}}))}))()},t.prototype.render=function(){return this.state.isLoading?c().createElement(O,null):this.props.children},t}(c().Component),P=n(566),A=n.n(P);function _(e,t){return Math.pow(e[0]-t[0],2)+Math.pow(e[1]-t[1],2)}function L(e,t,n){const r=_(t,n);if(0===r)return _(e,t);let a=((e[0]-t[0])*(n[0]-t[0])+(e[1]-t[1])*(n[1]-t[1]))\/r;return a=Math.max(0,Math.min(1,a)),_(e,D(t,n,a))}function D(e,t,n){return[e[0]+(t[0]-e[0])*n,e[1]+(t[1]-e[1])*n]}function j(e,t,n,r){const a=r||[];if(function(e,t){const n=e[t+0],r=e[t+1],a=e[t+2],o=e[t+3];let i=3*r[0]-2*n[0]-o[0];i*=i;let l=3*r[1]-2*n[1]-o[1];l*=l;let c=3*a[0]-2*o[0]-n[0];c*=c;let s=3*a[1]-2*o[1]-n[1];return s*=s,i<c&&(i=c),l<s&&(l=s),i+l}(e,t)<n){const n=e[t+0];if(a.length){(o=a[a.length-1],i=n,Math.sqrt(_(o,i)))>1&&a.push(n)}else a.push(n);a.push(e[t+3])}else{const r=.5,o=e[t+0],i=e[t+1],l=e[t+2],c=e[t+3],s=D(o,i,r),u=D(i,l,r),d=D(l,c,r),p=D(s,u,r),f=D(u,d,r),h=D(p,f,r);j([o,s,p,h],0,n,a),j([h,f,d,c],0,n,a)}var o,i;return a}function z(e,t){return B(e,0,e.length,t)}function B(e,t,n,r,a){const o=a||[],i=e[t],l=e[n-1];let c=0,s=1;for(let r=t+1;r<n-1;++r){const t=L(e[r],i,l);t>c&&(c=t,s=r)}return Math.sqrt(c)>r?(B(e,t,s+1,r,o),B(e,s,n,r,o)):(o.length||o.push(i),o.push(l)),o}function H(e,t=.15,n){const r=[],a=(e.length-1)\/3;for(let n=0;n<a;n++){j(e,3*n,t,r)}return n&&n>0?B(r,0,r.length,n):r}function N(e,t,n){if(e&&e.length){const[r,a]=t,o=Math.PI\/180*n,i=Math.cos(o),l=Math.sin(o);e.forEach((e=>{const[t,n]=e;e[0]=(t-r)*i-(n-a)*l+r,e[1]=(t-r)*l+(n-a)*i+a}))}}function R(e){const t=e[0],n=e[1];return Math.sqrt(Math.pow(t[0]-n[0],2)+Math.pow(t[1]-n[1],2))}function F(e,t,n,r){const a=t[1]-e[1],o=e[0]-t[0],i=a*e[0]+o*e[1],l=r[1]-n[1],c=n[0]-r[0],s=l*n[0]+c*n[1],u=a*c-l*o;return u?[(c*i-o*s)\/u,(a*s-l*i)\/u]:null}function W(e,t,n){const r=e.length;if(r<3)return!1;const a=[Number.MAX_SAFE_INTEGER,n],o=[t,n];let i=0;for(let t=0;t<r;t++){const n=e[t],l=e[(t+1)%r];if(K(n,l,o,a)){if(0===V(n,o,l))return G(n,o,l);i++}}return i%2==1}function G(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])}function V(e,t,n){const r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2}function K(e,t,n,r){const a=V(e,t,n),o=V(e,t,r),i=V(n,r,e),l=V(n,r,t);return a!==o&&i!==l||(!(0!==a||!G(e,n,t))||(!(0!==o||!G(e,r,t))||(!(0!==i||!G(n,e,r))||!(0!==l||!G(n,t,r)))))}function U(e,t){const n=[0,0],r=Math.round(t.hachureAngle+90);r&&N(e,n,r);const a=function(e,t){const n=[...e];n[0].join(\",\")!==n[n.length-1].join(\",\")&&n.push([n[0][0],n[0][1]]);const r=[];if(n&&n.length>2){let e=t.hachureGap;e<0&&(e=4*t.strokeWidth),e=Math.max(e,.1);const a=[];for(let e=0;e<n.length-1;e++){const t=n[e],r=n[e+1];if(t[1]!==r[1]){const e=Math.min(t[1],r[1]);a.push({ymin:e,ymax:Math.max(t[1],r[1]),x:e===t[1]?t[0]:r[0],islope:(r[0]-t[0])\/(r[1]-t[1])})}}if(a.sort(((e,t)=>e.ymin<t.ymin?-1:e.ymin>t.ymin?1:e.x<t.x?-1:e.x>t.x?1:e.ymax===t.ymax?0:(e.ymax-t.ymax)\/Math.abs(e.ymax-t.ymax))),!a.length)return r;let o=[],i=a[0].ymin;for(;o.length||a.length;){if(a.length){let e=-1;for(let t=0;t<a.length&&!(a[t].ymin>i);t++)e=t;a.splice(0,e+1).forEach((e=>{o.push({s:i,edge:e})}))}if(o=o.filter((e=>!(e.edge.ymax<=i))),o.sort(((e,t)=>e.edge.x===t.edge.x?0:(e.edge.x-t.edge.x)\/Math.abs(e.edge.x-t.edge.x))),o.length>1)for(let e=0;e<o.length;e+=2){const t=e+1;if(t>=o.length)break;const n=o[e].edge,a=o[t].edge;r.push([[Math.round(n.x),i],[Math.round(a.x),i]])}i+=e,o.forEach((t=>{t.edge.x=t.edge.x+e*t.edge.islope}))}}return r}(e,t);return r&&(N(e,n,-r),function(e,t,n){const r=[];e.forEach((e=>r.push(...e))),N(r,t,n)}(a,n,-r)),a}class Y{constructor(e){this.helper=e}fillPolygon(e,t){return this._fillPolygon(e,t)}_fillPolygon(e,t,n=!1){let r=U(e,t);if(n){const t=this.connectingLines(e,r);r=r.concat(t)}return{type:\"fillSketch\",ops:this.renderLines(r,t)}}renderLines(e,t){const n=[];for(const r of e)n.push(...this.helper.doubleLineOps(r[0][0],r[0][1],r[1][0],r[1][1],t));return n}connectingLines(e,t){const n=[];if(t.length>1)for(let r=1;r<t.length;r++){const a=t[r-1];if(R(a)<3)continue;const o=[t[r][0],a[1]];if(R(o)>3){const t=this.splitOnIntersections(e,o);n.push(...t)}}return n}midPointInPolygon(e,t){return W(e,(t[0][0]+t[1][0])\/2,(t[0][1]+t[1][1])\/2)}splitOnIntersections(e,t){const n=Math.max(5,.1*R(t)),r=[];for(let a=0;a<e.length;a++){const o=e[a],i=e[(a+1)%e.length];if(K(o,i,...t)){const e=F(o,i,t[0],t[1]);if(e){const a=R([e,t[0]]),o=R([e,t[1]]);a>n&&o>n&&r.push({point:e,distance:a})}}}if(r.length>1){const n=r.sort(((e,t)=>e.distance-t.distance)).map((e=>e.point));if(W(e,...t[0])||n.shift(),W(e,...t[1])||n.pop(),n.length<=1)return this.midPointInPolygon(e,t)?[t]:[];const a=[t[0],...n,t[1]],o=[];for(let t=0;t<a.length-1;t+=2){const n=[a[t],a[t+1]];this.midPointInPolygon(e,n)&&o.push(n)}return o}return this.midPointInPolygon(e,t)?[t]:[]}}class X extends Y{fillPolygon(e,t){return this._fillPolygon(e,t,!0)}}class Z extends Y{fillPolygon(e,t){const n=this._fillPolygon(e,t),r=Object.assign({},t,{hachureAngle:t.hachureAngle+90}),a=this._fillPolygon(e,r);return n.ops=n.ops.concat(a.ops),n}}class q{constructor(e){this.helper=e}fillPolygon(e,t){const n=U(e,t=Object.assign({},t,{curveStepCount:4,hachureAngle:0,roughness:1}));return this.dotsOnLines(n,t)}dotsOnLines(e,t){const n=[];let r=t.hachureGap;r<0&&(r=4*t.strokeWidth),r=Math.max(r,.1);let a=t.fillWeight;a<0&&(a=t.strokeWidth\/2);const o=r\/4;for(const i of e){const e=R(i),l=e\/r,c=Math.ceil(l)-1,s=e-c*r,u=(i[0][0]+i[1][0])\/2-r\/4,d=Math.min(i[0][1],i[1][1]);for(let e=0;e<c;e++){const i=d+s+e*r,l=this.helper.randOffsetWithRange(u-o,u+o,t),c=this.helper.randOffsetWithRange(i-o,i+o,t),p=this.helper.ellipse(l,c,a,a,t);n.push(...p.ops)}}return{type:\"fillSketch\",ops:n}}}class Q{constructor(e){this.helper=e}fillPolygon(e,t){const n=U(e,t);return{type:\"fillSketch\",ops:this.dashedLine(n,t)}}dashedLine(e,t){const n=t.dashOffset<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashOffset,r=t.dashGap<0?t.hachureGap<0?4*t.strokeWidth:t.hachureGap:t.dashGap,a=[];return e.forEach((e=>{const o=R(e),i=Math.floor(o\/(n+r)),l=(o+r-i*(n+r))\/2;let c=e[0],s=e[1];c[0]>s[0]&&(c=e[1],s=e[0]);const u=Math.atan((s[1]-c[1])\/(s[0]-c[0]));for(let e=0;e<i;e++){const o=e*(n+r),i=o+n,s=[c[0]+o*Math.cos(u)+l*Math.cos(u),c[1]+o*Math.sin(u)+l*Math.sin(u)],d=[c[0]+i*Math.cos(u)+l*Math.cos(u),c[1]+i*Math.sin(u)+l*Math.sin(u)];a.push(...this.helper.doubleLineOps(s[0],s[1],d[0],d[1],t))}})),a}}class ${constructor(e){this.helper=e}fillPolygon(e,t){const n=t.hachureGap<0?4*t.strokeWidth:t.hachureGap,r=t.zigzagOffset<0?n:t.zigzagOffset,a=U(e,t=Object.assign({},t,{hachureGap:n+r}));return{type:\"fillSketch\",ops:this.zigzagLines(a,r,t)}}zigzagLines(e,t,n){const r=[];return e.forEach((e=>{const a=R(e),o=Math.round(a\/(2*t));let i=e[0],l=e[1];i[0]>l[0]&&(i=e[1],l=e[0]);const c=Math.atan((l[1]-i[1])\/(l[0]-i[0]));for(let e=0;e<o;e++){const a=2*e*t,o=2*(e+1)*t,l=Math.sqrt(2*Math.pow(t,2)),s=[i[0]+a*Math.cos(c),i[1]+a*Math.sin(c)],u=[i[0]+o*Math.cos(c),i[1]+o*Math.sin(c)],d=[s[0]+l*Math.cos(c+Math.PI\/4),s[1]+l*Math.sin(c+Math.PI\/4)];r.push(...this.helper.doubleLineOps(s[0],s[1],d[0],d[1],n),...this.helper.doubleLineOps(d[0],d[1],u[0],u[1],n))}})),r}}const J={};class ee{constructor(e){this.seed=e}next(){return this.seed?(2**31-1&(this.seed=Math.imul(48271,this.seed)))\/2**31:Math.random()}}const te={A:7,a:7,C:6,c:6,H:1,h:1,L:2,l:2,M:2,m:2,Q:4,q:4,S:4,s:4,T:2,t:2,V:1,v:1,Z:0,z:0};function ne(e,t){return e.type===t}function re(e){const t=[],n=function(e){const t=new Array;for(;\"\"!==e;)if(e.match(\/^([ \\t\\r\\n,]+)\/))e=e.substr(RegExp.$1.length);else if(e.match(\/^([aAcChHlLmMqQsStTvVzZ])\/))t[t.length]={type:0,text:RegExp.$1},e=e.substr(RegExp.$1.length);else{if(!e.match(\/^(([-+]?[0-9]+(\\.[0-9]*)?|[-+]?\\.[0-9]+)([eE][-+]?[0-9]+)?)\/))return[];t[t.length]={type:1,text:`${parseFloat(RegExp.$1)}`},e=e.substr(RegExp.$1.length)}return t[t.length]={type:2,text:\"\"},t}(e);let r=\"BOD\",a=0,o=n[a];for(;!ne(o,2);){let i=0;const l=[];if(\"BOD\"===r){if(\"M\"!==o.text&&\"m\"!==o.text)return re(\"M0,0\"+e);a++,i=te[o.text],r=o.text}else ne(o,1)?i=te[r]:(a++,i=te[o.text],r=o.text);if(!(a+i<n.length))throw new Error(\"Path data ended short\");for(let e=a;e<a+i;e++){const t=n[e];if(!ne(t,1))throw new Error(\"Param not a number: \"+r+\",\"+t.text);l[l.length]=+t.text}if(\"number\"!=typeof te[r])throw new Error(\"Bad segment: \"+r);{const e={key:r,data:l};t.push(e),a+=i,o=n[a],\"M\"===r&&(r=\"L\"),\"m\"===r&&(r=\"l\")}}return t}function ae(e){let t=0,n=0,r=0,a=0;const o=[];for(const{key:i,data:l}of e)switch(i){case\"M\":o.push({key:\"M\",data:[...l]}),[t,n]=l,[r,a]=l;break;case\"m\":t+=l[0],n+=l[1],o.push({key:\"M\",data:[t,n]}),r=t,a=n;break;case\"L\":o.push({key:\"L\",data:[...l]}),[t,n]=l;break;case\"l\":t+=l[0],n+=l[1],o.push({key:\"L\",data:[t,n]});break;case\"C\":o.push({key:\"C\",data:[...l]}),t=l[4],n=l[5];break;case\"c\":{const e=l.map(((e,r)=>r%2?e+n:e+t));o.push({key:\"C\",data:e}),t=e[4],n=e[5];break}case\"Q\":o.push({key:\"Q\",data:[...l]}),t=l[2],n=l[3];break;case\"q\":{const e=l.map(((e,r)=>r%2?e+n:e+t));o.push({key:\"Q\",data:e}),t=e[2],n=e[3];break}case\"A\":o.push({key:\"A\",data:[...l]}),t=l[5],n=l[6];break;case\"a\":t+=l[5],n+=l[6],o.push({key:\"A\",data:[l[0],l[1],l[2],l[3],l[4],t,n]});break;case\"H\":o.push({key:\"H\",data:[...l]}),t=l[0];break;case\"h\":t+=l[0],o.push({key:\"H\",data:[t]});break;case\"V\":o.push({key:\"V\",data:[...l]}),n=l[0];break;case\"v\":n+=l[0],o.push({key:\"V\",data:[n]});break;case\"S\":o.push({key:\"S\",data:[...l]}),t=l[2],n=l[3];break;case\"s\":{const e=l.map(((e,r)=>r%2?e+n:e+t));o.push({key:\"S\",data:e}),t=e[2],n=e[3];break}case\"T\":o.push({key:\"T\",data:[...l]}),t=l[0],n=l[1];break;case\"t\":t+=l[0],n+=l[1],o.push({key:\"T\",data:[t,n]});break;case\"Z\":case\"z\":o.push({key:\"Z\",data:[]}),t=r,n=a}return o}function oe(e){const t=[];let n=\"\",r=0,a=0,o=0,i=0,l=0,c=0;for(const{key:s,data:u}of e){switch(s){case\"M\":t.push({key:\"M\",data:[...u]}),[r,a]=u,[o,i]=u;break;case\"C\":t.push({key:\"C\",data:[...u]}),r=u[4],a=u[5],l=u[2],c=u[3];break;case\"L\":t.push({key:\"L\",data:[...u]}),[r,a]=u;break;case\"H\":r=u[0],t.push({key:\"L\",data:[r,a]});break;case\"V\":a=u[0],t.push({key:\"L\",data:[r,a]});break;case\"S\":{let e=0,o=0;\"C\"===n||\"S\"===n?(e=r+(r-l),o=a+(a-c)):(e=r,o=a),t.push({key:\"C\",data:[e,o,...u]}),l=u[0],c=u[1],r=u[2],a=u[3];break}case\"T\":{const[e,o]=u;let i=0,s=0;\"Q\"===n||\"T\"===n?(i=r+(r-l),s=a+(a-c)):(i=r,s=a);const d=r+2*(i-r)\/3,p=a+2*(s-a)\/3,f=e+2*(i-e)\/3,h=o+2*(s-o)\/3;t.push({key:\"C\",data:[d,p,f,h,e,o]}),l=i,c=s,r=e,a=o;break}case\"Q\":{const[e,n,o,i]=u,s=r+2*(e-r)\/3,d=a+2*(n-a)\/3,p=o+2*(e-o)\/3,f=i+2*(n-i)\/3;t.push({key:\"C\",data:[s,d,p,f,o,i]}),l=e,c=n,r=o,a=i;break}case\"A\":{const e=Math.abs(u[0]),n=Math.abs(u[1]),o=u[2],i=u[3],l=u[4],c=u[5],s=u[6];if(0===e||0===n)t.push({key:\"C\",data:[r,a,c,s,c,s]}),r=c,a=s;else if(r!==c||a!==s){le(r,a,c,s,e,n,o,i,l).forEach((function(e){t.push({key:\"C\",data:e})})),r=c,a=s}break}case\"Z\":t.push({key:\"Z\",data:[]}),r=o,a=i}n=s}return t}function ie(e,t,n){return[e*Math.cos(n)-t*Math.sin(n),e*Math.sin(n)+t*Math.cos(n)]}function le(e,t,n,r,a,o,i,l,c,s){const u=(d=i,Math.PI*d\/180);var d;let p=[],f=0,h=0,m=0,g=0;if(s)[f,h,m,g]=s;else{[e,t]=ie(e,t,-u),[n,r]=ie(n,r,-u);const i=(e-n)\/2,s=(t-r)\/2;let d=i*i\/(a*a)+s*s\/(o*o);d>1&&(d=Math.sqrt(d),a*=d,o*=d);const p=a*a,v=o*o,b=p*v-p*s*s-v*i*i,y=p*s*s+v*i*i,w=(l===c?-1:1)*Math.sqrt(Math.abs(b\/y));m=w*a*s\/o+(e+n)\/2,g=w*-o*i\/a+(t+r)\/2,f=Math.asin(parseFloat(((t-g)\/o).toFixed(9))),h=Math.asin(parseFloat(((r-g)\/o).toFixed(9))),e<m&&(f=Math.PI-f),n<m&&(h=Math.PI-h),f<0&&(f=2*Math.PI+f),h<0&&(h=2*Math.PI+h),c&&f>h&&(f-=2*Math.PI),!c&&h>f&&(h-=2*Math.PI)}let v=h-f;if(Math.abs(v)>120*Math.PI\/180){const e=h,t=n,l=r;h=c&&h>f?f+120*Math.PI\/180*1:f+120*Math.PI\/180*-1,p=le(n=m+a*Math.cos(h),r=g+o*Math.sin(h),t,l,a,o,i,0,c,[h,e,m,g])}v=h-f;const b=Math.cos(f),y=Math.sin(f),w=Math.cos(h),x=Math.sin(h),E=Math.tan(v\/4),k=4\/3*a*E,S=4\/3*o*E,C=[e,t],O=[e+k*y,t-S*b],M=[n+k*x,r-S*w],T=[n,r];if(O[0]=2*C[0]-O[0],O[1]=2*C[1]-O[1],s)return[O,M,T].concat(p);{p=[O,M,T].concat(p);const e=[];for(let t=0;t<p.length;t+=3){const n=ie(p[t][0],p[t][1],u),r=ie(p[t+1][0],p[t+1][1],u),a=ie(p[t+2][0],p[t+2][1],u);e.push([n[0],n[1],r[0],r[1],a[0],a[1]])}return e}}const ce={randOffset:function(e,t){return we(e,t)},randOffsetWithRange:function(e,t,n){return ye(e,t,n)},ellipse:function(e,t,n,r,a){const o=fe(n,r,a);return he(e,t,a,o).opset},doubleLineOps:function(e,t,n,r,a){return xe(e,t,n,r,a,!0)}};function se(e,t,n,r,a){return{type:\"path\",ops:xe(e,t,n,r,a)}}function ue(e,t,n){const r=(e||[]).length;if(r>2){const a=[];for(let t=0;t<r-1;t++)a.push(...xe(e[t][0],e[t][1],e[t+1][0],e[t+1][1],n));return t&&a.push(...xe(e[r-1][0],e[r-1][1],e[0][0],e[0][1],n)),{type:\"path\",ops:a}}return 2===r?se(e[0][0],e[0][1],e[1][0],e[1][1],n):{type:\"path\",ops:[]}}function de(e,t,n,r,a){return function(e,t){return ue(e,!0,t)}([[e,t],[e+n,t],[e+n,t+r],[e,t+r]],a)}function pe(e,t){let n=ke(e,1*(1+.2*t.roughness),t);if(!t.disableMultiStroke){const r=ke(e,1.5*(1+.22*t.roughness),function(e){const t=Object.assign({},e);t.randomizer=void 0,e.seed&&(t.seed=e.seed+1);return t}(t));n=n.concat(r)}return{type:\"path\",ops:n}}function fe(e,t,n){const r=Math.sqrt(2*Math.PI*Math.sqrt((Math.pow(e\/2,2)+Math.pow(t\/2,2))\/2)),a=Math.max(n.curveStepCount,n.curveStepCount\/Math.sqrt(200)*r),o=2*Math.PI\/a;let i=Math.abs(e\/2),l=Math.abs(t\/2);const c=1-n.curveFitting;return i+=we(i*c,n),l+=we(l*c,n),{increment:o,rx:i,ry:l}}function he(e,t,n,r){const[a,o]=Ce(r.increment,e,t,r.rx,r.ry,1,r.increment*ye(.1,ye(.4,1,n),n),n);let i=Se(a,null,n);if(!n.disableMultiStroke){const[a]=Ce(r.increment,e,t,r.rx,r.ry,1.5,0,n),o=Se(a,null,n);i=i.concat(o)}return{estimatedPoints:o,opset:{type:\"path\",ops:i}}}function me(e,t,n,r,a,o,i,l,c){const s=e,u=t;let d=Math.abs(n\/2),p=Math.abs(r\/2);d+=we(.01*d,c),p+=we(.01*p,c);let f=a,h=o;for(;f<0;)f+=2*Math.PI,h+=2*Math.PI;h-f>2*Math.PI&&(f=0,h=2*Math.PI);const m=2*Math.PI\/c.curveStepCount,g=Math.min(m\/2,(h-f)\/2),v=Oe(g,s,u,d,p,f,h,1,c);if(!c.disableMultiStroke){const e=Oe(g,s,u,d,p,f,h,1.5,c);v.push(...e)}return i&&(l?v.push(...xe(s,u,s+d*Math.cos(f),u+p*Math.sin(f),c),...xe(s,u,s+d*Math.cos(h),u+p*Math.sin(h),c)):v.push({op:\"lineTo\",data:[s,u]},{op:\"lineTo\",data:[s+d*Math.cos(f),u+p*Math.sin(f)]})),{type:\"path\",ops:v}}function ge(e,t){const n=[];if(e.length){const r=t.maxRandomnessOffset||0,a=e.length;if(a>2){n.push({op:\"move\",data:[e[0][0]+we(r,t),e[0][1]+we(r,t)]});for(let o=1;o<a;o++)n.push({op:\"lineTo\",data:[e[o][0]+we(r,t),e[o][1]+we(r,t)]})}}return{type:\"fillPath\",ops:n}}function ve(e,t){return function(e,t){let n=e.fillStyle||\"hachure\";if(!J[n])switch(n){case\"zigzag\":J[n]||(J[n]=new X(t));break;case\"cross-hatch\":J[n]||(J[n]=new Z(t));break;case\"dots\":J[n]||(J[n]=new q(t));break;case\"dashed\":J[n]||(J[n]=new Q(t));break;case\"zigzag-line\":J[n]||(J[n]=new $(t));break;case\"hachure\":default:n=\"hachure\",J[n]||(J[n]=new Y(t))}return J[n]}(t,ce).fillPolygon(e,t)}function be(e){return e.randomizer||(e.randomizer=new ee(e.seed||0)),e.randomizer.next()}function ye(e,t,n,r=1){return n.roughness*r*(be(n)*(t-e)+e)}function we(e,t,n=1){return ye(-e,e,t,n)}function xe(e,t,n,r,a,o=!1){const i=o?a.disableMultiStrokeFill:a.disableMultiStroke,l=Ee(e,t,n,r,a,!0,!1);if(i)return l;const c=Ee(e,t,n,r,a,!0,!0);return l.concat(c)}function Ee(e,t,n,r,a,o,i){const l=Math.pow(e-n,2)+Math.pow(t-r,2),c=Math.sqrt(l);let s=1;s=c<200?1:c>500?.4:-.0016668*c+1.233334;let u=a.maxRandomnessOffset||0;u*u*100>l&&(u=c\/10);const d=u\/2,p=.2+.2*be(a);let f=a.bowing*a.maxRandomnessOffset*(r-t)\/200,h=a.bowing*a.maxRandomnessOffset*(e-n)\/200;f=we(f,a,s),h=we(h,a,s);const m=[],g=()=>we(d,a,s),v=()=>we(u,a,s);return o&&(i?m.push({op:\"move\",data:[e+g(),t+g()]}):m.push({op:\"move\",data:[e+we(u,a,s),t+we(u,a,s)]})),i?m.push({op:\"bcurveTo\",data:[f+e+(n-e)*p+g(),h+t+(r-t)*p+g(),f+e+2*(n-e)*p+g(),h+t+2*(r-t)*p+g(),n+g(),r+g()]}):m.push({op:\"bcurveTo\",data:[f+e+(n-e)*p+v(),h+t+(r-t)*p+v(),f+e+2*(n-e)*p+v(),h+t+2*(r-t)*p+v(),n+v(),r+v()]}),m}function ke(e,t,n){const r=[];r.push([e[0][0]+we(t,n),e[0][1]+we(t,n)]),r.push([e[0][0]+we(t,n),e[0][1]+we(t,n)]);for(let a=1;a<e.length;a++)r.push([e[a][0]+we(t,n),e[a][1]+we(t,n)]),a===e.length-1&&r.push([e[a][0]+we(t,n),e[a][1]+we(t,n)]);return Se(r,null,n)}function Se(e,t,n){const r=e.length,a=[];if(r>3){const o=[],i=1-n.curveTightness;a.push({op:\"move\",data:[e[1][0],e[1][1]]});for(let t=1;t+2<r;t++){const n=e[t];o[0]=[n[0],n[1]],o[1]=[n[0]+(i*e[t+1][0]-i*e[t-1][0])\/6,n[1]+(i*e[t+1][1]-i*e[t-1][1])\/6],o[2]=[e[t+1][0]+(i*e[t][0]-i*e[t+2][0])\/6,e[t+1][1]+(i*e[t][1]-i*e[t+2][1])\/6],o[3]=[e[t+1][0],e[t+1][1]],a.push({op:\"bcurveTo\",data:[o[1][0],o[1][1],o[2][0],o[2][1],o[3][0],o[3][1]]})}if(t&&2===t.length){const e=n.maxRandomnessOffset;a.push({op:\"lineTo\",data:[t[0]+we(e,n),t[1]+we(e,n)]})}}else 3===r?(a.push({op:\"move\",data:[e[1][0],e[1][1]]}),a.push({op:\"bcurveTo\",data:[e[1][0],e[1][1],e[2][0],e[2][1],e[2][0],e[2][1]]})):2===r&&a.push(...xe(e[0][0],e[0][1],e[1][0],e[1][1],n));return a}function Ce(e,t,n,r,a,o,i,l){const c=[],s=[],u=we(.5,l)-Math.PI\/2;s.push([we(o,l)+t+.9*r*Math.cos(u-e),we(o,l)+n+.9*a*Math.sin(u-e)]);for(let i=u;i<2*Math.PI+u-.01;i+=e){const e=[we(o,l)+t+r*Math.cos(i),we(o,l)+n+a*Math.sin(i)];c.push(e),s.push(e)}return s.push([we(o,l)+t+r*Math.cos(u+2*Math.PI+.5*i),we(o,l)+n+a*Math.sin(u+2*Math.PI+.5*i)]),s.push([we(o,l)+t+.98*r*Math.cos(u+i),we(o,l)+n+.98*a*Math.sin(u+i)]),s.push([we(o,l)+t+.9*r*Math.cos(u+.5*i),we(o,l)+n+.9*a*Math.sin(u+.5*i)]),[s,c]}function Oe(e,t,n,r,a,o,i,l,c){const s=o+we(.1,c),u=[];u.push([we(l,c)+t+.9*r*Math.cos(s-e),we(l,c)+n+.9*a*Math.sin(s-e)]);for(let o=s;o<=i;o+=e)u.push([we(l,c)+t+r*Math.cos(o),we(l,c)+n+a*Math.sin(o)]);return u.push([t+r*Math.cos(i),n+a*Math.sin(i)]),u.push([t+r*Math.cos(i),n+a*Math.sin(i)]),Se(u,null,c)}function Me(e,t,n,r,a,o,i,l){const c=[],s=[l.maxRandomnessOffset||1,(l.maxRandomnessOffset||1)+.3];let u=[0,0];const d=l.disableMultiStroke?1:2;for(let p=0;p<d;p++)0===p?c.push({op:\"move\",data:[i[0],i[1]]}):c.push({op:\"move\",data:[i[0]+we(s[0],l),i[1]+we(s[0],l)]}),u=[a+we(s[p],l),o+we(s[p],l)],c.push({op:\"bcurveTo\",data:[e+we(s[p],l),t+we(s[p],l),n+we(s[p],l),r+we(s[p],l),u[0],u[1]]});return c}function Te(e){return[...e]}const Ie=\"none\";class Pe{constructor(e){this.defaultOptions={maxRandomnessOffset:2,roughness:1,bowing:1,stroke:\"#000\",strokeWidth:1,curveTightness:0,curveFitting:.95,curveStepCount:9,fillStyle:\"hachure\",fillWeight:-1,hachureAngle:-41,hachureGap:-1,dashOffset:-1,dashGap:-1,zigzagOffset:-1,seed:0,combineNestedSvgPaths:!1,disableMultiStroke:!1,disableMultiStrokeFill:!1},this.config=e||{},this.config.options&&(this.defaultOptions=this._o(this.config.options))}static newSeed(){return Math.floor(Math.random()*2**31)}_o(e){return e?Object.assign({},this.defaultOptions,e):this.defaultOptions}_d(e,t,n){return{shape:e,sets:t||[],options:n||this.defaultOptions}}line(e,t,n,r,a){const o=this._o(a);return this._d(\"line\",[se(e,t,n,r,o)],o)}rectangle(e,t,n,r,a){const o=this._o(a),i=[],l=de(e,t,n,r,o);if(o.fill){const a=[[e,t],[e+n,t],[e+n,t+r],[e,t+r]];\"solid\"===o.fillStyle?i.push(ge(a,o)):i.push(ve(a,o))}return o.stroke!==Ie&&i.push(l),this._d(\"rectangle\",i,o)}ellipse(e,t,n,r,a){const o=this._o(a),i=[],l=fe(n,r,o),c=he(e,t,o,l);if(o.fill)if(\"solid\"===o.fillStyle){const n=he(e,t,o,l).opset;n.type=\"fillPath\",i.push(n)}else i.push(ve(c.estimatedPoints,o));return o.stroke!==Ie&&i.push(c.opset),this._d(\"ellipse\",i,o)}circle(e,t,n,r){const a=this.ellipse(e,t,n,n,r);return a.shape=\"circle\",a}linearPath(e,t){const n=this._o(t);return this._d(\"linearPath\",[ue(e,!1,n)],n)}arc(e,t,n,r,a,o,i=!1,l){const c=this._o(l),s=[],u=me(e,t,n,r,a,o,i,!0,c);if(i&&c.fill)if(\"solid\"===c.fillStyle){const i=me(e,t,n,r,a,o,!0,!1,c);i.type=\"fillPath\",s.push(i)}else s.push(function(e,t,n,r,a,o,i){const l=e,c=t;let s=Math.abs(n\/2),u=Math.abs(r\/2);s+=we(.01*s,i),u+=we(.01*u,i);let d=a,p=o;for(;d<0;)d+=2*Math.PI,p+=2*Math.PI;p-d>2*Math.PI&&(d=0,p=2*Math.PI);const f=(p-d)\/i.curveStepCount,h=[];for(let e=d;e<=p;e+=f)h.push([l+s*Math.cos(e),c+u*Math.sin(e)]);return h.push([l+s*Math.cos(p),c+u*Math.sin(p)]),h.push([l,c]),ve(h,i)}(e,t,n,r,a,o,c));return c.stroke!==Ie&&s.push(u),this._d(\"arc\",s,c)}curve(e,t){const n=this._o(t),r=[],a=pe(e,n);if(n.fill&&n.fill!==Ie&&e.length>=3){const t=H(function(e,t=0){const n=e.length;if(n<3)throw new Error(\"A curve must have at least three points.\");const r=[];if(3===n)r.push(Te(e[0]),Te(e[1]),Te(e[2]),Te(e[2]));else{const n=[];n.push(e[0],e[0]);for(let t=1;t<e.length;t++)n.push(e[t]),t===e.length-1&&n.push(e[t]);const a=[],o=1-t;r.push(Te(n[0]));for(let e=1;e+2<n.length;e++){const t=n[e];a[0]=[t[0],t[1]],a[1]=[t[0]+(o*n[e+1][0]-o*n[e-1][0])\/6,t[1]+(o*n[e+1][1]-o*n[e-1][1])\/6],a[2]=[n[e+1][0]+(o*n[e][0]-o*n[e+2][0])\/6,n[e+1][1]+(o*n[e][1]-o*n[e+2][1])\/6],a[3]=[n[e+1][0],n[e+1][1]],r.push(a[1],a[2],a[3])}}return r}(e),10,(1+n.roughness)\/2);\"solid\"===n.fillStyle?r.push(ge(t,n)):r.push(ve(t,n))}return n.stroke!==Ie&&r.push(a),this._d(\"curve\",r,n)}polygon(e,t){const n=this._o(t),r=[],a=ue(e,!0,n);return n.fill&&(\"solid\"===n.fillStyle?r.push(ge(e,n)):r.push(ve(e,n))),n.stroke!==Ie&&r.push(a),this._d(\"polygon\",r,n)}path(e,t){const n=this._o(t),r=[];if(!e)return this._d(\"path\",r,n);e=(e||\"\").replace(\/\\n\/g,\" \").replace(\/(-\\s)\/g,\"-\").replace(\"\/(ss)\/g\",\" \");const a=n.fill&&\"transparent\"!==n.fill&&n.fill!==Ie,o=n.stroke!==Ie,i=!!(n.simplification&&n.simplification<1),l=function(e,t,n){const r=oe(ae(re(e))),a=[];let o=[],i=[0,0],l=[];const c=()=>{l.length>=4&&o.push(...H(l,t)),l=[]},s=()=>{c(),o.length&&(a.push(o),o=[])};for(const{key:e,data:t}of r)switch(e){case\"M\":s(),i=[t[0],t[1]],o.push(i);break;case\"L\":c(),o.push([t[0],t[1]]);break;case\"C\":if(!l.length){const e=o.length?o[o.length-1]:i;l.push([e[0],e[1]])}l.push([t[0],t[1]]),l.push([t[2],t[3]]),l.push([t[4],t[5]]);break;case\"Z\":c(),o.push([i[0],i[1]])}if(s(),!n)return a;const u=[];for(const e of a){const t=z(e,n);t.length&&u.push(t)}return u}(e,1,i?4-4*n.simplification:(1+n.roughness)\/2);if(a)if(n.combineNestedSvgPaths){const e=[];l.forEach((t=>e.push(...t))),\"solid\"===n.fillStyle?r.push(ge(e,n)):r.push(ve(e,n))}else l.forEach((e=>{\"solid\"===n.fillStyle?r.push(ge(e,n)):r.push(ve(e,n))}));return o&&(i?l.forEach((e=>{r.push(ue(e,!1,n))})):r.push(function(e,t){const n=oe(ae(re(e))),r=[];let a=[0,0],o=[0,0];for(const{key:e,data:i}of n)switch(e){case\"M\":{const e=1*(t.maxRandomnessOffset||0);r.push({op:\"move\",data:i.map((n=>n+we(e,t)))}),o=[i[0],i[1]],a=[i[0],i[1]];break}case\"L\":r.push(...xe(o[0],o[1],i[0],i[1],t)),o=[i[0],i[1]];break;case\"C\":{const[e,n,a,l,c,s]=i;r.push(...Me(e,n,a,l,c,s,o,t)),o=[c,s];break}case\"Z\":r.push(...xe(o[0],o[1],a[0],a[1],t)),o=[a[0],a[1]]}return{type:\"path\",ops:r}}(e,n))),this._d(\"path\",r,n)}opsToPath(e){let t=\"\";for(const n of e.ops){const e=n.data;switch(n.op){case\"move\":t+=`M${e[0]} ${e[1]} `;break;case\"bcurveTo\":t+=`C${e[0]} ${e[1]}, ${e[2]} ${e[3]}, ${e[4]} ${e[5]} `;break;case\"lineTo\":t+=`L${e[0]} ${e[1]} `}}return t.trim()}toPaths(e){const t=e.sets||[],n=e.options||this.defaultOptions,r=[];for(const e of t){let t=null;switch(e.type){case\"path\":t={d:this.opsToPath(e),stroke:n.stroke,strokeWidth:n.strokeWidth,fill:Ie};break;case\"fillPath\":t={d:this.opsToPath(e),stroke:Ie,strokeWidth:0,fill:n.fill||Ie};break;case\"fillSketch\":t=this.fillSketch(e,n)}t&&r.push(t)}return r}fillSketch(e,t){let n=t.fillWeight;return n<0&&(n=t.strokeWidth\/2),{d:this.opsToPath(e),stroke:t.fill||Ie,strokeWidth:n,fill:Ie}}}class Ae{constructor(e,t){this.canvas=e,this.ctx=this.canvas.getContext(\"2d\"),this.gen=new Pe(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.ctx;for(const a of t)switch(a.type){case\"path\":r.save(),r.strokeStyle=\"none\"===n.stroke?\"transparent\":n.stroke,r.lineWidth=n.strokeWidth,n.strokeLineDash&&r.setLineDash(n.strokeLineDash),n.strokeLineDashOffset&&(r.lineDashOffset=n.strokeLineDashOffset),this._drawToContext(r,a),r.restore();break;case\"fillPath\":r.save(),r.fillStyle=n.fill||\"\";const t=\"curve\"===e.shape||\"polygon\"===e.shape?\"evenodd\":\"nonzero\";this._drawToContext(r,a,t),r.restore();break;case\"fillSketch\":this.fillSketch(r,a,n)}}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2),e.save(),n.fillLineDash&&e.setLineDash(n.fillLineDash),n.fillLineDashOffset&&(e.lineDashOffset=n.fillLineDashOffset),e.strokeStyle=n.fill||\"\",e.lineWidth=r,this._drawToContext(e,t),e.restore()}_drawToContext(e,t,n=\"nonzero\"){e.beginPath();for(const n of t.ops){const t=n.data;switch(n.op){case\"move\":e.moveTo(t[0],t[1]);break;case\"bcurveTo\":e.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5]);break;case\"lineTo\":e.lineTo(t[0],t[1])}}\"fillPath\"===t.type?e.fill(n):e.stroke()}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}line(e,t,n,r,a){const o=this.gen.line(e,t,n,r,a);return this.draw(o),o}rectangle(e,t,n,r,a){const o=this.gen.rectangle(e,t,n,r,a);return this.draw(o),o}ellipse(e,t,n,r,a){const o=this.gen.ellipse(e,t,n,r,a);return this.draw(o),o}circle(e,t,n,r){const a=this.gen.circle(e,t,n,r);return this.draw(a),a}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n),n}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n),n}arc(e,t,n,r,a,o,i=!1,l){const c=this.gen.arc(e,t,n,r,a,o,i,l);return this.draw(c),c}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n),n}path(e,t){const n=this.gen.path(e,t);return this.draw(n),n}}const _e=\"http:\/\/www.w3.org\/2000\/svg\";class Le{constructor(e,t){this.svg=e,this.gen=new Pe(t)}draw(e){const t=e.sets||[],n=e.options||this.getDefaultOptions(),r=this.svg.ownerDocument||window.document,a=r.createElementNS(_e,\"g\");for(const o of t){let t=null;switch(o.type){case\"path\":t=r.createElementNS(_e,\"path\"),t.setAttribute(\"d\",this.opsToPath(o)),t.setAttribute(\"stroke\",n.stroke),t.setAttribute(\"stroke-width\",n.strokeWidth+\"\"),t.setAttribute(\"fill\",\"none\"),n.strokeLineDash&&t.setAttribute(\"stroke-dasharray\",n.strokeLineDash.join(\" \").trim()),n.strokeLineDashOffset&&t.setAttribute(\"stroke-dashoffset\",`${n.strokeLineDashOffset}`);break;case\"fillPath\":t=r.createElementNS(_e,\"path\"),t.setAttribute(\"d\",this.opsToPath(o)),t.setAttribute(\"stroke\",\"none\"),t.setAttribute(\"stroke-width\",\"0\"),t.setAttribute(\"fill\",n.fill||\"\"),\"curve\"!==e.shape&&\"polygon\"!==e.shape||t.setAttribute(\"fill-rule\",\"evenodd\");break;case\"fillSketch\":t=this.fillSketch(r,o,n)}t&&a.appendChild(t)}return a}fillSketch(e,t,n){let r=n.fillWeight;r<0&&(r=n.strokeWidth\/2);const a=e.createElementNS(_e,\"path\");return a.setAttribute(\"d\",this.opsToPath(t)),a.setAttribute(\"stroke\",n.fill||\"\"),a.setAttribute(\"stroke-width\",r+\"\"),a.setAttribute(\"fill\",\"none\"),n.fillLineDash&&a.setAttribute(\"stroke-dasharray\",n.fillLineDash.join(\" \").trim()),n.fillLineDashOffset&&a.setAttribute(\"stroke-dashoffset\",`${n.fillLineDashOffset}`),a}get generator(){return this.gen}getDefaultOptions(){return this.gen.defaultOptions}opsToPath(e){return this.gen.opsToPath(e)}line(e,t,n,r,a){const o=this.gen.line(e,t,n,r,a);return this.draw(o)}rectangle(e,t,n,r,a){const o=this.gen.rectangle(e,t,n,r,a);return this.draw(o)}ellipse(e,t,n,r,a){const o=this.gen.ellipse(e,t,n,r,a);return this.draw(o)}circle(e,t,n,r){const a=this.gen.circle(e,t,n,r);return this.draw(a)}linearPath(e,t){const n=this.gen.linearPath(e,t);return this.draw(n)}polygon(e,t){const n=this.gen.polygon(e,t);return this.draw(n)}arc(e,t,n,r,a,o,i=!1,l){const c=this.gen.arc(e,t,n,r,a,o,i,l);return this.draw(c)}curve(e,t){const n=this.gen.curve(e,t);return this.draw(n)}path(e,t){const n=this.gen.path(e,t);return this.draw(n)}}const De={canvas:(e,t)=>new Ae(e,t),svg:(e,t)=>new Le(e,t),generator:e=>new Pe(e),newSeed:()=>Pe.newSeed()};function je(e){var t,n,r=\"\";if(\"string\"==typeof e||\"number\"==typeof e)r+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=je(e[t]))&&(r&&(r+=\" \"),r+=n);else for(t in e)e[t]&&(r&&(r+=\" \"),r+=t);return r}function ze(){for(var e,t,n=0,r=\"\";n<arguments.length;)(e=arguments[n++])&&(t=je(e))&&(r&&(r+=\" \"),r+=t);return r}var Be=function(e){return null!=e&&\"text\"===e.type},He=function(e){return null!=e&&Ne(e.type)},Ne=function(e){return\"arrow\"===e||\"line\"===e||\"draw\"===e},Re=function(e){return null!=e&&Fe(e.type)},Fe=function(e){return\"arrow\"===e},We=function(e){return null!=e&&(\"rectangle\"===e.type||\"diamond\"===e.type||\"ellipse\"===e.type||\"text\"===e.type)},Ge=function(e,t,n,r,a){return[(e-n)*Math.cos(a)-(t-r)*Math.sin(a)+n,(e-n)*Math.sin(a)+(t-r)*Math.cos(a)+r]},Ve=function(e,t,n){return Ge(e[0],e[1],t[0],t[1],n)},Ke=function(e,t,n,r,a,o,i,l){var c=Math.cos(r),s=Math.sin(r);return e.e&&e.w?t+=a+i:e.e?(t+=a*(1+c),n+=a*s,t+=i*(1-c),n+=i*-s):e.w&&(t+=a*(1-c),n+=a*-s,t+=i*(1+c),n+=i*s),e.n&&e.s?n+=o+l:e.n?(t+=o*s,n+=o*(1-c),t+=l*-s,n+=l*(1+c)):e.s&&(t+=o*-s,n+=o*(1+c),t+=l*s,n+=l*(1-c)),[t,n]},Ue=function(e,t,n,r){var a=n-e,o=r-t;return Math.hypot(a,o)},Ye=function(e,t){if(void 0===t&&(t=1),e.length>=3){var n=[e[0],e[e.length-1]],r=n[0],a=n[1];return Ue(r[0],r[1],a[0],a[1])<=s.qx\/t}return!1},Xe=function(e,t,n){var r=e.length;if(r<3)return!1;for(var a=[Number.MAX_SAFE_INTEGER,n],o=[t,n],i=0,l=0;l<r;l++){var c=e[l],s=e[(l+1)%r];if(Qe(c,s,o,a)){if(0===qe(c,o,s))return Ze(c,o,s);i++}}return i%2==1},Ze=function(e,t,n){return t[0]<=Math.max(e[0],n[0])&&t[0]>=Math.min(e[0],n[0])&&t[1]<=Math.max(e[1],n[1])&&t[1]>=Math.min(e[1],n[1])},qe=function(e,t,n){var r=(t[1]-e[1])*(n[0]-t[0])-(t[0]-e[0])*(n[1]-t[1]);return 0===r?0:r>0?1:2},Qe=function(e,t,n,r){var a=qe(e,t,n),o=qe(e,t,r),i=qe(n,r,e),l=qe(n,r,t);return a!==o&&i!==l||(!(0!==a||!Ze(e,n,t))||(!(0!==o||!Ze(e,r,t))||(!(0!==i||!Ze(n,e,r))||!(0!==l||!Ze(n,t,r)))))},$e=function(e,t,n){return n?[Math.round(e\/n)*n,Math.round(t\/n)*n]:[e,t]},Je=function(e,t,n){var r=n.map((function(t){return t[e]})),a=Math.max.apply(Math,r),o=Math.min.apply(Math,r),i=a-o,l=0===i?1:t\/i,c=1\/0,s=n.map((function(t){return t.map((function(t,n){if(n!==e)return t;var r=t*l;return c=Math.min(r,c),r}))}));if(2===s.length)return s;var u=o-c;return s.map((function(t){return t.map((function(t,n){return n===e?t+u:t}))}))},et=function(e){return He(e)?rt(e):[e.x,e.y,e.x+e.width,e.y+e.height]},tt=function(e){for(var t=0,n=e.sets;t<n.length;t++){var r=n[t];if(\"path\"===r.type)return r.ops}return e.sets[0].ops},nt=function(e,t){var n=[0,0],r=e.reduce((function(e,r){var a,o=r.op,i=r.data;if(\"move\"===o)n=i;else if(\"bcurveTo\"===o){var l=[i[0],i[1]],c=[i[2],i[3]],s=[i[4],i[5]],u=n;n=s;for(var d=function(e,t){return Math.pow(1-e,3)*s[t]+3*e*Math.pow(1-e,2)*c[t]+3*Math.pow(e,2)*(1-e)*l[t]+u[t]*Math.pow(e,3)},p=0;p<=1;){var f=d(p,0),h=d(p,1);t&&(f=(a=t(f,h))[0],h=a[1]),e.minY=Math.min(e.minY,h),e.minX=Math.min(e.minX,f),e.maxX=Math.max(e.maxX,f),e.maxY=Math.max(e.maxY,h),p+=.1}}return e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[r.minX,r.minY,r.maxX,r.maxY]},rt=function(e){if(e.points.length<2||!Jn(e)){var t=e.points.reduce((function(e,t){var n=t[0],r=t[1];return e.minY=Math.min(e.minY,r),e.minX=Math.min(e.minX,n),e.maxX=Math.max(e.maxX,n),e.maxY=Math.max(e.maxY,r),e}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0}),n=t.minX,r=t.minY,a=t.maxX,o=t.maxY;return[n+e.x,r+e.y,a+e.x,o+e.y]}var i=Jn(e),l=tt(i[0]),c=nt(l),s=c[0],u=c[1],d=c[2],p=c[3];return[s+e.x,u+e.y,d+e.x,p+e.y]},at=function(e){var t=et(e),n=t[0],r=t[1],a=t[2],o=t[3],i=(n+a)\/2,l=(r+o)\/2;if(He(e))return function(e,t,n){if(e.points.length<2||!Jn(e)){var r=e.points.reduce((function(r,a){var o,i=a[0],l=a[1];return i=(o=Ge(e.x+i,e.y+l,t,n,e.angle))[0],l=o[1],r.minY=Math.min(r.minY,l),r.minX=Math.min(r.minX,i),r.maxX=Math.max(r.maxX,i),r.maxY=Math.max(r.maxY,l),r}),{minX:1\/0,minY:1\/0,maxX:-1\/0,maxY:-1\/0});return[r.minX,r.minY,r.maxX,r.maxY]}var a=Jn(e),o=tt(a[0]);return nt(o,(function(r,a){return Ge(e.x+r,e.y+a,t,n,e.angle)}))}(e,i,l);if(\"diamond\"===e.type){var c=Ge(i,r,i,l,e.angle),s=c[0],u=c[1],d=Ge(i,o,i,l,e.angle),p=d[0],f=d[1],h=Ge(n,l,i,l,e.angle),m=h[0],g=h[1],v=Ge(a,l,i,l,e.angle),b=v[0],y=v[1];return[Math.min(s,p,m,b),Math.min(u,f,g,y),Math.max(s,p,m,b),Math.max(u,f,g,y)]}if(\"ellipse\"===e.type){var w=(a-n)\/2,x=(o-r)\/2,E=Math.cos(e.angle),k=Math.sin(e.angle),S=Math.hypot(w*E,x*k),C=Math.hypot(x*E,w*k);return[i-S,l-C,i+S,l+C]}var O=Ge(n,r,i,l,e.angle),M=O[0],T=O[1],I=Ge(n,o,i,l,e.angle),P=I[0],A=I[1],_=Ge(a,o,i,l,e.angle),L=_[0],D=_[1],j=Ge(a,r,i,l,e.angle),z=j[0],B=j[1];return[Math.min(M,P,L,z),Math.min(T,A,D,B),Math.max(M,P,L,z),Math.max(T,A,D,B)]},ot=function(e){if(!e.length)return[0,0,0,0];var t=1\/0,n=-1\/0,r=1\/0,a=-1\/0;return e.forEach((function(e){var o=at(e),i=o[0],l=o[1],c=o[2],s=o[3];t=Math.min(t,i),r=Math.min(r,l),n=Math.max(n,c),a=Math.max(a,s)})),[t,r,n,a]},it=function(e,t,n){if(!He(e))return[e.x,e.y,e.x+t,e.y+n];var r=Je(0,t,Je(1,n,e.points)),a=De.generator(),o=\"sharp\"===e.strokeSharpness?a.linearPath(r,tr(e)):a.curve(r,tr(e)),i=tt(o),l=nt(i),c=l[0],s=l[1],u=l[2],d=l[3];return[c+e.x,s+e.y,u+e.x,d+e.y]},lt=function(e,t,n){var r=De.generator(),a=\"sharp\"===n?r.linearPath(t,tr(e)):r.curve(t,tr(e)),o=tt(a),i=nt(o),l=i[0],c=i[1],s=i[2],u=i[3];return[l+e.x,c+e.y,s+e.x,u+e.y]};const ct=JSON.parse('{\"ix\":\"#ffffff\",\"Sn\":\"#000000\",\"MA\":[\"#f8f9fa\",\"#f1f3f5\",0,0,\"#ced4da\",\"#adb5bd\",\"#868e96\",\"#495057\",\"#343a40\"],\"Q6\":[\"#fff5f5\",\"#ffe3e3\",\"#ffc9c9\",\"#ffa8a8\",\"#ff8787\",\"#ff6b6b\",\"#fa5252\",\"#f03e3e\",\"#e03131\",\"#c92a2a\"],\"iQ\":[\"#fff0f6\",\"#ffdeeb\",\"#fcc2d7\",\"#faa2c1\",\"#f783ac\",\"#f06595\",\"#e64980\",\"#d6336c\",\"#c2255c\",\"#a61e4d\"],\"pl\":[\"#f8f0fc\",\"#f3d9fa\",\"#eebefa\",\"#e599f7\",\"#da77f2\",\"#cc5de8\",\"#be4bdb\",\"#ae3ec9\",\"#9c36b5\",\"#862e9c\"],\"ht\":[\"#f3f0ff\",\"#e5dbff\",\"#d0bfff\",\"#b197fc\",\"#9775fa\",\"#845ef7\",\"#7950f2\",\"#7048e8\",\"#6741d9\",\"#5f3dc4\"],\"QN\":[\"#edf2ff\",\"#dbe4ff\",\"#bac8ff\",\"#91a7ff\",\"#748ffc\",\"#5c7cfa\",\"#4c6ef5\",\"#4263eb\",\"#3b5bdb\",\"#364fc7\"],\"iN\":[\"#e7f5ff\",\"#d0ebff\",\"#a5d8ff\",\"#74c0fc\",\"#4dabf7\",\"#339af0\",\"#228be6\",\"#1c7ed6\",\"#1971c2\",\"#1864ab\"],\"sl\":[\"#e3fafc\",\"#c5f6fa\",\"#99e9f2\",\"#66d9e8\",\"#3bc9db\",\"#22b8cf\",\"#15aabf\",\"#1098ad\",\"#0c8599\",\"#0b7285\"],\"$C\":[\"#e6fcf5\",\"#c3fae8\",\"#96f2d7\",\"#63e6be\",\"#38d9a9\",\"#20c997\",\"#12b886\",\"#0ca678\",\"#099268\",\"#087f5b\"],\"ek\":[\"#ebfbee\",\"#d3f9d8\",\"#b2f2bb\",\"#8ce99a\",\"#69db7c\",\"#51cf66\",\"#40c057\",\"#37b24d\",\"#2f9e44\",\"#2b8a3e\"],\"LR\":[\"#f4fce3\",\"#e9fac8\",\"#d8f5a2\",\"#c0eb75\",\"#a9e34b\",\"#94d82d\",\"#82c91e\",\"#74b816\",\"#66a80f\",\"#5c940d\"],\"er\":[\"#fff9db\",\"#fff3bf\",\"#ffec99\",\"#ffe066\",\"#ffd43b\",\"#fcc419\",\"#fab005\",\"#f59f00\",\"#f08c00\",\"#e67700\"],\"$y\":[\"#fff4e6\",\"#ffe8cc\",\"#ffd8a8\",\"#ffc078\",\"#ffa94d\",\"#ff922b\",\"#fd7e14\",\"#f76707\",\"#e8590c\",\"#d9480f\"]}');var st=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},ut=function(e){return[ct.Q6[e],ct.iQ[e],ct.pl[e],ct.ht[e],ct.QN[e],ct.iN[e],ct.sl[e],ct.$C[e],ct.ek[e],ct.LR[e],ct.er[e],ct.$y[e]]};const dt={canvasBackground:st([ct.ix,ct.MA[0],ct.MA[1]],ut(0)),elementBackground:st([\"transparent\",ct.MA[4],ct.MA[6]],ut(6)),elementStroke:st([ct.Sn,ct.MA[8],ct.MA[7]],ut(9))};var pt=n(6207),ft=\/Mac|iPod|iPhone|iPad\/.test(window.navigator.platform),ht=\/^Win\/.test(window.navigator.platform),mt=\"Equal\",gt=\"Minus\",vt=\"NumpadAdd\",bt=\"NumpadSubtract\",yt=\"Numpad0\",wt=\"BracketRight\",xt=\"BracketLeft\",Et=\"Digit1\",kt=\"Digit2\",St=\"Digit9\",Ct=\"Quote\",Ot=\"Digit0\",Mt=\"KeyC\",Tt=\"KeyG\",It=\"KeyF\",Pt=\"KeyH\",At=\"KeyV\",_t=\"KeyX\",Lt=\"KeyZ\",Dt=\"KeyR\",jt=\"ArrowDown\",zt=\"ArrowLeft\",Bt=\"ArrowRight\",Ht=\"ArrowUp\",Nt=\"Backspace\",Rt=\"Alt\",Ft=ft?\"metaKey\":\"ctrlKey\",Wt=\"Delete\",Gt=\"Enter\",Vt=\"Escape\",Kt=\"?\",Ut=\" \",Yt=\"Tab\",Xt=\"a\",Zt=\"d\",qt=\"e\",Qt=\"l\",$t=\"o\",Jt=\"p\",en=\"q\",tn=\"r\",nn=\"s\",rn=\"t\",an=\"v\",on=\"x\",ln=\"y\",cn=\"z\",sn=function(e){return e===zt||e===Bt||e===jt||e===Ht},un=function(e){return e.altKey},dn=function(e){return e.shiftKey},pn=function(e){return e.shiftKey},fn=\"http:\/\/www.w3.org\/2000\/svg\",hn=null,mn=function(){if(hn)return hn;var e=new Date,t=e.getFullYear(),n=\"\".concat(e.getMonth()+1).padStart(2,\"0\"),r=\"\".concat(e.getDate()).padStart(2,\"0\"),a=\"\".concat(e.getHours()).padStart(2,\"0\"),o=\"\".concat(e.getMinutes()).padStart(2,\"0\");return\"\".concat(t,\"-\").concat(n,\"-\").concat(r,\"-\").concat(a).concat(o)},gn=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},vn=function(e){return e instanceof HTMLElement&&\"wysiwyg\"===e.dataset.type||e instanceof HTMLBRElement||e instanceof HTMLTextAreaElement||e instanceof HTMLInputElement&&(\"text\"===e.type||\"number\"===e.type)},bn=function(e){var t=e.fontFamily;return\"\".concat(s.ut[t],\", \").concat(s._D)},yn=function(e){var t=e.fontSize,n=e.fontFamily;return\"\".concat(t,\"px \").concat(bn({fontFamily:n}))},wn=function(e,t){var n=document.createElement(\"div\"),r=document.body;n.style.position=\"absolute\",n.style.whiteSpace=\"pre\",n.style.font=t,r.appendChild(n),n.innerText=e.split(\"\\n\").map((function(e){return e||\" \"})).join(\"\\n\");var a=n.offsetWidth,o=n.offsetHeight,i=document.createElement(\"span\");i.style.display=\"inline-block\",i.style.overflow=\"hidden\",i.style.width=\"1px\",i.style.height=\"1px\",n.appendChild(i);var l=i.offsetTop+i.offsetHeight;return document.body.removeChild(n),{width:a,height:o,baseline:l}},xn=function(e,t){var n,r=0,a=function(){for(var a=[],o=0;o<arguments.length;o++)a[o]=arguments[o];n=a,clearTimeout(r),r=window.setTimeout((function(){return e.apply(void 0,a)}),t)};return a.flush=function(){clearTimeout(r),n&&e.apply(void 0,n)},a.cancel=function(){clearTimeout(r)},a},En=function(e){var t=window.getSelection();if(t){var n=document.createRange();n.selectNodeContents(e),t.removeAllRanges(),t.addRange(n)}},kn=function(){var e=window.getSelection();e&&e.removeAllRanges()},Sn=function(e,t){return Math.abs(e-t)},Cn=function(e){e&&(e.style.cursor=\"\")},On=function(e,t){e&&(e.style.cursor=t)},Mn=function(e,t){e&&(\"selection\"===t?Cn(e):e.style.cursor=s.oc.CROSSHAIR)},Tn=function(){var e;return\"HTML\"===(null===(e=document.fullscreenElement)||void 0===e?void 0:e.nodeName)},In=function(e){return e=e.replace(\/\\bAlt\\b\/i,\"Alt\").replace(\/\\bShift\\b\/i,\"Shift\").replace(\/\\b(Enter|Return)\\b\/i,\"Enter\").replace(\/\\bDel\\b\/i,\"Delete\"),ft?e.replace(\/\\bCtrlOrCmd\\b\/i,\"Cmd\").replace(\/\\bAlt\\b\/i,\"Option\"):e.replace(\/\\bCtrlOrCmd\\b\/i,\"Ctrl\")},Pn=function(e,t){var n=e.clientX,r=e.clientY,a=t.zoom,o=t.offsetLeft,i=t.offsetTop,l=t.scrollX,c=t.scrollY,s=1\/a.value;return{x:(n-a.translation.x-o)*s-l,y:(r-a.translation.y-i)*s-c}},An=function(e,t){var n=e.sceneX,r=e.sceneY,a=t.zoom,o=t.offsetLeft,i=t.offsetTop,l=t.scrollX,c=t.scrollY;return{x:(n+l+o)*a.value+a.translation.x,y:(r+c+i)*a.value+a.translation.y}},_n=function(e){return getComputedStyle(document.documentElement).getPropertyValue(\"--\".concat(e))},Ln=new RegExp(\"^[^\".concat(\"A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff\u2c00-\ufb1c\ufdfe-\ufe6f\ufefd-\uffff\",\"]*[\").concat(\"\u0591-\u07ff\ufb1d-\ufdfd\ufe70-\ufefc\",\"]\")),Dn=function(e){return Ln.test(e)},jn=function(e){return{x:e[0],y:e[1]}},zn=function(e){if(\"AbortError\"!==(null==e?void 0:e.name))throw e},Bn=function(e){return function(t){(0,pt.unstable_batchedUpdates)(e,t)}},Hn=function(e,t){var n,r=[{value:1,symbol:\"b\"},{value:1e3,symbol:\"k\"},{value:1e6,symbol:\"M\"},{value:1e9,symbol:\"G\"}];for(n=r.length-1;n>0&&!(e>=r[n].value);n--);return(e\/r[n].value).toFixed(t).replace(\/\\.0+$|(\\.[0-9]*[1-9])0+$\/,\"$1\")+r[n].symbol},Nn=function(){var e;return(null===(e=document.querySelector('meta[name=\"version\"]'))||void 0===e?void 0:e.content)||s.eQ},Rn=function(){return{appearance:\"light\",collaborators:new Map,currentChartType:\"bar\",currentItemBackgroundColor:\"transparent\",currentItemEndArrowhead:\"arrow\",currentItemFillStyle:\"hachure\",currentItemFontFamily:s.rk,currentItemFontSize:s.n5,currentItemLinearStrokeSharpness:\"round\",currentItemOpacity:100,currentItemRoughness:1,currentItemStartArrowhead:null,currentItemStrokeColor:ct.Sn,currentItemStrokeSharpness:\"sharp\",currentItemStrokeStyle:\"solid\",currentItemStrokeWidth:1,currentItemTextAlign:s.Hg,cursorButton:\"up\",draggingElement:null,editingElement:null,editingGroupId:null,editingLinearElement:null,elementLocked:!1,elementType:\"selection\",errorMessage:null,exportBackground:!0,exportEmbedScene:!1,exportWithDarkMode:!1,fileHandle:null,gridSize:null,height:window.innerHeight,isBindingEnabled:!0,isLibraryOpen:!1,isLoading:!1,isResizing:!1,isRotating:!1,lastPointerDownWith:\"mouse\",multiElement:null,name:\"\".concat(C(\"labels.untitled\"),\"-\").concat(mn()),openMenu:null,pasteDialog:{shown:!1,data:null},previousSelectedElementIds:{},resizingElement:null,scrolledOutside:!1,scrollX:0,scrollY:0,selectedElementIds:{},selectedGroupIds:{},selectionElement:null,shouldAddWatermark:!1,shouldCacheIgnoreZoom:!1,showHelpDialog:!1,showStats:!1,startBoundElement:null,suggestedBindings:[],toastMessage:null,viewBackgroundColor:ct.ix,width:window.innerWidth,zenModeEnabled:!1,zoom:{value:1,translation:{x:0,y:0}},viewModeEnabled:!1}},Fn={appearance:{browser:!0,export:!1},collaborators:{browser:!1,export:!1},currentChartType:{browser:!0,export:!1},currentItemBackgroundColor:{browser:!0,export:!1},currentItemEndArrowhead:{browser:!0,export:!1},currentItemFillStyle:{browser:!0,export:!1},currentItemFontFamily:{browser:!0,export:!1},currentItemFontSize:{browser:!0,export:!1},currentItemLinearStrokeSharpness:{browser:!0,export:!1},currentItemOpacity:{browser:!0,export:!1},currentItemRoughness:{browser:!0,export:!1},currentItemStartArrowhead:{browser:!0,export:!1},currentItemStrokeColor:{browser:!0,export:!1},currentItemStrokeSharpness:{browser:!0,export:!1},currentItemStrokeStyle:{browser:!0,export:!1},currentItemStrokeWidth:{browser:!0,export:!1},currentItemTextAlign:{browser:!0,export:!1},cursorButton:{browser:!0,export:!1},draggingElement:{browser:!1,export:!1},editingElement:{browser:!1,export:!1},editingGroupId:{browser:!0,export:!1},editingLinearElement:{browser:!1,export:!1},elementLocked:{browser:!0,export:!1},elementType:{browser:!0,export:!1},errorMessage:{browser:!1,export:!1},exportBackground:{browser:!0,export:!1},exportEmbedScene:{browser:!0,export:!1},exportWithDarkMode:{browser:!0,export:!1},fileHandle:{browser:!1,export:!1},gridSize:{browser:!0,export:!0},height:{browser:!1,export:!1},isBindingEnabled:{browser:!1,export:!1},isLibraryOpen:{browser:!1,export:!1},isLoading:{browser:!1,export:!1},isResizing:{browser:!1,export:!1},isRotating:{browser:!1,export:!1},lastPointerDownWith:{browser:!0,export:!1},multiElement:{browser:!1,export:!1},name:{browser:!0,export:!1},offsetLeft:{browser:!1,export:!1},offsetTop:{browser:!1,export:!1},openMenu:{browser:!0,export:!1},pasteDialog:{browser:!1,export:!1},previousSelectedElementIds:{browser:!0,export:!1},resizingElement:{browser:!1,export:!1},scrolledOutside:{browser:!0,export:!1},scrollX:{browser:!0,export:!1},scrollY:{browser:!0,export:!1},selectedElementIds:{browser:!0,export:!1},selectedGroupIds:{browser:!0,export:!1},selectionElement:{browser:!1,export:!1},shouldAddWatermark:{browser:!0,export:!1},shouldCacheIgnoreZoom:{browser:!0,export:!1},showHelpDialog:{browser:!1,export:!1},showStats:{browser:!0,export:!1},startBoundElement:{browser:!1,export:!1},suggestedBindings:{browser:!1,export:!1},toastMessage:{browser:!1,export:!1},viewBackgroundColor:{browser:!0,export:!0},width:{browser:!1,export:!1},zenModeEnabled:{browser:!0,export:!1},zoom:{browser:!0,export:!1},viewModeEnabled:{browser:!1,export:!1}},Wn=function(e,t){for(var n={},r=0,a=Object.keys(e);r<a.length;r++){var o=a[r],i=Fn[o];null!=i&&i[t]&&(n[o]=e[o])}return n},Gn=function(e){return Wn(e,\"export\")};function Vn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Kn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Vn(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Vn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Un=Rn(),Yn=20,Xn=[12,8],Zn=[3,6],qn=function(e,t,n){switch(n.globalAlpha=e.opacity\/100,e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":t.draw(Jn(e));break;case\"arrow\":case\"draw\":case\"line\":Jn(e).forEach((function(e){t.draw(e)}));break;default:if(!Be(e))throw new Error(\"Unimplemented type \".concat(e.type));var r=Dn(e.text),a=r&&!n.canvas.isConnected;a&&document.body.appendChild(n.canvas),n.canvas.setAttribute(\"dir\",r?\"rtl\":\"ltr\");var o=n.font;n.font=yn(e);var i=n.fillStyle;n.fillStyle=e.strokeColor;var l=n.textAlign;n.textAlign=e.textAlign;for(var c=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),s=e.height\/c.length,u=e.height-e.baseline,d=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,p=0;p<c.length;p++)n.fillText(c[p],d,(p+1)*s-u);n.fillStyle=i,n.font=o,n.textAlign=l,a&&n.canvas.remove()}n.globalAlpha=1},Qn=new WeakMap,$n=new WeakMap,Jn=function(e){return $n.get(e)},er=function(e){return $n.delete(e)},tr=function(e){var t={seed:e.seed,strokeLineDash:\"dashed\"===e.strokeStyle?Xn:\"dotted\"===e.strokeStyle?Zn:void 0,disableMultiStroke:\"solid\"!==e.strokeStyle,strokeWidth:\"solid\"!==e.strokeStyle?e.strokeWidth+.5:e.strokeWidth,fillWeight:e.strokeWidth\/2,hachureGap:4*e.strokeWidth,roughness:e.roughness,stroke:e.strokeColor};switch(e.type){case\"rectangle\":case\"diamond\":case\"ellipse\":return t.fillStyle=e.fillStyle,t.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor,\"ellipse\"===e.type&&(t.curveFitting=1),t;case\"line\":case\"draw\":return Ye(e.points)&&(t.fillStyle=e.fillStyle,t.fill=\"transparent\"===e.backgroundColor?void 0:e.backgroundColor),t;case\"arrow\":return t;default:throw new Error(\"Unimplemented type \".concat(e.type))}},nr=function(e,t){var n=$n.get(e)||null;if(!n){switch(Qn.delete(e),e.type){case\"rectangle\":if(\"round\"===e.strokeSharpness){var r=e.width,a=e.height,o=.25*Math.min(r,a);n=t.path(\"M \".concat(o,\" 0 L \").concat(r-o,\" 0 Q \").concat(r,\" 0, \").concat(r,\" \").concat(o,\" L \").concat(r,\" \").concat(a-o,\" Q \").concat(r,\" \").concat(a,\", \").concat(r-o,\" \").concat(a,\" L \").concat(o,\" \").concat(a,\" Q 0 \").concat(a,\", 0 \").concat(a-o,\" L 0 \").concat(o,\" Q 0 0, \").concat(o,\" 0\"),tr(e))}else n=t.rectangle(0,0,e.width,e.height,tr(e));break;case\"diamond\":var i=function(e){var t=Math.floor(e.width\/2)+1,n=e.width,r=Math.floor(e.height\/2)+1;return[t,0,n,r,t,e.height,0,r]}(e),l=i[0],c=i[1],s=i[2],u=i[3],d=i[4],p=i[5],f=i[6],h=i[7];n=t.polygon([[l,c],[s,u],[d,p],[f,h]],tr(e));break;case\"ellipse\":n=t.ellipse(e.width\/2,e.height\/2,e.width,e.height,tr(e));break;case\"line\":case\"draw\":case\"arrow\":var m=tr(e),g=e.points.length?e.points:[[0,0]];if(n=\"sharp\"===e.strokeSharpness?m.fill?[t.polygon(g,m)]:[t.linearPath(g,m)]:[t.curve(g,m)],\"arrow\"===e.type){var v=e.startArrowhead,b=void 0===v?null:v,y=e.endArrowhead,w=void 0===y?\"arrow\":y;function x(e,n,r,a){var o=function(e,t,n,r){var a=tt(t[0]);if(a.length<1)return null;var o=\"start\"===n?1:a.length-1,i=a[o].data,l=[i[4],i[5]],c=[i[2],i[3]],s=[i[0],i[1]],u=a[o-1],d=[0,0];\"move\"===u.op?d=u.data:\"bcurveTo\"===u.op&&(d=[u.data[4],u.data[5]]);var p=function(e,t){return Math.pow(1-e,3)*l[t]+3*e*Math.pow(1-e,2)*c[t]+3*Math.pow(e,2)*(1-e)*s[t]+d[t]*Math.pow(e,3)},f=\"start\"===n?d:l,h=f[0],m=f[1],g=[p(.3,0),p(.3,1)],v=g[0],b=g[1],y=Math.hypot(h-v,m-b),w=(h-v)\/y,x=(m-b)\/y,E={arrow:30,bar:15,dot:15}[r],k=e.points.reduce((function(e,t,n,r){var a=t[0],o=t[1],i=n>0?r[n-1]:[0,0],l=i[0],c=i[1];return e+Math.hypot(a-l,o-c)}),0),S=Math.min(E,k\/2),C=h-w*S,O=m-x*S;if(\"dot\"===r)return[h,m,Math.hypot(O-m,C-h)];var M={arrow:20,bar:90}[r],T=Ge(C,O,h,m,-M*Math.PI\/180),I=T[0],P=T[1],A=Ge(C,O,h,m,M*Math.PI\/180);return[h,m,I,P,A[0],A[1]]}(e,n,r,a);if(null===o)return[];if(\"dot\"===a){var i=o[0],l=o[1],c=o[2];return[t.circle(i,l,c,Kn(Kn({},m),{},{fill:e.strokeColor,fillStyle:\"solid\"}))]}var s=o[0],u=o[1],d=o[2],p=o[3],f=o[4],h=o[5];return\"dotted\"===e.strokeStyle?m.strokeLineDash=[3,4]:delete m.strokeLineDash,[t.line(d,p,s,u,m),t.line(f,h,s,u,m)]}if(null!==b){var E=x(e,n,\"start\",b);n.push.apply(n,E)}if(null!==w){E=x(e,n,\"end\",w);n.push.apply(n,E)}}break;case\"text\":n=[]}$n.set(e,n)}},rr=function(e,t){var n=t?t.zoom:Un.zoom,r=Qn.get(e),a=r&&r.canvasZoom!==n.value&&!(null!=t&&t.shouldCacheIgnoreZoom);if(!r||a){var o=function(e,t){var n=document.createElement(\"canvas\"),r=n.getContext(\"2d\"),a=0,o=0;if(He(e)){var i=et(e),l=i[0],c=i[1],s=i[2],u=i[3];n.width=Sn(l,s)*window.devicePixelRatio*t.value+Yn*t.value*2,n.height=Sn(c,u)*window.devicePixelRatio*t.value+Yn*t.value*2,a=e.x>l?Math.floor(Sn(e.x,l))*window.devicePixelRatio*t.value:0,o=e.y>c?Math.floor(Sn(e.y,c))*window.devicePixelRatio*t.value:0,r.translate(a,o)}else n.width=e.width*window.devicePixelRatio*t.value+Yn*t.value*2,n.height=e.height*window.devicePixelRatio*t.value+Yn*t.value*2;r.translate(Yn*t.value,Yn*t.value),r.scale(window.devicePixelRatio*t.value,window.devicePixelRatio*t.value);var d=De.canvas(n);return qn(e,d,r),r.translate(-20*t.value,-20*t.value),r.scale(1\/(window.devicePixelRatio*t.value),1\/(window.devicePixelRatio*t.value)),{element:e,canvas:n,canvasZoom:t.value,canvasOffsetX:a,canvasOffsetY:o}}(e,n);return Qn.set(e,o),o}return r},ar=function(e,t,n,r,a){var o=t.generator;switch(e.type){case\"selection\":n.translate(e.x+a.scrollX,e.y+a.scrollY);var i=n.fillStyle;n.fillStyle=\"rgba(0, 0, 255, 0.10)\",n.fillRect(0,0,e.width,e.height),n.fillStyle=i,n.translate(-e.x-a.scrollX,-e.y-a.scrollY);break;case\"rectangle\":case\"diamond\":case\"ellipse\":case\"line\":case\"draw\":case\"arrow\":case\"text\":if(nr(e,o),r){!function(e,t,n,r){var a=e.element,o=et(a),i=o[0],l=o[1],c=o[2],s=o[3],u=((i+c)\/2+r.scrollX)*window.devicePixelRatio,d=((l+s)\/2+r.scrollY)*window.devicePixelRatio;n.scale(1\/window.devicePixelRatio,1\/window.devicePixelRatio),n.translate(u,d),n.rotate(a.angle),n.drawImage(e.canvas,-(c-i)\/2*window.devicePixelRatio-Yn*e.canvasZoom\/e.canvasZoom,-(s-l)\/2*window.devicePixelRatio-Yn*e.canvasZoom\/e.canvasZoom,e.canvas.width\/e.canvasZoom,e.canvas.height\/e.canvasZoom),n.rotate(-a.angle),n.translate(-u,-d),n.scale(window.devicePixelRatio,window.devicePixelRatio)}(rr(e,a),0,n,a)}else{var l=et(e),c=l[0],s=l[1],u=l[2],d=l[3],p=(c+u)\/2+a.scrollX,f=(s+d)\/2+a.scrollY,h=(u-c)\/2-(e.x-c),m=(d-s)\/2-(e.y-s);n.translate(p,f),n.rotate(e.angle),n.translate(-h,-m),qn(e,t,n),n.translate(h,m),n.rotate(-e.angle),n.translate(-p,-f)}break;default:throw new Error(\"Unimplemented type \".concat(e.type))}},or=function(e){return\"string\"==typeof e},ir=function(){function e(){this.callbacks=new Set,this.nonDeletedElements=[],this.elements=[],this.elementsMap=new Map}return e.mapElementToScene=function(e,t){or(e)?this.sceneMapById.set(e,t):this.sceneMapByElement.set(e,t)},e.getScene=function(e){return or(e)?this.sceneMapById.get(e)||null:this.sceneMapByElement.get(e)||null},e.prototype.getElementsIncludingDeleted=function(){return this.elements},e.prototype.getElements=function(){return this.nonDeletedElements},e.prototype.getElement=function(e){return this.elementsMap.get(e)||null},e.prototype.getNonDeletedElement=function(e){var t=this.getElement(e);return t&&ri(t)?t:null},e.prototype.getNonDeletedElements=function(e){var t=this,n=[];return e.forEach((function(e){var r=t.getNonDeletedElement(e);null!=r&&n.push(r)})),n},e.prototype.replaceAllElements=function(t){var n=this;this.elements=t,this.elementsMap.clear(),t.forEach((function(t){n.elementsMap.set(t.id,t),e.mapElementToScene(t,n)})),this.nonDeletedElements=ni(this.elements),this.informMutation()},e.prototype.informMutation=function(){for(var e=0,t=Array.from(this.callbacks);e<t.length;e++){(0,t[e])()}},e.prototype.addCallback=function(e){var t=this;if(this.callbacks.has(e))throw new Error;return this.callbacks.add(e),function(){if(!t.callbacks.has(e))throw new Error;t.callbacks.delete(e)}},e.prototype.destroy=function(){var t=this;e.sceneMapById.forEach((function(n,r){n===t&&e.sceneMapById.delete(r)})),this.callbacks.clear()},e}();ir.sceneMapByElement=new WeakMap,ir.sceneMapById=new Map;const lr=ir;var cr=new ee(Date.now()),sr=function(){return Math.floor(cr.next()*Math.pow(2,31))},ur=function(){return((e=21)=>{let t=\"\",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;){let r=63&n[e];t+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?\"_\":\"-\"}return t})()};function dr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dr(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var fr=function(e,t){var n,r=!1,a=t.points;for(var o in void 0!==a&&(t=pr(pr({},function(e){var t=e.map((function(e){return e[0]})),n=e.map((function(e){return e[1]}));return{width:Math.max.apply(Math,t)-Math.min.apply(Math,t),height:Math.max.apply(Math,n)-Math.min.apply(Math,n)}}(a)),t)),t){var i=t[o];if(void 0!==i){if(e[o]===i&&(\"object\"!=typeof i||null===i||\"groupIds\"===o))continue;if(\"points\"===o){var l=e[o],c=i;if(l.length===c.length){for(var s=!1,u=l.length;--u;){var d=l[u],p=c[u];if(d[0]!==p[0]||d[1]!==p[1]){s=!0;break}}if(!s)continue}}e[o]=i,r=!0}}r&&(void 0===t.height&&void 0===t.width&&void 0===a||er(e),e.version++,e.versionNonce=sr(),null===(n=lr.getScene(e))||void 0===n||n.informMutation())},hr=function(e,t){return pr(pr(pr({},e),t),{},{version:e.version+1,versionNonce:sr()})},mr=function(e){return He(e)?e.points.length<2:0===e.width&&0===e.height},gr=function(e,t,n){var r=Math.abs(t),a=Math.abs(n);if(\"line\"===e||\"arrow\"===e||\"draw\"===e){var o=Math.round(Math.atan(a\/r)\/s.ay)*s.ay;0===o?n=0:o===Math.PI\/2?t=0:n=Math.round(r*Math.tan(o))*Math.sign(n)||n}else\"selection\"!==e&&(n=r*Math.sign(n));return{width:t,height:n}},vr=function(e){var t={width:e.width,height:e.height,x:e.x,y:e.y};if(e.width<0){var n=Math.abs(e.width);t.width=n,t.x=e.x-n}if(e.height<0){var r=Math.abs(e.height);t.height=r,t.y=e.y-r}return t},br=n(5474),yr=n.n(br),wr=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function xr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Er(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xr(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var kr=function(e,t,n){var r,a,o=n.filter((function(t){return t.groupIds.includes(e)}));return o.length<2?t.selectedGroupIds[e]||t.editingGroupId===e?Er(Er({},t),{},{selectedGroupIds:Er(Er({},t.selectedGroupIds),{},(r={},r[e]=!1,r)),editingGroupId:null}):t:Er(Er({},t),{},{selectedGroupIds:Er(Er({},t.selectedGroupIds),{},(a={},a[e]=!0,a)),selectedElementIds:Er(Er({},t.selectedElementIds),Object.fromEntries(o.map((function(e){return[e.id,!0]}))))})},Sr=function(e,t){return null!=Cr(e,t)},Cr=function(e,t){return t.groupIds.filter((function(t){return t!==e.editingGroupId})).find((function(t){return e.selectedGroupIds[t]}))},Or=function(e){return Object.entries(e.selectedGroupIds).filter((function(e){e[0];return e[1]})).map((function(e){var t=e[0];e[1];return t}))},Mr=function(e,t){for(var n=Er({},e),r=0,a=ci(t,e);r<a.length;r++){var o=a[r].groupIds;if(e.editingGroupId){var i=o.indexOf(e.editingGroupId);i>-1&&(o=o.slice(0,i))}if(o.length>0){var l=o[o.length-1];n=kr(l,n,t)}}return n},Tr=function(e,t){return e.groupIds.includes(t)},Ir=function(e,t){return e.filter((function(e){return Tr(e,t)}))},Pr=function(e,t,n){var r=wr([],e),a=n?r.indexOf(n):-1,o=a>-1?a:r.length;return r.splice(o,0,t),r};function Ar(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ar(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ar(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Lr=function(e,t){var n,r,a=t.x,o=t.y,i=t.strokeColor,l=t.backgroundColor,c=t.fillStyle,s=t.strokeWidth,u=t.strokeStyle,d=t.roughness,p=t.opacity,f=t.width,h=void 0===f?0:f,m=t.height,g=void 0===m?0:m,v=t.angle,b=void 0===v?0:v,y=t.groupIds,w=void 0===y?[]:y,x=t.strokeSharpness,E=t.boundElementIds,k=void 0===E?null:E,S=yr()(t,[\"x\",\"y\",\"strokeColor\",\"backgroundColor\",\"fillStyle\",\"strokeWidth\",\"strokeStyle\",\"roughness\",\"opacity\",\"width\",\"height\",\"angle\",\"groupIds\",\"strokeSharpness\",\"boundElementIds\"]);return{id:S.id||ur(),type:e,x:a,y:o,width:h,height:g,angle:b,strokeColor:i,backgroundColor:l,fillStyle:c,strokeWidth:s,strokeStyle:u,roughness:d,opacity:p,groupIds:w,strokeSharpness:x,seed:null!==(n=S.seed)&&void 0!==n?n:sr(),version:S.version||1,versionNonce:null!==(r=S.versionNonce)&&void 0!==r?r:0,isDeleted:!1,boundElementIds:k}},Dr=function(e){return Lr(e.type,e)},jr=function(e,t){return{x:\"center\"===e.textAlign?t.width\/2:\"right\"===e.textAlign?t.width:0,y:\"middle\"===e.verticalAlign?t.height\/2:0}},zr=function(e){var t=wn(e.text,yn(e)),n=jr(e,t);return hr(_r(_r({},Lr(\"text\",e)),{},{text:e.text,fontSize:e.fontSize,fontFamily:e.fontFamily,textAlign:e.textAlign,verticalAlign:e.verticalAlign,x:e.x-n.x,y:e.y-n.y,width:t.width,height:t.height,baseline:t.baseline}),{})},Br=function(e,t){var n=t.text,r=t.isDeleted;return hr(e,_r({text:n,isDeleted:null!=r?r:e.isDeleted},function(e,t){var n,r,a,o=wn(t,yn(e)),i=o.width,l=o.height,c=o.baseline,s=e.textAlign,u=e.verticalAlign;if(\"center\"===s&&\"middle\"===u){var d=wn(e.text,yn(e)),p=jr(e,{width:i-d.width,height:l-d.height});r=e.x-p.x,a=e.y-p.y}else{var f=et(e),h=f[0],m=f[1],g=f[2],v=f[3],b=it(e,i,l),y=(h-b[0])\/2,w=(m-b[1])\/2,x=(g-b[2])\/2,E=(v-b[3])\/2;r=(n=Ke({s:!0,e:\"center\"===s||\"left\"===s,w:\"center\"===s||\"right\"===s},e.x,e.y,e.angle,y,w,x,E))[0],a=n[1]}return{width:i,height:l,x:Number.isFinite(r)?r:e.x,y:Number.isFinite(a)?a:e.y,baseline:c}}(e,n)))},Hr=function(e){return _r(_r({},Lr(e.type,e)),{},{points:e.points||[],lastCommittedPoint:null,startBinding:null,endBinding:null,startArrowhead:e.startArrowhead,endArrowhead:e.endArrowhead})},Nr=function(e,t){if(void 0===t&&(t=0),null==e||\"object\"!=typeof e)return e;if(\"[object Object]\"===Object.prototype.toString.call(e)){var n=\"function\"==typeof e.constructor?Object.create(Object.getPrototypeOf(e)):{};for(var r in e)if(e.hasOwnProperty(r)){if(0===t&&(\"shape\"===r||\"canvas\"===r))continue;n[r]=Nr(e[r],t+1)}return n}if(Array.isArray(e)){for(var a=e.length,o=new Array(a);a--;)o[a]=Nr(e[a],t+1);return o}return e},Rr=function(e,t,n,r){var a=Nr(n);return a.id=ur(),a.seed=sr(),a.groupIds=function(e,t,n){for(var r=wr([],e),a=t?e.indexOf(t):-1,o=a>-1?a:e.length,i=0;i<o;i++)r[i]=n(r[i]);return r}(a.groupIds,e,(function(e){return t.has(e)||t.set(e,ur()),t.get(e)})),r&&(a=Object.assign(a,r)),a},Fr={mouse:8,pen:16,touch:28},Wr={e:!0,s:!0,n:!0,w:!0},Gr={e:!0,s:!0,n:!0,w:!0},Vr={e:!0,s:!0,n:!0,w:!0,nw:!0,se:!0},Kr={e:!0,s:!0,n:!0,w:!0,ne:!0,sw:!0},Ur=function(e,t,n,r,a,o,i){var l=Ge(e+n\/2,t+r\/2,a,o,i);return[l[0]-n\/2,l[1]-r\/2,n,r]},Yr=function(e,t,n,r,a){var o=e[0],i=e[1],l=e[2],c=e[3];void 0===a&&(a={});var s=Fr[r],u=s\/n.value,d=s\/n.value,p=s\/n.value,f=s\/n.value,h=l-o,m=c-i,g=(o+l)\/2,v=(i+c)\/2,b=4\/n.value,y=(s-8)\/(2*n.value),w={nw:a.nw?void 0:Ur(o-b-p+y,i-b-f+y,u,d,g,v,t),ne:a.ne?void 0:Ur(l+b-y,i-b-f+y,u,d,g,v,t),sw:a.sw?void 0:Ur(o-b-p+y,c+b-y,u,d,g,v,t),se:a.se?void 0:Ur(l+b-y,c+b-y,u,d,g,v,t),rotation:a.rotation?void 0:Ur(o+h\/2-u\/2,i-b-f+y-16\/n.value,u,d,g,v,t)},x=5*Fr.mouse\/n.value;return Math.abs(h)>x&&(a.n||(w.n=Ur(o+h\/2-u\/2,i-b-f+y,u,d,g,v,t)),a.s||(w.s=Ur(o+h\/2-u\/2,c+b-y,u,d,g,v,t))),Math.abs(m)>x&&(a.w||(w.w=Ur(o-b-p+y,i+m\/2-d\/2,u,d,g,v,t)),a.e||(w.e=Ur(l+b-y,i+m\/2-d\/2,u,d,g,v,t))),w},Xr=function(e,t,n){void 0===n&&(n=\"mouse\");var r={};if(\"arrow\"===e.type||\"line\"===e.type||\"draw\"===e.type){if(2===e.points.length){var a=e.points[1];0===a[0]||0===a[1]?r=Kr:a[0]>0&&a[1]<0?r=Vr:a[0]>0&&a[1]>0?r=Kr:a[0]<0&&a[1]>0?r=Vr:a[0]<0&&a[1]<0&&(r=Kr)}}else\"text\"===e.type&&(r=Gr);return Yr(et(e),e.angle,t,n,r)},Zr=function(e,t){return[0,0,0,0,t,e,1,0]},qr=function(e,t){void 0===e&&(e=0),void 0===t&&(t=0);var n=[0,0,0,0,0,0,0,0];if(t<0||t>7)throw new Error(\"Expected `index` betwen 0 and 7, got `\".concat(t,\"`\"));return 0!==e&&(n[t]=e),n},Qr=function(e){return[e[0],e[1],e[2],e[3],-e[4],-e[5],-e[6],-e[7]]},$r=function(e,t){return ia(t)?[e[0]-t,e[1],e[2],e[3],e[4],e[5],e[6],e[7]]:[e[0]-t[0],e[1]-t[1],e[2]-t[2],e[3]-t[3],e[4]-t[4],e[5]-t[5],e[6]-t[6],e[7]-t[7]]},Jr=function(e,t){return ia(t)?[e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*t,e[5]*t,e[6]*t,e[7]*t]:[ea(e,t),t[1]*e[0]+t[0]*e[1]-t[4]*e[2]+t[5]*e[3]+t[2]*e[4]-t[3]*e[5]-t[7]*e[6]-t[6]*e[7],t[2]*e[0]+t[0]*e[2]-t[6]*e[3]+t[3]*e[6],t[3]*e[0]+t[6]*e[2]+t[0]*e[3]-t[2]*e[6],t[4]*e[0]+t[2]*e[1]-t[1]*e[2]+t[7]*e[3]+t[0]*e[4]+t[6]*e[5]-t[5]*e[6]+t[3]*e[7],t[5]*e[0]-t[3]*e[1]+t[7]*e[2]+t[1]*e[3]-t[6]*e[4]+t[0]*e[5]+t[4]*e[6]+t[2]*e[7],t[6]*e[0]+t[3]*e[2]-t[2]*e[3]+t[0]*e[6],t[7]*e[0]+t[6]*e[1]+t[5]*e[2]+t[4]*e[3]+t[3]*e[4]+t[2]*e[5]+t[1]*e[6]+t[0]*e[7]]},ea=function(e,t){return t[0]*e[0]+t[2]*e[2]+t[3]*e[3]-t[6]*e[6]},ta=function(e,t){return[na(e,t),e[1]*t[7]+e[4]*t[5]-e[5]*t[4]+e[7]*t[1],e[2]*t[7]-e[4]*t[6]+e[6]*t[4]+e[7]*t[2],e[3]*t[7]+e[5]*t[6]-e[6]*t[5]+e[7]*t[3],e[4]*t[7]+e[7]*t[4],e[5]*t[7]+e[7]*t[5],e[6]*t[7]+e[7]*t[6],e[7]*t[7]]},na=function(e,t){return e[0]*t[7]+e[1]*t[6]+e[2]*t[5]+e[3]*t[4]+e[4]*t[3]+e[5]*t[2]+e[6]*t[1]+e[7]*t[0]},ra=function(e){return Math.sqrt(Math.abs(e[0]*e[0]-e[2]*e[2]-e[3]*e[3]+e[6]*e[6]))},aa=function(e){var t=ra(e);if(0===t||1===t)return e;var n=e[6]<0?-1:1;return Jr(e,n\/t)},oa=function(e){var t=function(e){return Math.sqrt(Math.abs(e[7]*e[7]-e[5]*e[5]-e[4]*e[4]+e[1]*e[1]))}(e);return 0===t||1===t?e:Jr(e,1\/t)},ia=function(e){return\"number\"==typeof e},la=(qr(1,1),qr(1,2),qr(1,3),qr(1,4),qr(1,5),qr(1,6),qr(1,7),function(e,t,n){return aa([0,n,e,t,0,0,0,0])}),ca=function(e,t){return aa(ta(t,e))},sa=function(e,t){return n=e,[(r=t)[0]*n[0]+r[2]*n[2]+r[3]*n[3]-r[6]*n[6],r[1]*n[0]+r[0]*n[1]-r[4]*n[2]+r[5]*n[3]+r[2]*n[4]-r[3]*n[5]-r[7]*n[6]-r[6]*n[7],r[2]*n[0]+r[0]*n[2]-r[6]*n[3]+r[3]*n[6],r[3]*n[0]+r[6]*n[2]+r[0]*n[3]-r[2]*n[6],r[4]*n[0]+r[7]*n[3]+r[0]*n[4]+r[3]*n[7],r[5]*n[0]+r[7]*n[2]+r[0]*n[5]+r[2]*n[7],r[6]*n[0]+r[0]*n[6],r[7]*n[0]+r[0]*n[7]];var n,r},ua=function(e){var t=e[0];return[0,0,0,0,e[1],t,1,0]},da=function(e){return[e[5],e[4]]},pa=function(e,t){return aa((n=e,[(r=t)[0]*n[0],r[1]*n[0]+r[0]*n[1],r[2]*n[0]+r[0]*n[2],r[3]*n[0]+r[0]*n[3],r[4]*n[0]+r[2]*n[1]-r[1]*n[2]+r[0]*n[4],r[5]*n[0]-r[3]*n[1]+r[1]*n[3]+r[0]*n[5],r[6]*n[0]+r[3]*n[2]-r[2]*n[3]+r[0]*n[6],r[7]*n[0]+r[6]*n[1]+r[5]*n[2]+r[4]*n[3]+r[3]*n[4]+r[2]*n[5]+r[1]*n[6]]));var n,r},fa=function(e,t){return ra(ta(e,t))},ha=function(e,t){return na(e,t)},ma=function(e){return[0,0,0,0,e[4],e[5],0,0]},ga=function(e,t){return n=Jr(e,Math.sin(t\/2)),r=Math.cos(t\/2),ia(r)?[n[0]+r,n[1],n[2],n[3],n[4],n[5],n[6],n[7]]:[n[0]+r[0],n[1]+r[1],n[2]+r[2],n[3]+r[3],n[4]+r[4],n[5]+r[5],n[6]+r[6],n[7]+r[7]];var n,r},va=function(e,t){return aa(Jr(Jr(e,t),Qr(e)))},ba=function(e,t,n,r){var a=10\/t.zoom.value;return!ya(e,t,[n,r])&&xa(e,[n,r],a)},ya=function(e,t,n){var r=10\/t.zoom.value,a=\"text\"===e.type?Oa:function(e){if(\"arrow\"===e.type)return!1;var t=\"transparent\"!==e.backgroundColor;return\"line\"===e.type||\"draw\"===e.type?t&&Ye(e.points):t}(e)?Ma:Ta;return Sa({element:e,point:n,threshold:r,check:a})},wa=function(e,t){return e.selectedElementIds[t.id]},xa=function(e,t,n){var r=t[0],a=t[1],o=et(e),i=o[0],l=o[1],c=o[2],s=o[3],u=Ge(r,a,(i+c)\/2,(l+s)\/2,-e.angle),d=u[0],p=u[1];return d>i-n&&d<c+n&&p>l-n&&p<s+n},Ea=function(e,t){var n=t.x,r=t.y,a=ka(e,e.width,e.height);return Sa({element:e,point:[n,r],threshold:a,check:Ia})},ka=function(e,t,n){var r=(\"diamond\"===e.type?1\/Math.sqrt(2):1)*Math.min(t,n);return Math.max(16,Math.min(.25*r,32))},Sa=function(e){switch(e.element.type){case\"rectangle\":case\"text\":case\"diamond\":case\"ellipse\":var t=Ca(e.element,e.point);return e.check(t,e.threshold);case\"arrow\":case\"line\":case\"draw\":return Da(e);case\"selection\":return console.warn(\"This should not happen, we need to investigate why it does.\"),!1}},Ca=function(e,t){switch(e.type){case\"rectangle\":case\"text\":return Pa(e,t);case\"diamond\":return Aa(e,t);case\"ellipse\":return _a(e,t)}},Oa=function(e,t){return e<0},Ma=function(e,t){return e<t},Ta=function(e,t){return Math.abs(e)<t},Ia=function(e,t){return 0<=e&&e<t},Pa=function(e,t){var n=ja(e,t),r=n[1],a=n[2],o=n[3];return Math.max(ha(r,la(0,1,-o)),ha(r,la(1,0,-a)))},Aa=function(e,t){var n=ja(e,t),r=n[1],a=n[2],o=n[3],i=la(o,a,-o*a);return ha(r,i)},_a=function(e,t){var n=La(e,t),r=n[0],a=n[1];return-function(e){return Math.sign(e[1])}(a)*ha(r,a)},La=function(e,t){var n=ja(e,t),r=n[1],a=n[2],o=n[3],i=da(r),l=i[0],c=i[1],s=.707,u=.707,d=a,p=o;[0,1,2,3].forEach((function(e){var t=d*s,n=p*u,r=(d*d-p*p)*Math.pow(s,3)\/d,a=(p*p-d*d)*Math.pow(u,3)\/p,o=t-r,i=n-a,f=l-r,h=c-a,m=Math.hypot(i,o),g=Math.hypot(h,f);s=Math.min(1,Math.max(0,(f*m\/g+r)\/d)),u=Math.min(1,Math.max(0,(h*m\/g+a)\/p));var v=Math.hypot(u,s);s\/=v,u\/=v}));var f,h=Zr(d*s,p*u);return[r,sa(ca(r,f=h),f)]},Da=function(e){var t=e.element,n=e.threshold;if(!Jn(t))return!1;var r=ja(e.element,e.point),a=r[0],o=r[1],i=r[2],l=r[3],c=la(0,1,-l),s=la(1,0,-i);if(!Ma(ha(o,c),n)||!Ma(ha(o,s),n))return!1;var u=da(a),d=u[0],p=u[1],f=Jn(t);if(e.check===Ma&&f.some((function(e){return Ya(e,d,p,t.strokeSharpness)})))return!0;return f.some((function(e){return Xa(e,d,p,n)}))},ja=function(e,t){var n,r=ua(t),a=et(e),o=Ba(a),i=ga(o,e.angle),l=va(i,r),c=function(e){return[0,0,0,0,Math.abs(e[4]),Math.abs(e[5]),1,0]}($r(l,ma(o))),s=(n=e.x,[0,0,0,0,e.y,n,0,0]),u=$r(l,s),d=a[0],p=a[1];return[u,c,(a[2]-d)\/2,(a[3]-p)\/2]},za=function(e){var t=et(e),n=Ba(t),r=ga(n,e.angle),a=Qr(function(e){return[1,0,0,0,-.5*e[5],.5*e[4],0,0]}(ma(n)));return Jr(a,r)},Ba=function(e){var t=e[0],n=e[1],r=e[2],a=e[3];return Zr((t+r)\/2,(n+a)\/2)},Ha=function(e,t,n){var r=za(e),a=va(r,ua(t)),o=va(r,ua(n)),i=ca(a,o),l=e.height\/e.width,c=e.width\/2,s=e.height\/2,u=i[2],d=i[3],p=i[1],f=Math.abs(d),h=Math.abs(u);switch(e.type){case\"rectangle\":case\"text\":return p\/(c*(h+l*f));case\"diamond\":return f<h?p\/(h*c):p\/(f*s);case\"ellipse\":return p\/(c*Math.sqrt(Math.pow(u,2)+Math.pow(l,2)*Math.pow(d,2)))}},Na=function(e,t,n,r){var a;switch(void 0===r&&(r=0),e.type){case\"rectangle\":case\"text\":case\"diamond\":var o=Ra(e);a=o.flatMap((function(e,n){var a=[e,o[(n+1)%4]];return Fa(t,Wa(a,r))})).concat(o.flatMap((function(e){return Va(e,r,t)})));break;case\"ellipse\":a=Ga(e,r,t)}if(a.length<2)return[];var i=a.sort((function(e,t){return fa(e,n)-fa(t,n)}));return[i[0],i[i.length-1]]},Ra=function(e,t){void 0===t&&(t=1);var n=t*e.width\/2,r=t*e.height\/2;switch(e.type){case\"rectangle\":case\"text\":return[Zr(n,r),Zr(n,-r),Zr(-n,-r),Zr(-n,r)];case\"diamond\":return[Zr(0,r),Zr(n,0),Zr(0,-r),Zr(-n,0)]}},Fa=function(e,t){var n=t[0],r=t[1];return ha(n,e)*ha(r,e)>=0?[]:[pa(e,ca(n,r))]},Wa=function(e,t){var n=e[0],r=e[1],a=function(e,t){var n=.5*t;return[1,0,0,0,n*e[4],n*e[5],0,0]}(function(e,t){return oa([0,0,0,0,t[4]-e[4],t[5]-e[5],0,0])}(n,r),t);return[va(a,n),va(a,r)]},Ga=function(e,t,n){var r=e.width\/2+t,a=e.height\/2+t,o=n[2],i=n[3],l=n[1],c=r*r*o*o+a*a*i*i,s=c-l*l;if(0===c||s<=0)return[];var u=Math.sqrt(s),d=-r*r*o*l,p=-a*a*i*l;return[Zr((d+r*a*i*u)\/c,(p-r*a*o*u)\/c),Zr((d-r*a*i*u)\/c,(p+r*a*o*u)\/c)]},Va=function(e,t,n){if(0===t)return 0===ha(n,e)?[e]:[];var r=n[2],a=n[3],o=n[1],i=da(e),l=i[0],c=i[1],s=r*r+a*a,u=t*t*s-Math.pow(r*l+a*c+o,2);if(0===s||u<=0)return[];var d=Math.sqrt(u),p=l*a*a-c*r*a-r*o,f=c*r*r-l*r*a-a*o;return[Zr((p+a*d)\/s,(f-r*d)\/s),Zr((p-a*d)\/s,(f+r*d)\/s)]},Ka=function(e,t,n){var r=Math.abs(t),a=e.width*r\/2,o=e.height*r\/2,i=Math.sign(t),l=da(n),c=l[0],s=l[1],u=0===s?1e-4:s,d=Math.pow(c,2)*Math.pow(o,2)+Math.pow(u,2)*Math.pow(a,2),p=(-c*Math.pow(o,2)+i*u*Math.sqrt(Math.max(0,d-Math.pow(a,2)*Math.pow(o,2))))\/d,f=(-p*c-1)\/u,h=-Math.pow(a,2)*p\/(Math.pow(f,2)*Math.pow(o,2)+Math.pow(p,2)*Math.pow(a,2));return Zr(h,(-p*h-1)\/f)},Ua=function(e,t,n){var r=Math.abs(t),a=Math.sign(t),o=Ra(e,r),i=0,l=null;return o.forEach((function(e){var t=a*ca(n,e)[1];t>i&&(i=t,l=e)})),l},Ya=function(e,t,n,r){for(var a=[],o=!1,i=0,l=tt(e);i<l.length;i++){var c=l[i];\"move\"===c.op?(o=!o)&&a.push([c.data[0],c.data[1]]):\"bcurveTo\"===c.op&&o&&(a.push([c.data[0],c.data[1]]),a.push([c.data[2],c.data[3]]),a.push([c.data[4],c.data[5]]))}if(a.length>=4){if(\"sharp\"===r)return Xe(a,t,n);var s=H(a,10,5);return Xe(s,t,n)}return!1},Xa=function(e,t,n,r){var a=tt(e),o=[0,0];return a.some((function(e,a){var i=e.op,l=e.data;if(\"move\"===i)o=l;else if(\"bcurveTo\"===i){var c=[l[0],l[1]],s=[l[2],l[3]],u=[l[4],l[5]],d=o;return o=u,function(e,t,n,r,a,o){for(var i=a[0],l=a[1],c=function(a,o){return Math.pow(1-a,3)*r[o]+3*a*Math.pow(1-a,2)*n[o]+3*Math.pow(a,2)*(1-a)*t[o]+e[o]*Math.pow(a,3)},s=0;s<=1;){var u=c(s,0),d=c(s,1);if(Math.sqrt(Math.pow(u-i,2)+Math.pow(d-l,2))<o)return!0;s+=.01}return!1}(d,c,s,u,[t,n],r)}return!1}))},Za=function(e,t,n){return t>=e[0]&&t<=e[0]+e[2]&&n>=e[1]&&n<=e[1]+e[3]},qa=function(e,t,n,r,a,o){return e.reduce((function(e,i){if(e)return e;var l=function(e,t,n,r,a,o){if(!t.selectedElementIds[e.id])return!1;var i=Xr(e,a,o),l=i.rotation,c=yr()(i,[\"rotation\"]);if(l&&Za(l,n,r))return\"rotation\";var s=Object.keys(c).filter((function(e){var t=c[e];return!!t&&Za(t,n,r)}));return s.length>0&&s[0]}(i,t,n,r,a,o);return l?{element:i,transformHandleType:l}:null}),null)},Qa=function(e,t,n,r,a){var o=e[0],i=e[1],l=e[2],c=e[3],s=Yr([o,i,l,c],0,r,a,Wr);return Object.keys(s).find((function(e){var r=s[e];return r&&Za(r,t,n)}))||!1},$a=[\"ns\",\"nesw\",\"ew\",\"nwse\"],Ja=function(e){var t=e.element,n=e.transformHandleType,r=t&&Math.sign(t.height)*Math.sign(t.width)==-1,a=null;switch(n){case\"n\":case\"s\":a=\"ns\";break;case\"w\":case\"e\":a=\"ew\";break;case\"nw\":case\"se\":a=r?\"nesw\":\"nwse\";break;case\"ne\":case\"sw\":a=r?\"nwse\":\"nesw\";break;case\"rotation\":return\"grab\"}return a&&t&&(a=function(e,t){var n=$a.indexOf(e);if(n>=0){var r=Math.round(t\/(Math.PI\/4));e=$a[(n+r)%$a.length]}return e}(a,t.angle)),a?\"\".concat(a,\"-resize\"):\"\"},eo=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function to(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function no(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?to(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):to(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ro=function(){function e(t,n){this.elementId=t.id,lr.mapElementToScene(this.elementId,n),e.normalizePoints(t),this.activePointIndex=null,this.lastUncommittedPoint=null,this.isDragging=!1,this.pointerOffset={x:0,y:0},this.startBindingElement=\"keep\",this.endBindingElement=\"keep\"}return e.getElement=function(e){var t,n=null===(t=lr.getScene(e))||void 0===t?void 0:t.getNonDeletedElement(e);return n||null},e.handlePointDragging=function(t,n,r,a,o){if(!t.editingLinearElement)return!1;var i=t.editingLinearElement,l=i.activePointIndex,c=i.elementId,s=i.isDragging,u=e.getElement(c);if(!u)return!1;if(null!=l&&l>-1){!1===s&&n({editingLinearElement:no(no({},i),{},{isDragging:!0})});var d=e.createPointAt(u,r-i.pointerOffset.x,a-i.pointerOffset.y,t.gridSize);return e.movePoint(u,l,d),Re(u)&&o(u,0===l?\"start\":\"end\"),!0}return!1},e.handlePointerUp=function(t,n,r){var a,o=n.elementId,i=n.activePointIndex,l=n.isDragging,c=e.getElement(o);if(!c)return n;var s={};if(l&&(0===i||i===c.points.length-1)){Ye(c.points,r.zoom.value)&&e.movePoint(c,i,0===i?c.points[c.points.length-1]:c.points[0]);var u=io(r)?bo(jn(e.getPointAtIndexGlobalCoordinates(c,i)),lr.getScene(c)):null;(a={})[0===i?\"startBindingElement\":\"endBindingElement\"]=u,s=a}return no(no(no({},n),s),{},{isDragging:!1,pointerOffset:{x:0,y:0}})},e.handlePointerDown=function(t,n,r,a,o){var i={didAddPoint:!1,hitElement:null};if(!n.editingLinearElement)return i;var l=n.editingLinearElement.elementId,c=e.getElement(l);if(!c)return i;if(t.altKey)return null==n.editingLinearElement.lastUncommittedPoint&&fr(c,{points:eo(eo([],c.points),[e.createPointAt(c,o.x,o.y,n.gridSize)])}),a.resumeRecording(),r({editingLinearElement:no(no({},n.editingLinearElement),{},{activePointIndex:c.points.length-1,lastUncommittedPoint:null,endBindingElement:bo(o,lr.getScene(c))})}),i.didAddPoint=!0,i;var s=e.getPointIndexUnderCursor(c,n.zoom,o.x,o.y);if(s>-1)i.hitElement=c;else{var u=n.editingLinearElement,d=u.startBindingElement,p=u.endBindingElement;io(n)&&Re(c)&&lo(c,d,p)}var f=et(c),h=f[0],m=f[1],g=(h+f[2])\/2,v=(m+f[3])\/2,b=s>-1&&Ge(c.x+c.points[s][0],c.y+c.points[s][1],g,v,c.angle);return r({editingLinearElement:no(no({},n.editingLinearElement),{},{activePointIndex:s>-1?s:null,pointerOffset:b?{x:o.x-b[0],y:o.y-b[1]}:{x:0,y:0}})}),i},e.handlePointerMove=function(t,n,r,a,o){var i=a.elementId,l=a.lastUncommittedPoint,c=e.getElement(i);if(!c)return a;var s=c.points,u=s[s.length-1];if(!t.altKey)return u===l&&e.movePoint(c,s.length-1,\"delete\"),no(no({},a),{},{lastUncommittedPoint:null});var d=e.createPointAt(c,n-a.pointerOffset.x,r-a.pointerOffset.y,o);return u===l?e.movePoint(c,c.points.length-1,d):e.movePoint(c,\"new\",d),no(no({},a),{},{lastUncommittedPoint:c.points[c.points.length-1]})},e.getPointsGlobalCoordinates=function(e){var t=et(e),n=t[0],r=t[1],a=t[2],o=t[3],i=(n+a)\/2,l=(r+o)\/2;return e.points.map((function(t){var n,r=e.x,a=e.y;return[r=(n=Ge(r+t[0],a+t[1],i,l,e.angle))[0],a=n[1]]}))},e.getPointAtIndexGlobalCoordinates=function(e,t){var n=t<0?e.points.length+t:t,r=et(e),a=r[0],o=r[1],i=(a+r[2])\/2,l=(o+r[3])\/2,c=e.points[n],s=e.x,u=e.y;return Ge(s+c[0],u+c[1],i,l,e.angle)},e.pointFromAbsoluteCoords=function(e,t){var n=et(e),r=n[0],a=n[1],o=(r+n[2])\/2,i=(a+n[3])\/2,l=Ge(t[0],t[1],o,i,-e.angle),c=l[0],s=l[1];return[c-e.x,s-e.y]},e.getPointIndexUnderCursor=function(e,t,n,r){for(var a=this.getPointsGlobalCoordinates(e),o=a.length;--o>-1;){var i=a[o];if(Ue(n,r,i[0],i[1])*t.value<this.POINT_HANDLE_SIZE\/2+1)return o}return-1},e.createPointAt=function(e,t,n,r){var a=$e(t,n,r),o=et(e),i=o[0],l=o[1],c=(i+o[2])\/2,s=(l+o[3])\/2,u=Ge(a[0],a[1],c,s,-e.angle),d=u[0],p=u[1];return[d-e.x,p-e.y]},e.normalizePoints=function(e){var t=e.points,n=t[0][0],r=t[0][1];fr(e,{points:t.map((function(e,t){return[e[0]-n,e[1]-r]})),x:e.x+n,y:e.y+r})},e.movePointByOffset=function(t,n,r){var a=t.points[n],o=a[0],i=a[1];e.movePoint(t,n,[o+r.x,i+r.y])},e.movePoint=function(e,t,n,r){var a,o=e.points,i=0,l=0;if(\"delete\"===n){if(\"new\"===t)throw new Error(\"invalid args in movePoint\");(a=o.slice()).splice(t,1),0===t&&(i=a[0][0],l=a[0][1],a=a.map((function(e,t){return 0===t?[0,0]:[e[0]-i,e[1]-l]})))}else if(\"new\"===t)a=eo(eo([],o),[n]);else{var c=n[0]-o[t][0],s=n[1]-o[t][1];a=o.map((function(e,n){return n===t?0===n?(i=c,l=s,e):(i=0,l=0,[e[0]+c,e[1]+s]):i||l?[e[0]-i,e[1]-l]:e}))}var u=lt(e,a,e.strokeSharpness||\"round\"),d=lt(e,o,e.strokeSharpness||\"round\"),p=(u[0]+u[2])\/2,f=(u[1]+u[3])\/2,h=(d[0]+d[2])\/2,m=(d[1]+d[3])\/2,g=Ge(i,l,h-p,m-f,e.angle);fr(e,no(no({},r),{},{points:a,x:e.x+g[0],y:e.y+g[1]}))},e}();ro.POINT_HANDLE_SIZE=20;var ao=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function oo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var io=function(e){return e.isBindingEnabled},lo=function(e,t,n){var r=new Set,a=new Set;co(e,t,n,\"start\",r,a),co(e,n,t,\"end\",r,a);var o=Array.from(a).filter((function(e){return!r.has(e)}));lr.getScene(e).getNonDeletedElements(o).forEach((function(t){var n;fr(t,{boundElementIds:null===(n=t.boundElementIds)||void 0===n?void 0:n.filter((function(t){return t!==e.id}))})}))},co=function(e,t,n,r,a,o){if(\"keep\"!==t)if(null!=t)null!=n&&(\"keep\"===n?ho(e,t,r):\"start\"!==r&&n.id===t.id)||(fo(e,t,r),a.add(t.id));else{var i=vo(e,r);null!=i&&o.add(i)}},so=function(e){e.forEach((function(e){Re(e)?lo(e,Oo(e,\"start\"),Oo(e,\"end\")):We(e)&&uo(e)}))},uo=function(e){To(e).forEach((function(t){var n=t[0],r=t[1];return lo(n,\"end\"===r?\"keep\":e,\"start\"===r?\"keep\":e)}))},po=function(e,t,n,r){null!=t.startBoundElement&&fo(e,t.startBoundElement,\"start\");var a=bo(r,n);null==a||ho(e,a,\"end\")||fo(e,a,\"end\")},fo=function(e,t,n){var r,a;fr(e,((r={})[\"start\"===n?\"startBinding\":\"endBinding\"]=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?oo(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):oo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({elementId:t.id},yo(e,t,n)),r)),fr(t,{boundElementIds:Array.from(new Set(ao(ao([],null!==(a=t.boundElementIds)&&void 0!==a?a:[]),[e.id])))})},ho=function(e,t,n){var r=e[\"start\"===n?\"endBinding\":\"startBinding\"];return mo(e,null==r?void 0:r.elementId,t)},mo=function(e,t,n){return t===n.id&&e.points.length<3},go=function(e){e.forEach((function(e){Re(e)&&lo(e,null,null)}))},vo=function(e,t){var n,r=\"start\"===t?\"startBinding\":\"endBinding\",a=e[r];return null==a?null:(fr(e,((n={})[r]=null,n)),a.elementId)},bo=function(e,t){return vi(t.getElements(),(function(t){return We(t)&&Ea(t,e)}))},yo=function(e,t,n){var r=\"start\"===n?-1:1,a=-1===r?0:e.points.length-1,o=a-r,i=ro.getPointAtIndexGlobalCoordinates(e,a),l=ro.getPointAtIndexGlobalCoordinates(e,o);return{focus:Ha(t,l,i),gap:Math.max(1,Ca(t,i))}},wo=function(e,t){var n,r=null!==(n=e.boundElementIds)&&void 0!==n?n:[];if(0!==r.length){var a=null!=t?t:{},o=a.newSize,i=a.simultaneouslyUpdated,l=Eo(i);lr.getScene(e).getNonDeletedElements(r).forEach((function(t){var n=e;if(xo(t,n)){var r=So(n,t.startBinding,o),a=So(n,t.endBinding,o);l.has(t.id)?fr(t,{startBinding:r,endBinding:a}):(ko(t,\"start\",r,e),ko(t,\"end\",a,e))}}))}},xo=function(e,t){var n,r;return(null===(n=e.startBinding)||void 0===n?void 0:n.elementId)===t.id||(null===(r=e.endBinding)||void 0===r?void 0:r.elementId)===t.id},Eo=function(e){return new Set((e||[]).map((function(e){return e.id})))},ko=function(e,t,n,r){var a;if(!(null==n||n.elementId!==r.id&&e.points.length>2)){var o=lr.getScene(e).getElement(n.elementId);if(null!=o){var i,l=\"start\"===t?-1:1,c=-1===l?0:e.points.length-1,s=c-l,u=ro.getPointAtIndexGlobalCoordinates(e,s),d=function(e,t,n){if(0===t){var r=et(e),a=Ba(r);return da(a)}var o,i=za(e),l=va(i,ua(n)),c=Qr(i);switch(e.type){case\"rectangle\":case\"text\":case\"diamond\":o=Ua(e,t,l);break;case\"ellipse\":o=Ka(e,t,l)}return da(va(c,o))}(o,n.focus,u);if(0===n.gap)i=d;else{var p=function(e,t,n,r){void 0===r&&(r=0);var a=za(e),o=va(a,ua(t)),i=va(a,ua(n)),l=ca(o,i),c=Qr(a);return Na(e,l,o,r).map((function(e){return da(va(c,e))}))}(o,u,d,n.gap);i=0===p.length?d:p[0]}ro.movePoint(e,c,ro.pointFromAbsoluteCoords(e,i),((a={})[\"start\"===t?\"startBinding\":\"endBinding\"]=n,a))}}},So=function(e,t,n){if(null==t||null==n)return t;var r=t.gap,a=t.focus,o=t.elementId,i=n.width,l=n.height,c=e.width,s=e.height;return{elementId:o,gap:Math.max(1,Math.min(ka(e,i,l),r*(i<l?i\/c:l\/s))),focus:a}},Co=function(e){return[Oo(e,\"start\"),Oo(e,\"end\")].filter((function(e){return null!=e}))},Oo=function(e,t){return bo(Mo(e,t),lr.getScene(e))},Mo=function(e,t){var n=\"start\"===t?0:-1;return jn(ro.getPointAtIndexGlobalCoordinates(e,n))},To=function(e){return lr.getScene(e).getElements().map((function(t){if(!Re(t))return null;var n=Io(t,\"start\",e),r=Io(t,\"end\",e);return n||r?[t,n&&r?\"both\":n?\"start\":\"end\",e]:null})).filter((function(e){return null!=e}))},Io=function(e,t,n){return null==e[\"start\"===t?\"startBinding\":\"endBinding\"]&&!ho(e,n,t)&&Ea(n,Mo(e,t))},Po=function(e,t,n,r){var a=new Set,o=new Set,i=\"duplicatesServeAsOld\"===r;t.forEach((function(e){var t=e.boundElementIds;if(null!=t&&t.length>0&&(t.forEach((function(e){i&&!n.has(e)&&a.add(e)})),o.add(n.get(e.id))),Re(e)){if(null!=e.startBinding){var r=e.startBinding.elementId;i&&!n.has(r)&&o.add(r)}if(null!=e.endBinding){r=e.endBinding.elementId;i&&!n.has(r)&&o.add(r)}null==e.startBinding&&null==e.endBinding||a.add(n.get(e.id))}})),e.filter((function(e){var t=e.id;return a.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;fr(e,{startBinding:Ao(t,n),endBinding:Ao(r,n)})})),e.filter((function(e){var t=e.id;return o.has(t)})).forEach((function(e){var t=e.boundElementIds;null!=t&&t.length>0&&fr(e,{boundElementIds:t.map((function(e){var t;return null!==(t=n.get(e))&&void 0!==t?t:e}))})}))},Ao=function(e,t){var n;if(null==e)return null;var r=e.elementId;return{focus:e.focus,gap:e.gap,elementId:null!==(n=t.get(r))&&void 0!==n?n:r}},_o=function(e,t){var n=new Set(t.map((function(e){return e.id}))),r=new Set;t.forEach((function(e){var t;We(e)&&(null===(t=e.boundElementIds)||void 0===t||t.forEach((function(e){n.has(e)||r.add(e)})))})),e.filter((function(e){var t=e.id;return r.has(t)})).forEach((function(e){var t=e.startBinding,r=e.endBinding;fr(e,{startBinding:Lo(t,n),endBinding:Lo(r,n)})}))},Lo=function(e,t){return null==e||t.has(e.elementId)?null:e},Do=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function jo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function zo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?jo(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):jo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Bo=function(e){return e>=2*Math.PI?e-2*Math.PI:e},Ho=function(e,t,n,r){var a=et(e),o=a[0],i=a[1],l=(o+a[2])\/2,c=(i+a[3])\/2,u=5*Math.PI\/2+Math.atan2(n-c,t-l);r&&(u+=s.ay\/2,u-=u%s.ay),u=Bo(u),fr(e,{angle:u})},No=function(e,t,n,r,a){var o;var i=et(e),l=i[0],c=i[1],s=i[2],u=i[3],d=Ge(r,a,(l+s)\/2,(c+u)\/2,-e.angle),p=d[0],f=d[1],h=\"end\"===t?[p-e.x,f-e.y]:[e.x+e.points[1][0]-p,e.y+e.points[1][1]-f],m=h[0],g=h[1];n&&(m=(o=function(e,t,n,r){var a=gr.apply(void 0,Do([e],Ge(t,n,0,0,r)));return Ge(a.width,a.height,0,0,-r)}(e.type,m,g,e.angle))[0],g=o[1]);var v=Ke(\"end\"===t?{s:!0,e:!0}:{n:!0,w:!0},e.x,e.y,e.angle,0,0,(e.points[1][0]-m)\/2,(e.points[1][1]-g)\/2),b=v[0],y=v[1];fr(e,{x:b,y,points:[[0,0],[m,g]]})},Ro=function(e,t,n){return He(e)?{points:Je(0,t,Je(1,n,e.points))}:{}},Fo=function(e,t,n){var r=e.fontSize*(t\/e.width);if(r<1)return null;var a=wn(e.text,yn({fontSize:r,fontFamily:e.fontFamily}));return{size:r,baseline:a.baseline+(n-a.height)}},Wo=function(e,t,n,r,a){var o,i=et(e),l=i[0],c=i[1],s=i[2],u=i[3],d=Ge(r,a,(l+s)\/2,(c+u)\/2,-e.angle),p=d[0],f=d[1];switch(t){case\"se\":o=Math.max((p-l)\/(s-l),(f-c)\/(u-c));break;case\"nw\":o=Math.max((s-p)\/(s-l),(u-f)\/(u-c));break;case\"ne\":o=Math.max((p-l)\/(s-l),(u-f)\/(u-c));break;case\"sw\":o=Math.max((s-p)\/(s-l),(f-c)\/(u-c))}if(o>0){var h=e.width*o,m=e.height*o,g=Fo(e,h,m);if(null===g)return;var v=it(e,h,m),b=(l-v[0])\/2,y=(c-v[1])\/2,w=(s-v[2])\/2,x=(u-v[3])\/2,E=Ke(function(e,t){return{n:\/^(n|ne|nw)$\/.test(e)||t&&\/^(s|se|sw)$\/.test(e),s:\/^(s|se|sw)$\/.test(e)||t&&\/^(n|ne|nw)$\/.test(e),w:\/^(w|nw|sw)$\/.test(e)||t&&\/^(e|ne|se)$\/.test(e),e:\/^(e|ne|se)$\/.test(e)||t&&\/^(w|nw|sw)$\/.test(e)}}(t,n),e.x,e.y,e.angle,b,y,w,x),k=E[0],S=E[1];fr(e,{fontSize:g.size,width:h,height:m,baseline:g.baseline,x:k,y:S})}},Go=function(e,t,n,r,a,o,i){var l,c,s=it(e,e.width,e.height),u=[s[0],s[1]],d=[s[2],s[3]],p=[((l=u)[0]+(c=d)[0])\/2,(l[1]+c[1])\/2],f=Ve([o,i],p,-e.angle),h=it(n,n.width,n.height),m=h[0],g=h[1],v=h[2]-m,b=h[3]-g,y=(d[0]-u[0])\/v,w=(d[1]-u[1])\/b;r.includes(\"e\")&&(y=(f[0]-u[0])\/v),r.includes(\"s\")&&(w=(f[1]-u[1])\/b),r.includes(\"w\")&&(y=(d[0]-f[0])\/v),r.includes(\"n\")&&(w=(d[1]-f[1])\/b);var x=e.width,E=e.height,k=n.width*y,S=n.height*w;if(a&&(k=2*k-x,S=2*S-E),t){var C=Math.abs(k)\/x,O=Math.abs(S)\/E;if(1===r.length&&(S*=C,k*=O),2===r.length){var M=Math.max(C,O);k=x*M*Math.sign(k),S=E*M*Math.sign(S)}}var T=it(e,k,S),I=T[0],P=T[1],A=T[2]-I,_=T[3]-P,L=Do([],u);if([\"n\",\"w\",\"nw\"].includes(r)&&(L=[d[0]-Math.abs(A),d[1]-Math.abs(_)]),\"ne\"===r){var D=[u[0],d[1]];L=[D[0],D[1]-Math.abs(_)]}if(\"sw\"===r){var j=[d[0],u[1]];L=[j[0]-Math.abs(A),j[1]]}t&&([\"s\",\"n\"].includes(r)&&(L[0]=p[0]-A\/2),[\"e\",\"w\"].includes(r)&&(L[1]=p[1]-_\/2)),k<0&&(r.includes(\"e\")&&(L[0]-=Math.abs(A)),r.includes(\"w\")&&(L[0]+=Math.abs(A))),S<0&&(r.includes(\"s\")&&(L[1]-=Math.abs(_)),r.includes(\"n\")&&(L[1]+=Math.abs(_))),a&&(L[0]=p[0]-Math.abs(A)\/2,L[1]=p[1]-Math.abs(_)\/2);var z=e.angle,B=Ve(L,p,z),H=[L[0]+Math.abs(A)\/2,L[1]+Math.abs(_)\/2],N=Ve(H,p,z);L=Ve(B,N,-z);var R=Ro(e,k,S),F=Do([],L);F[0]+=e.x-I,F[1]+=e.y-P;var W=zo({width:Math.abs(k),height:Math.abs(S),x:F[0],y:F[1]},R);0!==W.width&&0!==W.height&&Number.isFinite(W.x)&&Number.isFinite(W.y)&&(wo(n,{newSize:{width:W.width,height:W.height}}),fr(n,W))},Vo=function(e,t,n,r){var a,o,i=ot(e),l=i[0],c=i[1],s=i[2],u=i[3];switch(t){case\"se\":a=Math.max((n-l)\/(s-l),(r-c)\/(u-c)),o=function(e,t,n){var r=t[0],o=t[1],i=n[0],s=n[1];return{x:e.x+(r-l)*(a-1)+r-i,y:e.y+(o-c)*(a-1)+o-s}};break;case\"nw\":a=Math.max((s-n)\/(s-l),(u-r)\/(u-c)),o=function(e,t,n){var r=t[2],o=t[3],i=n[2],l=n[3];return{x:e.x-(s-r)*(a-1)+r-i,y:e.y-(u-o)*(a-1)+o-l}};break;case\"ne\":a=Math.max((n-l)\/(s-l),(u-r)\/(u-c)),o=function(e,t,n){var r=t[0],o=t[3],i=n[0],c=n[3];return{x:e.x+(r-l)*(a-1)+r-i,y:e.y-(u-o)*(a-1)+o-c}};break;case\"sw\":a=Math.max((s-n)\/(s-l),(r-c)\/(u-c)),o=function(e,t,n){var r=t[1],o=t[2],i=n[1],l=n[2];return{x:e.x-(s-o)*(a-1)+o-l,y:e.y+(r-c)*(a-1)+r-i}}}if(a>0){var d=e.reduce((function(t,n){if(!t)return t;var r=n.width*a,i=n.height*a,l={};if(\"text\"===n.type){var c=Fo(n,r,i);if(null===c)return null;l={fontSize:c.size,baseline:c.baseline}}var s=et(n),u=Ro(n,r,i);wo(n,{newSize:{width:r,height:i},simultaneouslyUpdated:e});var d=it(zo(zo({},n),u),r,i),p=o(n,s,d),f=p.x,h=p.y;return Do(Do([],t),[zo(zo({width:r,height:i,x:f,y:h},u),l)])}),[]);d&&e.forEach((function(e,t){fr(e,d[t])}))}},Ko=function(e,t,n,r,a,o,i){var l=5*Math.PI\/2+Math.atan2(r-i,n-o);a&&(l+=s.ay\/2,l-=l%s.ay),t.forEach((function(t,n){var r,a,c=et(t),s=c[0],u=c[1],d=(s+c[2])\/2,p=(u+c[3])\/2,f=null!==(r=null===(a=e.originalElements.get(t.id))||void 0===a?void 0:a.angle)&&void 0!==r?r:t.angle,h=Ge(d,p,o,i,l+f-t.angle),m=h[0],g=h[1];fr(t,{x:t.x+(m-d),y:t.y+(g-p),angle:Bo(l+f)})}))},Uo=function(e,t,n,r,a,o,i,l,c,s){var u;c&&(i=(u=gr(t,i,o<r?-l:l)).width,(l=u.height)<0&&(l=-l));var d=a<n?n-i:n,p=o<r?r-l:r;s&&(d=n-(i+=i)\/2,p=r-(l+=l)\/2),0!==i&&0!==l&&fr(e,{x:d,y:p,width:i,height:l})},Yo=function(e){return e.replace(\/\\t\/g,\"        \").replace(\/\\r?\\n|\\r\/g,\"\\n\")},Xo=function(e,t,n,r,a){var o=r.zoom,i=r.offsetTop,l=r.offsetLeft,c=180*n\/Math.PI,s=(e-2*l)*(o.value-1)\/2,u=(t-2*i)*(o.value-1)\/2;return e>a&&1!==o.value&&(s=a\/2*(o.value-1)),\"translate(\".concat(s,\"px, \").concat(u,\"px) scale(\").concat(o.value,\") rotate(\").concat(c,\"deg)\")},Zo=function(e){var t=wn(e.text,yn(e));fr(e,{width:t.width,height:t.height,baseline:t.baseline})},qo=function(e,t){return Boolean(!e.viewModeEnabled&&(e.editingElement||ci(t,e).length||\"selection\"!==e.elementType))};function Qo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Qo(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Qo(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Jo=function(e){return e.filter((function(e){return e.isDeleted||!mr(e)}))},ei=function(e){return e.reduce((function(e,t){return e[t.id]=t,e}),{})},ti=function(e){return e.reduce((function(e,t){return e+t.version}),0)},ni=function(e){return e.filter((function(e){return!e.isDeleted}))},ri=function(e){return!e.isDeleted},ai=function(e){return ni(e).map((function(e){return Ne(e.type)?$o($o({},e),{},{lastCommittedPoint:null}):e}))},oi=function(e){return ai(e)},ii=function(e,t,n){var r=[e.horizontal,e.vertical].map((function(e){return null!=e&&e.x<=t&&t<=e.x+e.width&&e.y<=n&&n<=e.y+e.height})),a=r[0],o=r[1];return{isOverEither:a||o,isOverHorizontal:a,isOverVertical:o}},li=function(e,t){return e.some((function(e){return t.selectedElementIds[e.id]}))},ci=function(e,t){return e.filter((function(e){return t.selectedElementIds[e.id]}))},si=function(e,t){return t.editingElement?[t.editingElement]:ci(e,t)},ui=function(e){var t=e.scenePoint,n=e.viewportDimensions,r=e.zoom;return{scrollX:n.width\/2*(1\/r.value)-t.x-r.translation.x*(1\/r.value),scrollY:n.height\/2*(1\/r.value)-t.y-r.translation.y*(1\/r.value)}},di=function(e,t,n){var r;if(!e.length)return{scrollX:0,scrollY:0};var a=ot(e),o=a[0],i=a[1],l=a[2],c=a[3];return function(e,t,n){var r=n[0],a=n[1],o=n[2],i=n[3],l=An({sceneX:r,sceneY:a},e),c=l.x,s=l.y,u=An({sceneX:o,sceneY:i},e),d=u.x,p=u.y;return d-c>e.width||p-s>e.height}(t,0,[o,i,l,c])&&(o=(r=function(e,t){if(!e.length)return[0,0,0,0];var n=1\/0,r=e[0];return e.forEach((function(e){var a=at(e),o=a[0],i=a[1],l=a[2],c=a[3],s=Ue((o+l)\/2,(i+c)\/2,t.x,t.y);s<n&&(n=s,r=e)})),at(r)}(e,Pn({clientX:t.scrollX,clientY:t.scrollY},t)))[0],i=r[1],l=r[2],c=r[3]),ui({scenePoint:{x:(o+l)\/2,y:(i+c)\/2},viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})},pi=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"draw\"===e||\"line\"===e},fi=function(e){return\"rectangle\"===e||\"ellipse\"===e||\"diamond\"===e||\"arrow\"===e||\"draw\"===e||\"line\"===e},hi=function(e){return\"rectangle\"===e||\"arrow\"===e||\"draw\"===e||\"line\"===e},mi=function(e){return\"text\"===e},gi=function(e){return\"arrow\"===e},vi=function(e,t){for(var n=null,r=e.length-1;r>=0;--r){var a=e[r];if(!a.isDeleted&&t(a)){n=a;break}}return n},bi=function(e,t,n,r){return void 0===r&&(r={x:0,y:0}),{value:e,translation:{x:r.x-n.left-(r.x-n.left-t.translation.x)*(e\/t.value),y:r.y-n.top-(r.y-n.top-t.translation.y)*(e\/t.value)}}},yi=function(e){var t=parseFloat(e.toFixed(2));return Math.max(.1,Math.min(t,10))},wi=(n(9478),c().forwardRef((function(e,t){var n=c().useRef(null);c().useImperativeHandle(t,(function(){return n.current}));var r=\"ToolIcon_size_\".concat(e.size||\"m\");return\"button\"===e.type?c().createElement(\"button\",{className:ze(\"ToolIcon_type_button\",r,e.className,e.visible&&!e.hidden?\"ToolIcon_type_button--show\":\"ToolIcon_type_button--hide\",{ToolIcon:!e.hidden,\"ToolIcon--selected\":e.selected}),hidden:e.hidden,title:e.title,\"aria-label\":e[\"aria-label\"],type:\"button\",onClick:e.onClick,ref:n},c().createElement(\"div\",{className:\"ToolIcon__icon\",\"aria-hidden\":\"true\"},e.icon||e.label,e.keyBindingLabel&&c().createElement(\"span\",{className:\"ToolIcon__keybinding\"},e.keyBindingLabel)),e.showAriaLabel&&c().createElement(\"div\",{className:\"ToolIcon__label\"},e[\"aria-label\"]),e.children):c().createElement(\"label\",{className:ze(\"ToolIcon\",e.className),title:e.title},c().createElement(\"input\",{className:\"ToolIcon_type_radio \".concat(r),type:\"radio\",name:e.name,\"aria-label\":e[\"aria-label\"],\"aria-keyshortcuts\":e[\"aria-keyshortcuts\"],\"data-testid\":e[\"data-testid\"],id:e.id,onChange:e.onChange,checked:e.checked,ref:n}),c().createElement(\"div\",{className:\"ToolIcon__icon\"},e.icon,e.keyBindingLabel&&c().createElement(\"span\",{className:\"ToolIcon__keybinding\"},e.keyBindingLabel)))})));wi.defaultProps={visible:!0,className:\"\"};var xi=function(e){return\"light\"===e?ct.$y[4]:ct.$y[9]},Ei=function(e){return\"light\"===e?ct.Sn:ct.MA[4]},ki=function(e){return\"light\"===e?ct.ix:\"#1e1e1e\"},Si=function(e,t){void 0===t&&(t=512);var n=\"number\"==typeof t?{width:t}:t,r=n.width,a=void 0===r?512:r,o=n.height,i=void 0===o?a:o,l=n.mirror,s=n.style;return c().createElement(\"svg\",{\"aria-hidden\":\"true\",focusable:\"false\",role:\"img\",viewBox:\"0 0 \".concat(a,\" \").concat(i),className:ze({\"rtl-mirror\":l}),style:s},\"string\"==typeof e?c().createElement(\"path\",{fill:\"currentColor\",d:e}):e)},Ci=Si(\"M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z\",{mirror:!0}),Oi=Si(\"M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z\",{width:448,height:512}),Mi=Si(\"M252 54L203 8a28 27 0 00-20-8H28C12 0 0 12 0 27v195c0 15 12 26 28 26h204c15 0 28-11 28-26V73a28 27 0 00-8-19zM130 213c-21 0-37-16-37-36 0-19 16-35 37-35 20 0 37 16 37 35 0 20-17 36-37 36zm56-169v56c0 4-4 6-7 6H44c-4 0-7-2-7-6V42c0-4 3-7 7-7h133l4 2 3 2a7 7 0 012 5z M296 201l87 95-188 205-78 9c-10 1-19-8-18-20l9-84zm141-14l-41-44a31 31 0 00-46 0l-38 41 87 95 38-42c13-14 13-36 0-50z\",{width:448,height:512}),Ti=Si(\"M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z\",{width:576,height:512,mirror:!0}),Ii=Si(\"M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z\",{width:384,height:512}),Pi=Si(\"M32 464a48 48 0 0 0 48 48h288a48 48 0 0 0 48-48V128H32zm272-256a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zm-96 0a16 16 0 0 1 32 0v224a16 16 0 0 1-32 0zM432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16z\",{width:448,height:512}),Ai=Si(\"M204.3 5C104.9 24.4 24.8 104.3 5.2 203.4c-37 187 131.7 326.4 258.8 306.7 41.2-6.4 61.4-54.6 42.5-91.7-23.1-45.4 9.9-98.4 60.9-98.4h79.7c35.8 0 64.8-29.6 64.9-65.3C511.5 97.1 368.1-26.9 204.3 5zM96 320c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm32-128c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128-64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 64c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z\"),_i=Si(\"M384 121.9c0-6.3-2.5-12.4-7-16.9L279.1 7c-4.5-4.5-10.6-7-17-7H256v128h128zM571 308l-95.7-96.4c-10.1-10.1-27.4-3-27.4 11.3V288h-64v64h64v65.2c0 14.3 17.3 21.4 27.4 11.3L571 332c6.6-6.6 6.6-17.4 0-24zm-379 28v-32c0-8.8 7.2-16 16-16h176V160H248c-13.2 0-24-10.8-24-24V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V352H208c-8.8 0-16-7.2-16-16z\",{width:576,height:512,mirror:!0}),Li=Si(\"M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),Di=Si(\"M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z\",{width:448,height:512}),ji=Si(\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"),zi=Si(\"M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z\"),Bi=Si(\"M255.545 8c-66.269.119-126.438 26.233-170.86 68.685L48.971 40.971C33.851 25.851 8 36.559 8 57.941V192c0 13.255 10.745 24 24 24h134.059c21.382 0 32.09-25.851 16.971-40.971l-41.75-41.75c30.864-28.899 70.801-44.907 113.23-45.273 92.398-.798 170.283 73.977 169.484 169.442C423.236 348.009 349.816 424 256 424c-41.127 0-79.997-14.678-110.63-41.556-4.743-4.161-11.906-3.908-16.368.553L89.34 422.659c-4.872 4.872-4.631 12.815.482 17.433C133.798 479.813 192.074 504 256 504c136.966 0 247.999-111.033 248-247.998C504.001 119.193 392.354 7.755 255.545 8z\",{mirror:!0}),Hi=Si(\"M256.455 8c66.269.119 126.437 26.233 170.859 68.685l35.715-35.715C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.75c-30.864-28.899-70.801-44.907-113.23-45.273-92.398-.798-170.283 73.977-169.484 169.442C88.764 348.009 162.184 424 256 424c41.127 0 79.997-14.678 110.629-41.556 4.743-4.161 11.906-3.908 16.368.553l39.662 39.662c4.872 4.872 4.631 12.815-.482 17.433C378.202 479.813 319.926 504 256 504 119.034 504 8.001 392.967 8 256.002 7.999 119.193 119.646 7.755 256.455 8z\",{mirror:!0}),Ni=Si(\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z\",{mirror:!0}),Ri=(Si(\"M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z\",{width:24,height:24}),Si(\"M16 5l-1.42 1.42-1.59-1.59V16h-1.98V4.83L9.42 6.42 8 5l4-4 4 4zm4 5v11c0 1.1-.9 2-2 2H6c-1.11 0-2-.9-2-2V10c0-1.11.89-2 2-2h3v2H6v11h12V10h-3V8h3c1.1 0 2 .89 2 2z\",{width:24,height:24}),Si(c().createElement(\"path\",{stroke:\"currentColor\",strokeWidth:\"40\",fill:\"currentColor\",d:\"M148 560a318 318 0 0 0 522 110 316 316 0 0 0 0-450 316 316 0 0 0-450 0c-11 11-21 22-30 34v4h47c25 0 46 21 46 46s-21 45-46 45H90c-13 0-25-6-33-14-9-9-14-20-14-33V156c0-25 20-45 45-45s45 20 45 45v32l1 1a401 401 0 0 1 623 509l212 212a42 42 0 0 1-59 59L698 757A401 401 0 0 1 65 570a42 42 0 0 1 83-10z\"}),{width:1024})),Fi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M22 9.556C22 8.696 21.303 8 20.444 8H16v8H8v4.444C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Wi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M16 3.556C16 2.696 15.303 2 14.444 2H3.556C2.696 2 2 2.697 2 3.556v10.888C2 15.304 2.697 16 3.556 16h10.888c.86 0 1.556-.697 1.556-1.556V3.556z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M22 9.556C22 8.696 21.303 8 20.444 8H9.556C8.696 8 8 8.697 8 9.556v10.888C8 21.304 8.697 22 9.556 22h10.888c.86 0 1.556-.697 1.556-1.556V9.556z\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Gi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M13 21a1 1 0 001 1h7a1 1 0 001-1v-7a1 1 0 00-1-1h-3v5h-5v3zM11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h3V6h5V3z\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Vi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M18 7.333C18 6.597 17.403 6 16.667 6H7.333C6.597 6 6 6.597 6 7.333v9.334C6 17.403 6.597 18 7.333 18h9.334c.736 0 1.333-.597 1.333-1.333V7.333z\",fill:xi(t),stroke:xi(t),strokeLinejoin:\"round\",strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M11 3a1 1 0 00-1-1H3a1 1 0 00-1 1v7a1 1 0 001 1h8V3zM22 14a1 1 0 00-1-1h-7a1 1 0 00-1 1v7a1 1 0 001 1h8v-8z\",fill:Ei(t),stroke:Ei(t),strokeLinejoin:\"round\",strokeWidth:\"2\"})),{width:24,mirror:!0})})),Ki=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 2,5 H 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"M 6,7 C 5.446,7 5,7.446 5,8 v 9.999992 c 0,0.554 0.446,1 1,1 h 3.0000001 c 0.554,0 0.9999999,-0.446 0.9999999,-1 V 8 C 10,7.446 9.5540001,7 9.0000001,7 Z m 9,0 c -0.554,0 -1,0.446 -1,1 v 5.999992 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 V 8 C 19,7.446 18.554,7 18,7 Z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Ui=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 2,19 H 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"m 6,16.999992 c -0.554,0 -1,-0.446 -1,-1 V 6 C 5,5.446 5.446,5 6,5 H 9.0000001 C 9.5540001,5 10,5.446 10,6 v 9.999992 c 0,0.554 -0.4459999,1 -0.9999999,1 z m 9,0 c -0.554,0 -1,-0.446 -1,-1 V 10 c 0,-0.554 0.446,-1 1,-1 h 3 c 0.554,0 1,0.446 1,1 v 5.999992 c 0,0.554 -0.446,1 -1,1 z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24,mirror:!0})})),Yi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 5,2 V 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"m 7.000004,5.999996 c 0,-0.554 0.446,-1 1,-1 h 9.999992 c 0.554,0 1,0.446 1,1 v 3.0000001 c 0,0.554 -0.446,0.9999999 -1,0.9999999 H 8.000004 c -0.554,0 -1,-0.4459999 -1,-0.9999999 z m 0,9 c 0,-0.554 0.446,-1 1,-1 h 5.999992 c 0.554,0 1,0.446 1,1 v 3 c 0,0.554 -0.446,1 -1,1 H 8.000004 c -0.554,0 -1,-0.446 -1,-1 z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24})})),Xi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 19,2 V 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"m 16.999996,5.999996 c 0,-0.554 -0.446,-1 -1,-1 H 6.000004 c -0.554,0 -1,0.446 -1,1 v 3.0000001 c 0,0.554 0.446,0.9999999 1,0.9999999 h 9.999992 c 0.554,0 1,-0.4459999 1,-0.9999999 z m 0,9 c 0,-0.554 -0.446,-1 -1,-1 h -5.999992 c -0.554,0 -1,0.446 -1,1 v 3 c 0,0.554 0.446,1 1,1 h 5.999992 c 0.554,0 1,-0.446 1,-1 z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24})})),Zi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M5 5V19Z\",fill:\"black\"}),c().createElement(\"path\",{d:\"M19 5V19M5 5V19\",stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"M15 9C15.554 9 16 9.446 16 10V14C16 14.554 15.554 15 15 15H9C8.446 15 8 14.554 8 14V10C8 9.446 8.446 9 9 9H15Z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24})})),qi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M5 5L19 5M5 19H19\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeLinecap:\"round\"}),c().createElement(\"path\",{d:\"M15 9C15.554 9 16 9.446 16 10V14C16 14.554 15.554 15 15 15H9C8.446 15 8 14.554 8 14V10C8 9.446 8.446 9 9 9H15Z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"})),{width:24})})),Qi=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"m 5.000004,16.999996 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 v -10 c 0,-0.554 -0.446,-1 -1,-1 h -3 c -0.554,0 -1,0.446 -1,1 z m 9,-2 c 0,0.554 0.446,1 1,1 h 3 c 0.554,0 1,-0.446 1,-1 v -6 c 0,-0.554 -0.446,-1 -1,-1 h -3 c -0.554,0 -1,0.446 -1,1 z\",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M 2,12 H 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeDasharray:\"1, 2.8\",strokeLinecap:\"round\"})),{width:24,mirror:!0})})),$i=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M 7 5 C 6.446 5 6 5.446 6 6 L 6 9 C 6 9.554 6.446 10 7 10 L 17 10 C 17.554 10 18 9.554 18 9 L 18 6 C 18 5.446 17.554 5 17 5 L 7 5 z M 9 14 C 8.446 14 8 14.446 8 15 L 8 18 C 8 18.554 8.446 19 9 19 L 15 19 C 15.554 19 16 18.554 16 18 L 16 15 C 16 14.446 15.554 14 15 14 L 9 14 z \",fill:xi(t),stroke:xi(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M 12,2 V 22\",fill:Ei(t),stroke:Ei(t),strokeWidth:\"2\",strokeDasharray:\"1, 2.8\",strokeLinecap:\"round\"})),{width:24})})),Ji=Si(\"M192 256c61.9 0 112-50.1 112-112S253.9 32 192 32 80 82.1 80 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C51.6 288 0 339.6 0 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zM480 256c53 0 96-43 96-96s-43-96-96-96-96 43-96 96 43 96 96 96zm48 32h-3.8c-13.9 4.8-28.6 8-44.2 8s-30.3-3.2-44.2-8H432c-20.4 0-39.2 5.9-55.7 15.4 24.4 26.3 39.7 61.2 39.7 99.8v38.4c0 2.2-.5 4.3-.6 6.4H592c26.5 0 48-21.5 48-48 0-61.9-50.1-112-112-112z\",{width:640,height:512,mirror:!0}),el=(Si(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z\"),Si(\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z\"),Si(\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\",{width:352,height:512})),tl=Si(\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z\",{width:320,height:512,style:{marginLeft:\"-0.2rem\"},mirror:!0}),nl=Si(\"M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z\",{mirror:!0}),rl=Si(\"M11.553 22.894a.998.998 0 00.894 0s3.037-1.516 5.465-4.097C19.616 16.987 21 14.663 21 12V5a1 1 0 00-.649-.936l-8-3a.998.998 0 00-.702 0l-8 3A1 1 0 003 5v7c0 2.663 1.384 4.987 3.088 6.797 2.428 2.581 5.465 4.097 5.465 4.097zm-1.303-8.481l6.644-6.644a.856.856 0 111.212 1.212l-7.25 7.25a.856.856 0 01-1.212 0l-3.75-3.75a.856.856 0 111.212-1.212l3.144 3.144z\",{width:24}),al=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M25 26H111V111H25\",fill:Ei(t)}),c().createElement(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M100 100H160V160H100\",fill:Ei(t)}),c().createElement(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"2.5\",y:\"149.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"147.5\",y:\"2.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"})),{width:182,height:182,mirror:!0})})),ol=c().memo((function(e){var t=e.appearance;return Si(c().createElement(c().Fragment,null,c().createElement(\"path\",{d:\"M25 26H111V111H25\",fill:Ei(t)}),c().createElement(\"path\",{d:\"M25 111C25 80.2068 25 49.4135 25 26M25 26C48.6174 26 72.2348 26 111 26H25ZM25 26C53.3671 26 81.7343 26 111 26H25ZM111 26C111 52.303 111 78.606 111 111V26ZM111 26C111 51.2947 111 76.5893 111 111V26ZM111 111C87.0792 111 63.1585 111 25 111H111ZM111 111C87.4646 111 63.9293 111 25 111H111ZM25 111C25 81.1514 25 51.3028 25 26V111Z\",stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"path\",{d:\"M100 100H160V160H100\",fill:Ei(t)}),c().createElement(\"path\",{d:\"M100 160C100 144.106 100 128.211 100 100M100 100C117.706 100 135.412 100 160 100H100ZM100 100C114.214 100 128.428 100 160 100H100ZM160 100C160 120.184 160 140.369 160 160V100ZM160 100C160 113.219 160 126.437 160 160V100ZM160 160C145.534 160 131.068 160 100 160H160ZM160 160C143.467 160 126.934 160 100 160H160ZM100 160C100 143.661 100 127.321 100 100V160Z\",stroke:Ei(t),strokeWidth:\"2\"}),c().createElement(\"rect\",{x:\"2.5\",y:\"2.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"78.5\",y:\"149.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"147.5\",y:\"149.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"147.5\",y:\"78.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"105.5\",y:\"2.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"}),c().createElement(\"rect\",{x:\"2.5\",y:\"102.5\",width:\"30\",height:\"30\",fill:ki(t),stroke:Ei(t),strokeWidth:\"6\"})),{width:182,height:182,mirror:!0})})),il=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{fillRule:\"evenodd\",clipRule:\"evenodd\",d:\"M20.101 16H28.0934L36 8.95989V4H33.5779L20.101 16ZM30.5704 4L17.0935 16H9.10101L22.5779 4H30.5704ZM19.5704 4L6.09349 16H4V10.7475L11.5779 4H19.5704ZM8.57036 4H4V8.06952L8.57036 4ZM36 11.6378L31.101 16H36V11.6378ZM2 2V18H38V2H2Z\",fill:Ei(t)}),{width:40,height:20})})),ll=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"g\",{fill:Ei(t),fillRule:\"evenodd\",clipRule:\"evenodd\"},c().createElement(\"path\",{d:\"M20.101 16H28.0934L36 8.95989V4H33.5779L20.101 16ZM30.5704 4L17.0935 16H9.10101L22.5779 4H30.5704ZM19.5704 4L6.09349 16H4V10.7475L11.5779 4H19.5704ZM8.57036 4H4V8.06952L8.57036 4ZM36 11.6378L31.101 16H36V11.6378ZM2 2V18H38V2H2Z\"}),c().createElement(\"path\",{d:\"M14.0001 18L3.00006 4.00002L4.5727 2.76438L15.5727 16.7644L14.0001 18ZM25.0001 18L14.0001 4.00002L15.5727 2.76438L26.5727 16.7644L25.0001 18ZM36.0001 18L25.0001 4.00002L26.5727 2.76438L37.5727 16.7644L36.0001 18Z\"})),{width:40,height:20})})),cl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M2 2H38V18H2V2Z\",fill:Ei(t)}),{width:40,height:20})})),sl=c().memo((function(e){var t=e.appearance,n=e.strokeWidth;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:n,fill:\"none\"}),{width:40,height:20})})),ul=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20})})),dl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:2.5,strokeDasharray:\"10, 8\",fill:\"none\"}),{width:40,height:20})})),pl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:2.5,strokeDasharray:\"4, 4\",fill:\"none\"}),{width:40,height:20})})),fl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M3.00098 16.1691C6.28774 13.9744 19.6399 2.8905 22.7215 3.00082C25.8041 3.11113 19.1158 15.5488 21.4962 16.8309C23.8757 18.1131 34.4155 11.7148 37.0001 10.6919\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),hl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M3 17C6.68158 14.8752 16.1296 9.09849 22.0648 6.54922C28 3.99995 22.2896 13.3209 25 14C27.7104 14.6791 36.3757 9.6471 36.3757 9.6471M6.40706 15C13 11.1918 20.0468 1.51045 23.0234 3.0052C26 4.49995 20.457 12.8659 22.7285 16.4329C25 20 36.3757 13 36.3757 13\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),ml=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M3 15.6468C6.93692 13.5378 22.5544 2.81528 26.6206 3.00242C30.6877 3.18956 25.6708 15.3346 27.4009 16.7705C29.1309 18.2055 35.4001 12.4762 37 11.6177M3.97143 10.4917C6.61158 9.24563 16.3706 2.61886 19.8104 3.01724C23.2522 3.41472 22.0773 12.2013 24.6181 12.8783C27.1598 13.5536 33.3179 8.04068 35.0571 7.07244\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),gl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M10 17L10 5L35 5\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),vl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M10 17V15C10 8 13 5 21 5L33.5 5\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20,mirror:!0})})),bl=c().memo((function(e){var t=e.appearance;return Si(c().createElement(\"path\",{d:\"M6 10H34\",stroke:Ei(t),strokeWidth:2,fill:\"none\"}),{width:40,height:20})})),yl=c().memo((function(e){var t=e.appearance,n=e.flip,r=void 0!==n&&n;return Si(c().createElement(\"g\",{transform:r?\"translate(40, 0) scale(-1, 1)\":\"\",stroke:Ei(t),strokeWidth:2,fill:\"none\"},c().createElement(\"path\",{d:\"M34 10H6M34 10L27 5M34 10L27 15\"}),c().createElement(\"path\",{d:\"M27.5 5L34.5 10L27.5 15\"})),{width:40,height:20})})),wl=c().memo((function(e){var t=e.appearance,n=e.flip,r=void 0!==n&&n;return Si(c().createElement(\"g\",{stroke:Ei(t),fill:Ei(t),transform:r?\"translate(40, 0) scale(-1, 1)\":\"\"},c().createElement(\"path\",{d:\"M32 10L6 10\",strokeWidth:2}),c().createElement(\"circle\",{r:\"4\",transform:\"matrix(-1 0 0 1 30 10)\"})),{width:40,height:20})})),xl=c().memo((function(e){var t=e.appearance,n=e.flip,r=void 0!==n&&n;return Si(c().createElement(\"g\",{transform:r?\"translate(40, 0) scale(-1, 1)\":\"\"},c().createElement(\"path\",{d:\"M34 10H5.99996M34 10L34 5M34 10L34 15\",stroke:Ei(t),strokeWidth:2,fill:\"none\"})),{width:40,height:20})})),El=[],kl=function(e){return El=El.concat(e),e};function Sl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Cl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sl(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ol=function(e,t){var n;if(e.editingGroupId){var r=Ir(ni(t),e.editingGroupId);if(r.length)return Cl(Cl({},e),{},{selectedElementIds:(n={},n[r[0].id]=!0,n)})}return e},Ml=kl({name:\"deleteSelectedElements\",perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.elementId,a=n.activePointIndex,o=n.startBindingElement,i=n.endBindingElement,l=ro.getElement(r);if(!l)return!1;if(null==a||-1===a||l.points.length<2){var c=e.filter((function(e){return e.id!==l.id}));return{elements:c,appState:Cl(Cl({},Ol(t,c)),{},{editingLinearElement:null}),commitToHistory:!1}}var s={startBindingElement:0===a?null:o,endBindingElement:a===l.points.length-1?null:i};return ro.movePoint(l,a,\"delete\"),{elements:e,appState:Cl(Cl({},t),{},{editingLinearElement:Cl(Cl(Cl({},t.editingLinearElement),s),{},{activePointIndex:a>0?a-1:0})}),commitToHistory:!0}}var u=function(e,t){return{elements:e.map((function(e){return t.selectedElementIds[e.id]?hr(e,{isDeleted:!0}):e})),appState:Cl(Cl({},t),{},{selectedElementIds:{}})}}(e,t),d=u.elements,p=u.appState;return _o(d,e.filter((function(e){var n=e.id;return t.selectedElementIds[n]}))),{elements:d,appState:Cl(Cl({},p=Ol(p,d)),{},{elementType:\"selection\",multiElement:null}),commitToHistory:li(ni(e),t)}},contextItemLabel:\"labels.delete\",keyTest:function(e){return e.key===Nt||e.key===Wt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{type:\"button\",icon:Pi,title:C(\"labels.delete\"),\"aria-label\":C(\"labels.delete\"),onClick:function(){return r(null)},visible:li(ni(t),n)})}}),Tl=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},Il=function(e,t){for(var n=[],r=[],a=null,o=-1;++o<e.length;)t.selectedElementIds[e[o].id]?(r.length&&(n=n.concat(r),r=[]),n.push(o),a=o+1):e[o].isDeleted&&a===o?(a=o+1,r.push(o)):r=[];return n},Pl=function(e,t,n,r){var a=t[n],o=function(t){return!t.isDeleted&&(!e.editingGroupId||t.groupIds.includes(e.editingGroupId))},i=\"left\"===r?function(e,t,n){void 0===n&&(n=e.length-1),n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length-1,Math.max(n,0)))+1;--r>-1;)if(t(e[r],r,e))return r;return-1}(t,o,Math.max(0,n-1)):function(e,t,n){void 0===n&&(n=0),n<0&&(n=e.length+n);for(var r=(n=Math.min(e.length,Math.max(n,0)))-1;++r<e.length;)if(t(e[r],r,e))return r;return-1}(t,o,n+1),l=t[i];if(!l)return-1;if(e.editingGroupId){if((null==a?void 0:a.groupIds.join(\"\"))===(null==l?void 0:l.groupIds.join(\"\")))return i;if(null==l||!l.groupIds.includes(e.editingGroupId))return-1}if(!l.groupIds.length)return i;var c=e.editingGroupId?l.groupIds[l.groupIds.indexOf(e.editingGroupId)-1]:l.groupIds[l.groupIds.length-1],s=Ir(t,c);return s.length?\"left\"===r?t.indexOf(s[0]):t.indexOf(s[s.length-1]):i},Al=function(e,t,n){var r,a,o=Il(t,e),i=(a=0,(r=o).reduce((function(e,t,n){return n>0&&r[n-1]!==t-1&&(a=++a),(e[a]||(e[a]=[])).push(t),e}),[]));return\"right\"===n&&(i=i.reverse()),i.forEach((function(r,a){var o=r[0],i=r[r.length-1],l=\"left\"===n?o:i,c=Pl(e,t,l,n);if(-1!==c&&l!==c){var s=\"left\"===n?t.slice(0,c):t.slice(0,o),u=t.slice(o,i+1),d=\"left\"===n?t.slice(c,o):t.slice(i+1,c+1),p=\"left\"===n?t.slice(i+1):t.slice(c+1);t=Tl(\"left\"===n?Tl(Tl(Tl([],s),u),d):Tl(Tl(Tl([],s),d),u),p)}})),t},_l=function(e,t,n){var r,a,o=Il(e,t),i=[],l=[];if(\"left\"===n){if(t.editingGroupId){if(!(c=Ir(e,t.editingGroupId)).length)return e;r=e.indexOf(c[0])}else r=0;a=o[o.length-1]}else{if(t.editingGroupId){var c;if(!(c=Ir(e,t.editingGroupId)).length)return e;a=e.indexOf(c[c.length-1])}else a=e.length-1;r=o[0]}for(var s=r;s<a+1;s++)o.includes(s)?i.push(e[s]):l.push(e[s]);var u=e.slice(0,r),d=e.slice(a+1);return Tl(\"left\"===n?Tl(Tl(Tl([],u),i),l):Tl(Tl(Tl([],u),l),i),d)},Ll=function(e,t){return Al(t,e.slice(),\"left\")},Dl=function(e,t){return Al(t,e.slice(),\"right\")},jl=function(e,t){return _l(e,t,\"left\")},zl=function(e,t){return _l(e,t,\"right\")},Bl=kl({name:\"sendBackward\",perform:function(e,t){return{elements:Ll(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendBackward\",keyPriority:40,keyTest:function(e){return e[Ft]&&!e.shiftKey&&e.code===xt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return c().createElement(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(C(\"labels.sendBackward\"),\" \u2014 \").concat(In(\"CtrlOrCmd+[\"))},c().createElement(Wi,{appearance:n.appearance}))}}),Hl=kl({name:\"bringForward\",perform:function(e,t){return{elements:Dl(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringForward\",keyPriority:40,keyTest:function(e){return e[Ft]&&!e.shiftKey&&e.code===wt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return c().createElement(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(C(\"labels.bringForward\"),\" \u2014 \").concat(In(\"CtrlOrCmd+]\"))},c().createElement(Fi,{appearance:n.appearance}))}}),Nl=kl({name:\"sendToBack\",perform:function(e,t){return{elements:jl(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.sendToBack\",keyTest:function(e){return ft?e[Ft]&&e.altKey&&e.code===xt:e[Ft]&&e.shiftKey&&e.code===xt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return c().createElement(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(){return t(null)},title:\"\".concat(C(\"labels.sendToBack\"),\" \u2014 \").concat(In(ft?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\"))},c().createElement(Vi,{appearance:n.appearance}))}}),Rl=kl({name:\"bringToFront\",perform:function(e,t){return{elements:zl(e,t),appState:t,commitToHistory:!0}},contextItemLabel:\"labels.bringToFront\",keyTest:function(e){return ft?e[Ft]&&e.altKey&&e.code===wt:e[Ft]&&e.shiftKey&&e.code===wt},PanelComponent:function(e){var t=e.updateData,n=e.appState;return c().createElement(\"button\",{type:\"button\",className:\"zIndexButton\",onClick:function(e){return t(null)},title:\"\".concat(C(\"labels.bringToFront\"),\" \u2014 \").concat(In(ft?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\"))},c().createElement(Gi,{appearance:n.appearance}))}});function Fl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Wl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Fl(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Fl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Gl=kl({name:\"selectAll\",perform:function(e,t){return!t.editingLinearElement&&{appState:Mr(Wl(Wl({},t),{},{editingGroupId:null,selectedElementIds:e.reduce((function(e,t){return t.isDeleted||(e[t.id]=!0),e}),{})}),ni(e)),commitToHistory:!0}},contextItemLabel:\"labels.selectAll\",keyTest:function(e){return e[Ft]&&e.key===Xt}}),Vl=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function Kl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ul(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Kl(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Kl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Yl=kl({name:\"duplicateSelection\",perform:function(e,t){if(t.editingLinearElement){var n=t.editingLinearElement,r=n.activePointIndex,a=n.elementId,o=ro.getElement(a);if(!o||null===r)return!1;var i=o.points,l=i[r],c=i[r+1];return fr(o,{points:Vl(Vl(Vl([],i.slice(0,r+1)),[c?[(l[0]+c[0])\/2,(l[1]+c[1])\/2]:[l[0]+30,l[1]+30]]),i.slice(r+1))}),{appState:Ul(Ul({},t),{},{editingLinearElement:Ul(Ul({},t.editingLinearElement),{},{activePointIndex:r+1})}),elements:e,commitToHistory:!0}}return Ul(Ul({},Xl(e,t)),{},{commitToHistory:!0})},contextItemLabel:\"labels.duplicateSelection\",keyTest:function(e){return e[Ft]&&e.key===Zt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{type:\"button\",icon:nl,title:\"\".concat(C(\"labels.duplicateSelection\"),\" \u2014 \").concat(In(\"CtrlOrCmd+D\")),\"aria-label\":C(\"labels.duplicateSelection\"),onClick:function(){return r(null)},visible:li(ni(t),n)})}}),Xl=function(e,t){for(var n=new Map,r=[],a=[],o=new Map,i=function(e){var i=Rr(t.editingGroupId,n,e,{x:e.x+s.k\/2,y:e.y+s.k\/2});return o.set(e.id,i.id),a.push(e),r.push(i),i},l=[],c=0;c<e.length;){var u=e[c];if(t.selectedElementIds[u.id]){if(u.groupIds.length){var d=Cr(t,u);if(d){var p=Ir(e,d);l.push.apply(l,Vl(Vl([],p),p.map((function(e){return i(e)})))),c+=p.length;continue}}l.push(u,i(u))}else l.push(u);c++}return Po(l,a,o),{elements:l,appState:Mr(Ul(Ul({},t),{},{selectedGroupIds:{},selectedElementIds:r.reduce((function(e,t){return e[t.id]=!0,e}),{})}),ni(l))}},Zl=function(e){var t=e.options,n=e.value,r=e.onChange,a=e.group;return c().createElement(\"div\",{className:\"buttonList buttonListIcon\"},t.map((function(e){return c().createElement(\"label\",{key:e.text,className:ze({active:n===e.value}),title:e.text},c().createElement(\"input\",{type:\"radio\",name:a,onChange:function(){return r(e.value)},checked:n===e.value}),e.icon)})))},ql=function(e){var t=e.options,n=e.value,r=e.onChange,a=e.group;return c().createElement(\"div\",{className:\"buttonList\"},t.map((function(e){return c().createElement(\"label\",{key:e.text,className:ze({active:n===e.value})},c().createElement(\"input\",{type:\"radio\",name:a,onChange:function(){return r(e.value)},checked:n===e.value}),e.text)})))},Ql=(n(2816),function(e){var t=e.children,n=e.left,r=e.top,a=e.onCloseRequest,o=e.fitInViewport,i=void 0!==o&&o,s=(0,l.useRef)(null);return(0,l.useLayoutEffect)((function(){if(i&&s.current){var e=s.current,t=e.getBoundingClientRect(),n=t.x,r=t.y,a=t.width,o=t.height,l=window.innerWidth;n+a>l&&(e.style.left=\"\".concat(l-a,\"px\"));var c=window.innerHeight;r+o>c&&(e.style.top=\"\".concat(c-o,\"px\"))}}),[i]),(0,l.useEffect)((function(){if(a){var e=function(e){var t;null!==(t=s.current)&&void 0!==t&&t.contains(e.target)||(0,pt.unstable_batchedUpdates)((function(){return a(e)}))};return document.addEventListener(\"pointerdown\",e,!1),function(){return document.removeEventListener(\"pointerdown\",e,!1)}}}),[a]),c().createElement(\"div\",{className:\"popover\",style:{top:r,left:n},ref:s},t)}),$l=(n(5574),function(e){var t=(new Option).style;return t.color=e,!!t.color}),Jl=[[\"1\",\"2\",\"3\",\"4\",\"5\"],[\"q\",\"w\",\"e\",\"r\",\"t\"],[\"a\",\"s\",\"d\",\"f\",\"g\"]].flat(),ec=function(e){var t=e.colors,n=e.color,r=e.onChange,a=e.onClose,o=e.label,i=e.showInput,l=void 0===i||i,s=e.type,u=c().useRef(),d=c().useRef(),p=c().useRef(),f=c().useRef();c().useEffect((function(){d.current?d.current.focus():f.current?f.current.focus():p.current&&p.current.focus()}),[]);return c().createElement(\"div\",{className:\"color-picker color-picker-type-\".concat(s),role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":C(\"labels.colorPicker\"),onKeyDown:function(e){if(e.key===Yt){var t,n=document.activeElement;if(e.shiftKey){if(n===u.current)null===(t=f.current)||void 0===t||t.focus(),e.preventDefault()}else if(n===f.current){var r;null===(r=u.current)||void 0===r||r.focus(),e.preventDefault()}}else if(sn(e.key)){n=document.activeElement;var o=k().rtl;if(-1!==(s=Array.prototype.indexOf.call(p.current.children,n))){var i=p.current.children.length-(l?1:0),c=e.key===(o?zt:Bt)?(s+1)%i:e.key===(o?Bt:zt)?(i+s-1)%i:e.key===jt?(s+5)%i:e.key===Ht?(i+s-5)%i:s;p.current.children[c].focus()}e.preventDefault()}else if(Jl.includes(e.key.toLowerCase())&&!vn(e.target)){var s=Jl.indexOf(e.key.toLowerCase());p.current.children[s].focus(),e.preventDefault()}else e.key!==Vt&&e.key!==Gt||(e.preventDefault(),a());e.nativeEvent.stopImmediatePropagation()}},c().createElement(\"div\",{className:\"color-picker-triangle color-picker-triangle-shadow\"}),c().createElement(\"div\",{className:\"color-picker-triangle\"}),c().createElement(\"div\",{className:\"color-picker-content\",ref:function(e){e&&(p.current=e)},tabIndex:0},t.map((function(e,t){return c().createElement(\"button\",{className:\"color-picker-swatch\",onClick:function(t){t.currentTarget.focus(),r(e)},title:\"\".concat(e,\" \u2014 \").concat(Jl[t].toUpperCase()),\"aria-label\":e,\"aria-keyshortcuts\":Jl[t],style:{color:e},key:e,ref:function(r){r&&0===t&&(u.current=r),r&&e===n&&(d.current=r)},onFocus:function(){r(e)}},\"transparent\"===e?c().createElement(\"div\",{className:\"color-picker-transparent\"}):void 0,c().createElement(\"span\",{className:\"color-picker-keybinding\"},Jl[t]))})),l&&c().createElement(tc,{color:n,label:o,onChange:function(e){r(e)},ref:f})))},tc=c().forwardRef((function(e,t){var n=e.color,r=e.onChange,a=e.label,o=c().useState(n),i=o[0],l=o[1],s=c().useRef(null);c().useEffect((function(){l(n)}),[n]),c().useImperativeHandle(t,(function(){return s.current}));var u=c().useCallback((function(e){var t=e.toLowerCase(),n=function(e){return\"transparent\"===e||$l(e)?e:$l(\"#\".concat(e))?\"#\".concat(e):null}(t);n&&r(n),l(t)}),[r]);return c().createElement(\"label\",{className:\"color-input-container\"},c().createElement(\"div\",{className:\"color-picker-hash\"},\"#\"),c().createElement(\"input\",{spellCheck:!1,className:\"color-picker-input\",\"aria-label\":a,onChange:function(e){return u(e.target.value)},value:(i||\"\").replace(\/^#\/,\"\"),onBlur:function(){return l(n)},ref:s}))})),nc=function(e){var t=e.type,n=e.color,r=e.onChange,a=e.label,o=c().useState(!1),i=o[0],l=o[1],s=c().useRef(null);return c().createElement(\"div\",null,c().createElement(\"div\",{className:\"color-picker-control-container\"},c().createElement(\"button\",{className:\"color-picker-label-swatch\",\"aria-label\":a,style:n?{\"--swatch-color\":n}:void 0,onClick:function(){return l(!i)},ref:s}),c().createElement(tc,{color:n,label:a,onChange:function(e){r(e)}})),c().createElement(c().Suspense,{fallback:\"\"},i?c().createElement(Ql,{onCloseRequest:function(e){return e.target!==s.current&&l(!1)}},c().createElement(ec,{colors:dt[t],color:n||null,onChange:function(e){r(e)},onClose:function(){var e;l(!1),null===(e=s.current)||void 0===e||e.focus()},label:a,showInput:!1,type:t})):null))},rc=n(6950),ac=n.n(rc);n(7143);function oc(e){var t=e.options,n=e.value,r=e.label,a=e.onChange,o=e.onClose,i=c().useRef(),l=c().useRef(),s=c().useRef(null);c().useEffect((function(){l.current?l.current.focus():s.current&&s.current.focus()}),[]);return c().createElement(\"div\",{className:\"picker\",role:\"dialog\",\"aria-modal\":\"true\",\"aria-label\":r,onKeyDown:function(e){var n=t.find((function(t){return t.keyBinding===e.key.toLowerCase()}));if(e.metaKey||e.altKey||e.ctrlKey||!n)if(e.key===Yt)setTimeout((function(){l.current!==document.activeElement&&o()}),0);else if(sn(e.key)){var r=document.activeElement,a=k().rtl;if(-1!==(u=Array.prototype.indexOf.call(s.current.children,r))){var i=t.length,c=u;switch(e.key){case a?zt:Bt:case jt:c=(u+1)%i;break;case a?Bt:zt:case Ht:c=(i+u-1)%i}s.current.children[c].focus()}e.preventDefault()}else e.key!==Vt&&e.key!==Gt||(e.preventDefault(),o());else{var u=t.indexOf(n);s.current.children[u].focus(),e.preventDefault()}e.nativeEvent.stopImmediatePropagation()}},c().createElement(\"div\",{className:\"picker-content\",ref:s},t.map((function(e,t){return c().createElement(\"button\",{className:\"picker-option\",onClick:function(t){t.currentTarget.focus(),a(e.value)},title:\"\".concat(e.text,\" \u2014 \").concat(e.keyBinding.toUpperCase()),\"aria-label\":e.text||\"none\",\"aria-keyshortcuts\":e.keyBinding,key:e.text,ref:function(r){r&&0===t&&(i.current=r),r&&e.value===n&&(l.current=r)},onFocus:function(){a(e.value)}},e.icon,c().createElement(\"span\",{className:\"picker-keybinding\"},e.keyBinding))}))))}function ic(e){var t,n=e.value,r=e.label,a=e.options,o=e.onChange,i=e.group,l=void 0===i?\"\":i,s=c().useState(!1),u=s[0],d=s[1],p=c().useRef(null),f=k().rtl;return c().createElement(\"label\",{className:\"picker-container\"},c().createElement(\"button\",{name:l,className:u?\"active\":\"\",\"aria-label\":r,onClick:function(){return d(!u)},ref:p},null===(t=a.find((function(e){return e.value===n})))||void 0===t?void 0:t.icon),c().createElement(c().Suspense,{fallback:\"\"},u?c().createElement(c().Fragment,null,c().createElement(Ql,ac()({onCloseRequest:function(e){return e.target!==p.current&&d(!1)}},f?{right:5.5}:{left:-5.5}),c().createElement(oc,{options:a,value:n,label:r,onChange:o,onClose:function(){var e;d(!1),null===(e=p.current)||void 0===e||e.focus()}})),c().createElement(\"div\",{className:\"picker-triangle\"})):null))}function lc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function cc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lc(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var sc=function(e,t,n){return e.map((function(e){var r;return t.selectedElementIds[e.id]||e.id===(null===(r=t.editingElement)||void 0===r?void 0:r.id)?n(e):e}))},uc=function(e,t,n,r){var a,o,i=t.editingElement,l=ni(e);return null!==(a=null!==(o=i&&n(i))&&void 0!==o?o:li(l,t)?function(e,t,n){var r=Array.from(new Set(ci(e,t).map((function(e){return n(e)}))));return 1===r.length?r[0]:null}(l,t,n):r)&&void 0!==a?a:null},dc=(kl({name:\"changeStrokeColor\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{strokeColor:n})})),appState:cc(cc({},t),{},{currentItemStrokeColor:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(c().Fragment,null,c().createElement(\"h3\",{\"aria-hidden\":\"true\"},C(\"labels.stroke\")),c().createElement(nc,{type:\"elementStroke\",label:C(\"labels.stroke\"),color:uc(t,n,(function(e){return e.strokeColor}),n.currentItemStrokeColor),onChange:r}))}}),kl({name:\"changeBackgroundColor\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{backgroundColor:n})})),appState:cc(cc({},t),{},{currentItemBackgroundColor:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(c().Fragment,null,c().createElement(\"h3\",{\"aria-hidden\":\"true\"},C(\"labels.background\")),c().createElement(nc,{type:\"elementBackground\",label:C(\"labels.background\"),color:uc(t,n,(function(e){return e.backgroundColor}),n.currentItemBackgroundColor),onChange:r}))}}),kl({name:\"changeFillStyle\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{fillStyle:n})})),appState:cc(cc({},t),{},{currentItemFillStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.fill\")),c().createElement(Zl,{options:[{value:\"hachure\",text:C(\"labels.hachure\"),icon:c().createElement(il,{appearance:n.appearance})},{value:\"cross-hatch\",text:C(\"labels.crossHatch\"),icon:c().createElement(ll,{appearance:n.appearance})},{value:\"solid\",text:C(\"labels.solid\"),icon:c().createElement(cl,{appearance:n.appearance})}],group:\"fill\",value:uc(t,n,(function(e){return e.fillStyle}),n.currentItemFillStyle),onChange:function(e){r(e)}}))}}),kl({name:\"changeStrokeWidth\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{strokeWidth:n})})),appState:cc(cc({},t),{},{currentItemStrokeWidth:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.strokeWidth\")),c().createElement(Zl,{group:\"stroke-width\",options:[{value:1,text:C(\"labels.thin\"),icon:c().createElement(sl,{appearance:n.appearance,strokeWidth:2})},{value:2,text:C(\"labels.bold\"),icon:c().createElement(sl,{appearance:n.appearance,strokeWidth:6})},{value:4,text:C(\"labels.extraBold\"),icon:c().createElement(sl,{appearance:n.appearance,strokeWidth:10})}],value:uc(t,n,(function(e){return e.strokeWidth}),n.currentItemStrokeWidth),onChange:function(e){return r(e)}}))}}),kl({name:\"changeSloppiness\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{seed:sr(),roughness:n})})),appState:cc(cc({},t),{},{currentItemRoughness:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.sloppiness\")),c().createElement(Zl,{group:\"sloppiness\",options:[{value:0,text:C(\"labels.architect\"),icon:c().createElement(fl,{appearance:n.appearance})},{value:1,text:C(\"labels.artist\"),icon:c().createElement(hl,{appearance:n.appearance})},{value:2,text:C(\"labels.cartoonist\"),icon:c().createElement(ml,{appearance:n.appearance})}],value:uc(t,n,(function(e){return e.roughness}),n.currentItemRoughness),onChange:function(e){return r(e)}}))}}),kl({name:\"changeStrokeStyle\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{strokeStyle:n})})),appState:cc(cc({},t),{},{currentItemStrokeStyle:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.strokeStyle\")),c().createElement(Zl,{group:\"strokeStyle\",options:[{value:\"solid\",text:C(\"labels.strokeStyle_solid\"),icon:c().createElement(ul,{appearance:n.appearance})},{value:\"dashed\",text:C(\"labels.strokeStyle_dashed\"),icon:c().createElement(dl,{appearance:n.appearance})},{value:\"dotted\",text:C(\"labels.strokeStyle_dotted\"),icon:c().createElement(pl,{appearance:n.appearance})}],value:uc(t,n,(function(e){return e.strokeStyle}),n.currentItemStrokeStyle),onChange:function(e){return r(e)}}))}}),kl({name:\"changeOpacity\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){return hr(e,{opacity:n})})),appState:cc(cc({},t),{},{currentItemOpacity:n}),commitToHistory:!0}},PanelComponent:function(e){var t,n=e.elements,r=e.appState,a=e.updateData;return c().createElement(\"label\",{className:\"control-label\"},C(\"labels.opacity\"),c().createElement(\"input\",{type:\"range\",min:\"0\",max:\"100\",step:\"10\",onChange:function(e){return a(+e.target.value)},onWheel:function(e){e.stopPropagation();var t=+e.target.value;e.deltaY<0&&t<100?a(t+10):e.deltaY>0&&t>0&&a(t-10)},value:null!==(t=uc(n,r,(function(e){return e.opacity}),r.currentItemOpacity))&&void 0!==t?t:void 0}))}}),kl({name:\"changeFontSize\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){if(Be(e)){var t=hr(e,{fontSize:n});return Zo(t),t}return e})),appState:cc(cc({},t),{},{currentItemFontSize:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.fontSize\")),c().createElement(ql,{group:\"font-size\",options:[{value:16,text:C(\"labels.small\")},{value:20,text:C(\"labels.medium\")},{value:28,text:C(\"labels.large\")},{value:36,text:C(\"labels.veryLarge\")}],value:uc(t,n,(function(e){return Be(e)&&e.fontSize}),n.currentItemFontSize||s.n5),onChange:function(e){return r(e)}}))}}),kl({name:\"changeFontFamily\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){if(Be(e)){var t=hr(e,{fontFamily:n});return Zo(t),t}return e})),appState:cc(cc({},t),{},{currentItemFontFamily:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,a=[{value:1,text:C(\"labels.handDrawn\")},{value:2,text:C(\"labels.normal\")},{value:3,text:C(\"labels.code\")}];return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.fontFamily\")),c().createElement(ql,{group:\"font-family\",options:a,value:uc(t,n,(function(e){return Be(e)&&e.fontFamily}),n.currentItemFontFamily||s.rk),onChange:function(e){return r(e)}}))}}),kl({name:\"changeTextAlign\",perform:function(e,t,n){return{elements:sc(e,t,(function(e){if(Be(e)){var t=hr(e,{textAlign:n});return Zo(t),t}return e})),appState:cc(cc({},t),{},{currentItemTextAlign:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.textAlign\")),c().createElement(ql,{group:\"text-align\",options:[{value:\"left\",text:C(\"labels.left\")},{value:\"center\",text:C(\"labels.center\")},{value:\"right\",text:C(\"labels.right\")}],value:uc(t,n,(function(e){return Be(e)&&e.textAlign}),n.currentItemTextAlign),onChange:function(e){return r(e)}}))}}),kl({name:\"changeSharpness\",perform:function(e,t,n){var r=si(ni(e),t),a=r.length?r.every((function(e){return!He(e)})):!Ne(t.elementType),o=r.length?r.every(He):Ne(t.elementType);return{elements:sc(e,t,(function(e){return hr(e,{strokeSharpness:n})})),appState:cc(cc({},t),{},{currentItemStrokeSharpness:a?n:t.currentItemStrokeSharpness,currentItemLinearStrokeSharpness:o?n:t.currentItemLinearStrokeSharpness}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.edges\")),c().createElement(Zl,{group:\"edges\",options:[{value:\"sharp\",text:C(\"labels.sharp\"),icon:c().createElement(gl,{appearance:n.appearance})},{value:\"round\",text:C(\"labels.round\"),icon:c().createElement(vl,{appearance:n.appearance})}],value:uc(t,n,(function(e){return e.strokeSharpness}),hi(n.elementType)&&(Ne(n.elementType)?n.currentItemLinearStrokeSharpness:n.currentItemStrokeSharpness)||null),onChange:function(e){return r(e)}}))}}),kl({name:\"changeArrowhead\",perform:function(e,t,n){var r;return{elements:sc(e,t,(function(e){if(He(e)){var t=n.position,r=n.type;if(\"start\"===t)return hr(e,{startArrowhead:r});if(\"end\"===t)return hr(e,{endArrowhead:r})}return e})),appState:cc(cc({},t),{},(r={},r[\"start\"===n.position?\"currentItemStartArrowhead\":\"currentItemEndArrowhead\"]=n.type,r)),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData,a=k().rtl;return c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.arrowheads\")),c().createElement(\"div\",{className:\"iconSelectList\"},c().createElement(ic,{label:\"arrowhead_start\",options:[{value:null,text:C(\"labels.arrowhead_none\"),icon:c().createElement(bl,{appearance:n.appearance}),keyBinding:\"q\"},{value:\"arrow\",text:C(\"labels.arrowhead_arrow\"),icon:c().createElement(yl,{appearance:n.appearance,flip:!a}),keyBinding:\"w\"},{value:\"bar\",text:C(\"labels.arrowhead_bar\"),icon:c().createElement(xl,{appearance:n.appearance,flip:!a}),keyBinding:\"e\"},{value:\"dot\",text:C(\"labels.arrowhead_dot\"),icon:c().createElement(wl,{appearance:n.appearance,flip:!a}),keyBinding:\"r\"}],value:uc(t,n,(function(e){return He(e)&&gi(e.type)?e.startArrowhead:n.currentItemStartArrowhead}),n.currentItemStartArrowhead),onChange:function(e){return r({position:\"start\",type:e})}}),c().createElement(ic,{label:\"arrowhead_end\",group:\"arrowheads\",options:[{value:null,text:C(\"labels.arrowhead_none\"),keyBinding:\"q\",icon:c().createElement(bl,{appearance:n.appearance})},{value:\"arrow\",text:C(\"labels.arrowhead_arrow\"),keyBinding:\"w\",icon:c().createElement(yl,{appearance:n.appearance,flip:a})},{value:\"bar\",text:C(\"labels.arrowhead_bar\"),keyBinding:\"e\",icon:c().createElement(xl,{appearance:n.appearance,flip:a})},{value:\"dot\",text:C(\"labels.arrowhead_dot\"),keyBinding:\"r\",icon:c().createElement(wl,{appearance:n.appearance,flip:a})}],value:uc(t,n,(function(e){return He(e)&&gi(e.type)?e.endArrowhead:n.currentItemEndArrowhead}),n.currentItemEndArrowhead),onChange:function(e){return r({position:\"end\",type:e})}})))}}),n(2189)),pc=n.n(dc),fc=c().createContext(!1),hc=function(){return window.matchMedia?window.matchMedia(pc().isMobileQuery):{matches:!1,addListener:function(){},removeListener:function(){}}},mc=function(e){var t=e.children,n=(0,l.useRef)();n.current||(n.current=hc());var r=(0,l.useState)(n.current.matches),a=r[0],o=r[1];return(0,l.useEffect)((function(){var e=function(){return o(n.current.matches)};return n.current.addListener(e),function(){return n.current.removeListener(e)}}),[]),c().createElement(fc.Provider,{value:a},t)},gc=function(){return hc().matches};function vc(){return(0,l.useContext)(fc)}function bc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yc(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?bc(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):bc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}kl({name:\"changeViewBackgroundColor\",perform:function(e,t,n){return{appState:yc(yc({},t),{},{viewBackgroundColor:n}),commitToHistory:!0}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"div\",{style:{position:\"relative\"}},c().createElement(nc,{label:C(\"labels.canvasBackground\"),type:\"canvasBackground\",color:t.viewBackgroundColor,onChange:function(e){return n(e)}}))}}),kl({name:\"clearCanvas\",perform:function(e,t){return{elements:e.map((function(e){return hr(e,{isDeleted:!0})})),appState:yc(yc({},Rn()),{},{appearance:t.appearance,elementLocked:t.elementLocked,exportBackground:t.exportBackground,exportEmbedScene:t.exportEmbedScene,gridSize:t.gridSize,shouldAddWatermark:t.shouldAddWatermark,showStats:t.showStats,pasteDialog:t.pasteDialog}),commitToHistory:!0}},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Pi,title:C(\"buttons.clearReset\"),\"aria-label\":C(\"buttons.clearReset\"),showAriaLabel:vc(),onClick:function(){window.confirm(C(\"alerts.clearReset\"))&&t(null)}})}}),kl({name:\"zoomIn\",perform:function(e,t){var n=bi(yi(t.zoom.value+s.V4),t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2});return{appState:yc(yc({},t),{},{zoom:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Li,title:\"\".concat(C(\"buttons.zoomIn\"),\" \u2014 \").concat(In(\"CtrlOrCmd++\")),\"aria-label\":C(\"buttons.zoomIn\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===mt||e.code===vt)&&(e[Ft]||e.shiftKey)}}),kl({name:\"zoomOut\",perform:function(e,t){var n=bi(yi(t.zoom.value-s.V4),t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2});return{appState:yc(yc({},t),{},{zoom:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Di,title:\"\".concat(C(\"buttons.zoomOut\"),\" \u2014 \").concat(In(\"CtrlOrCmd+-\")),\"aria-label\":C(\"buttons.zoomOut\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===gt||e.code===bt)&&(e[Ft]||e.shiftKey)}}),kl({name:\"resetZoom\",perform:function(e,t){return{appState:yc(yc({},t),{},{zoom:bi(1,t.zoom,{left:t.offsetLeft,top:t.offsetTop},{x:t.width\/2,y:t.height\/2})}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Ri,title:C(\"buttons.resetZoom\"),\"aria-label\":C(\"buttons.resetZoom\"),onClick:function(){t(null)}})},keyTest:function(e){return(e.code===Ot||e.code===yt)&&(e[Ft]||e.shiftKey)}});var wc=function(e,t,n){var r=ni(e),a=ci(r,t),o=n&&a.length>0?ot(a):ot(r),i=function(e,t){var n=e[0],r=e[1],a=e[2],o=e[3],i=a-n,l=t.width\/i,c=o-r,u=t.height\/c,d=Math.min(l,u),p=Math.floor(d\/s.V4)*s.V4;return Math.min(Math.max(p,s.V4),1)}(o,{width:t.width,height:t.height}),l=bi(i,t.zoom,{left:t.offsetLeft,top:t.offsetTop}),c=o[0],u=o[1],d=(c+o[2])\/2,p=(u+o[3])\/2;return{appState:yc(yc(yc({},t),ui({scenePoint:{x:d,y:p},viewportDimensions:{width:t.width,height:t.height},zoom:l})),{},{zoom:l}),commitToHistory:!1}};kl({name:\"zoomToSelection\",perform:function(e,t){return wc(e,t,!0)},keyTest:function(e){return e.code===kt&&e.shiftKey&&!e.altKey&&!e[Ft]}}),kl({name:\"zoomToFit\",perform:function(e,t){return wc(e,t,!1)},keyTest:function(e){return e.code===Et&&e.shiftKey&&!e.altKey&&!e[Ft]}});function xc(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ec(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xc(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xc(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var kc,Sc,Cc=kl({name:\"finalize\",perform:function(e,t,n,r){var a,o,i=r.canvas;if(t.editingLinearElement){var l=t.editingLinearElement,c=l.elementId,s=l.startBindingElement,u=l.endBindingElement,d=ro.getElement(c);if(d)return Re(d)&&lo(d,s,u),{elements:d.points.length<2||mr(d)?e.filter((function(e){return e.id!==d.id})):void 0,appState:Ec(Ec({},t),{},{editingLinearElement:null}),commitToHistory:!0}}var p=e;window.document.activeElement instanceof HTMLElement&&window.document.activeElement.blur();var f=t.multiElement?t.multiElement:\"draw\"===(null===(o=t.editingElement)||void 0===o?void 0:o.type)?t.editingElement:null;if(f){if(\"draw\"!==f.type&&\"touch\"!==t.lastPointerDownWith){var h=f.points,m=f.lastCommittedPoint;m&&h[h.length-1]===m||fr(f,{points:f.points.slice(0,-1)})}mr(f)&&(p=p.slice(0,-1));var g=Ye(f.points,t.zoom.value);if((\"line\"===f.type||\"draw\"===f.type)&&g){var v=f.points,b=v[0];fr(f,{points:v.map((function(e,t){return t===v.length-1?[b[0],b[1]]:e}))})}if(Re(f)&&!g&&f.points.length>1){var y=ro.getPointAtIndexGlobalCoordinates(f,-1),w=y[0],x=y[1];po(f,t,lr.getScene(f),{x:w,y:x})}t.elementLocked||\"draw\"===t.elementType||(t.selectedElementIds[f.id]=!0)}return(t.elementLocked||\"draw\"===t.elementType)&&f||Cn(i),{elements:p,appState:Ec(Ec({},t),{},{elementType:(t.elementLocked||\"draw\"===t.elementType)&&f?t.elementType:\"selection\",draggingElement:null,multiElement:null,editingElement:null,startBoundElement:null,suggestedBindings:[],selectedElementIds:f&&!t.elementLocked&&\"draw\"!==t.elementType?Ec(Ec({},t.selectedElementIds),{},(a={},a[f.id]=!0,a)):t.selectedElementIds}),commitToHistory:\"draw\"===t.elementType}},keyTest:function(e,t){return e.key===Vt&&(null!==t.editingLinearElement||!t.draggingElement&&null===t.multiElement)||(e.key===Vt||e.key===Gt)&&null!==t.multiElement},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(wi,{type:\"button\",icon:ji,title:C(\"buttons.done\"),\"aria-label\":C(\"buttons.done\"),onClick:n,visible:null!=t.multiElement})}}),Oc=\"undefined\"!=typeof process&&null!==(kc=process.env)&&void 0!==kc&&kc.REACT_APP_GOOGLE_ANALYTICS_ID&&\"undefined\"!=typeof window&&window.gtag?function(e,t,n,r){window.gtag(\"event\",t,{event_category:e,event_label:n,value:r})}:(\"undefined\"!=typeof process&&null!==(Sc=process.env)&&void 0!==Sc&&Sc.JEST_WORKER_ID,function(e,t,n,r){}),Mc=(n(8518),function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Class extends value \"+String(n)+\" is not a constructor or null\");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),Tc=function(e){function t(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r,a,o=this;return o=e.apply(this,t)||this,r=a=o,o.handleFocus=function(e){En(e.currentTarget)},o.handleBlur=function(e){var t=e.currentTarget.innerText.trim();t!==a.props.value&&a.props.onChange(t),kn()},o.handleKeyDown=function(e){if(\"Enter\"===e.key){if(e.preventDefault(),e.nativeEvent.isComposing||229===e.keyCode)return;e.currentTarget.blur()}},o.makeEditable=function(e){if(e)try{e.contentEditable=\"plaintext-only\"}catch(t){e.contentEditable=\"true\"}},r}return Mc(t,e),t.prototype.render=function(){return c().createElement(\"span\",{suppressContentEditableWarning:!0,ref:this.makeEditable,\"data-type\":\"wysiwyg\",className:\"TextInput\",role:\"textbox\",\"aria-label\":this.props.label,onBlur:this.handleBlur,onKeyDown:this.handleKeyDown,onFocus:this.handleFocus},this.props.value)},t}(l.Component),Ic=(n(2680),function(e){var t=e.children,n=e.label,r=e.position,a=void 0===r?\"below\":r,o=e.long,i=void 0!==o&&o;return c().createElement(\"div\",{className:\"Tooltip\"},c().createElement(\"span\",{className:\"above\"===a?\"Tooltip__label Tooltip__label--above\":\"Tooltip__label Tooltip__label--below\",style:{width:i?\"50ch\":\"10ch\"}},n),t)}),Pc=function(e){var t=e.title?e.title:\"dark\"===e.value?C(\"buttons.lightMode\"):C(\"buttons.darkMode\");return c().createElement(\"label\",{className:\"ToolIcon ToolIcon_type_floating ToolIcon_size_M\",title:t},c().createElement(\"input\",{className:\"ToolIcon_type_checkbox ToolIcon_toggle_opaque\",type:\"checkbox\",onChange:function(t){return e.onChange(t.target.checked?\"dark\":\"light\")},checked:\"dark\"===e.value,\"aria-label\":t}),c().createElement(\"div\",{className:\"ToolIcon__icon\"},\"light\"===e.value?Ac.MOON:Ac.SUN))},Ac={SUN:c().createElement(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\"},c().createElement(\"path\",{fill:\"currentColor\",d:\"M256 160c-52.9 0-96 43.1-96 96s43.1 96 96 96 96-43.1 96-96-43.1-96-96-96zm246.4 80.5l-94.7-47.3 33.5-100.4c4.5-13.6-8.4-26.5-21.9-21.9l-100.4 33.5-47.4-94.8c-6.4-12.8-24.6-12.8-31 0l-47.3 94.7L92.7 70.8c-13.6-4.5-26.5 8.4-21.9 21.9l33.5 100.4-94.7 47.4c-12.8 6.4-12.8 24.6 0 31l94.7 47.3-33.5 100.5c-4.5 13.6 8.4 26.5 21.9 21.9l100.4-33.5 47.3 94.7c6.4 12.8 24.6 12.8 31 0l47.3-94.7 100.4 33.5c13.6 4.5 26.5-8.4 21.9-21.9l-33.5-100.4 94.7-47.3c13-6.5 13-24.7.2-31.1zm-155.9 106c-49.9 49.9-131.1 49.9-181 0-49.9-49.9-49.9-131.1 0-181 49.9-49.9 131.1-49.9 181 0 49.9 49.9 49.9 131.1 0 181z\"})),MOON:c().createElement(\"svg\",{width:\"512\",height:\"512\",className:\"rtl-mirror\",viewBox:\"0 0 512 512\"},c().createElement(\"path\",{fill:\"currentColor\",d:\"M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z\"}))};const _c=\"chooseFileSystemEntries\"in self?\"chooseFileSystemEntries\":\"showOpenFilePicker\"in self&&\"showOpenFilePicker\",Lc=_c?\"chooseFileSystemEntries\"===_c?n.e(736).then(n.bind(n,9012)):n.e(736).then(n.bind(n,499)):n.e(736).then(n.bind(n,5034));async function Dc(...e){return(await Lc).default(...e)}_c?\"chooseFileSystemEntries\"===_c?n.e(736).then(n.bind(n,6980)):n.e(736).then(n.bind(n,868)):n.e(736).then(n.bind(n,3110));const jc=_c?\"chooseFileSystemEntries\"===_c?n.e(736).then(n.bind(n,1170)):n.e(736).then(n.bind(n,7814)):n.e(736).then(n.bind(n,4001));async function zc(...e){return(await jc).default(...e)}var Bc,Hc=function(e,t){if(null!=t&&t.collaborators){var n=t.collaborators.get(e);if(null!=n&&n.color)return n.color}var r=e.split(\"\").reduce((function(e,t){return e+t.charCodeAt(0)}),0),a=dt.elementBackground.slice(1),o=dt.elementStroke.slice(1);return{background:a[r%a.length],stroke:o[r%o.length]}};!function(e){e.ACTIVE=\"active\",e.AWAY=\"away\",e.IDLE=\"idle\"}(Bc||(Bc={}));var Nc=function(){var e=document.createElement(\"canvas\").getContext(\"2d\");if(!e)return!1;return e.fillStyle=\"#f00\",e.textBaseline=\"top\",e.font=\"32px Arial\",e.fillText(\"\ud83d\ude00\",0,0),0!==e.getImageData(12,12,1,1).data[0]}(),Rc=function(e,t,n,r,a,o,i,l,c){void 0===c&&(c=!1),e.translate(o,i),e.rotate(l),c&&e.fillRect(t-o,n-i,r,a),e.strokeRect(t-o,n-i,r,a),e.rotate(-l),e.translate(-o,-i)},Fc=function(e,t,n,r){e.beginPath(),e.arc(t,n,r,0,2*Math.PI),e.fill(),e.stroke()},Wc=function(e,t,n,r,a,o,i,l){var c=void 0===l?{}:l,u=c.renderScrollbars,d=void 0===u||u,p=c.renderSelection,f=void 0===p||p,h=c.renderOptimizations,m=void 0!==h&&h,g=c.renderGrid,v=void 0===g||g;if(!o)return{atLeastOneVisibleElement:!1};var b=o.getContext(\"2d\");b.scale(r,r);var y=o.width\/r,w=o.height\/r;if(i.exportWithDarkMode&&(b.filter=s.Gi),\"string\"==typeof i.viewBackgroundColor){(\"transparent\"===i.viewBackgroundColor||5===i.viewBackgroundColor.length||9===i.viewBackgroundColor.length||\/(hsla|rgba)\\(\/.test(i.viewBackgroundColor))&&b.clearRect(0,0,y,w);var x=b.fillStyle;b.fillStyle=i.viewBackgroundColor,b.fillRect(0,0,y,w),b.fillStyle=x}else b.clearRect(0,0,y,w);var E=i.zoom.translation.x,S=i.zoom.translation.y;b.translate(E,S),b.scale(i.zoom.value,i.zoom.value),v&&t.gridSize&&function(e,t,n,r,a,o){var i=e.strokeStyle;e.strokeStyle=\"rgba(0,0,0,0.1)\",e.beginPath();for(var l=n;l<n+a+2*t;l+=t)e.moveTo(l,r-t),e.lineTo(l,r+o+2*t);for(var c=r;c<r+o+2*t;c+=t)e.moveTo(n-t,c),e.lineTo(n+a+2*t,c);e.stroke(),e.strokeStyle=i}(b,t.gridSize,-Math.ceil(E\/i.zoom.value\/t.gridSize)*t.gridSize+i.scrollX%t.gridSize,-Math.ceil(S\/i.zoom.value\/t.gridSize)*t.gridSize+i.scrollY%t.gridSize,y\/i.zoom.value,w\/i.zoom.value);var C,O=e.filter((function(e){return Xc(e,y,w,{zoom:i.zoom,offsetLeft:t.offsetLeft,offsetTop:t.offsetTop,scrollX:i.scrollX,scrollY:i.scrollY})}));if(O.forEach((function(e){ar(e,a,b,m,i)})),t.editingLinearElement){var M=ro.getElement(t.editingLinearElement.elementId);M&&function(e,t,n,r){e.translate(n.scrollX,n.scrollY);var a=e.strokeStyle,o=e.lineWidth;e.lineWidth=1\/n.zoom.value,ro.getPointsGlobalCoordinates(r).forEach((function(r,a){var o;e.strokeStyle=\"red\",e.setLineDash([]),e.fillStyle=(null===(o=t.editingLinearElement)||void 0===o?void 0:o.activePointIndex)===a?\"rgba(255, 127, 127, 0.9)\":\"rgba(255, 255, 255, 0.9)\";var i=ro.POINT_HANDLE_SIZE;Fc(e,r[0],r[1],i\/2\/n.zoom.value)})),e.setLineDash([]),e.lineWidth=o,e.translate(-n.scrollX,-n.scrollY),e.strokeStyle=a}(b,t,i,M)}if(n&&ar(n,a,b,m,i),io(t)&&t.suggestedBindings.filter((function(e){return null!=e})).forEach((function(e){Kc(b,i,e)})),f&&!t.multiElement&&!t.editingLinearElement){for(var T=e.reduce((function(e,n){var r=[];if(t.selectedElementIds[n.id]&&!Sr(t,n)&&r.push(ct.Sn),i.remoteSelectedElementIds[n.id]&&r.push.apply(r,i.remoteSelectedElementIds[n.id].map((function(e){return Hc(e,t).background}))),r.length){var a=et(n),o=a[0],l=a[1],c=a[2],s=a[3];e.push({angle:n.angle,elementX1:o,elementY1:l,elementX2:c,elementY2:s,selectionColors:r})}return e}),[]),I=function(t){var n=Ir(e,t),r=ot(n),a=r[0],o=r[1],i=r[2],l=r[3];T.push({angle:0,elementX1:a,elementX2:i,elementY1:o,elementY2:l,selectionColors:[ct.Sn]})},P=0,A=Or(t);P<A.length;P++){I(A[P])}t.editingGroupId&&I(t.editingGroupId),T.forEach((function(e){return Vc(b,i,e)}));var _=ci(e,t);if(b.translate(i.scrollX,i.scrollY),1===_.length){b.fillStyle=ct.ix;var L=Xr(_[0],i.zoom,\"mouse\");t.viewModeEnabled||Gc(b,i,L,_[0].angle)}else if(_.length>1&&!t.isRotating){var D=4\/i.zoom.value;b.fillStyle=ct.ix;var j=ot(_),z=j[0],B=j[1],H=j[2],N=j[3],R=b.getLineDash();b.setLineDash([2\/i.zoom.value]);var F=b.lineWidth;b.lineWidth=1\/i.zoom.value,Rc(b,z-D,B-D,H-z+2*D,N-B+2*D,(z+H)\/2,(B+N)\/2,0),b.lineWidth=F,b.setLineDash(R);L=Yr([z,B,H,N],0,i.zoom,\"mouse\",Wr);Gc(b,i,L,0)}b.translate(-i.scrollX,-i.scrollY)}for(var W in b.scale(1\/i.zoom.value,1\/i.zoom.value),b.translate(-E,-S),i.remotePointerViewportCoords){var G=i.remotePointerViewportCoords[W],V=G.x,K=G.y;V-=t.offsetLeft,K-=t.offsetTop;var U=V<0||V>y-9||K<0||K>w-14;V=Math.max(V,0),V=Math.min(V,y-9),K=Math.max(K,0),K=Math.min(K,w-14);var Y=Hc(W,t),X=Y.background,Z=Y.stroke,q=b.strokeStyle,Q=(x=b.fillStyle,b.globalAlpha);b.strokeStyle=Z,b.fillStyle=X;var $=i.remotePointerUserStates[W];(U||$===Bc.AWAY)&&(b.globalAlpha=.48),i.remotePointerButton&&\"down\"===i.remotePointerButton[W]&&(b.beginPath(),b.arc(V,K,15,0,2*Math.PI,!1),b.lineWidth=3,b.strokeStyle=\"#ffffff88\",b.stroke(),b.closePath(),b.beginPath(),b.arc(V,K,15,0,2*Math.PI,!1),b.lineWidth=1,b.strokeStyle=Z,b.stroke(),b.closePath()),b.beginPath(),b.moveTo(V,K),b.lineTo(V+1,K+14),b.lineTo(V+4,K+9),b.lineTo(V+9,K+10),b.lineTo(V,K),b.fill(),b.stroke();var J=i.remotePointerUsernames[W],ee=\"\";$===Bc.AWAY?ee=Nc?\"\u26ab\ufe0f\":\" (\".concat(Bc.AWAY,\")\"):$===Bc.IDLE?ee=Nc?\"\ud83d\udca4\":\" (\".concat(Bc.IDLE,\")\"):$===Bc.ACTIVE&&(ee=Nc?\"\ud83d\udfe2\":\"\");var te=\"\".concat(J?\"\".concat(J,\" \"):\"\").concat(ee);if(!U&&te){var ne=V+9,re=K+14,ae=b.measureText(te),oe=ae.actualBoundingBoxDescent+ae.actualBoundingBoxAscent;b.fillStyle=Z,b.fillRect(ne-1,re-1,ae.width+8+2,oe+8+2),b.fillStyle=X,b.fillRect(ne,re,ae.width+8,oe+8),b.fillStyle=ct.ix,b.fillText(te,ne+4,re+4+ae.actualBoundingBoxAscent)}b.strokeStyle=q,b.fillStyle=x,b.globalAlpha=Q,b.closePath()}if(d){C=function(e,t,n,r){var a=r.scrollX,o=r.scrollY,i=r.zoom;if(0===e.length)return{horizontal:null,vertical:null};var l=ot(e),c=l[0],s=l[1],u=l[2],d=l[3],p=t\/i.value,f=n\/i.value,h=t-p,m=n-f,g={top:parseInt(_n(\"sat\")),bottom:parseInt(_n(\"sab\")),left:parseInt(_n(\"sal\")),right:parseInt(_n(\"sar\"))},v=k().rtl,b=h\/2-a+g.left,y=m\/2-o+g.top,w=b+p-g.right,x=y+f-g.bottom,E=Math.min(c,b),S=Math.min(s,y),C=Math.max(u,w),O=Math.max(d,x);return{horizontal:b===E&&w===C?null:{x:Math.max(g.left,4)+(b-E)\/(C-E)*t,y:n-6-Math.max(4,g.bottom),width:(w-b)\/(C-E)*t-Math.max(8,g.left+g.right),height:6},vertical:y===S&&x===O?null:{x:v?Math.max(g.left,4):t-6-Math.max(g.right,4),y:(y-S)\/(O-S)*n+Math.max(g.top,4),width:6,height:(x-y)\/(O-S)*n-Math.max(8,g.top+g.bottom)}}}(e,y,w,i);x=b.fillStyle,q=b.strokeStyle;b.fillStyle=\"rgba(0,0,0,0.3)\",b.strokeStyle=\"rgba(255,255,255,0.8)\",[C.horizontal,C.vertical].forEach((function(e){e&&function(e,t,n,r,a,o){e.beginPath(),e.moveTo(t+o,n),e.lineTo(t+r-o,n),e.quadraticCurveTo(t+r,n,t+r,n+o),e.lineTo(t+r,n+a-o),e.quadraticCurveTo(t+r,n+a,t+r-o,n+a),e.lineTo(t+o,n+a),e.quadraticCurveTo(t,n+a,t,n+a-o),e.lineTo(t,n+o),e.quadraticCurveTo(t,n,t+o,n),e.closePath(),e.fill(),e.stroke()}(b,e.x,e.y,e.width,e.height,3)})),b.fillStyle=x,b.strokeStyle=q}return b.scale(1\/r,1\/r),{atLeastOneVisibleElement:O.length>0,scrollBars:C}},Gc=function(e,t,n,r){Object.keys(n).forEach((function(a){var o=n[a];if(void 0!==o){var i=e.lineWidth;e.lineWidth=1\/t.zoom.value,\"rotation\"===a?Fc(e,o[0]+o[2]\/2,o[1]+o[3]\/2,o[2]\/2):Rc(e,o[0],o[1],o[2],o[3],o[0]+o[2]\/2,o[1]+o[3]\/2,r,!0),e.lineWidth=i}}))},Vc=function(e,t,n){var r=n.angle,a=n.elementX1,o=n.elementY1,i=n.elementX2,l=n.elementY2,c=n.selectionColors,s=i-a,u=l-o,d=e.getLineDash(),p=e.lineWidth,f=e.lineDashOffset,h=e.strokeStyle,m=4\/t.zoom.value,g=8\/t.zoom.value,v=4\/t.zoom.value;e.lineWidth=1\/t.zoom.value,e.translate(t.scrollX,t.scrollY);for(var b=c.length,y=0;y<b;++y)e.strokeStyle=c[y],e.setLineDash([g,v+(g+v)*(b-1)]),e.lineDashOffset=(g+v)*y,Rc(e,a-m,o-m,s+2*m,u+2*m,a+s\/2,o+u\/2,r);e.lineDashOffset=f,e.strokeStyle=h,e.lineWidth=p,e.setLineDash(d),e.translate(-t.scrollX,-t.scrollY)},Kc=function(e,t,n){var r=e.strokeStyle,a=e.lineWidth,o=Array.isArray(n)?Yc:Uc;e.translate(t.scrollX,t.scrollY),o(e,n),e.strokeStyle=r,e.lineWidth=a,e.translate(-t.scrollX,-t.scrollY)},Uc=function(e,t){var n=et(t),r=n[0],a=n[1],o=n[2]-r,i=n[3]-a,l=ka(t,o,i);e.strokeStyle=\"rgba(0,0,0,.05)\",e.lineWidth=l-4;var c=2+l\/2;switch(t.type){case\"rectangle\":case\"text\":Rc(e,r-c,a-c,o+2*c,i+2*c,r+o\/2,a+i\/2,t.angle);break;case\"diamond\":var s=Math.hypot(o,i);!function(e,t,n,r,a,o){e.translate(r,a),e.rotate(o),e.beginPath(),e.moveTo(0,n\/2),e.lineTo(t\/2,0),e.lineTo(0,-n\/2),e.lineTo(-t\/2,0),e.closePath(),e.stroke(),e.rotate(-o),e.translate(-r,-a)}(e,o+2*(c*s\/i),i+2*(c*s\/o),r+o\/2,a+i\/2,t.angle);break;case\"ellipse\":!function(e,t,n,r,a,o){e.beginPath(),e.ellipse(r,a,t\/2,n\/2,o,0,2*Math.PI),e.stroke()}(e,o+2*c,i+2*c,r+o\/2,a+i\/2,t.angle)}},Yc=function(e,t){var n=t[0],r=t[1],a=t[2],o=ka(a,a.width,a.height);e.strokeStyle=\"rgba(0,0,0,0)\",e.fillStyle=\"rgba(0,0,0,.05)\",(\"both\"===r?[0,-1]:\"start\"===r?[0]:[-1]).forEach((function(t){var r=ro.getPointAtIndexGlobalCoordinates(n,t),a=r[0],i=r[1];Fc(e,a,i,o)}))},Xc=function(e,t,n,r){var a=at(e),o=a[0],i=a[1],l=a[2],c=a[3],s=Pn({clientX:r.offsetLeft,clientY:r.offsetTop},r),u=Pn({clientX:r.offsetLeft+t,clientY:r.offsetTop+n},r);return s.x<=l&&s.y<=c&&u.x>=o&&u.y>=i},Zc=function(e,t,n,r){var a=void 0===r?{}:r,o=a.offsetX,i=void 0===o?0:o,l=a.offsetY,c=void 0===l?0:l;n&&e.forEach((function(e){e.isDeleted||function(e,t,n,r,a){var o=et(e),i=o[0],l=o[1],c=o[2],s=o[3],u=(c-i)\/2-(e.x-i),d=(s-l)\/2-(e.y-l),p=180*e.angle\/Math.PI,f=t.generator;switch(e.type){case\"selection\":throw new Error(\"Selection rendering is not supported for SVG\");case\"rectangle\":case\"diamond\":case\"ellipse\":nr(e,f);var h=t.draw(Jn(e));1!=(v=e.opacity\/100)&&(h.setAttribute(\"stroke-opacity\",\"\".concat(v)),h.setAttribute(\"fill-opacity\",\"\".concat(v))),h.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(a||0,\") rotate(\").concat(p,\" \").concat(u,\" \").concat(d,\")\")),n.appendChild(h);break;case\"line\":case\"draw\":case\"arrow\":nr(e,f);var m=n.ownerDocument.createElementNS(fn,\"g\"),g=e.opacity\/100;Jn(e).forEach((function(n){var o=t.draw(n);1!==g&&(o.setAttribute(\"stroke-opacity\",\"\".concat(g)),o.setAttribute(\"fill-opacity\",\"\".concat(g))),o.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(a||0,\") rotate(\").concat(p,\" \").concat(u,\" \").concat(d,\")\")),\"line\"!==e.type&&\"draw\"!==e.type||!Ye(e.points)||\"transparent\"===e.backgroundColor||o.setAttribute(\"fill-rule\",\"evenodd\"),m.appendChild(o)})),n.appendChild(m);break;default:if(!Be(e))throw new Error(\"Unimplemented type \".concat(e.type));var v=e.opacity\/100;h=n.ownerDocument.createElementNS(fn,\"g\"),1!==v&&(h.setAttribute(\"stroke-opacity\",\"\".concat(v)),h.setAttribute(\"fill-opacity\",\"\".concat(v))),h.setAttribute(\"transform\",\"translate(\".concat(r||0,\" \").concat(a||0,\") rotate(\").concat(p,\" \").concat(u,\" \").concat(d,\")\"));for(var b=e.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),y=e.height\/b.length,w=e.height-e.baseline,x=\"center\"===e.textAlign?e.width\/2:\"right\"===e.textAlign?e.width:0,E=Dn(e.text)?\"rtl\":\"ltr\",k=\"center\"===e.textAlign?\"middle\":\"right\"===e.textAlign||\"rtl\"===E?\"end\":\"start\",S=0;S<b.length;S++){var C=n.ownerDocument.createElementNS(fn,\"text\");C.textContent=b[S],C.setAttribute(\"x\",\"\".concat(x)),C.setAttribute(\"y\",\"\".concat((S+1)*y-w)),C.setAttribute(\"font-family\",bn(e)),C.setAttribute(\"font-size\",\"\".concat(e.fontSize,\"px\")),C.setAttribute(\"fill\",e.strokeColor),C.setAttribute(\"text-anchor\",k),C.setAttribute(\"style\",\"white-space: pre;\"),C.setAttribute(\"direction\",E),h.appendChild(C)}n.appendChild(h)}}(e,t,n,e.x+i,e.y+c)}))},qc=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},Qc=\"\\x3c!-- svg-source:excalidraw --\\x3e\",$c=function(e,t,n,r){var a=n.exportBackground,o=n.exportPadding,i=void 0===o?10:o,l=n.viewBackgroundColor,c=n.scale,s=void 0===c?1:c,u=n.shouldAddWatermark;void 0===r&&(r=function(e,t){var n=document.createElement(\"canvas\");return n.width=e*s,n.height=t*s,{canvas:n,scale:s}});var d=es(e,u),p=ns(d,i,u),f=p[0],h=p[1],m=r(p[2],p[3]),g=m.canvas,v=m.scale;return Wc(d,t,null,void 0===v?s:v,De.canvas(g),g,{viewBackgroundColor:a?l:null,exportWithDarkMode:t.exportWithDarkMode,scrollX:-f+i,scrollY:-h+i,zoom:Rn().zoom,remotePointerViewportCoords:{},remoteSelectedElementIds:{},shouldCacheIgnoreZoom:!1,remotePointerUsernames:{},remotePointerUserStates:{}},{renderScrollbars:!1,renderSelection:!1,renderOptimizations:!1,renderGrid:!1}),g},Jc=function(e,t){var n=t.exportBackground,r=t.exportPadding,a=void 0===r?10:r,o=t.viewBackgroundColor,i=t.exportWithDarkMode,l=t.scale,c=void 0===l?1:l,u=t.shouldAddWatermark,d=t.metadata,p=void 0===d?\"\":d,f=es(e,u),h=ns(f,a,u),m=h[0],g=h[1],v=h[2],b=h[3],y=document.createElementNS(fn,\"svg\");if(y.setAttribute(\"version\",\"1.1\"),y.setAttribute(\"xmlns\",fn),y.setAttribute(\"viewBox\",\"0 0 \".concat(v,\" \").concat(b)),y.setAttribute(\"width\",\"\".concat(v*c)),y.setAttribute(\"height\",\"\".concat(b*c)),i&&y.setAttribute(\"filter\",s.Gi),y.innerHTML=\"\\n  \".concat(Qc,\"\\n  \").concat(p,'\\n  <defs>\\n    <style>\\n      @font-face {\\n        font-family: \"Virgil\";\\n        src: url(\"https:\/\/excalidraw.com\/Virgil.woff2\");\\n      }\\n      @font-face {\\n        font-family: \"Cascadia\";\\n        src: url(\"https:\/\/excalidraw.com\/Cascadia.woff2\");\\n      }\\n    <\/style>\\n  <\/defs>\\n  '),n&&o){var w=y.ownerDocument.createElementNS(fn,\"rect\");w.setAttribute(\"x\",\"0\"),w.setAttribute(\"y\",\"0\"),w.setAttribute(\"width\",\"\".concat(v)),w.setAttribute(\"height\",\"\".concat(b)),w.setAttribute(\"fill\",o),y.appendChild(w)}var x=De.svg(y);return Zc(f,x,y,{offsetX:-m+a,offsetY:-g+a}),y},es=function(e,t){var n=qc([],e);if(t){var r=ot(e),a=r[2],o=r[3];n=qc(qc([],n),[ts(a,o)])}return n},ts=function(e,t){return zr({text:C(\"labels.madeWithExcalidraw\"),fontSize:16,fontFamily:s.rk,textAlign:\"right\",verticalAlign:s.hs,x:e,y:t+16,strokeColor:ct.MA[5],backgroundColor:\"transparent\",fillStyle:\"hachure\",strokeWidth:1,strokeStyle:\"solid\",roughness:1,opacity:100,strokeSharpness:\"sharp\"})},ns=function(e,t,n){var r=ot(e),a=r[0],o=r[1],i=r[2],l=r[3];return[a,o,Sn(a,i)+2*t,Sn(o,l)+t+(n?0:t)]},rs=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function as(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function os(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?as(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):as(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var is=32,ls=12,cs=256,ss=\"NOT_SPREADSHEET\",us=\"VALID_SPREADSHEET\",ds=function(e){var t=\/^[$\u20ac\u00a3\u00a5\u20a9]?([0-9,]+(\\.[0-9]+)?)$\/.exec(e);return t?parseFloat(t[1].replace(\/,\/g,\"\")):null},ps=function(e,t){return e.slice(1).every((function(e){return null!==ds(e[t])}))},fs=function(e){var t=e[0].length;if(t>2)return{type:ss,reason:\"More than 2 columns\"};if(1===t){if(!ps(e,0))return{type:ss,reason:\"Value is not numeric\"};var n=null===ds(e[0][0]),r=(n?e.slice(1):e).map((function(e){return ds(e[0])}));return r.length<2?{type:ss,reason:\"Less than two rows\"}:{type:us,spreadsheet:{title:n?e[0][0]:null,labels:null,values:r}}}var a=ps(e,0)?0:1;if(!ps(e,a))return{type:ss,reason:\"Value is not numeric\"};var o=(a+1)%2,i=null===ds(e[0][a]),l=i?e.slice(1):e;return l.length<2?{type:ss,reason:\"Less than 2 rows\"}:{type:us,spreadsheet:{title:i?e[0][a]:null,labels:l.map((function(e){return e[o]})),values:l.map((function(e){return ds(e[a])}))}}},hs=dt.elementBackground.slice(2,dt.elementBackground.length),ms={fillStyle:\"hachure\",fontFamily:s.rk,fontSize:s.n5,opacity:100,roughness:1,strokeColor:dt.elementStroke[0],strokeSharpness:\"sharp\",strokeStyle:\"solid\",strokeWidth:1,verticalAlign:\"middle\"},gs=function(e){return{chartWidth:44*e.values.length+ls,chartHeight:280}},vs=function(e,t,n,r,a,o){var i=gs(e),l=i.chartWidth,c=i.chartHeight,u=e.title?zr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{text:e.title,x:t+l\/2,y:n-cs-24-s.n5,strokeSharpness:\"sharp\",strokeStyle:\"solid\",textAlign:\"center\"})):null,d=o?Dr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{type:\"rectangle\",x:t,y:n-c,width:l,height:c,strokeColor:dt.elementStroke[0],fillStyle:\"solid\",opacity:6})):null;return rs(rs(rs(rs(rs([],d?[d]:[]),u?[u]:[]),function(e,t,n,r,a){var o;return(null===(o=e.labels)||void 0===o?void 0:o.map((function(e,o){return zr(os(os({groupIds:[r],backgroundColor:a},ms),{},{text:e.length>8?\"\".concat(e.slice(0,5),\"...\"):e,x:t+44*o+24,y:n+6,width:is,angle:5.87,fontSize:16,textAlign:\"center\",verticalAlign:\"top\"}))})))||[]}(e,t,n,r,a)),function(e,t,n,r,a){var o=zr(os(os({groupIds:[r],backgroundColor:a},ms),{},{x:t-ls,y:n-ls,text:\"0\",textAlign:\"right\"}));return[o,zr(os(os({groupIds:[r],backgroundColor:a},ms),{},{x:t-ls,y:n-cs-o.height\/2,text:Math.max.apply(Math,e.values).toLocaleString(),textAlign:\"right\"}))]}(e,t,n,r,a)),function(e,t,n,r,a){var o=gs(e),i=o.chartWidth,l=o.chartHeight;return[Hr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,width:i,points:[[0,0],[i,0]]})),Hr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{type:\"line\",x:t,y:n,startArrowhead:null,endArrowhead:null,height:l,points:[[0,0],[0,-l]]})),Hr(os(os({backgroundColor:a,groupIds:[r]},ms),{},{type:\"line\",x:t,y:n-cs-ls,startArrowhead:null,endArrowhead:null,strokeStyle:\"dotted\",width:i,opacity:50,points:[[0,0],[i,0]]}))]}(e,t,n,r,a))},bs=function(e,t,n,r){return\"line\"===e?function(e,t,n){for(var r=Math.max.apply(Math,e.values),a=ur(),o=hs[Math.floor(Math.random()*hs.length)],i=0,l=[],c=0,u=e.values;c<u.length;c++){var d=44*i,p=-u[c]\/r*cs;l.push([d,p]),i++}var f=Math.max.apply(Math,l.map((function(e){return e[0]}))),h=Math.max.apply(Math,l.map((function(e){return e[1]}))),m=Math.min.apply(Math,l.map((function(e){return e[0]}))),g=Math.min.apply(Math,l.map((function(e){return e[1]}))),v=Hr(os(os({backgroundColor:o,groupIds:[a]},ms),{},{type:\"line\",x:t+ls+16,y:n-ls,startArrowhead:null,endArrowhead:null,height:h-g,width:f-m,strokeWidth:2,points:l})),b=e.values.map((function(e,i){var l=44*i+6,c=-e\/r*cs+6;return Dr(os(os({backgroundColor:o,groupIds:[a]},ms),{},{fillStyle:\"solid\",strokeWidth:2,type:\"ellipse\",x:t+l+16,y:n+c-24,width:ls,height:ls}))})),y=e.values.map((function(e,i){var l=44*i+6,c=e\/r*cs+6+ls;return Hr(os(os({backgroundColor:o,groupIds:[a]},ms),{},{type:\"line\",x:t+l+16+6,y:n-c,startArrowhead:null,endArrowhead:null,height:c,strokeStyle:\"dotted\",opacity:50,points:[[0,0],[0,c]]}))}));return rs(rs(rs(rs([],vs(e,t,n,a,o,\"production\"===s.Vi.DEVELOPMENT)),[v]),y),b)}(t,n,r):function(e,t,n){var r=Math.max.apply(Math,e.values),a=ur(),o=hs[Math.floor(Math.random()*hs.length)],i=e.values.map((function(e,i){var l=e\/r*cs;return Dr(os(os({backgroundColor:o,groupIds:[a]},ms),{},{type:\"rectangle\",x:t+44*i+ls,y:n-l-ls,width:is,height:l}))}));return rs(rs([],i),vs(e,t,n,a,o,\"production\"===s.Vi.DEVELOPMENT))}(t,n,r)},ys=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Class extends value \"+String(n)+\" is not a constructor or null\");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ws=function(e){function t(t,n){void 0===t&&(t=\"Couldn't export canvas.\"),void 0===n&&(n=\"CANVAS_ERROR\");var r=e.call(this)||this;return r.name=n,r.message=t,r}return ys(t,e),t}(Error);function xs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Es(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xs(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ks=function(e,t){var n,r,a,o,i,l,c,s,u={type:e.type,version:e.version||1,versionNonce:null!==(n=e.versionNonce)&&void 0!==n?n:0,isDeleted:null!==(r=e.isDeleted)&&void 0!==r&&r,id:e.id||ur(),fillStyle:e.fillStyle||\"hachure\",strokeWidth:e.strokeWidth||1,strokeStyle:null!==(a=e.strokeStyle)&&void 0!==a?a:\"solid\",roughness:null!==(o=e.roughness)&&void 0!==o?o:1,opacity:null==e.opacity?100:e.opacity,angle:e.angle||0,x:e.x||0,y:e.y||0,strokeColor:e.strokeColor,backgroundColor:e.backgroundColor,width:e.width||0,height:e.height||0,seed:null!==(i=e.seed)&&void 0!==i?i:1,groupIds:null!==(l=e.groupIds)&&void 0!==l?l:[],strokeSharpness:null!==(c=e.strokeSharpness)&&void 0!==c?c:Ne(e.type)?\"round\":\"sharp\",boundElementIds:null!==(s=e.boundElementIds)&&void 0!==s?s:[]};return Es(Es(Es({},u),vr(u)),t)},Ss=function(e){var t;switch(e.type){case\"text\":var n=e.fontSize,r=e.fontFamily;if(\"font\"in e){var a=e.font.split(\" \"),o=a[0],i=a[1];n=parseInt(o,10),r=function(e){for(var t=0,n=Object.entries(s.ut);t<n.length;t++){var r=n[t],a=r[0];if(r[1].includes(e))return parseInt(a)}return s.rk}(i)}return ks(e,{fontSize:n,fontFamily:r,text:null!==(t=e.text)&&void 0!==t?t:\"\",baseline:e.baseline,textAlign:e.textAlign||s.Hg,verticalAlign:e.verticalAlign||s.hs});case\"draw\":case\"line\":case\"arrow\":var l=e.startArrowhead,c=void 0===l?null:l,u=e.endArrowhead,d=void 0===u?\"arrow\"===e.type?\"arrow\":null:u;return ks(e,{startBinding:e.startBinding,endBinding:e.endBinding,points:!Array.isArray(e.points)||e.points.length<2?[[0,0],[e.width,e.height]]:e.points,lastCommittedPoint:null,startArrowhead:c,endArrowhead:d});case\"ellipse\":case\"rectangle\":case\"diamond\":return ks(e,{})}},Cs=function(e){return(e||[]).reduce((function(e,t){if(\"selection\"!==t.type&&!mr(t)){var n=Ss(t);n&&e.push(n)}return e}),[])},Os=function(e,t){e=e||{};for(var n=Rn(),r={},a=0,o=Object.entries(n);a<o.length;a++){var i=o[a],l=i[0],c=i[1],s=e[l],u=t?t[l]:void 0;r[l]=void 0!==s?s:void 0!==u?u:c}return Es(Es({},r),{},{offsetLeft:e.offsetLeft||0,offsetTop:e.offsetTop||0,zoom:\"number\"==typeof e.zoom?{value:e.zoom,translation:n.zoom.translation}:e.zoom||n.zoom})},Ms=function(e,t){return{elements:Cs(null==e?void 0:e.elements),appState:Os(null==e?void 0:e.appState,t||null)}},Ts=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},Is=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},Ps=function(){function e(){}return e.importLibrary=function(t){return p()((function(){var n,r,a,o;return Ts(this,(function(i){switch(i.label){case 0:return[4,Gs(t)];case 1:return(n=i.sent())&&n.library?(r=function(e,t){return!e.find((function(e){return e.length===t.length&&e.every((function(e,n){return e.id===t[n].id&&e.versionNonce===t[n].versionNonce}))}))},[4,e.loadLibrary()]):[2];case 2:return a=i.sent(),o=n.library.reduce((function(e,t){var n=ni(Cs(t));return r(a,n)&&e.push(n),e}),[]),e.saveLibrary(Is(Is([],a),o)),[2]}}))}))()},e}();Ps.libraryCache=null,Ps.resetLibrary=function(){Ps.libraryCache=null,localStorage.removeItem(s.I.LOCAL_STORAGE_LIBRARY)},Ps.loadLibrary=function(){return new Promise(function(){var e=p()((function(e){var t,n;return Ts(this,(function(r){if(Ps.libraryCache)return[2,e(JSON.parse(JSON.stringify(Ps.libraryCache)))];try{if(!(t=localStorage.getItem(s.I.LOCAL_STORAGE_LIBRARY)))return[2,e([])];n=JSON.parse(t).map((function(e){return Cs(e)})),Ps.libraryCache=JSON.parse(JSON.stringify(n)),e(n)}catch(t){console.error(t),e([])}return[2]}))}));return function(t){return e.apply(this,arguments)}}())},Ps.saveLibrary=function(e){var t=Ps.libraryCache;try{var n=JSON.stringify(e);Ps.libraryCache=JSON.parse(n),localStorage.setItem(s.I.LOCAL_STORAGE_LIBRARY,n)}catch(e){Ps.libraryCache=t,console.error(e)}};var As=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},_s=function(e,t){return JSON.stringify({type:\"excalidraw\",version:2,source:window.location.origin,elements:oi(e),appState:Gn(t)},null,2)},Ls=function(){var e=p()((function(e,t){var n;return As(this,(function(r){switch(r.label){case 0:return n=_s(e,t),[4,zc(new Blob([n],{type:\"application\/json\"}),{fileName:t.name,description:\"Excalidraw file\",extensions:[\".excalidraw\"]},t.fileHandle)];case 1:return[2,{fileHandle:r.sent()}]}}))}));return function(t,n){return e.apply(this,arguments)}}(),Ds=function(){var e=p()((function(e){var t;return As(this,(function(n){switch(n.label){case 0:return[4,Dc({description:\"Excalidraw files\",extensions:[\".json\",\".excalidraw\",\".png\",\".svg\"],mimeTypes:[\"application\/json\",\"image\/png\",\"image\/svg+xml\"]})];case 1:return t=n.sent(),[2,Ws(t,e)]}}))}));return function(t){return e.apply(this,arguments)}}(),js=function(){var e=p()((function(){var e,t;return As(this,(function(n){switch(n.label){case 0:return[4,Ps.loadLibrary()];case 1:return e=n.sent(),t=JSON.stringify({type:\"excalidrawlib\",version:1,library:e},null,2),\"library.excalidrawlib\",[4,zc(new Blob([t],{type:s.LO.excalidrawlib}),{fileName:\"library.excalidrawlib\",description:\"Excalidraw library file\",extensions:[\".excalidrawlib\"]})];case 2:return n.sent(),[2]}}))}));return function(){return e.apply(this,arguments)}}(),zs=function(){var e=p()((function(){var e;return As(this,(function(t){switch(t.label){case 0:return[4,Dc({description:\"Excalidraw library files\",extensions:[\".json\",\".excalidrawlib\"],mimeTypes:[\"application\/json\"]})];case 1:return e=t.sent(),Ps.importLibrary(e),[2]}}))}));return function(){return e.apply(this,arguments)}}(),Bs=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}};function Hs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ns(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Hs(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Hs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Rs=function(){var e=p()((function(e){var t;return Bs(this,(function(r){switch(r.label){case 0:if(\"image\/png\"!==e.type)return[3,6];r.label=1;case 1:return r.trys.push([1,4,,5]),[4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527))];case 2:return[4,r.sent().decodePngMetadata(e)];case 3:return[2,r.sent()];case 4:throw\"INVALID\"===r.sent().message?new Error(C(\"alerts.imageDoesNotContainScene\")):new Error(C(\"alerts.cannotRestoreFromImage\"));case 5:return[3,15];case 6:return\"text\"in Blob?[4,e.text()]:[3,8];case 7:return t=r.sent(),[3,10];case 8:return[4,new Promise((function(t){var n=new FileReader;n.readAsText(e,\"utf8\"),n.onloadend=function(){n.readyState===FileReader.DONE&&t(n.result)}}))];case 9:t=r.sent(),r.label=10;case 10:if(\"image\/svg+xml\"!==e.type)return[3,15];r.label=11;case 11:return r.trys.push([11,14,,15]),[4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527))];case 12:return[4,r.sent().decodeSvgMetadata({svg:t})];case 13:return[2,r.sent()];case 14:throw\"INVALID\"===r.sent().message?new Error(C(\"alerts.imageDoesNotContainScene\")):new Error(C(\"alerts.cannotRestoreFromImage\"));case 15:return[2,t]}}))}));return function(t){return e.apply(this,arguments)}}(),Fs=function(e){var t;if(\"string\"==typeof e)t=e;else{if(e.type)return e.type;t=e.name||\"\"}return\/\\.(excalidraw|json)$\/.test(t)?\"application\/json\":\/\\.png$\/.test(t)?\"image\/png\":\/\\.jpe?g$\/.test(t)?\"image\/jpeg\":\/\\.svg$\/.test(t)?\"image\/svg+xml\":\"\"},Ws=function(){var e=p()((function(e,t){var n,r;return Bs(this,(function(a){switch(a.label){case 0:return[4,Rs(e)];case 1:n=a.sent();try{if(!function(e){return\"excalidraw\"===(null==e?void 0:e.type)&&(!e.elements||Array.isArray(e.elements)&&(!e.appState||\"object\"==typeof e.appState))}(r=JSON.parse(n)))throw new Error(C(\"alerts.couldNotLoadInvalidFile\"));return[2,Ms({elements:oi(r.elements||[]),appState:Ns(Ns({appearance:null==t?void 0:t.appearance,fileHandle:e.handle&&[\"application\/json\",s.LO.excalidraw].includes(Fs(e))?e.handle:null},Gn(r.appState||{})),t?di(r.elements||[],t):{})},t)]}catch(e){throw console.error(e.message),new Error(C(\"alerts.couldNotLoadInvalidFile\"))}return[2]}}))}));return function(t,n){return e.apply(this,arguments)}}(),Gs=function(){var e=p()((function(e){var t,n;return Bs(this,(function(r){switch(r.label){case 0:return[4,Rs(e)];case 1:if(t=r.sent(),\"excalidrawlib\"!==(n=JSON.parse(t)).type)throw new Error(C(\"alerts.couldNotLoadInvalidFile\"));return[2,n]}}))}));return function(t){return e.apply(this,arguments)}}(),Vs=function(){var e=p()((function(e){return Bs(this,(function(t){return[2,new Promise((function(t,n){try{e.toBlob((function(e){if(!e)return n(new ws(C(\"canvasError.canvasTooBig\"),\"CANVAS_POSSIBLY_TOO_BIG\"));t(e)}))}catch(e){n(e)}}))]}))}));return function(t){return e.apply(this,arguments)}}(),Ks=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},Us=\"excalidraw\/elements\",Ys=\"\",Xs=!1,Zs=\"clipboard\"in navigator&&\"readText\"in navigator.clipboard,qs=\"clipboard\"in navigator&&\"writeText\"in navigator.clipboard,Qs=\"clipboard\"in navigator&&\"write\"in navigator.clipboard&&\"ClipboardItem\"in window&&\"toBlob\"in HTMLCanvasElement.prototype,$s=function(){var e=p()((function(e,t){var n,r,a;return Ks(this,(function(o){switch(o.label){case 0:n={type:Us,created:Date.now(),elements:ci(e,t)},r=JSON.stringify(n),Ys=r,o.label=1;case 1:return o.trys.push([1,3,,4]),Xs=!1,[4,au(r)];case 2:return o.sent(),[3,4];case 3:return a=o.sent(),Xs=!0,console.error(a),[3,4];case 4:return[2]}}))}));return function(t,n){return e.apply(this,arguments)}}(),Js=function(){if(!Ys)return{};try{return JSON.parse(Ys)}catch(e){return console.error(e),{}}},eu=function(e){var t=function(e){var t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\"\\t\")}));if(t.length&&2!==t[0].length&&(t=e.trim().split(\"\\n\").map((function(e){return e.trim().split(\",\")}))),0===t.length)return{type:ss,reason:\"No values\"};var n=t[0].length;if(!t.every((function(e){return e.length===n})))return{type:ss,reason:\"All rows don't have same number of columns\"};var r=fs(t);if(r.type!==us){var a=fs(function(e){for(var t=[],n=0;n<e[0].length;n++){for(var r=[],a=0;a<e.length;a++)r.push(e[a][n]);t.push(r)}return t}(t));if(a.type===us)return a}return r}(e);return t.type===us?{spreadsheet:t.spreadsheet}:null},tu=function(){var e=p()((function(e){var t,n,r;return Ks(this,(function(a){switch(a.label){case 0:return a.trys.push([0,5,,6]),e?(n=null===(t=e.clipboardData)||void 0===t?void 0:t.getData(\"text\/plain\").trim(),[3,4]):[3,1];case 1:return(r=Zs)?[4,navigator.clipboard.readText()]:[3,3];case 2:r=a.sent(),a.label=3;case 3:n=r,a.label=4;case 4:return[2,n||\"\"];case 5:return a.sent(),[2,\"\"];case 6:return[2]}}))}));return function(t){return e.apply(this,arguments)}}(),nu=function(){var e=p()((function(e){var t,n,r,a;return Ks(this,(function(o){switch(o.label){case 0:return[4,tu(e)];case 1:if(!(t=o.sent())||t.includes(Qc))return[2,Js()];if(n=eu(t))return[2,n];r=Js();try{return a=JSON.parse(t),(null==(i=a)?void 0:i.type)===Us&&(null==r||!r.created||r.created<a.created)?[2,{elements:a.elements}]:[2,r]}catch(e){return[2,Xs&&r.elements?r:{text:t}]}return[2]}var i}))}));return function(t){return e.apply(this,arguments)}}(),ru=function(){var e=p()((function(e){var t;return Ks(this,(function(n){switch(n.label){case 0:return[4,Vs(e)];case 1:return t=n.sent(),[4,navigator.clipboard.write([new window.ClipboardItem({\"image\/png\":t})])];case 2:return n.sent(),[2]}}))}));return function(t){return e.apply(this,arguments)}}(),au=function(){var e=p()((function(e){var t,n;return Ks(this,(function(r){switch(r.label){case 0:if(t=!1,!qs)return[3,4];r.label=1;case 1:return r.trys.push([1,3,,4]),[4,navigator.clipboard.writeText(e||\"\")];case 2:return r.sent(),t=!0,[3,4];case 3:return n=r.sent(),console.error(n),[3,4];case 4:if(!t&&!ou(e||\" \"))throw new Error(\"couldn't copy\");return[2]}}))}));return function(t){return e.apply(this,arguments)}}(),ou=function(e){var t=\"rtl\"===document.documentElement.getAttribute(\"dir\"),n=document.createElement(\"textarea\");n.style.border=\"0\",n.style.padding=\"0\",n.style.margin=\"0\",n.style.position=\"absolute\",n.style[t?\"right\":\"left\"]=\"-9999px\";var r=window.pageYOffset||document.documentElement.scrollTop;n.style.top=\"\".concat(r,\"px\"),n.style.fontSize=\"12pt\",n.setAttribute(\"readonly\",\"\"),n.value=e,document.body.appendChild(n);var a=!1;try{n.select(),n.setSelectionRange(0,n.value.length),a=document.execCommand(\"copy\")}catch(e){console.error(e)}return n.remove(),a},iu=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},lu=function(){var e=p()((function(e,t,r,a,o){var i,l,c,s,u,d,p,f,h,m=o.exportBackground,g=o.exportPadding,v=void 0===g?10:g,b=o.viewBackgroundColor,y=o.name,w=o.scale,x=void 0===w?1:w,E=o.shouldAddWatermark;return iu(this,(function(o){switch(o.label){case 0:if(0===t.length)throw new Error(C(\"alerts.cannotExportEmptyCanvas\"));return\"svg\"!==e&&\"clipboard-svg\"!==e?[3,7]:(l=Jc,c=[t],s={exportBackground:m,exportWithDarkMode:r.exportWithDarkMode,viewBackgroundColor:b,exportPadding:v,scale:x,shouldAddWatermark:E},r.exportEmbedScene&&\"svg\"===e?[4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527))]:[3,3]);case 1:return[4,o.sent().encodeSvgMetadata({text:_s(t,r)})];case 2:return u=o.sent(),[3,4];case 3:u=void 0,o.label=4;case 4:return i=l.apply(void 0,c.concat([(s.metadata=u,s)])),\"svg\"!==e?[3,6]:[4,zc(new Blob([i.outerHTML],{type:\"image\/svg+xml\"}),{fileName:\"\".concat(y,\".svg\"),extensions:[\".svg\"]})];case 5:return o.sent(),[2];case 6:if(\"clipboard-svg\"===e)return au(i.outerHTML),[2];o.label=7;case 7:return(d=$c(t,r,{exportBackground:m,viewBackgroundColor:b,exportPadding:v,scale:x,shouldAddWatermark:E})).style.display=\"none\",document.body.appendChild(d),\"png\"!==e?[3,13]:(p=\"\".concat(y,\".png\"),[4,Vs(d)]);case 8:return f=o.sent(),r.exportEmbedScene?[4,Promise.all([n.e(736),n.e(9)]).then(n.bind(n,8527))]:[3,11];case 9:return[4,o.sent().encodePngMetadata({blob:f,metadata:_s(t,r)})];case 10:f=o.sent(),o.label=11;case 11:return[4,zc(f,{fileName:p,extensions:[\".png\"]})];case 12:return o.sent(),[3,17];case 13:if(\"clipboard\"!==e)return[3,17];o.label=14;case 14:return o.trys.push([14,16,,17]),[4,ru(d)];case 15:return o.sent(),[3,17];case 16:if(\"CANVAS_POSSIBLY_TOO_BIG\"===(h=o.sent()).name)throw h;throw new Error(C(\"alerts.couldNotCopyToClipboard\"));case 17:return d!==a&&d.remove(),[2]}}))}));return function(t,n,r,a,o){return e.apply(this,arguments)}}(),cu=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}};function su(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function uu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?su(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):su(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var du,pu,fu;kl({name:\"changeProjectName\",perform:function(e,t,n){return Oc(\"change\",\"title\"),{appState:uu(uu({},t),{},{name:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(Tc,{label:C(\"labels.fileTitle\"),value:t.name||\"Unnamed\",onChange:function(e){return n(e)}})}}),kl({name:\"changeExportBackground\",perform:function(e,t,n){return{appState:uu(uu({},t),{},{exportBackground:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"label\",null,c().createElement(\"input\",{type:\"checkbox\",checked:t.exportBackground,onChange:function(e){return n(e.target.checked)}}),\" \",C(\"labels.withBackground\"))}}),kl({name:\"changeExportEmbedScene\",perform:function(e,t,n){return{appState:uu(uu({},t),{},{exportEmbedScene:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"label\",{style:{display:\"flex\"}},c().createElement(\"input\",{type:\"checkbox\",checked:t.exportEmbedScene,onChange:function(e){return n(e.target.checked)}}),\" \",C(\"labels.exportEmbedScene\"),c().createElement(Ic,{label:C(\"labels.exportEmbedScene_details\"),position:\"above\",long:!0},c().createElement(\"div\",{className:\"TooltipIcon\"},Ni)))}}),kl({name:\"changeShouldAddWatermark\",perform:function(e,t,n){return{appState:uu(uu({},t),{},{shouldAddWatermark:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"label\",null,c().createElement(\"input\",{type:\"checkbox\",checked:t.shouldAddWatermark,onChange:function(e){return n(e.target.checked)}}),\" \",C(\"labels.addWatermark\"))}}),kl({name:\"saveScene\",perform:(du=p()((function(e,t,n){var r,a,o;return cu(this,(function(n){switch(n.label){case 0:r=!!t.fileHandle,n.label=1;case 1:return n.trys.push([1,3,,4]),[4,Ls(e,t)];case 2:return a=n.sent().fileHandle,[2,{commitToHistory:!1,appState:uu(uu({},t),{},{fileHandle:a,toastMessage:r?a.name?C(\"toast.fileSavedToFilename\").replace(\"{filename}\",'\"'.concat(a.name,'\"')):C(\"toast.fileSaved\"):null})}];case 3:return\"AbortError\"!==(null==(o=n.sent())?void 0:o.name)&&console.error(o),[2,{commitToHistory:!1}];case 4:return[2]}}))})),function(e,t,n){return du.apply(this,arguments)}),keyTest:function(e){return e.key===nn&&e[Ft]&&!e.shiftKey},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Oi,title:C(\"buttons.save\"),\"aria-label\":C(\"buttons.save\"),showAriaLabel:vc(),onClick:function(){return t(null)}})}}),kl({name:\"saveAsScene\",perform:(pu=p()((function(e,t,n){var r,a;return cu(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,Ls(e,uu(uu({},t),{},{fileHandle:null}))];case 1:return r=n.sent().fileHandle,[2,{commitToHistory:!1,appState:uu(uu({},t),{},{fileHandle:r})}];case 2:return\"AbortError\"!==(null==(a=n.sent())?void 0:a.name)&&console.error(a),[2,{commitToHistory:!1}];case 3:return[2]}}))})),function(e,t,n){return pu.apply(this,arguments)}),keyTest:function(e){return e.key===nn&&e.shiftKey&&e[Ft]},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Mi,title:C(\"buttons.saveAs\"),\"aria-label\":C(\"buttons.saveAs\"),showAriaLabel:vc(),hidden:!(\"chooseFileSystemEntries\"in window||\"showOpenFilePicker\"in window),onClick:function(){return t(null)}})}}),kl({name:\"loadScene\",perform:(fu=p()((function(e,t){var n,r,a,o;return cu(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,Ds(t)];case 1:return n=i.sent(),r=n.elements,a=n.appState,[2,{elements:r,appState:a,commitToHistory:!0}];case 2:return\"AbortError\"===(null==(o=i.sent())?void 0:o.name)?[2,!1]:[2,{elements:e,appState:uu(uu({},t),{},{errorMessage:o.message}),commitToHistory:!1}];case 3:return[2]}}))})),function(e,t){return fu.apply(this,arguments)}),keyTest:function(e){return e[Ft]&&e.key===$t},PanelComponent:function(e){var t=e.updateData;e.appState;return c().createElement(wi,{type:\"button\",icon:Ti,title:C(\"buttons.load\"),\"aria-label\":C(\"buttons.load\"),showAriaLabel:vc(),onClick:t})}}),kl({name:\"exportWithDarkMode\",perform:function(e,t,n){return{appState:uu(uu({},t),{},{exportWithDarkMode:n}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(\"div\",{style:{display:\"flex\",justifyContent:\"flex-end\",marginTop:\"-45px\",marginBottom:\"10px\"}},c().createElement(Pc,{value:t.exportWithDarkMode?\"dark\":\"light\",onChange:function(e){n(\"dark\"===e)},title:C(\"labels.toggleExportColorScheme\")}))}});function hu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function mu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hu(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var gu=\"{}\",vu=kl({name:\"copyStyles\",perform:function(e,t){var n=e.find((function(e){return t.selectedElementIds[e.id]}));return n&&(gu=JSON.stringify(n)),{appState:mu(mu({},t),{},{toastMessage:C(\"toast.copyStyles\")}),commitToHistory:!1}},contextItemLabel:\"labels.copyStyles\",keyTest:function(e){return e[Ft]&&e.altKey&&e.code===Mt}}),bu=kl({name:\"pasteStyles\",perform:function(e,t){var n,r=JSON.parse(gu);return\"text\"!==(null==(n=r)?void 0:n.type)&&\"diamond\"!==(null==n?void 0:n.type)&&\"rectangle\"!==(null==n?void 0:n.type)&&\"ellipse\"!==(null==n?void 0:n.type)&&\"arrow\"!==(null==n?void 0:n.type)&&\"draw\"!==(null==n?void 0:n.type)&&\"line\"!==(null==n?void 0:n.type)?{elements:e,commitToHistory:!1}:{elements:e.map((function(e){if(t.selectedElementIds[e.id]){var n=hr(e,{backgroundColor:null==r?void 0:r.backgroundColor,strokeWidth:null==r?void 0:r.strokeWidth,strokeColor:null==r?void 0:r.strokeColor,strokeStyle:null==r?void 0:r.strokeStyle,fillStyle:null==r?void 0:r.fillStyle,opacity:null==r?void 0:r.opacity,roughness:null==r?void 0:r.roughness});return Be(n)&&(fr(n,{fontSize:(null==r?void 0:r.fontSize)||s.n5,fontFamily:(null==r?void 0:r.fontFamily)||s.rk,textAlign:(null==r?void 0:r.textAlign)||s.Hg}),Zo(n)),n}return e})),commitToHistory:!0}},contextItemLabel:\"labels.pasteStyles\",keyTest:function(e){return e[Ft]&&e.altKey&&e.code===At}}),yu=function(e){return c().createElement(\"label\",{title:\"\".concat(e.title,\" \u2014 ?\"),className:\"help-icon\"},c().createElement(\"div\",{onClick:e.onClick},Ni))};function wu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wu(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}kl({name:\"toggleCanvasMenu\",perform:function(e,t){return{appState:xu(xu({},t),{},{openMenu:\"canvas\"===t.openMenu?null:\"canvas\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData;return c().createElement(wi,{type:\"button\",icon:zi,\"aria-label\":C(\"buttons.menu\"),onClick:n,selected:\"canvas\"===t.openMenu})}}),kl({name:\"toggleEditMenu\",perform:function(e,t){return{appState:xu(xu({},t),{},{openMenu:\"shape\"===t.openMenu?null:\"shape\"}),commitToHistory:!1}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{visible:qo(n,ni(t)),type:\"button\",icon:Ai,\"aria-label\":C(\"buttons.edit\"),onClick:r,selected:\"shape\"===n.openMenu})}}),kl({name:\"toggleFullScreen\",perform:function(){return Tn()||document.documentElement.requestFullscreen(),Tn()&&document.exitFullscreen(),{commitToHistory:!1}},keyTest:function(e){return e.code===It&&!e[Ft]}}),kl({name:\"toggleShortcuts\",perform:function(e,t){return{appState:xu(xu({},t),{},{showHelpDialog:!t.showHelpDialog}),commitToHistory:!1}},PanelComponent:function(e){var t=e.updateData;return c().createElement(yu,{title:C(\"helpDialog.title\"),onClick:t})},keyTest:function(e){return e.key===Kt}});var Eu=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function ku(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Su(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ku(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ku(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Cu=function(e,t){var n=ci(ni(e),t);return n.length>=2&&!function(e){if(e.length>=2)for(var t=function(t){if(e.reduce((function(e,n){return e&&Tr(n,t)}),!0))return{value:!0}},n=0,r=e[0].groupIds;n<r.length;n++){var a=t(r[n]);if(\"object\"==typeof a)return a.value}return!1}(n)},Ou=kl({name:\"group\",perform:function(e,t){var n=ci(ni(e),t);if(n.length<2)return{appState:t,elements:e,commitToHistory:!1};var r=Or(t);if(1===r.length){var a=r[0],o=new Set(Ir(e,a).map((function(e){return e.id}))),i=new Set(n.map((function(e){return e.id})));if(new Set(Eu(Eu([],Array.from(o)),Array.from(i))).size===o.size)return{appState:t,elements:e,commitToHistory:!1}}var l=ur(),c=e.map((function(e){return t.selectedElementIds[e.id]?hr(e,{groupIds:Pr(e.groupIds,l,t.editingGroupId)}):e})),s=Ir(c,l),u=s[s.length-1],d=c.lastIndexOf(u),p=c.slice(d+1),f=c.slice(0,d).filter((function(e){return!Tr(e,l)})),h=Eu(Eu(Eu([],f),s),p);return{appState:kr(l,Su(Su({},t),{},{selectedGroupIds:{}}),ni(h)),elements:h,commitToHistory:!0}},contextItemLabel:\"labels.group\",contextItemPredicate:function(e,t){return Cu(e,t)},keyTest:function(e){return!e.shiftKey&&e[Ft]&&e.code===Tt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Cu(t,n),type:\"button\",icon:c().createElement(al,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.group\"),\" \u2014 \").concat(In(\"CtrlOrCmd+G\")),\"aria-label\":C(\"labels.group\"),visible:li(ni(t),n)})}}),Mu=kl({name:\"ungroup\",perform:function(e,t){if(0===Or(t).length)return{appState:t,elements:e,commitToHistory:!1};var n=e.map((function(e){var n=function(e,t){return e.filter((function(e){return!t[e]}))}(e.groupIds,t.selectedGroupIds);return n.length===e.groupIds.length?e:hr(e,{groupIds:n})}));return{appState:Mr(Su(Su({},t),{},{selectedGroupIds:{}}),ni(n)),elements:n,commitToHistory:!0}},keyTest:function(e){return e.shiftKey&&e[Ft]&&e.code===Tt},contextItemLabel:\"labels.ungroup\",contextItemPredicate:function(e,t){return Or(t).length>0},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{type:\"button\",hidden:0===Or(n).length,icon:c().createElement(ol,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.ungroup\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+G\")),\"aria-label\":C(\"labels.ungroup\"),visible:li(ni(t),n)})}}),Tu=(n(1395),function(e){var t=e.children,n=e.color,r=e.border,a=e.onClick;return c().createElement(\"div\",{className:\"Avatar\",style:{background:n,border:\"1px solid \".concat(r)},onClick:a},t)});function Iu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Iu(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Iu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}kl({name:\"goToCollaborator\",perform:function(e,t,n){var r=n;return r?{appState:Pu(Pu(Pu({},t),ui({scenePoint:r,viewportDimensions:{width:t.width,height:t.height},zoom:t.zoom})),{},{openMenu:\"canvas\"===t.openMenu?null:t.openMenu}),commitToHistory:!1}:{appState:t,commitToHistory:!1}},PanelComponent:function(e){var t=e.appState,n=e.updateData,r=e.id;if(!r)return null;var a=t.collaborators.get(r);if(!a)return null;var o=Hc(r,t),i=o.background,l=o.stroke,s=function(e){if(!e)return\"?\";var t=e.trim().split(\" \");if(t.length<2)return t[0].substring(0,2).toUpperCase();var n=t[0],r=t[t.length-1];return(n[0]+r[0]).toUpperCase()}(a.username);return c().createElement(Tu,{color:i,border:l,onClick:function(){return n(a.pointer)}},s)}});var Au=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e},_u=kl({name:\"addToLibrary\",perform:function(e,t){var n=ci(ni(e),t);return Ps.loadLibrary().then((function(e){Ps.saveLibrary(Au(Au([],e),[n.map(Nr)]))})),!1},contextItemLabel:\"labels.addToLibrary\"}),Lu=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function Du(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ju(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Du(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Du(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var zu=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],r=t.get(n)||[];t.set(n,Lu(Lu([],r),[e]))})),Array.from(t.values())},Bu=function(e,t,n){var r,a,o,i=n.axis,l=n.position,c=Hu(e),s=\"x\"===i?[\"minX\",\"maxX\"]:[\"minY\",\"maxY\"],u=s[0],d=s[1],p={x:0,y:0};return ju(ju({},p),{},\"start\"===l?((r={})[i]=t[u]-c[u],r):\"end\"===l?((a={})[i]=t[d]-c[d],a):((o={})[i]=(t[u]+t[d])\/2-(c[u]+c[d])\/2,o))},Hu=function(e){var t=ot(e);return{minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]}},Nu=function(e,t){return ci(ni(e),t).length>1},Ru=function(e,t,n){var r=function(e,t){var n=zu(e),r=Hu(e);return n.flatMap((function(e){var n=Bu(e,r,t);return e.map((function(e){return hr(e,{x:e.x+n.x,y:e.y+n.y})}))}))}(ci(ni(e),t),n),a=ei(r);return e.map((function(e){return a[e.id]||e}))},Fu=(kl({name:\"alignTop\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"start\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key===Ht},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Ki,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.alignTop\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+Up\")),\"aria-label\":C(\"labels.alignTop\"),visible:li(ni(t),n)})}}),kl({name:\"alignBottom\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"end\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key===jt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Ui,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.alignBottom\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+Down\")),\"aria-label\":C(\"labels.alignBottom\"),visible:li(ni(t),n)})}}),kl({name:\"alignLeft\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"start\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key===zt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Yi,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.alignLeft\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+Left\")),\"aria-label\":C(\"labels.alignLeft\"),visible:li(ni(t),n)})}}),kl({name:\"alignRight\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"end\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key===Bt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Xi,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.alignRight\"),\" \u2014 \").concat(In(\"CtrlOrCmd+Shift+Right\")),\"aria-label\":C(\"labels.alignRight\"),visible:li(ni(t),n)})}}),kl({name:\"alignVerticallyCentered\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"center\",axis:\"y\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement(Qi,{appearance:n.appearance}),onClick:function(){return r(null)},title:C(\"labels.centerVertically\"),\"aria-label\":C(\"labels.centerVertically\"),visible:li(ni(t),n)})}}),kl({name:\"alignHorizontallyCentered\",perform:function(e,t){return{appState:t,elements:Ru(e,t,{position:\"center\",axis:\"x\"}),commitToHistory:!0}},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Nu(t,n),type:\"button\",icon:c().createElement($i,{appearance:n.appearance}),onClick:function(){return r(null)},title:C(\"labels.centerHorizontally\"),\"aria-label\":C(\"labels.centerHorizontally\"),visible:li(ni(t),n)})}}),function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e}),Wu=function(e){var t=new Map;return e.forEach((function(e){var n=0===e.groupIds.length?e.id:e.groupIds[e.groupIds.length-1],r=t.get(n)||[];t.set(n,Fu(Fu([],r),[e]))})),Array.from(t.values())},Gu=function(e){var t=ot(e),n=t[0],r=t[1],a=t[2],o=t[3];return{minX:n,minY:r,maxX:a,maxY:o,width:a-n,height:o-r,midX:(n+a)\/2,midY:(r+o)\/2}},Vu=function(e,t){return ci(ni(e),t).length>1},Ku=function(e,t,n){var r=function(e,t){for(var n=\"x\"===t.axis?[\"minX\",\"midX\",\"maxX\",\"width\"]:[\"minY\",\"midY\",\"maxY\",\"height\"],r=n[0],a=n[1],o=n[2],i=n[3],l=Gu(e),c=Wu(e).map((function(e){return[e,Gu(e)]})).sort((function(e,t){return e[1][a]-t[1][a]})),s=0,u=0,d=c;u<d.length;u++)s+=d[u][1][i];var p=(l[i]-s)\/(c.length-1);if(p<0){var f=c.findIndex((function(e){return e[1][r]===l[r]})),h=c.findIndex((function(e){return e[1][o]===l[o]})),m=(c[h][1][a]-c[f][1][a])\/(c.length-1),g=c[f][1][a];return c.flatMap((function(e,n){var r=e[0],o=e[1],i={x:0,y:0};return n!==f&&n!==h&&(g+=m,i[t.axis]=g-o[a]),r.map((function(e){return hr(e,{x:e.x+i.x,y:e.y+i.y})}))}))}var v=l[r];return c.flatMap((function(e){var n=e[0],a=e[1],o={x:0,y:0};return o[t.axis]=v-a[r],v+=p,v+=a[i],n.map((function(e){return hr(e,{x:e.x+o.x,y:e.y+o.y})}))}))}(ci(ni(e),t),n),a=ei(r);return e.map((function(e){return a[e.id]||e}))},Uu=(kl({name:\"distributeHorizontally\",perform:function(e,t){return{appState:t,elements:Ku(e,t,{space:\"between\",axis:\"x\"}),commitToHistory:!0}},keyTest:function(e){return e.altKey&&e.code===Pt},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Vu(t,n),type:\"button\",icon:c().createElement(Zi,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.distributeHorizontally\"),\" \u2014 \").concat(In(\"Alt+H\")),\"aria-label\":C(\"labels.distributeHorizontally\"),visible:li(ni(t),n)})}}),kl({name:\"distributeVertically\",perform:function(e,t){return{appState:t,elements:Ku(e,t,{space:\"between\",axis:\"y\"}),commitToHistory:!0}},keyTest:function(e){return e.altKey&&e.code===At},PanelComponent:function(e){var t=e.elements,n=e.appState,r=e.updateData;return c().createElement(wi,{hidden:!Vu(t,n),type:\"button\",icon:c().createElement(qi,{appearance:n.appearance}),onClick:function(){return r(null)},title:\"\".concat(C(\"labels.distributeVertically\"),\" \u2014 \").concat(In(\"Alt+V\")),\"aria-label\":C(\"labels.distributeVertically\"),visible:li(ni(t),n)})}}),function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}});function Yu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Xu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Yu(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Yu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Zu=kl({name:\"copy\",perform:function(e,t){return $s(ni(e),t),{commitToHistory:!1}},contextItemLabel:\"labels.copy\"}),qu=kl({name:\"cut\",perform:function(e,t,n,r){return Zu.perform(e,t,n,r),Ml.perform(e,t,n,r)},contextItemLabel:\"labels.cut\",keyTest:function(e){return e[Ft]&&e.code===_t}}),Qu=kl({name:\"copyAsSvg\",perform:function(){var e=p()((function(e,t,n,r){var a,o;return Uu(this,(function(n){switch(n.label){case 0:if(!r.canvas)return[2,{commitToHistory:!1}];a=ci(ni(e),t),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,lu(\"clipboard-svg\",a.length?a:ni(e),t,r.canvas,t)];case 2:return n.sent(),[2,{commitToHistory:!1}];case 3:return o=n.sent(),console.error(o),[2,{appState:Xu(Xu({},t),{},{errorMessage:o.message}),commitToHistory:!1}];case 4:return[2]}}))}));return function(t,n,r,a){return e.apply(this,arguments)}}(),contextItemLabel:\"labels.copyAsSvg\"}),$u=kl({name:\"copyAsPng\",perform:function(){var e=p()((function(e,t,n,r){var a,o;return Uu(this,(function(n){switch(n.label){case 0:if(!r.canvas)return[2,{commitToHistory:!1}];a=ci(ni(e),t),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,lu(\"clipboard\",a.length?a:ni(e),t,r.canvas,t)];case 2:return n.sent(),[2,{appState:Xu(Xu({},t),{},{toastMessage:C(\"toast.copyToClipboardAsPng\",{exportSelection:a.length?C(\"toast.selection\"):C(\"toast.canvas\"),exportColorScheme:t.exportWithDarkMode?C(\"buttons.darkMode\"):C(\"buttons.lightMode\")})}),commitToHistory:!1}];case 3:return o=n.sent(),console.error(o),[2,{appState:Xu(Xu({},t),{},{errorMessage:o.message}),commitToHistory:!1}];case 4:return[2]}}))}));return function(t,n,r,a){return e.apply(this,arguments)}}(),contextItemLabel:\"labels.copyAsPng\",keyTest:function(e){return e.code===Mt&&e.altKey&&e.shiftKey}});function Ju(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ed(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ju(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ju(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var td=kl({name:\"gridMode\",perform:function(e,t){return Oc(\"view\",\"mode\",\"grid\"),{appState:ed(ed({},t),{},{gridSize:this.checked(t)?null:s.k}),commitToHistory:!1}},checked:function(e){return null!==e.gridSize},contextItemLabel:\"labels.showGrid\",keyTest:function(e){return e[Ft]&&e.code===Ct}});function nd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function rd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?nd(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):nd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ad=kl({name:\"zenMode\",perform:function(e,t){return Oc(\"view\",\"mode\",\"zen\"),{appState:rd(rd({},t),{},{zenModeEnabled:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.zenModeEnabled},contextItemLabel:\"buttons.zenMode\",keyTest:function(e){return!e[Ft]&&e.altKey&&e.code===Lt}});function od(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function id(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?od(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):od(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ld=kl({name:\"stats\",perform:function(e,t){return{appState:id(id({},t),{},{showStats:!this.checked(t)}),commitToHistory:!1}},checked:function(e){return e.showStats},contextItemLabel:\"stats.title\"});function cd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function sd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?cd(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):cd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ud=function(e,t,n){var r=!1;if(!(t.multiElement||t.resizingElement||t.editingElement||t.draggingElement)){var a=n();if(null===a)return{commitToHistory:r};var o=ei(e),i=a.elements,l=ei(i),c=e.filter((function(e){return!l.hasOwnProperty(e.id)})),s=i.map((function(e){return hr(o[e.id]||e,e)})).concat(c.map((function(e){return hr(e,{isDeleted:!0})})));return _o(s,c),{elements:s,appState:sd(sd({},t),a.appState),commitToHistory:r,syncHistory:!0}}return{commitToHistory:r}},dd=function(){function e(e,t,n,r){var a=this;this.actions={},this.renderAction=function(e,t){if(a.actions[e]&&\"PanelComponent\"in a.actions[e]){var n=a.actions[e],r=n.PanelComponent;return c().createElement(r,{elements:a.getElementsIncludingDeleted(),appState:a.getAppState(),updateData:function(e){a.updater(n.perform(a.getElementsIncludingDeleted(),a.getAppState(),e,a.app))},id:t})}return null},this.updater=function(t){if(!t||!(\"then\"in t))return e(t);t.then((function(t){return e(t)}))},this.getAppState=t,this.getElementsIncludingDeleted=n,this.app=r}return e.prototype.registerAction=function(e){this.actions[e.name]=e},e.prototype.registerAll=function(e){var t=this;e.forEach((function(e){return t.registerAction(e)}))},e.prototype.handleKeyDown=function(e){var t=this,n=Object.values(this.actions).sort((function(e,t){return(t.keyPriority||0)-(e.keyPriority||0)})).filter((function(n){return n.keyTest&&n.keyTest(e,t.getAppState(),t.getElementsIncludingDeleted())}));return 0!==n.length&&(!(this.getAppState().viewModeEnabled&&!Object.values(s.EH).includes(n[0].name))&&(e.preventDefault(),this.updater(n[0].perform(this.getElementsIncludingDeleted(),this.getAppState(),null,this.app)),!0))},e.prototype.executeAction=function(e){this.updater(e.perform(this.getElementsIncludingDeleted(),this.getAppState(),null,this.app))},e}(),pd=function(e){var t=Array.from(e.values());return{x:hd(t,(function(e){return e.x}))\/t.length,y:hd(t,(function(e){return e.y}))\/t.length}},fd=function(e){var t=e[0],n=e[1];return Math.hypot(t.x-n.x,t.y-n.y)},hd=function(e,t){return e.reduce((function(e,n){return e+t(n)}),0)};function md(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function gd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?md(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):md(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var vd,bd=function(e){return{selectedElementIds:e.selectedElementIds,viewBackgroundColor:e.viewBackgroundColor,editingLinearElement:e.editingLinearElement,editingGroupId:e.editingGroupId,name:e.name}},yd=function(){function e(){var e=this;this.elementCache=new Map,this.recording=!0,this.stateHistory=[],this.redoStack=[],this.lastEntry=null,this.generateEntry=function(t,n){return e.dehydrateHistoryEntry({appState:bd(t),elements:n.reduce((function(e,n){if(He(n)&&t.multiElement&&t.multiElement.id===n.id){if(t.multiElement&&t.multiElement.id===n.id&&n.points.length<2)return e;e.push(gd(gd({},n),{},{points:n.lastCommittedPoint!==n.points[n.points.length-1]?n.points.slice(0,-1):n.points}))}else e.push(n);return e}),[])})}}return e.prototype.hydrateHistoryEntry=function(e){var t=e.appState,n=e.elements,r=this;return{appState:JSON.parse(t),elements:n.map((function(e){var t,n=null===(t=r.elementCache.get(e.id))||void 0===t?void 0:t.get(e.versionNonce);if(!n)throw new Error(\"Element not found: \".concat(e.id,\":\").concat(e.versionNonce));return n}))}},e.prototype.dehydrateHistoryEntry=function(e){var t=e.appState,n=e.elements,r=this;return{appState:JSON.stringify(t),elements:n.map((function(e){r.elementCache.has(e.id)||r.elementCache.set(e.id,new Map);var t=r.elementCache.get(e.id);return t.has(e.versionNonce)||t.set(e.versionNonce,Nr(e)),{id:e.id,versionNonce:e.versionNonce}}))}},e.prototype.getSnapshotForTest=function(){var e=this;return{recording:this.recording,stateHistory:this.stateHistory.map((function(t){return e.hydrateHistoryEntry(t)})),redoStack:this.redoStack.map((function(t){return e.hydrateHistoryEntry(t)}))}},e.prototype.clear=function(){this.stateHistory.length=0,this.redoStack.length=0,this.lastEntry=null,this.elementCache.clear()},e.prototype.shouldCreateEntry=function(e){var t,n=this.lastEntry;if(!n)return!0;if(e.elements.length!==n.elements.length)return!0;for(var r=e.elements.length-1;r>-1;r--){var a=e.elements[r],o=n.elements[r];if(!a||!o||a.id!==o.id||a.versionNonce!==o.versionNonce)return!0}for(t in e.appState){var i,l;if(\"editingLinearElement\"===t)if((null===(i=e.appState[t])||void 0===i?void 0:i.elementId)===(null===(l=n.appState[t])||void 0===l?void 0:l.elementId))continue;if(\"selectedElementIds\"!==t&&e.appState[t]!==n.appState[t])return!0}return!1},e.prototype.pushEntry=function(e,t){var n=this.generateEntry(e,t),r=this.hydrateHistoryEntry(n);if(r){if(!this.shouldCreateEntry(r))return;this.stateHistory.push(n),this.lastEntry=r,this.clearRedoStack()}},e.prototype.clearRedoStack=function(){this.redoStack.splice(0,this.redoStack.length)},e.prototype.redoOnce=function(){if(0===this.redoStack.length)return null;var e=this.redoStack.pop();return void 0!==e?(this.stateHistory.push(e),this.hydrateHistoryEntry(e)):null},e.prototype.undoOnce=function(){if(1===this.stateHistory.length)return null;var e=this.stateHistory.pop(),t=this.stateHistory[this.stateHistory.length-1];return void 0!==e?(this.redoStack.push(e),this.hydrateHistoryEntry(t)):null},e.prototype.setCurrentState=function(e,t){this.lastEntry=this.hydrateHistoryEntry(this.generateEntry(e,t))},e.prototype.resumeRecording=function(){this.recording=!0},e.prototype.record=function(e,t){this.recording&&(this.pushEntry(e,t),this.recording=!1)},e}(),wd=[{icon:c().createElement(\"svg\",{viewBox:\"0 0 320 512\",className:\"\"},c().createElement(\"path\",{d:\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\"})),value:\"selection\",key:[an,nn]},{icon:c().createElement(\"svg\",{viewBox:\"0 0 448 512\"},c().createElement(\"path\",{d:\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\"})),value:\"rectangle\",key:tn},{icon:c().createElement(\"svg\",{viewBox:\"0 0 223.646 223.646\"},c().createElement(\"path\",{d:\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\"})),value:\"diamond\",key:Zt},{icon:c().createElement(\"svg\",{viewBox:\"0 0 512 512\"},c().createElement(\"path\",{d:\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\"})),value:\"ellipse\",key:qt},{icon:c().createElement(\"svg\",{viewBox:\"0 0 448 512\",className:\"rtl-mirror\"},c().createElement(\"path\",{d:\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\"})),value:\"arrow\",key:Xt},{icon:c().createElement(\"svg\",{viewBox:\"0 0 6 6\"},c().createElement(\"line\",{x1:\"0\",y1:\"3\",x2:\"6\",y2:\"3\",stroke:\"currentColor\",strokeLinecap:\"round\"})),value:\"line\",key:[Jt,Qt]},{icon:c().createElement(\"svg\",{viewBox:\"0 0 512 512\"},c().createElement(\"path\",{fill:\"currentColor\",d:\"M290.74 93.24l128.02 128.02-277.99 277.99-114.14 12.6C11.35 513.54-1.56 500.62.14 485.34l12.7-114.22 277.9-277.88zm207.2-19.06l-60.11-60.11c-18.75-18.75-49.16-18.75-67.91 0l-56.55 56.55 128.02 128.02 56.55-56.55c18.75-18.76 18.75-49.16 0-67.91z\"})),value:\"draw\",key:on},{icon:c().createElement(\"svg\",{viewBox:\"0 0 448 512\"},c().createElement(\"path\",{d:\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\"})),value:\"text\",key:rn}],xd=(n(4518),{cut:[In(\"CtrlOrCmd+X\")],copy:[In(\"CtrlOrCmd+C\")],paste:[In(\"CtrlOrCmd+V\")],copyStyles:[In(\"CtrlOrCmd+Alt+C\")],pasteStyles:[In(\"CtrlOrCmd+Alt+V\")],selectAll:[In(\"CtrlOrCmd+A\")],deleteSelectedElements:[In(\"Del\")],duplicateSelection:[In(\"CtrlOrCmd+D\"),In(\"Alt+\".concat(C(\"helpDialog.drag\")))],sendBackward:[In(\"CtrlOrCmd+[\")],bringForward:[In(\"CtrlOrCmd+]\")],sendToBack:[In(ft?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")],bringToFront:[In(ft?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")],copyAsPng:[In(\"Shift+Alt+C\")],copyAsSvg:[],group:[In(\"CtrlOrCmd+G\")],ungroup:[In(\"CtrlOrCmd+Shift+G\")],gridMode:[In(\"CtrlOrCmd+'\")],zenMode:[In(\"Alt+Z\")],stats:[],addToLibrary:[],viewMode:[In(\"Alt+R\")]}),Ed=function(e){var t,n=e.options,r=e.onCloseRequest,a=e.top,o=e.left,i=e.actionManager,l=e.appState,s=!(null===(t=document.querySelector(\".excalidraw\"))||void 0===t||!t.classList.contains(\"Appearance_dark\"));return c().createElement(\"div\",{className:ze(\"excalidraw\",{\"Appearance_dark Appearance_dark-background-none\":s})},c().createElement(Ql,{onCloseRequest:r,top:a,left:o,fitInViewport:!0},c().createElement(\"ul\",{className:\"context-menu\",onContextMenu:function(e){return e.preventDefault()}},n.map((function(e,t){var n;if(\"separator\"===e)return c().createElement(\"hr\",{key:t,className:\"context-menu-option-separator\"});var a,o=e.name,s=e.contextItemLabel?C(e.contextItemLabel):\"\";return c().createElement(\"li\",{key:t,\"data-testid\":o,onClick:r},c().createElement(\"button\",{className:ze(\"context-menu-option\",{dangerous:\"deleteSelectedElements\"===o,checkmark:null===(n=e.checked)||void 0===n?void 0:n.call(e,l)}),onClick:function(){return i.executeAction(e)}},c().createElement(\"div\",{className:\"context-menu-option__label\"},s),c().createElement(\"kbd\",{className:\"context-menu-option__shortcut\"},o?(a=xd[o])&&a.length>0?a[0]:\"\":\"\")))})))))},kd=function(){if(vd)return vd;var e=document.createElement(\"div\");return document.body.appendChild(e),vd=e},Sd=function(){(0,pt.unmountComponentAtNode)(kd())};const Cd=function(e){var t=Array.of();e.options.forEach((function(e){e&&t.push(e)})),t.length&&(0,pt.render)(c().createElement(Ed,{top:e.top,left:e.left,options:t,onCloseRequest:Sd,actionManager:e.actionManager,appState:e.appState}),kd())};n(1575);function Od(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Md(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Od(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Od(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const Td=function(e){var t=e.children,n=e.gap,r=e.align,a=e.justifyContent,o=e.className,i=e.style;return c().createElement(\"div\",{className:ze(\"Stack Stack_horizontal\",o),style:Md({\"--gap\":n,alignItems:r,justifyContent:a},i)},t)},Id=function(e){var t=e.children,n=e.gap,r=e.align,a=e.justifyContent,o=e.className;return c().createElement(\"div\",{className:ze(\"Stack Stack_vertical\",o),style:{\"--gap\":n,justifyItems:r,justifyContent:a}},t)};var Pd=function(e){var t=e.appState,n=e.elements,r=e.renderAction,a=e.elementType,o=si(ni(n),t),i=Boolean(t.editingElement),l=vc(),s=\"rtl\"===document.documentElement.getAttribute(\"dir\"),u=pi(a)||o.some((function(e){return pi(e.type)&&(t=e.backgroundColor,n=5===t.length&&\"0\"===t.substr(4,1),r=9===t.length&&\"00\"===t.substr(7,2),!(n||r||t===dt.elementBackground[0]));var t,n,r})),d=pi(a)||o.some((function(e){return pi(e.type)}));return c().createElement(\"div\",{className:\"panelColumn\"},r(\"changeStrokeColor\"),d&&r(\"changeBackgroundColor\"),u&&r(\"changeFillStyle\"),(fi(a)||o.some((function(e){return fi(e.type)})))&&c().createElement(c().Fragment,null,r(\"changeStrokeWidth\"),r(\"changeStrokeStyle\"),r(\"changeSloppiness\")),(hi(a)||o.some((function(e){return hi(e.type)})))&&c().createElement(c().Fragment,null,r(\"changeSharpness\")),(mi(a)||o.some((function(e){return mi(e.type)})))&&c().createElement(c().Fragment,null,r(\"changeFontSize\"),r(\"changeFontFamily\"),r(\"changeTextAlign\")),(gi(a)||o.some((function(e){return gi(e.type)})))&&c().createElement(c().Fragment,null,r(\"changeArrowhead\")),r(\"changeOpacity\"),c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.layers\")),c().createElement(\"div\",{className:\"buttonList\"},r(\"sendToBack\"),r(\"sendBackward\"),r(\"bringToFront\"),r(\"bringForward\"))),o.length>1&&c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.align\")),c().createElement(\"div\",{className:\"buttonList\"},s?c().createElement(c().Fragment,null,r(\"alignRight\"),r(\"alignHorizontallyCentered\"),r(\"alignLeft\")):c().createElement(c().Fragment,null,r(\"alignLeft\"),r(\"alignHorizontallyCentered\"),r(\"alignRight\")),o.length>2&&r(\"distributeHorizontally\"),c().createElement(\"div\",{className:\"iconRow\"},r(\"alignTop\"),r(\"alignVerticallyCentered\"),r(\"alignBottom\"),o.length>2&&r(\"distributeVertically\")))),!l&&!i&&o.length>0&&c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.actions\")),c().createElement(\"div\",{className:\"buttonList\"},r(\"duplicateSelection\"),r(\"deleteSelectedElements\"),r(\"group\"),r(\"ungroup\"))))},Ad=c().createElement(\"svg\",{viewBox:\"0 0 512 512\"},c().createElement(\"path\",{d:\"M296 32h192c13.255 0 24 10.745 24 24v160c0 13.255-10.745 24-24 24H296c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24zm-80 0H24C10.745 32 0 42.745 0 56v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zM0 296v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm296 184h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H296c-13.255 0-24 10.745-24 24v160c0 13.255 10.745 24 24 24z\"})),_d=function(e){var t=e.canvas,n=e.elementType,r=e.setAppState,a=e.isLibraryOpen;return c().createElement(c().Fragment,null,wd.map((function(e,a){var o=e.value,i=e.icon,l=e.key,s=C(\"toolBar.\".concat(o)),u=\"string\"==typeof l?l:l[0],d=\"\".concat(gn(u),\" \").concat(C(\"helpDialog.or\"),\" \").concat(a+1);return c().createElement(wi,{className:\"Shape\",key:o,type:\"radio\",icon:i,checked:n===o,name:\"editor-current-shape\",title:\"\".concat(gn(s),\" \u2014 \").concat(d),keyBindingLabel:\"\".concat(a+1),\"aria-label\":gn(s),\"aria-keyshortcuts\":d,\"data-testid\":o,onChange:function(){r({elementType:o,multiElement:null,selectedElementIds:{}}),Mn(t,o),r({})}})})),c().createElement(wi,{className:\"Shape ToolIcon_type_button__library\",type:\"button\",icon:Ad,name:\"editor-library\",keyBindingLabel:\"9\",\"aria-keyshortcuts\":\"9\",title:\"\".concat(gn(C(\"toolBar.library\")),\" \u2014 9\"),\"aria-label\":gn(C(\"toolBar.library\")),onClick:function(){r({isLibraryOpen:!a})}}))},Ld=function(e){var t=e.renderAction,n=e.zoom;return c().createElement(Id,{gap:1},c().createElement(Td,{gap:1,align:\"center\"},t(\"zoomIn\"),t(\"zoomOut\"),t(\"resetZoom\"),c().createElement(\"div\",{style:{marginInlineStart:4}},(100*n.value).toFixed(0),\"%\")))},Dd=function(e){var t=e.appState,n=e.setAppState,r=e.actionManager;return c().createElement(\"div\",{style:{display:\"flex\"}},r.renderAction(\"changeViewBackgroundColor\"),c().createElement(\"div\",{style:{marginInlineStart:\"0.25rem\"}},c().createElement(Pc,{value:t.appearance,onChange:function(e){n({appearance:e})}})))};n(3211);const jd=function(e){var t=e.isCollaborating,n=e.collaboratorCount,r=e.onClick;return c().createElement(c().Fragment,null,c().createElement(wi,{className:ze(\"CollabButton\",{\"is-collaborating\":t}),onClick:r,icon:Ji,type:\"button\",title:C(\"labels.liveCollaboration\"),\"aria-label\":C(\"labels.liveCollaboration\"),showAriaLabel:vc()},n>0&&c().createElement(\"div\",{className:\"CollabButton-collaborators\"},n)))};n(3040),n(7428);function zd(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bd(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zd(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zd(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Hd=c().forwardRef((function(e,t){var n=e.children,r=e.padding,a=e.className,o=e.style;return c().createElement(\"div\",{className:ze(\"Island\",a),style:Bd({\"--padding\":r},o),ref:t},n)})),Nd=(n(205),function(e){var t=Rd();if(!t)return null;return(0,pt.createPortal)(c().createElement(\"div\",{className:ze(\"Modal\",e.className),role:\"dialog\",\"aria-modal\":\"true\",onKeyDown:function(t){t.key===Vt&&(t.nativeEvent.stopImmediatePropagation(),e.onCloseRequest())},\"aria-labelledby\":e.labelledBy},c().createElement(\"div\",{className:\"Modal__background\",onClick:e.onCloseRequest}),c().createElement(\"div\",{className:\"Modal__content\",style:{\"--max-width\":\"\".concat(e.maxWidth,\"px\")}},e.children)),t)}),Rd=function(){var e=(0,l.useState)(null),t=e[0],n=e[1];return(0,l.useLayoutEffect)((function(){var e,t=!(null===(e=document.querySelector(\".excalidraw\"))||void 0===e||!e.classList.contains(\"Appearance_dark\")),r=document.createElement(\"div\");return r.classList.add(\"excalidraw\",\"excalidraw-modal-container\"),t&&(r.classList.add(\"Appearance_dark\"),r.classList.add(\"Appearance_dark-background-none\")),document.body.appendChild(r),n(r),function(){document.body.removeChild(r)}}),[]),t},Fd=function(e){var t=function(){var e=(0,l.useState)(null),t=e[0],n=e[1];return[t,(0,l.useCallback)((function(e){return n(e)}),[])]}(),n=t[0],r=t[1];(0,l.useEffect)((function(){if(n){var t=a(n);t.length>0&&!1!==e.autofocus&&(t[1]||t[0]).focus();var r=function(e){if(e.key===Yt){var t=a(n),r=document.activeElement,o=t.findIndex((function(e){return e===r}));0===o&&e.shiftKey?(t[t.length-1].focus(),e.preventDefault()):o!==t.length-1||e.shiftKey||(t[0].focus(),e.preventDefault())}};return n.addEventListener(\"keydown\",r),function(){return n.removeEventListener(\"keydown\",r)}}}),[n,e.autofocus]);var a=function(e){var t=e.querySelectorAll(\"button, a, input, select, textarea, div[tabindex]\");return t?Array.from(t):[]};return c().createElement(Nd,{className:ze(\"Dialog\",e.className),labelledBy:\"dialog-title\",maxWidth:e.small?550:800,onCloseRequest:e.onCloseRequest},c().createElement(Hd,{ref:r},c().createElement(\"h2\",{id:\"dialog-title\",className:\"Dialog__title\"},c().createElement(\"span\",{className:\"Dialog__titleContent\"},e.title),c().createElement(\"button\",{className:\"Modal__close\",onClick:e.onCloseRequest,\"aria-label\":C(\"buttons.close\")},vc()?tl:el)),c().createElement(\"div\",{className:\"Dialog__content\"},e.children)))},Wd=function(e){var t=e.message,n=e.onClose,r=(0,l.useState)(!!t),a=r[0],o=r[1],i=c().useCallback((function(){o(!1),n&&n()}),[n]);return c().createElement(c().Fragment,null,a&&c().createElement(Fd,{small:!0,onCloseRequest:i,title:C(\"errorDialog.title\")},c().createElement(\"div\",null,t.split(\"\\n\").map((function(e){return c().createElement(c().Fragment,null,e,c().createElement(\"br\",null))})))))},Gd=(n(8623),[1,2,3]),Vd=Gd.includes(devicePixelRatio)?devicePixelRatio:1,Kd=\"filter\"in document.createElement(\"canvas\").getContext(\"2d\"),Ud=function(){return c().createElement(\"div\",null,c().createElement(\"h3\",null,C(\"canvasError.cannotShowPreview\")),c().createElement(\"p\",null,c().createElement(\"span\",null,C(\"canvasError.canvasTooBig\"))),c().createElement(\"em\",null,\"(\",C(\"canvasError.canvasTooBigTip\"),\")\"))},Yd=function(e,t){(0,pt.unmountComponentAtNode)(t),t.innerHTML=\"\",e instanceof HTMLCanvasElement?t.appendChild(e):(0,pt.render)(c().createElement(Ud,null),t)},Xd=function(e){var t=e.elements,n=e.appState,r=e.exportPadding,a=void 0===r?10:r,o=e.actionManager,i=e.onExportToPng,s=e.onExportToSvg,u=e.onExportToClipboard,d=e.onExportToBackend,p=li(t,n),f=(0,l.useState)(Vd),h=f[0],m=f[1],g=(0,l.useState)(p),v=g[0],b=g[1],y=(0,l.useRef)(null),w=n.exportBackground,x=n.viewBackgroundColor,E=n.shouldAddWatermark,k=v?ci(t,n):t;return(0,l.useEffect)((function(){b(p)}),[p]),(0,l.useEffect)((function(){var e=y.current;if(e)try{var t=$c(k,n,{exportBackground:w,viewBackgroundColor:x,exportPadding:a,scale:h,shouldAddWatermark:E});Vs(t).then((function(){Yd(t,e)})).catch((function(t){console.error(t),Yd(new ws,e)}))}catch(t){console.error(t),Yd(new ws,e)}}),[n,k,w,a,x,h,E]),c().createElement(\"div\",{className:\"ExportDialog\"},c().createElement(\"div\",{className:\"ExportDialog__preview\",ref:y}),Kd&&o.renderAction(\"exportWithDarkMode\"),c().createElement(Id,{gap:2,align:\"center\"},c().createElement(\"div\",{className:\"ExportDialog__actions\"},c().createElement(Td,{gap:2},c().createElement(wi,{type:\"button\",label:\"PNG\",title:C(\"buttons.exportToPng\"),\"aria-label\":C(\"buttons.exportToPng\"),onClick:function(){return i(k,h)}}),c().createElement(wi,{type:\"button\",label:\"SVG\",title:C(\"buttons.exportToSvg\"),\"aria-label\":C(\"buttons.exportToSvg\"),onClick:function(){return s(k,h)}}),Qs&&c().createElement(wi,{type:\"button\",icon:Ii,title:C(\"buttons.copyPngToClipboard\"),\"aria-label\":C(\"buttons.copyPngToClipboard\"),onClick:function(){return u(k,h)}}),d&&c().createElement(wi,{type:\"button\",icon:Ci,title:C(\"buttons.getShareableLink\"),\"aria-label\":C(\"buttons.getShareableLink\"),onClick:function(){return d(k)}})),c().createElement(\"div\",{className:\"ExportDialog__name\"},o.renderAction(\"changeProjectName\")),c().createElement(Td,{gap:2},Gd.map((function(e){var t=function(e,t,n,r){var a=es(e,n),o=ns(a,t,n).map((function(e){return Math.trunc(e*r)}));return[o[2],o[3]]}(k,a,E,e),n=t[0],r=t[1],o=\"\".concat(C(\"buttons.scale\"),\" \").concat(e,\"x (\").concat(n,\"x\").concat(r,\")\");return c().createElement(wi,{key:e,size:\"s\",type:\"radio\",icon:\"\".concat(e,\"x\"),name:\"export-canvas-scale\",title:o,\"aria-label\":o,id:\"export-canvas-scale\",checked:e===h,onChange:function(){return m(e)}})})))),o.renderAction(\"changeExportBackground\"),p&&c().createElement(\"div\",null,c().createElement(\"label\",null,c().createElement(\"input\",{type:\"checkbox\",checked:v,onChange:function(e){return b(e.currentTarget.checked)}}),\" \",C(\"labels.onlySelected\"))),o.renderAction(\"changeExportEmbedScene\"),o.renderAction(\"changeShouldAddWatermark\")))},Zd=function(e){var t=e.elements,n=e.appState,r=e.exportPadding,a=void 0===r?10:r,o=e.actionManager,i=e.onExportToPng,s=e.onExportToSvg,u=e.onExportToClipboard,d=e.onExportToBackend,p=(0,l.useState)(!1),f=p[0],h=p[1],m=(0,l.useRef)(null),g=c().useCallback((function(){var e;h(!1),null===(e=m.current)||void 0===e||e.focus()}),[]);return c().createElement(c().Fragment,null,c().createElement(wi,{onClick:function(){h(!0)},icon:_i,type:\"button\",\"aria-label\":C(\"buttons.export\"),showAriaLabel:vc(),title:C(\"buttons.export\"),ref:m}),f&&c().createElement(Fd,{onCloseRequest:g,title:C(\"buttons.export\")},c().createElement(Xd,{elements:t,appState:n,exportPadding:a,actionManager:o,onExportToPng:i,onExportToSvg:s,onExportToClipboard:u,onExportToBackend:d,onCloseRequest:g})))},qd=(n(4193),function(e){var t=e.children,n=e.side,r=e.className;return c().createElement(\"div\",{className:ze(\"FixedSideContainer\",\"FixedSideContainer_side_\".concat(n),r)},t)}),Qd=c().memo((function(e){var t=e.appearance;return c().createElement(\"svg\",{xmlns:\"http:\/\/www.w3.org\/2000\/svg\",width:\"40\",height:\"40\",viewBox:\"0 0 250 250\",className:\"github-corner rtl-mirror\"},c().createElement(\"a\",{href:\"https:\/\/github.com\/excalidraw\/excalidraw\",target:\"_blank\",rel:\"noopener noreferrer\",\"aria-label\":\"GitHub repository\"},c().createElement(\"path\",{d:\"M0 0l115 115h15l12 27 108 108V0z\",fill:\"light\"===t?ct.MA[6]:ct.MA[8]}),c().createElement(\"path\",{className:\"octo-arm\",d:\"M128 109c-15-9-9-19-9-19 3-7 2-11 2-11-1-7 3-2 3-2 4 5 2 11 2 11-3 10 5 15 9 16\",style:{transformOrigin:\"130px 106px\"},fill:\"light\"===t?ct.ix:ct.Sn}),c().createElement(\"path\",{className:\"octo-body\",d:\"M115 115s4 2 5 0l14-14c3-2 6-3 8-3-8-11-15-24 2-41 5-5 10-7 16-7 1-2 3-7 12-11 0 0 5 3 7 16 4 2 8 5 12 9s7 8 9 12c14 3 17 7 17 7-4 8-9 11-11 11 0 6-2 11-7 16-16 16-30 10-41 2 0 3-1 7-5 11l-12 11c-1 1 1 5 1 5z\",fill:\"light\"===t?ct.ix:ct.Sn})))})),$d=(n(9705),function(e){var t=function(e){var t=e.appState,n=e.elements,r=t.elementType,a=t.isResizing,o=t.isRotating,i=t.lastPointerDownWith,l=null!==t.multiElement;if(\"arrow\"===r||\"line\"===r)return C(l?\"hints.linearElementMulti\":\"hints.linearElement\");if(\"draw\"===r)return C(\"hints.freeDraw\");if(\"text\"===r)return C(\"hints.text\");var c=ci(n,t);if(a&&\"mouse\"===i&&1===c.length){var s=c[0];return He(s)&&2===s.points.length?C(\"hints.lockAngle\"):C(\"hints.resize\")}return o&&\"mouse\"===i?C(\"hints.rotate\"):1===c.length&&He(c[0])?t.editingLinearElement?t.editingLinearElement.activePointIndex?C(\"hints.lineEditor_pointSelected\"):C(\"hints.lineEditor_nothingSelected\"):C(\"hints.lineEditor_info\"):null}({appState:e.appState,elements:e.elements});return t?(t=In(t),c().createElement(\"div\",{className:\"HintViewer\"},c().createElement(\"span\",null,t))):null}),Jd=(n(8465),n(8680),c().createElement(\"svg\",{viewBox:\"0 0 1792 1792\"},c().createElement(\"path\",{fill:\"currentColor\",d:\"M1600 736v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z\"}))),ep=function(e){var t=e.elements,n=e.pendingElements,r=e.onRemoveFromLibrary,a=e.onClick,o=(0,l.useRef)(null);(0,l.useEffect)((function(){var e=t||n;if(e){for(var r=Jc(e,{exportBackground:!1,viewBackgroundColor:ct.ix,shouldAddWatermark:!1}),a=0,i=o.current.children;a<i.length;a++){var l=i[a];\"svg\"===l.tagName&&o.current.removeChild(l)}o.current.appendChild(r);var c=o.current;return function(){c.removeChild(r)}}}),[t,n]);var i=(0,l.useState)(!1),u=i[0],d=i[1],p=vc(),f=(u||p)&&n&&c().createElement(\"div\",{className:\"library-unit__adder\"},Jd);return c().createElement(\"div\",{className:ze(\"library-unit\",{\"library-unit__active\":t||n}),onMouseEnter:function(){return d(!0)},onMouseLeave:function(){return d(!1)}},c().createElement(\"div\",{className:ze(\"library-unit__dragger\",{\"library-unit__pulse\":!!n}),ref:o,draggable:!!t,onClick:t||n?a:void 0,onDragStart:function(e){d(!1),e.dataTransfer.setData(s.LO.excalidrawlib,JSON.stringify(t))}}),f,t&&(u||p)&&c().createElement(\"button\",{className:\"library-unit__removeFromLibrary\",\"aria-label\":C(\"labels.removeFromLibrary\"),onClick:r},el))},tp={CHECKED:c().createElement(\"svg\",{width:\"1792\",height:\"1792\",viewBox:\"0 0 1792 1792\",xmlns:\"http:\/\/www.w3.org\/2000\/svg\"},c().createElement(\"path\",{d:\"M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z\"})),UNCHECKED:c().createElement(\"svg\",{width:\"1792\",height:\"1792\",viewBox:\"0 0 1792 1792\",xmlns:\"http:\/\/www.w3.org\/2000\/svg\",className:\"unlocked-icon rtl-mirror\"},c().createElement(\"path\",{d:\"M1728 576v256q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45v-256q0-106-75-181t-181-75-181 75-75 181v192h96q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h672v-192q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5z\"}))},np=function(e){return c().createElement(\"label\",{className:ze(\"ToolIcon ToolIcon__lock ToolIcon_type_floating zen-mode-visibility\",\"ToolIcon_size_\".concat(e.size||\"m\"),{\"zen-mode-visibility--hidden\":e.zenModeEnabled}),title:\"\".concat(e.title,\" \u2014 Q\")},c().createElement(\"input\",{className:\"ToolIcon_type_checkbox\",type:\"checkbox\",name:e.name,id:e.id,onChange:e.onChange,checked:e.checked,\"aria-label\":e.title}),c().createElement(\"div\",{className:\"ToolIcon__icon\"},e.checked?tp.CHECKED:tp.UNCHECKED))},rp=function(e){var t=e.heading,n=e.children,r=yr()(e,[\"heading\",\"children\"]),a=c().createElement(\"h2\",{className:\"visually-hidden\",id:\"\".concat(t,\"-title\")},C(\"headings.\".concat(t)));return c().createElement(\"section\",ac()({},r,{\"aria-labelledby\":\"\".concat(t,\"-title\")}),\"function\"==typeof n?n(a):c().createElement(c().Fragment,null,a,n))},ap=(n(3142),function(e){var t=e.children,n=e.className,r=e.mobile;return c().createElement(\"div\",{className:ze(\"UserList\",n,{UserList_mobile:r})},t)});function op(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var ip=function(e){var t=e.appState,n=e.elements,r=e.libraryMenu,a=e.actionManager,o=e.exportButton,i=e.setAppState,l=e.onCollabButtonClick,s=e.onLockToggle,u=e.canvas,d=e.isCollaborating,p=e.renderCustomFooter,f=e.viewModeEnabled;return c().createElement(c().Fragment,null,!f&&c().createElement(qd,{side:\"top\",className:\"App-top-bar\"},c().createElement(rp,{heading:\"shapes\"},(function(e){return c().createElement(Id,{gap:4,align:\"center\"},c().createElement(Td,{gap:1},c().createElement(Hd,{padding:1},e,c().createElement(Td,{gap:1},c().createElement(_d,{canvas:u,elementType:t.elementType,setAppState:i,isLibraryOpen:t.isLibraryOpen}))),c().createElement(np,{checked:t.elementLocked,onChange:s,title:C(\"toolBar.lock\")})),r)})),c().createElement($d,{appState:t,elements:n})),c().createElement(\"div\",{className:\"App-bottom-bar\",style:{marginBottom:14,marginLeft:14,marginRight:14}},c().createElement(Hd,{padding:0},\"canvas\"===t.openMenu?c().createElement(rp,{className:\"App-mobile-menu\",heading:\"canvasActions\"},c().createElement(\"div\",{className:\"panelColumn\"},c().createElement(Id,{gap:4},f?c().createElement(c().Fragment,null,a.renderAction(\"saveScene\"),a.renderAction(\"saveAsScene\"),o):c().createElement(c().Fragment,null,a.renderAction(\"loadScene\"),a.renderAction(\"saveScene\"),a.renderAction(\"saveAsScene\"),o,a.renderAction(\"clearCanvas\"),l&&c().createElement(jd,{isCollaborating:d,collaboratorCount:t.collaborators.size,onClick:l}),c().createElement(Dd,{actionManager:a,appState:t,setAppState:i})),null==p?void 0:p(!0),t.collaborators.size>0&&c().createElement(\"fieldset\",null,c().createElement(\"legend\",null,C(\"labels.collaborators\")),c().createElement(ap,{mobile:!0},Array.from(t.collaborators).filter((function(e){e[0];var t=e[1];return 0!==Object.keys(t).length})).map((function(e){var t=e[0];e[1];return c().createElement(c().Fragment,{key:t},a.renderAction(\"goToCollaborator\",t))}))))))):\"shape\"===t.openMenu&&!f&&qo(t,n)?c().createElement(rp,{className:\"App-mobile-menu\",heading:\"selectedShapeActions\"},c().createElement(Pd,{appState:t,elements:n,renderAction:a.renderAction,elementType:t.elementType})):null,c().createElement(\"footer\",{className:\"App-toolbar\"},f?c().createElement(\"div\",{className:\"App-toolbar-content\"},a.renderAction(\"toggleCanvasMenu\")):c().createElement(\"div\",{className:\"App-toolbar-content\"},a.renderAction(\"toggleCanvasMenu\"),a.renderAction(\"toggleEditMenu\"),a.renderAction(\"undo\"),a.renderAction(\"redo\"),a.renderAction(t.multiElement?\"finalize\":\"duplicateSelection\"),a.renderAction(\"deleteSelectedElements\")),t.scrolledOutside&&!t.openMenu&&c().createElement(\"button\",{className:\"scroll-back-to-content\",onClick:function(){i(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?op(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):op(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},di(n,t)))}},C(\"buttons.scrollBackToContent\"))))))},lp=(n(8416),function(e){var t=(0,l.useRef)(null),n=(0,l.useState)(null),r=n[0],a=n[1];return(0,l.useLayoutEffect)((function(){if(e.spreadsheet){var n=bs(e.chartType,e.spreadsheet,0,0);a(n);var r=Jc(n,{exportBackground:!1,viewBackgroundColor:ct.ix,shouldAddWatermark:!1}),o=t.current;return o.appendChild(r),e.selected&&o.parentNode.focus(),function(){o.removeChild(r)}}}),[e.spreadsheet,e.chartType,e.selected]),c().createElement(\"button\",{className:\"ChartPreview\",onClick:function(){r&&e.onClick(e.chartType,r)}},c().createElement(\"div\",{ref:t}))}),cp=function(e){var t=e.setAppState,n=e.appState,r=e.onClose,a=e.onInsertChart,o=c().useCallback((function(){r&&r()}),[r]),i=function(e,n){a(n),Oc(\"magic\",\"chart\",e),t({currentChartType:e,pasteDialog:{shown:!1,data:null}})};return c().createElement(Fd,{small:!0,onCloseRequest:o,title:C(\"labels.pasteCharts\"),className:\"PasteChartDialog\",autofocus:!1},c().createElement(\"div\",{className:\"container\"},c().createElement(lp,{chartType:\"bar\",spreadsheet:n.pasteDialog.data,selected:\"bar\"===n.currentChartType,onClick:i}),c().createElement(lp,{chartType:\"line\",spreadsheet:n.pasteDialog.data,selected:\"line\"===n.currentChartType,onClick:i})))},sp=(n(341),function(){return c().createElement(\"div\",{className:\"HelpDialog--header\"},c().createElement(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw#documentation\",target:\"_blank\",rel:\"noopener noreferrer\"},C(\"helpDialog.documentation\")),c().createElement(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/blog.excalidraw.com\",target:\"_blank\",rel:\"noopener noreferrer\"},C(\"helpDialog.blog\")),c().createElement(\"a\",{className:\"HelpDialog--btn\",href:\"https:\/\/github.com\/excalidraw\/excalidraw\/issues\",target:\"_blank\",rel:\"noopener noreferrer\"},C(\"helpDialog.github\")))}),up=function(e){return c().createElement(c().Fragment,null,c().createElement(\"h3\",null,e.title),e.children)},dp=function(e){return c().createElement(\"div\",{style:{display:\"flex\",flexDirection:\"row\",flexWrap:\"wrap\",justifyContent:\"space-between\"}},e.children)},pp=function(e){return c().createElement(\"div\",{style:{width:\"49%\"}},e.children)},fp=function(e){return c().createElement(\"div\",{className:\"HelpDialog--island\"},c().createElement(\"h3\",{className:\"HelpDialog--island-title\"},e.caption),e.children)},hp=function(e){return c().createElement(\"div\",{className:\"HelpDialog--shortcut\"},c().createElement(\"div\",{style:{display:\"flex\",margin:\"0\",padding:\"4px 8px\",alignItems:\"center\"}},c().createElement(\"div\",{style:{lineHeight:1.4}},e.label),c().createElement(\"div\",{style:{display:\"flex\",flex:\"0 0 auto\",justifyContent:\"flex-end\",marginInlineStart:\"auto\",minWidth:\"30%\"}},e.shortcuts.map((function(t,n){return c().createElement(c().Fragment,{key:n},c().createElement(mp,null,t),e.isOr&&n!==e.shortcuts.length-1&&C(\"helpDialog.or\"))})))))};hp.defaultProps={isOr:!0};var mp=function(e){return c().createElement(\"kbd\",ac()({className:\"HelpDialog--key\"},e))},gp=function(e){var t=e.onClose,n=c().useCallback((function(){t&&t()}),[t]);return c().createElement(c().Fragment,null,c().createElement(Fd,{onCloseRequest:n,title:C(\"helpDialog.title\"),className:\"HelpDialog\"},c().createElement(sp,null),c().createElement(up,{title:C(\"helpDialog.shortcuts\")},c().createElement(dp,null,c().createElement(pp,null,c().createElement(fp,{caption:C(\"helpDialog.shapes\")},c().createElement(hp,{label:C(\"toolBar.selection\"),shortcuts:[\"V\",\"1\"]}),c().createElement(hp,{label:C(\"toolBar.rectangle\"),shortcuts:[\"R\",\"2\"]}),c().createElement(hp,{label:C(\"toolBar.diamond\"),shortcuts:[\"D\",\"3\"]}),c().createElement(hp,{label:C(\"toolBar.ellipse\"),shortcuts:[\"E\",\"4\"]}),c().createElement(hp,{label:C(\"toolBar.arrow\"),shortcuts:[\"A\",\"5\"]}),c().createElement(hp,{label:C(\"toolBar.line\"),shortcuts:[\"P\",\"6\"]}),c().createElement(hp,{label:C(\"toolBar.draw\"),shortcuts:[\"Shift+P\",\"7\"]}),c().createElement(hp,{label:C(\"toolBar.text\"),shortcuts:[\"T\",\"8\"]}),c().createElement(hp,{label:C(\"helpDialog.textNewLine\"),shortcuts:[In(\"Enter\"),In(\"Shift+Enter\")]}),c().createElement(hp,{label:C(\"helpDialog.textFinish\"),shortcuts:[In(\"Esc\"),In(\"CtrlOrCmd+Enter\")]}),c().createElement(hp,{label:C(\"helpDialog.curvedArrow\"),shortcuts:[\"A\",C(\"helpDialog.click\"),C(\"helpDialog.click\"),C(\"helpDialog.click\")],isOr:!1}),c().createElement(hp,{label:C(\"helpDialog.curvedLine\"),shortcuts:[\"L\",C(\"helpDialog.click\"),C(\"helpDialog.click\"),C(\"helpDialog.click\")],isOr:!1}),c().createElement(hp,{label:C(\"toolBar.lock\"),shortcuts:[\"Q\"]}),c().createElement(hp,{label:C(\"helpDialog.preventBinding\"),shortcuts:[In(\"CtrlOrCmd\")]})),c().createElement(fp,{caption:C(\"helpDialog.view\")},c().createElement(hp,{label:C(\"buttons.zoomIn\"),shortcuts:[In(\"CtrlOrCmd++\")]}),c().createElement(hp,{label:C(\"buttons.zoomOut\"),shortcuts:[In(\"CtrlOrCmd+-\")]}),c().createElement(hp,{label:C(\"buttons.resetZoom\"),shortcuts:[In(\"CtrlOrCmd+0\")]}),c().createElement(hp,{label:C(\"helpDialog.zoomToFit\"),shortcuts:[\"Shift+1\"]}),c().createElement(hp,{label:C(\"helpDialog.zoomToSelection\"),shortcuts:[\"Shift+2\"]}),c().createElement(hp,{label:C(\"buttons.fullScreen\"),shortcuts:[\"F\"]}),c().createElement(hp,{label:C(\"buttons.zenMode\"),shortcuts:[In(\"Alt+Z\")]}),c().createElement(hp,{label:C(\"labels.showGrid\"),shortcuts:[In(\"CtrlOrCmd+'\")]}),c().createElement(hp,{label:C(\"labels.viewMode\"),shortcuts:[In(\"Alt+R\")]}))),c().createElement(pp,null,c().createElement(fp,{caption:C(\"helpDialog.editor\")},c().createElement(hp,{label:C(\"labels.selectAll\"),shortcuts:[In(\"CtrlOrCmd+A\")]}),c().createElement(hp,{label:C(\"labels.multiSelect\"),shortcuts:[In(\"Shift+\".concat(C(\"helpDialog.click\")))]}),c().createElement(hp,{label:C(\"labels.moveCanvas\"),shortcuts:[In(\"Space+\".concat(C(\"helpDialog.drag\"))),In(\"Wheel+\".concat(C(\"helpDialog.drag\")))],isOr:!0}),c().createElement(hp,{label:C(\"labels.cut\"),shortcuts:[In(\"CtrlOrCmd+X\")]}),c().createElement(hp,{label:C(\"labels.copy\"),shortcuts:[In(\"CtrlOrCmd+C\")]}),c().createElement(hp,{label:C(\"labels.paste\"),shortcuts:[In(\"CtrlOrCmd+V\")]}),c().createElement(hp,{label:C(\"labels.copyAsPng\"),shortcuts:[In(\"Shift+Alt+C\")]}),c().createElement(hp,{label:C(\"labels.copyStyles\"),shortcuts:[In(\"CtrlOrCmd+Alt+C\")]}),c().createElement(hp,{label:C(\"labels.pasteStyles\"),shortcuts:[In(\"CtrlOrCmd+Alt+V\")]}),c().createElement(hp,{label:C(\"labels.delete\"),shortcuts:[In(\"Del\")]}),c().createElement(hp,{label:C(\"labels.sendToBack\"),shortcuts:[In(ft?\"CtrlOrCmd+Alt+[\":\"CtrlOrCmd+Shift+[\")]}),c().createElement(hp,{label:C(\"labels.bringToFront\"),shortcuts:[In(ft?\"CtrlOrCmd+Alt+]\":\"CtrlOrCmd+Shift+]\")]}),c().createElement(hp,{label:C(\"labels.sendBackward\"),shortcuts:[In(\"CtrlOrCmd+[\")]}),c().createElement(hp,{label:C(\"labels.bringForward\"),shortcuts:[In(\"CtrlOrCmd+]\")]}),c().createElement(hp,{label:C(\"labels.alignTop\"),shortcuts:[In(\"CtrlOrCmd+Shift+Up\")]}),c().createElement(hp,{label:C(\"labels.alignBottom\"),shortcuts:[In(\"CtrlOrCmd+Shift+Down\")]}),c().createElement(hp,{label:C(\"labels.alignLeft\"),shortcuts:[In(\"CtrlOrCmd+Shift+Left\")]}),c().createElement(hp,{label:C(\"labels.alignRight\"),shortcuts:[In(\"CtrlOrCmd+Shift+Right\")]}),c().createElement(hp,{label:C(\"labels.duplicateSelection\"),shortcuts:[In(\"CtrlOrCmd+D\"),In(\"Alt+\".concat(C(\"helpDialog.drag\")))]}),c().createElement(hp,{label:C(\"buttons.undo\"),shortcuts:[In(\"CtrlOrCmd+Z\")]}),c().createElement(hp,{label:C(\"buttons.redo\"),shortcuts:ht?[In(\"CtrlOrCmd+Y\"),In(\"CtrlOrCmd+Shift+Z\")]:[In(\"CtrlOrCmd+Shift+Z\")]}),c().createElement(hp,{label:C(\"labels.group\"),shortcuts:[In(\"CtrlOrCmd+G\")]}),c().createElement(hp,{label:C(\"labels.ungroup\"),shortcuts:[In(\"CtrlOrCmd+Shift+G\")]})))))))},vp=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},bp=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function yp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var wp=function(e){var t=e.library,n=e.onRemoveFromLibrary,r=e.onAddToLibrary,a=e.onInsertShape,o=e.pendingElements,i=e.setAppState,l=e.setLibraryItems,s=vc(),u=t.length+(o.length>0?1:0),d=s?4:6,p=Math.max(1,Math.ceil(u\/d)),f=[],h=!1;f.push(c().createElement(\"div\",{className:\"layer-ui__library-header\"},c().createElement(wi,{key:\"import\",type:\"button\",title:C(\"buttons.load\"),\"aria-label\":C(\"buttons.load\"),icon:Ti,onClick:function(){zs().then((function(){i({isLibraryOpen:!1})})).catch(zn).catch((function(e){i({errorMessage:e.message})}))}}),c().createElement(wi,{key:\"export\",type:\"button\",title:C(\"buttons.export\"),\"aria-label\":C(\"buttons.export\"),icon:_i,onClick:function(){js().catch(zn).catch((function(e){i({errorMessage:e.message})}))}}),c().createElement(wi,{key:\"reset\",type:\"button\",title:C(\"buttons.resetLibrary\"),\"aria-label\":C(\"buttons.resetLibrary\"),icon:Pi,onClick:function(){window.confirm(C(\"alerts.resetLibrary\"))&&(Ps.resetLibrary(),l([]))}}),c().createElement(\"a\",{href:\"https:\/\/libraries.excalidraw.com\",target:\"_excalidraw_libraries\"},C(\"labels.libraries\"))));for(var m=0;m<p;m++){for(var g=d*m,v=[],b=0;b<d;b++){var y=o.length>0&&!h&&g+b>=t.length;h=h||y,v.push(c().createElement(Id,{key:b},c().createElement(ep,{elements:t[g+b],pendingElements:y?o:void 0,onRemoveFromLibrary:n.bind(null,g+b),onClick:y?r.bind(null,o):a.bind(null,t[g+b])})))}f.push(c().createElement(Td,{align:\"center\",gap:1,key:m},v))}return c().createElement(Id,{align:\"start\",gap:1,className:\"layer-ui__library-items\"},f)},xp=function(e){var t=e.onClickOutside,n=e.onInsertShape,r=e.pendingElements,a=e.onAddToLibrary,o=e.setAppState,i=(0,l.useRef)(null);!function(e,t){(0,l.useEffect)((function(){var n=function(n){e.current&&(n.target instanceof Element&&(e.current.contains(n.target)||!document.body.contains(n.target))||t(n))};return document.addEventListener(\"pointerdown\",n,!1),function(){document.removeEventListener(\"pointerdown\",n)}}),[e,t])}(i,(function(e){e.target.closest(\".ToolIcon_type_button__library\")||t(e)}));var s=(0,l.useState)([]),u=s[0],d=s[1],f=(0,l.useState)(\"preloading\"),h=f[0],m=f[1],g=(0,l.useRef)(null);(0,l.useEffect)((function(){return Promise.race([new Promise((function(e){g.current=setTimeout((function(){e(\"loading\")}),100)})),Ps.loadLibrary().then((function(e){d(e),m(\"ready\")}))]).then((function(e){\"loading\"===e&&m(\"loading\")})),function(){clearTimeout(g.current)}}),[]);var v=(0,l.useCallback)(function(){var e=p()((function(e){var t,n;return vp(this,(function(r){switch(r.label){case 0:return[4,Ps.loadLibrary()];case 1:return t=r.sent(),n=t.filter((function(t,n){return n!==e})),Ps.saveLibrary(n),d(n),[2]}}))}));return function(t){return e.apply(this,arguments)}}(),[]),b=(0,l.useCallback)(function(){var e=p()((function(e){var t,n;return vp(this,(function(r){switch(r.label){case 0:return[4,Ps.loadLibrary()];case 1:return t=r.sent(),n=bp(bp([],t),[e]),a(),Ps.saveLibrary(n),d(n),[2]}}))}));return function(t){return e.apply(this,arguments)}}(),[a]);return\"preloading\"===h?null:c().createElement(Hd,{padding:1,ref:i,className:\"layer-ui__library\"},\"loading\"===h?c().createElement(\"div\",{className:\"layer-ui__library-message\"},C(\"labels.libraryLoadingMessage\")):c().createElement(wp,{library:u,onRemoveFromLibrary:v,onAddToLibrary:b,onInsertShape:n,pendingElements:r,setAppState:o,setLibraryItems:d}))},Ep=function(e){var t,n=e.actionManager,r=e.appState,a=e.setAppState,o=e.canvas,i=e.elements,u=e.onCollabButtonClick,d=e.onLockToggle,f=e.onInsertElements,h=e.zenModeEnabled,m=e.showExitZenModeBtn,g=e.toggleZenMode,v=e.isCollaborating,b=e.onExportToBackend,y=e.renderCustomFooter,w=e.viewModeEnabled,x=vc(),E=function(){var e=function(e){return function(){var t=p()((function(t,n){return vp(this,(function(i){switch(i.label){case 0:return o?[4,lu(e,t,r,o,{exportBackground:r.exportBackground,name:r.name,viewBackgroundColor:r.viewBackgroundColor,scale:n,shouldAddWatermark:r.shouldAddWatermark}).catch(zn).catch((function(e){console.error(e),a({errorMessage:e.message})}))]:[3,2];case 1:i.sent(),i.label=2;case 2:return[2]}}))}));return function(e,n){return t.apply(this,arguments)}}()};return c().createElement(Zd,{elements:i,appState:r,actionManager:n,onExportToPng:e(\"png\"),onExportToSvg:e(\"svg\"),onExportToClipboard:e(\"clipboard\"),onExportToBackend:b?function(e){b&&b(e,r,o)}:void 0})},k=(0,l.useCallback)((function(e){a({isLibraryOpen:!1})}),[a]),S=(0,l.useCallback)((function(){a({selectedElementIds:{},selectedGroupIds:{}})}),[a]),M=r.isLibraryOpen?c().createElement(xp,{pendingElements:ci(i,r),onClickOutside:k,onInsertShape:f,onAddToLibrary:S,setAppState:a}):null,T=c().createElement(c().Fragment,null,r.isLoading&&c().createElement(O,null),r.errorMessage&&c().createElement(Wd,{message:r.errorMessage,onClose:function(){return a({errorMessage:null})}}),r.showHelpDialog&&c().createElement(gp,{onClose:function(){return a({showHelpDialog:!1})}}),r.pasteDialog.shown&&c().createElement(cp,{setAppState:a,appState:r,onInsertChart:f,onClose:function(){return a({pasteDialog:{shown:!1,data:null}})}}));return x?c().createElement(c().Fragment,null,T,c().createElement(ip,{appState:r,elements:i,actionManager:n,libraryMenu:M,exportButton:E(),setAppState:a,onCollabButtonClick:u,onLockToggle:d,canvas:o,isCollaborating:v,renderCustomFooter:y,viewModeEnabled:w})):c().createElement(\"div\",{className:ze(\"layer-ui__wrapper\",{\"disable-pointerEvents\":r.draggingElement||r.resizingElement||r.editingElement&&!Be(r.editingElement)})},T,(t=qo(r,i),c().createElement(qd,{side:\"top\"},c().createElement(\"div\",{className:\"App-menu App-menu_top\"},c().createElement(Id,{gap:4,className:ze({\"disable-pointerEvents\":h})},w?c().createElement(rp,{heading:\"canvasActions\",className:ze(\"zen-mode-transition\",{\"transition-left\":h})},c().createElement(Hd,{padding:2,style:{zIndex:1}},c().createElement(Id,{gap:4},c().createElement(Td,{gap:1,justifyContent:\"space-between\"},n.renderAction(\"saveScene\"),n.renderAction(\"saveAsScene\"),E())))):c().createElement(rp,{heading:\"canvasActions\",className:ze(\"zen-mode-transition\",{\"transition-left\":h})},c().createElement(Hd,{padding:2,style:{zIndex:1}},c().createElement(Id,{gap:4},c().createElement(Td,{gap:1,justifyContent:\"space-between\"},n.renderAction(\"loadScene\"),n.renderAction(\"saveScene\"),n.renderAction(\"saveAsScene\"),E(),n.renderAction(\"clearCanvas\"),u&&c().createElement(jd,{isCollaborating:v,collaboratorCount:r.collaborators.size,onClick:u})),c().createElement(Dd,{actionManager:n,appState:r,setAppState:a})))),t&&c().createElement(rp,{heading:\"selectedShapeActions\",className:ze(\"zen-mode-transition\",{\"transition-left\":h})},c().createElement(Hd,{className:s.$C.SHAPE_ACTIONS_MENU,padding:2,style:{maxHeight:\"\".concat(r.height-200,\"px\")}},c().createElement(Pd,{appState:r,elements:i,renderAction:n.renderAction,elementType:r.elementType})))),!w&&c().createElement(rp,{heading:\"shapes\"},(function(e){return c().createElement(Id,{gap:4,align:\"start\"},c().createElement(Td,{gap:1},c().createElement(Hd,{padding:1,className:ze({\"zen-mode\":h})},c().createElement($d,{appState:r,elements:i}),e,c().createElement(Td,{gap:1},c().createElement(_d,{canvas:o,elementType:r.elementType,setAppState:a,isLibraryOpen:r.isLibraryOpen}))),c().createElement(np,{zenModeEnabled:h,checked:r.elementLocked,onChange:d,title:C(\"toolBar.lock\")})),M)})),c().createElement(ap,{className:ze(\"zen-mode-transition\",{\"transition-right\":h})},r.collaborators.size>0&&Array.from(r.collaborators).filter((function(e){e[0];var t=e[1];return 0!==Object.keys(t).length})).map((function(e){var t=e[0],r=e[1];return c().createElement(Ic,{label:r.username||\"Unknown user\",key:t},n.renderAction(\"goToCollaborator\",t))})))))),c().createElement(\"div\",{className:ze(\"App-menu App-menu_bottom zen-mode-transition\",{\"App-menu_bottom--transition-left\":h})},c().createElement(Id,{gap:2},c().createElement(rp,{heading:\"canvasActions\"},c().createElement(Hd,{padding:1},c().createElement(Ld,{renderAction:n.renderAction,zoom:r.zoom})),c().createElement(\"a\",{className:ze(\"encrypted-icon tooltip zen-mode-visibility\",{\"zen-mode-visibility--hidden\":h}),href:\"https:\/\/blog.excalidraw.com\/end-to-end-encryption\/\",target:\"_blank\",rel:\"noopener noreferrer\"},c().createElement(Ic,{label:C(\"encrypted.tooltip\"),position:\"above\",long:!0},rl))))),c().createElement(\"aside\",{className:ze(\"layer-ui__wrapper__github-corner zen-mode-transition\",{\"transition-right\":h})},c().createElement(Qd,{appearance:r.appearance})),c().createElement(\"footer\",{role:\"contentinfo\",className:\"layer-ui__wrapper__footer\"},c().createElement(\"div\",{className:ze(\"zen-mode-transition\",{\"transition-right disable-pointerEvents\":h})},null==y?void 0:y(!1),n.renderAction(\"toggleShortcuts\")),c().createElement(\"button\",{className:ze(\"disable-zen-mode\",{\"disable-zen-mode--visible\":m}),onClick:g},C(\"buttons.exitZenMode\"))),r.scrolledOutside&&c().createElement(\"button\",{className:\"scroll-back-to-content\",onClick:function(){a(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?yp(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):yp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},di(i,r)))}},C(\"buttons.scrollBackToContent\")))},kp=function(e,t){var n=function(e){e.suggestedBindings,e.startBoundElement;return yr()(e,[\"suggestedBindings\",\"startBoundElement\"])},r=n(e.appState),a=n(t.appState),o=Object.keys(r);return e.renderCustomFooter===t.renderCustomFooter&&e.langCode===t.langCode&&e.elements===t.elements&&o.every((function(e){return r[e]===a[e]}))};const Sp=c().memo(Ep,kp);var Cp=\"excalidraw\",Op=\"excalidraw-state\",Mp=\"excalidraw-collab\",Tp=function(){try{var e=localStorage.getItem(Cp);return e?JSON.stringify(e).length:0}catch(e){return console.error(e),0}},Ip=function(){try{var e=localStorage.getItem(Op),t=localStorage.getItem(Mp),n=localStorage.getItem(s.I.LOCAL_STORAGE_LIBRARY);return(e?JSON.stringify(e).length:0)+(t?JSON.stringify(t).length:0)+(n?JSON.stringify(n).length:0)+Tp()}catch(e){return console.error(e),0}},Pp=(n(7287),function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}}),Ap=xn((function(e){e({scene:Tp(),total:Ip()})}),500),_p=function(e){var t=vc(),n=(0,l.useState)({scene:0,total:0}),r=n[0],a=n[1];(0,l.useEffect)((function(){Ap((function(e){a(e)}))})),(0,l.useEffect)((function(){return function(){return Ap.cancel()}}),[]);var o=ot(e.elements),i=si(e.elements,e.appState),u=ot(i);if(t&&e.appState.openMenu)return null;var d,f,h=Nn();return h!==s.eQ?(f=h.slice(0,16).replace(\"T\",\" \"),d=h.slice(21)):f=C(\"stats.versionNotAvailable\"),c().createElement(\"div\",{className:\"Stats\"},c().createElement(Hd,{padding:2},c().createElement(\"div\",{className:\"close\",onClick:e.onClose},el),c().createElement(\"h3\",null,C(\"stats.title\")),c().createElement(\"table\",null,c().createElement(\"tbody\",null,c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.scene\"))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.elements\")),c().createElement(\"td\",null,e.elements.length)),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.width\")),c().createElement(\"td\",null,Math.round(o[2])-Math.round(o[0]))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.height\")),c().createElement(\"td\",null,Math.round(o[3])-Math.round(o[1]))),c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.storage\"))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.scene\")),c().createElement(\"td\",null,Hn(r.scene,1))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.total\")),c().createElement(\"td\",null,Hn(r.total,1))),1===i.length&&c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.element\"))),i.length>1&&c().createElement(c().Fragment,null,c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.selected\"))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.elements\")),c().createElement(\"td\",null,i.length))),i.length>0&&c().createElement(c().Fragment,null,c().createElement(\"tr\",null,c().createElement(\"td\",null,\"x\"),c().createElement(\"td\",null,Math.round(1===i.length?i[0].x:u[0]))),c().createElement(\"tr\",null,c().createElement(\"td\",null,\"y\"),c().createElement(\"td\",null,Math.round(1===i.length?i[0].y:u[1]))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.width\")),c().createElement(\"td\",null,Math.round(1===i.length?i[0].width:u[2]-u[0]))),c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.height\")),c().createElement(\"td\",null,Math.round(1===i.length?i[0].height:u[3]-u[1])))),1===i.length&&c().createElement(\"tr\",null,c().createElement(\"td\",null,C(\"stats.angle\")),c().createElement(\"td\",null,\"\".concat(Math.round(180*i[0].angle\/Math.PI),\"\u00b0\"))),c().createElement(\"tr\",null,c().createElement(\"th\",{colSpan:2},C(\"stats.version\"))),c().createElement(\"tr\",null,c().createElement(\"td\",{colSpan:2,style:{textAlign:\"center\",cursor:\"pointer\"},onClick:p()((function(){return Pp(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,au(Nn())];case 1:return t.sent(),e.setAppState({toastMessage:C(\"toast.copyToClipboard\")}),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}}))})),title:C(\"stats.versionCopy\")},f,c().createElement(\"br\",null),d))))))},Lp=(n(5849),function(e){var t=e.message,n=e.clearToast,r=(0,l.useRef)(0),a=(0,l.useCallback)((function(){return r.current=window.setTimeout((function(){return n()}),s.Lg)}),[n]);return(0,l.useEffect)((function(){return a(),function(){return clearTimeout(r.current)}}),[a,t]),c().createElement(\"div\",{className:\"Toast\",onMouseEnter:function(){return clearTimeout(null==r?void 0:r.current)},onMouseLeave:a},c().createElement(\"p\",{className:\"Toast__message\"},t))});function Dp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function jp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dp(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var zp=kl({name:\"viewMode\",perform:function(e,t){return Oc(\"view\",\"mode\",\"view\"),{appState:jp(jp({},t),{},{viewModeEnabled:!this.checked(t),selectedElementIds:{}}),commitToHistory:!1}},checked:function(e){return e.viewModeEnabled},contextItemLabel:\"labels.viewMode\",keyTest:function(e){return!e[Ft]&&e.altKey&&e.code===Dt}}),Bp=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Class extends value \"+String(n)+\" is not a constructor or null\");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Hp=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError(\"Generator is already executing.\");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=i.trys,(a=a.length>0&&a[a.length-1])||6!==o[0]&&2!==o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},Np=function(e,t){for(var n=0,r=t.length,a=e.length;n<r;n++,a++)e[a]=t[n];return e};function Rp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Rp(Object(n),!0).forEach((function(t){A()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Rp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Wp=new yd,Gp=!1,Vp=0,Kp=0,Up=0,Yp=!1,Xp=!1,Zp=!1,qp={horizontal:null,vertical:null},Qp=0,$p=!1,Jp=null,ef={pointers:new Map,lastCenter:null,initialDistance:null,initialScale:null},tf=function(e){function t(t){var n,r=this;r=e.call(this,t)||this,n=r,nf.call(r);var a,o,i,l,u=Rn(),d=t.width,p=void 0===d?window.innerWidth:d,f=t.height,h=void 0===f?window.innerHeight:f,m=t.offsetLeft,g=t.offsetTop,v=t.excalidrawRef,b=t.viewModeEnabled,y=void 0!==b&&b,w=t.zenModeEnabled,x=void 0!==w&&w,E=t.gridModeEnabled,k=void 0!==E&&E;if(r.state=Fp(Fp(Fp({},u),{},{isLoading:!0,width:p,height:h},r.getCanvasOffsets({offsetLeft:m,offsetTop:g})),{},{viewModeEnabled:y,zenModeEnabled:x,gridSize:k?s.k:null}),v){var S,O=\"current\"in v&&(null===(S=v.current)||void 0===S?void 0:S.readyPromise)||((i=new Promise((function(e,t){a=e,o=t}))).resolve=a,i.reject=o,i),M={ready:!0,readyPromise:O,updateScene:r.updateScene,resetScene:r.resetScene,getSceneElementsIncludingDeleted:r.getSceneElementsIncludingDeleted,history:{clear:r.resetHistory},setScrollToCenter:r.setScrollToCenter,getSceneElements:r.getSceneElements,getAppState:function(){return n.state}};\"function\"==typeof v?v(M):v.current=M,O.resolve(M)}return r.scene=new lr,r.actionManager=new dd(r.syncActionResult,(function(){return n.state}),(function(){return n.scene.getElementsIncludingDeleted()}),r),r.actionManager.registerAll(El),r.actionManager.registerAction((l=Wp,{name:\"undo\",perform:function(e,t){return ud(e,t,(function(){return l.undoOnce()}))},keyTest:function(e){return e[Ft]&&e.key.toLowerCase()===cn&&!e.shiftKey},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Bi,\"aria-label\":C(\"buttons.undo\"),onClick:t})},commitToHistory:function(){return!1}})),r.actionManager.registerAction(function(e){return{name:\"redo\",perform:function(t,n){return ud(t,n,(function(){return e.redoOnce()}))},keyTest:function(e){return e[Ft]&&e.shiftKey&&e.key.toLowerCase()===cn||ht&&e.ctrlKey&&!e.shiftKey&&e.key===ln},PanelComponent:function(e){var t=e.updateData;return c().createElement(wi,{type:\"button\",icon:Hi,\"aria-label\":C(\"buttons.redo\"),onClick:t})},commitToHistory:function(){return!1}}}(Wp)),r}return Bp(t,e),t.prototype.renderCanvas=function(){var e=window.devicePixelRatio,t=this.state,n=t.width,r=t.height,a=n*e,o=r*e;return t.viewModeEnabled?c().createElement(\"canvas\",{id:\"canvas\",style:{width:n,height:r,cursor:\"grabbing\"},width:a,height:o,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.removePointer,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,onPointerDown:this.handleCanvasPointerDown},C(\"labels.drawingCanvas\")):c().createElement(\"canvas\",{id:\"canvas\",style:{width:n,height:r},width:a,height:o,ref:this.handleCanvasRef,onContextMenu:this.handleCanvasContextMenu,onPointerDown:this.handleCanvasPointerDown,onDoubleClick:this.handleCanvasDoubleClick,onPointerMove:this.handleCanvasPointerMove,onPointerUp:this.removePointer,onPointerCancel:this.removePointer,onTouchMove:this.handleTouchMove,onDrop:this.handleCanvasOnDrop},C(\"labels.drawingCanvas\"))},t.prototype.render=function(){var e,t=this,n=this.state,r=n.zenModeEnabled,a=n.width,o=n.height,i=n.viewModeEnabled,l=this.props,s=l.onCollabButtonClick,u=l.onExportToBackend,d=l.renderFooter,p=a\/2,f=o\/2;return c().createElement(\"div\",{className:ze(\"excalidraw\",{\"excalidraw--view-mode\":i}),ref:this.excalidrawContainerRef,style:{width:a,height:o}},c().createElement(Sp,{canvas:this.canvas,appState:this.state,setAppState:this.setAppState,actionManager:this.actionManager,elements:this.scene.getElements(),onCollabButtonClick:s,onLockToggle:this.toggleLock,onInsertElements:function(e){return t.addElementsFromPasteOrLibrary(e,p,f)},zenModeEnabled:r,toggleZenMode:this.toggleZenMode,langCode:k().code,isCollaborating:this.props.isCollaborating||!1,onExportToBackend:u,renderCustomFooter:d,viewModeEnabled:i,showExitZenModeBtn:void 0===(null===(e=this.props)||void 0===e?void 0:e.zenModeEnabled)&&r}),c().createElement(\"div\",{className:\"excalidraw-textEditorContainer\"}),this.state.showStats&&c().createElement(_p,{appState:this.state,setAppState:this.setAppState,elements:this.scene.getElements(),onClose:this.toggleStats}),null!==this.state.toastMessage&&c().createElement(Lp,{message:this.state.toastMessage,clearToast:this.clearToast}),c().createElement(\"main\",null,this.renderCanvas()))},t.prototype.componentDidMount=function(){var e=this;return p()((function(){return Hp(this,(function(t){return\"production\"!==s.Vi.TEST&&\"production\"!==s.Vi.DEVELOPMENT||(e.setState.bind(e),Object.defineProperties(window.h,{state:{configurable:!0,get:function(){return e.state}},setState:{configurable:!0,value:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.setState.apply(e,t)}},app:{configurable:!0,value:e}})),e.scene.addCallback(e.onSceneUpdated),e.addEventListeners(),\"number\"==typeof e.props.offsetLeft&&\"number\"==typeof e.props.offsetTop?e.initializeScene():e.setState(e.getCanvasOffsets(e.props),(function(){e.initializeScene()})),[2]}))}))()},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.removeEventListeners(),this.scene.destroy(),clearTimeout(Qp),Qp=0},t.prototype.removeEventListeners=function(){document.removeEventListener(s.Ks.COPY,this.onCopy),document.removeEventListener(s.Ks.PASTE,this.pasteFromClipboard),document.removeEventListener(s.Ks.CUT,this.onCut),document.removeEventListener(s.Ks.KEYDOWN,this.onKeyDown,!1),document.removeEventListener(s.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition,!1),document.removeEventListener(s.Ks.KEYUP,this.onKeyUp),window.removeEventListener(s.Ks.RESIZE,this.onResize,!1),window.removeEventListener(s.Ks.UNLOAD,this.onUnload,!1),window.removeEventListener(s.Ks.BLUR,this.onBlur,!1),window.removeEventListener(s.Ks.DRAG_OVER,this.disableEvent,!1),window.removeEventListener(s.Ks.DROP,this.disableEvent,!1),document.removeEventListener(s.Ks.GESTURE_START,this.onGestureStart,!1),document.removeEventListener(s.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.removeEventListener(s.Ks.GESTURE_END,this.onGestureEnd,!1)},t.prototype.addEventListeners=function(){var e,t;this.removeEventListeners(),document.addEventListener(s.Ks.COPY,this.onCopy),document.addEventListener(s.Ks.KEYDOWN,this.onKeyDown,!1),document.addEventListener(s.Ks.KEYUP,this.onKeyUp,{passive:!0}),document.addEventListener(s.Ks.MOUSE_MOVE,this.updateCurrentCursorPosition),null===(e=document.fonts)||void 0===e||null===(t=e.addEventListener)||void 0===t||t.call(e,\"loadingdone\",this.onFontLoaded),document.addEventListener(s.Ks.GESTURE_START,this.onGestureStart,!1),document.addEventListener(s.Ks.GESTURE_CHANGE,this.onGestureChange,!1),document.addEventListener(s.Ks.GESTURE_END,this.onGestureEnd,!1),this.state.viewModeEnabled||(document.addEventListener(s.Ks.PASTE,this.pasteFromClipboard),document.addEventListener(s.Ks.CUT,this.onCut),document.addEventListener(s.Ks.SCROLL,this.onScroll),window.addEventListener(s.Ks.RESIZE,this.onResize,!1),window.addEventListener(s.Ks.UNLOAD,this.onUnload,!1),window.addEventListener(s.Ks.BLUR,this.onBlur,!1),window.addEventListener(s.Ks.DRAG_OVER,this.disableEvent,!1),window.addEventListener(s.Ks.DROP,this.disableEvent,!1))},t.prototype.componentDidUpdate=function(e,t){var n,r,a,o,i=this;(e.langCode!==this.props.langCode&&this.updateLanguage(),e.width!==this.props.width||e.height!==this.props.height||\"number\"==typeof this.props.offsetLeft&&e.offsetLeft!==this.props.offsetLeft||\"number\"==typeof this.props.offsetTop&&e.offsetTop!==this.props.offsetTop)&&this.setState(Fp({width:null!==(a=this.props.width)&&void 0!==a?a:window.innerWidth,height:null!==(o=this.props.height)&&void 0!==o?o:window.innerHeight},this.getCanvasOffsets(this.props)));e.viewModeEnabled!==this.props.viewModeEnabled&&this.setState({viewModeEnabled:!!this.props.viewModeEnabled},this.addEventListeners),t.viewModeEnabled!==this.state.viewModeEnabled&&this.addEventListeners(),e.zenModeEnabled!==this.props.zenModeEnabled&&this.setState({zenModeEnabled:!!this.props.zenModeEnabled}),e.gridModeEnabled!==this.props.gridModeEnabled&&this.setState({gridSize:this.props.gridModeEnabled?s.k:null}),null===(n=document.querySelector(\".excalidraw\"))||void 0===n||n.classList.toggle(\"Appearance_dark\",\"dark\"===this.state.appearance),this.state.editingLinearElement&&!this.state.selectedElementIds[this.state.editingLinearElement.elementId]&&setTimeout((function(){i.actionManager.executeAction(Cc)}));var l=t.multiElement;t.elementType!==this.state.elementType&&null!=l&&io(this.state)&&Re(l)&&po(l,this.state,this.scene,jn(ro.getPointAtIndexGlobalCoordinates(l,-1)));var c={},u={},d={},p={},f={};this.state.collaborators.forEach((function(e,t){if(e.selectedElementIds)for(var n=0,r=Object.keys(e.selectedElementIds);n<r.length;n++){var a=r[n];a in d||(d[a]=[]),d[a].push(t)}e.pointer&&(e.username&&(p[t]=e.username),e.userState&&(f[t]=e.userState),u[t]=An({sceneX:e.pointer.x,sceneY:e.pointer.y},i.state),c[t]=e.button)}));var h=this.scene.getElements(),m=Wc(h.filter((function(e){return!i.state.editingElement||\"text\"!==i.state.editingElement.type||e.id!==i.state.editingElement.id})),this.state,this.state.selectionElement,window.devicePixelRatio,this.rc,this.canvas,{scrollX:this.state.scrollX,scrollY:this.state.scrollY,viewBackgroundColor:this.state.viewBackgroundColor,zoom:this.state.zoom,remotePointerViewportCoords:u,remotePointerButton:c,remoteSelectedElementIds:d,remotePointerUsernames:p,remotePointerUserStates:f,shouldCacheIgnoreZoom:this.state.shouldCacheIgnoreZoom},{renderOptimizations:!0,renderScrollbars:!gc()}),g=m.atLeastOneVisibleElement,v=m.scrollBars;v&&(qp=v);var b,y,w=\"text\"!==(null===(r=this.state.editingElement)||void 0===r?void 0:r.type)&&(!g&&h.length>0);(this.state.scrolledOutside!==w&&this.setState({scrolledOutside:w}),Wp.record(this.state,this.scene.getElementsIncludingDeleted()),this.state.isLoading)||(null===(b=(y=this.props).onChange)||void 0===b||b.call(y,this.scene.getElementsIncludingDeleted(),this.state))},t.resetTapTwice=function(){Gp=!1},t.prototype.addTextFromPaste=function(e){var t,n=Pn({clientX:Kp,clientY:Up},this.state),r=n.x,a=n.y,o=zr({x:r,y:a,strokeColor:this.state.currentItemStrokeColor,backgroundColor:this.state.currentItemBackgroundColor,fillStyle:this.state.currentItemFillStyle,strokeWidth:this.state.currentItemStrokeWidth,strokeStyle:this.state.currentItemStrokeStyle,roughness:this.state.currentItemRoughness,opacity:this.state.currentItemOpacity,strokeSharpness:this.state.currentItemStrokeSharpness,text:e,fontSize:this.state.currentItemFontSize,fontFamily:this.state.currentItemFontFamily,textAlign:this.state.currentItemTextAlign,verticalAlign:s.hs});this.scene.replaceAllElements(Np(Np([],this.scene.getElementsIncludingDeleted()),[o])),this.setState({selectedElementIds:(t={},t[o.id]=!0,t)}),Wp.resumeRecording()},t.prototype.selectShapeTool=function(e){var t;Yp||Mn(this.canvas,e),(t=document.activeElement)instanceof HTMLElement&&t.className.includes(\"ToolIcon\")&&document.activeElement.blur(),Ne(e)||this.setState({suggestedBindings:[]}),\"selection\"!==e?this.setState({elementType:e,selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}):this.setState({elementType:e})},t.prototype.handleTextWysiwyg=function(e,t){var n=t.isExistingElement,r=void 0!==n&&n,a=this,o=function(t,n){void 0===n&&(n=!1),a.scene.replaceAllElements(Np([],a.scene.getElementsIncludingDeleted().map((function(r){return r.id===e.id&&Be(r)?Br(r,{text:t,isDeleted:n}):r}))))};!function(e){var t=e.id,n=e.appState,r=e.onChange,a=e.onSubmit,o=e.getViewportCoords,i=e.element,l=e.canvas,c=function(){var e,r=null===(e=lr.getScene(i))||void 0===e?void 0:e.getElement(t);if(r&&Be(r)){var a=o(r.x,r.y),l=a[0],c=a[1],s=r.textAlign,d=r.angle;u.value=r.text;var p=r.text.replace(\/\\r\\n?\/g,\"\\n\").split(\"\\n\"),f=r.height\/p.length,h=(n.offsetLeft+n.width-l-8)\/n.zoom.value-Number(getComputedStyle(document.querySelector(\".excalidraw\").parentNode).marginRight.slice(0,-2));Object.assign(u.style,{font:yn(r),lineHeight:\"\".concat(f,\"px\"),width:\"\".concat(r.width,\"px\"),height:\"\".concat(r.height,\"px\"),left:\"\".concat(l,\"px\"),top:\"\".concat(c,\"px\"),transform:Xo(r.width,r.height,d,n,h),textAlign:s,color:r.strokeColor,opacity:r.opacity\/100,filter:\"var(--appearance-filter)\",maxWidth:\"\".concat(h,\"px\")})}},u=document.createElement(\"textarea\");u.dir=\"auto\",u.tabIndex=0,u.dataset.type=\"wysiwyg\",u.wrap=\"off\",Object.assign(u.style,{position:\"absolute\",display:\"inline-block\",minHeight:\"1em\",backfaceVisibility:\"hidden\",margin:0,padding:0,border:0,outline:0,resize:\"none\",background:\"transparent\",overflow:\"hidden\",whiteSpace:\"pre\",zIndex:\"var(--zIndex-wysiwyg)\"}),c(),r&&(u.oninput=function(){r(Yo(u.value))}),u.onkeydown=function(e){if(e.key===Vt)e.preventDefault(),p();else if(e.key===Gt&&e[Ft]){if(e.preventDefault(),e.isComposing||229===e.keyCode)return;p()}else e.key!==Gt||e.altKey||e.stopPropagation()};var d=function(e){e.preventDefault(),e.stopPropagation()},p=function(){a(Yo(u.value)),f()},f=function(){v||(v=!0,u.onblur=null,u.oninput=null,u.onkeydown=null,b&&b.disconnect(),window.removeEventListener(\"resize\",c),window.removeEventListener(\"wheel\",d,!0),window.removeEventListener(\"pointerdown\",m),window.removeEventListener(\"pointerup\",h),window.removeEventListener(\"blur\",p),g(),u.remove())},h=function(){window.removeEventListener(\"pointerup\",h),setTimeout((function(){u.onblur=p,u.focus()}))},m=function(e){e.target instanceof HTMLElement&&e.target.closest(\".\".concat(s.$C.SHAPE_ACTIONS_MENU))&&!vn(e.target)&&(u.onblur=null,window.addEventListener(\"pointerup\",h),window.addEventListener(\"blur\",p))},g=lr.getScene(i).addCallback((function(){c(),u.focus()})),v=!1;u.onblur=p;var b=null;l&&\"ResizeObserver\"in window?(b=new window.ResizeObserver((function(){c()}))).observe(l):window.addEventListener(\"resize\",c),window.addEventListener(\"pointerdown\",m),window.addEventListener(\"wheel\",d,{passive:!1,capture:!0}),document.querySelector(\".excalidraw-textEditorContainer\").appendChild(u),u.focus(),u.select()}({id:e.id,appState:this.state,canvas:this.canvas,getViewportCoords:function(e,t){var n=An({sceneX:e,sceneY:t},a.state),r=n.x,o=n.y;return[r-a.state.offsetLeft,o-a.state.offsetTop]},onChange:Bn((function(t){o(t),ri(e)&&wo(e)})),onSubmit:Bn((function(t){var n=!t.trim();o(t,n),n?_o(a.scene.getElements(),[e]):a.setState((function(t){var n;return{selectedElementIds:Fp(Fp({},t.selectedElementIds),{},(n={},n[e.id]=!0,n))}})),n&&!r||Wp.resumeRecording(),a.setState({draggingElement:null,editingElement:null}),a.state.elementLocked&&Mn(a.canvas,a.state.elementType)})),element:e}),this.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}),o(e.text)},t.prototype.getTextElementAtPosition=function(e,t){var n=this.getElementAtPosition(e,t);return n&&Be(n)&&!n.isDeleted?n:null},t.prototype.getElementAtPosition=function(e,t){var n=this.getElementsAtPosition(e,t);if(n.length>1){var r=n[n.length-1];return ba(r,this.state,e,t)?n[n.length-2]:r}return 1===n.length?n[0]:null},t.prototype.getElementsAtPosition=function(e,t){var n,r,a=this;return n=this.scene.getElements(),r=function(n){return function(e,t,n,r){var a=10\/t.zoom.value,o=[n,r];return wa(t,e)?xa(e,o,a):ya(e,t,o)}(n,a.state,e,t)},n.filter((function(e){return!e.isDeleted&&r(e)}))},t.prototype.maybeCleanupAfterMissingPointerUp=function(e){null!==Jp&&Jp(e)},t.prototype.updateGestureOnPointerDown=function(e){ef.pointers.set(e.pointerId,{x:e.clientX,y:e.clientY}),2===ef.pointers.size&&(ef.lastCenter=pd(ef.pointers),ef.initialScale=this.state.zoom.value,ef.initialDistance=fd(Array.from(ef.pointers.values())))},t.prototype.initialPointerDownState=function(e){var t=Pn(e,this.state),n=ci(this.scene.getElements(),this.state),r=ot(n),a=r[0],o=r[1],i=r[2],l=r[3];return{origin:t,originInGrid:jn($e(t.x,t.y,this.state.gridSize)),scrollbars:ii(qp,e.clientX-this.state.offsetLeft,e.clientY-this.state.offsetTop),lastCoords:Fp({},t),originalElements:this.scene.getElements().reduce((function(e,t){return e.set(t.id,Nr(t)),e}),new Map),resize:{handleType:!1,isResizing:!1,offset:{x:0,y:0},arrowDirection:\"origin\",center:{x:(i+a)\/2,y:(l+o)\/2}},hit:{element:null,allHitElements:[],wasAddedToSelection:!1,hasBeenDuplicated:!1,hasHitCommonBoundingBoxOfSelectedElements:this.isHittingCommonBoundingBoxOfSelectedElements(t,n)},drag:{hasOccurred:!1,offset:null},eventListeners:{onMove:null,onUp:null,onKeyUp:null,onKeyDown:null}}},t.prototype.handleDraggingScrollBar=function(e,t){var n=this;if(!t.scrollbars.isOverEither||this.state.multiElement)return!1;Zp=!0,t.lastCoords.x=e.clientX,t.lastCoords.y=e.clientY;var r=Bn((function(e){e.target instanceof HTMLElement&&n.handlePointerMoveOverScrollbars(e,t)})),a=Bn((function(){Zp=!1,Mn(n.canvas,n.state.elementType),Jp=null,n.setState({cursorButton:\"up\"}),n.savePointer(e.clientX,e.clientY,\"up\"),window.removeEventListener(s.Ks.POINTER_MOVE,r),window.removeEventListener(s.Ks.POINTER_UP,a)}));return Jp=a,window.addEventListener(s.Ks.POINTER_MOVE,r),window.addEventListener(s.Ks.POINTER_UP,a),!0},t.prototype.isASelectedElement=function(e){return null!=e&&this.state.selectedElementIds[e.id]},t.prototype.isHittingCommonBoundingBoxOfSelectedElements=function(e,t){if(t.length<2)return!1;var n=10\/this.state.zoom.value,r=ot(t),a=r[0],o=r[1],i=r[2],l=r[3];return e.x>a-n&&e.x<i+n&&e.y>o-n&&e.y<l+n},t.prototype.onKeyDownFromPointerDownHandler=function(e){var t=this;return Bn((function(n){t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))},t.prototype.onKeyUpFromPointerDownHandler=function(e){var t=this;return Bn((function(n){n.key===Rt&&n.preventDefault(),t.maybeHandleResize(e,n)||t.maybeDragNewGenericElement(e,n)}))},t.prototype.onPointerMoveFromPointerDownHandler=function(e){var t=this;return Bn((function(n){var r;if(null===e.drag.offset&&(e.drag.offset=jn(function(e,t,n){var r=ot(e);return[t-r[0],n-r[1]]}(ci(t.scene.getElements(),t.state),e.origin.x,e.origin.y))),n.target instanceof HTMLElement&&!t.handlePointerMoveOverScrollbars(n,e)){var a=Pn(n,t.state),o=$e(a.x,a.y,t.state.gridSize),i=o[0],l=o[1];if(e.drag.hasOccurred||\"arrow\"!==t.state.elementType&&\"line\"!==t.state.elementType||!(Ue(a.x,a.y,e.origin.x,e.origin.y)<s.f)){if(e.resize.isResizing&&(e.lastCoords.x=a.x,e.lastCoords.y=a.y,t.maybeHandleResize(e,n)))return!0;if(t.state.editingLinearElement)if(ro.handlePointDragging(t.state,(function(e){return t.setState(e)}),a.x,a.y,(function(e,n){t.maybeSuggestBindingForLinearElementAtCursor(e,n,a)})))return e.lastCoords.x=a.x,void(e.lastCoords.y=a.y);if(e.hit.allHitElements.some((function(e){return t.isASelectedElement(e)}))||e.hit.hasHitCommonBoundingBoxOfSelectedElements){e.drag.hasOccurred=!0;var c=ci(t.scene.getElements(),t.state);if(c.length>0){var u=$e(a.x-e.drag.offset.x,a.y-e.drag.offset.y,t.state.gridSize),d=u[0],p=u[1],f=[Math.abs(a.x-e.origin.x),Math.abs(a.y-e.origin.y)],h=f[0],m=f[1],g=n.shiftKey;if(function(e,t,n,r,a,o,i,l){void 0===o&&(o=!1),void 0===i&&(i=0),void 0===l&&(l=0);var c=ot(t),s=c[0],u=c[1],d=n-s,p=r-u;t.forEach((function(n){var r,a;if(o){var c=o&&i<l,s=o&&i>l,u=e.originalElements.get(n.id);r=c&&u?u.x:n.x+d,a=s&&u?u.y:n.y+p}else r=n.x+d,a=n.y+p;fr(n,{x:r,y:a}),wo(n,{simultaneouslyUpdated:t})}))}(e,c,d,p,t.scene,g,h,m),t.maybeSuggestBindingForAll(c),n.altKey&&!e.hit.hasBeenDuplicated){e.hit.hasBeenDuplicated=!0;for(var v=[],b=[],y=new Map,w=new Map,x=e.hit.element,E=0,k=t.scene.getElementsIncludingDeleted();E<k.length;E++){var S=k[E];if(t.state.selectedElementIds[S.id]||S.id===(null==x?void 0:x.id)&&e.hit.wasAddedToSelection){var C=Rr(t.state.editingGroupId,y,S),O=$e(e.origin.x-e.drag.offset.x,e.origin.y-e.drag.offset.y,t.state.gridSize),M=O[0],T=O[1];fr(C,{x:C.x+(M-d),y:C.y+(T-p)}),v.push(C),b.push(S),w.set(S.id,C.id)}else v.push(S)}var I=Np(Np([],v),b);Po(I,b,w,\"duplicatesServeAsOld\"),t.scene.replaceAllElements(I)}return}}var P=t.state.draggingElement;if(P){if(He(P)){e.drag.hasOccurred=!0;var A=P.points,_=void 0,L=void 0;\"draw\"===P.type?(_=a.x-P.x,L=a.y-P.y):(_=i-P.x,L=l-P.y),pn(n)&&2===A.length&&(_=(r=gr(t.state.elementType,_,L)).width,L=r.height),1===A.length?fr(P,{points:Np(Np([],A),[[_,L]])}):A.length>1&&(\"draw\"===P.type?fr(P,{points:z(Np(Np([],A),[[_,L]]),.7\/t.state.zoom.value)}):fr(P,{points:Np(Np([],A.slice(0,-1)),[[_,L]])})),Re(P)&&t.maybeSuggestBindingForLinearElementAtCursor(P,\"end\",a,t.state.startBoundElement)}else e.lastCoords.x=a.x,e.lastCoords.y=a.y,t.maybeDragNewGenericElement(e,n);if(\"selection\"===t.state.elementType){var D=t.scene.getElements();!n.shiftKey&&li(D,t.state)&&t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null});var j=function(e,t){var n=et(t),r=n[0],a=n[1],o=n[2],i=n[3];return e.filter((function(e){var t=at(e),n=t[0],l=t[1],c=t[2],s=t[3];return\"selection\"!==e.type&&r<=n&&a<=l&&o>=c&&i>=s}))}(D,P);t.setState((function(e){return Mr(Fp(Fp({},e),{},{selectedElementIds:Fp(Fp({},e.selectedElementIds),j.reduce((function(e,t){return e[t.id]=!0,e}),{}))}),t.scene.getElements())}))}}}}}))},t.prototype.handlePointerMoveOverScrollbars=function(e,t){if(t.scrollbars.isOverHorizontal){var n=e.clientX,r=n-t.lastCoords.x;return this.setState({scrollX:this.state.scrollX-r\/this.state.zoom.value}),t.lastCoords.x=n,!0}if(t.scrollbars.isOverVertical){var a=e.clientY,o=a-t.lastCoords.y;return this.setState({scrollY:this.state.scrollY-o\/this.state.zoom.value}),t.lastCoords.y=a,!0}return!1},t.prototype.onPointerUpFromPointerDownHandler=function(e){var t=this;return Bn((function(n){var r=t.state,a=r.draggingElement,o=r.resizingElement,i=r.multiElement,l=r.elementType,c=r.elementLocked,u=r.isResizing,d=r.isRotating;if(t.setState({isResizing:!1,isRotating:!1,resizingElement:null,selectionElement:null,cursorButton:\"up\",editingElement:i||Be(t.state.editingElement)?t.state.editingElement:null}),t.savePointer(n.clientX,n.clientY,\"up\"),t.state.editingLinearElement){var p=ro.handlePointerUp(n,t.state.editingLinearElement,t.state);p!==t.state.editingLinearElement&&t.setState({editingLinearElement:p,suggestedBindings:[]})}if(Jp=null,window.removeEventListener(s.Ks.POINTER_MOVE,e.eventListeners.onMove),window.removeEventListener(s.Ks.POINTER_UP,e.eventListeners.onUp),window.removeEventListener(s.Ks.KEYDOWN,e.eventListeners.onKeyDown),window.removeEventListener(s.Ks.KEYUP,e.eventListeners.onKeyUp),\"draw\"!==(null==a?void 0:a.type))if(He(a)){a.points.length>1&&Wp.resumeRecording();var f=Pn(n,t.state);e.drag.hasOccurred||!a||i?e.drag.hasOccurred&&!i&&(io(t.state)&&Re(a)&&po(a,t.state,t.scene,f),t.setState({suggestedBindings:[],startBoundElement:null}),c||\"draw\"===l?t.setState((function(e){var n;return{draggingElement:null,selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(n={},n[t.state.draggingElement.id]=!0,n))}})):(Cn(t.canvas),t.setState((function(e){var n;return{draggingElement:null,elementType:\"selection\",selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(n={},n[t.state.draggingElement.id]=!0,n))}})))):(fr(a,{points:Np(Np([],a.points),[[f.x-a.x,f.y-a.y]])}),t.setState({multiElement:a,editingElement:t.state.draggingElement}))}else{if(\"selection\"!==l&&a&&mr(a))return t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().slice(0,-1)),void t.setState({draggingElement:null});a&&fr(a,vr(a)),o&&Wp.resumeRecording(),o&&mr(o)&&t.scene.replaceAllElements(t.scene.getElementsIncludingDeleted().filter((function(e){return e.id!==o.id})));var h=e.hit.element;if(h&&!e.drag.hasOccurred&&!e.hit.wasAddedToSelection)if(n.shiftKey)if(t.state.selectedElementIds[h.id])if(Sr(t.state,h)){var m=h.groupIds.flatMap((function(e){return Ir(t.scene.getElements(),e)})).map((function(e){var t;return(t={})[e.id]=!1,t})).reduce((function(e,t){return Fp(Fp({},e),t)}),{});t.setState((function(e){return{selectedGroupIds:Fp(Fp({},e.selectedElementIds),h.groupIds.map((function(e){var t;return(t={})[e]=!1,t})).reduce((function(e,t){return Fp(Fp({},e),t)}),{})),selectedElementIds:Fp(Fp({},e.selectedElementIds),m)}}))}else t.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[h.id]=!1,t))}}));else t.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[h.id]=!0,t))}}));else t.setState((function(e){var n;return Fp({},Mr(Fp(Fp({},e),{},{selectedElementIds:(n={},n[h.id]=!0,n)}),t.scene.getElements()))}));t.state.editingLinearElement||e.drag.hasOccurred||t.state.isResizing||!(h&&ba(h,t.state,e.origin.x,e.origin.y)||!h&&e.hit.hasHitCommonBoundingBoxOfSelectedElements)?(!c&&\"draw\"!==l&&a&&t.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[a.id]=!0,t))}})),(\"selection\"!==l||li(t.scene.getElements(),t.state))&&Wp.resumeRecording(),(e.drag.hasOccurred||u||d)&&(io(t.state)?so:go)(ci(t.scene.getElements(),t.state)),c||\"draw\"===l?t.setState({draggingElement:null,suggestedBindings:[]}):(Cn(t.canvas),t.setState({draggingElement:null,suggestedBindings:[],elementType:\"selection\"}))):t.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})}else t.actionManager.executeAction(Cc)}))},t.prototype.maybeSuggestBindingForAll=function(e){var t,n,r=(t=e,n=new Set(t.map((function(e){return e.id}))),t.flatMap((function(e){return Re(e)?Co(e).filter((function(e){return!n.has(e.id)})):We(e)?To(e).filter((function(e){return!n.has(e[0].id)})):[]})));this.setState({suggestedBindings:r})},t.prototype.clearSelection=function(e){this.setState((function(t){return{selectedElementIds:{},selectedGroupIds:{},editingGroupId:t.editingGroupId&&null!=e&&Tr(e,t.editingGroupId)?t.editingGroupId:null}})),this.setState({selectedElementIds:{},previousSelectedElementIds:this.state.selectedElementIds})},t.prototype.getTextWysiwygSnappedToCenterPosition=function(e,t,n,r,a){var o=function(e,t,n){for(var r=null,a=e.length-1;a>=0;--a)if(!e[a].isDeleted){var o=et(e[a]),i=o[0],l=o[1],c=o[2],s=o[3];if(i<t&&t<c&&l<n&&n<s){r=e[a];break}}return r}(this.scene.getElementsIncludingDeleted().filter((function(e){return!Be(e)})),e,t);if(o){var i=o.x+o.width\/2,l=o.y+o.height\/2;if(Math.hypot(e-i,t-l)<s.wZ){var c=An({sceneX:i,sceneY:l},n);return{viewportX:c.x,viewportY:c.y,elementCenterX:i,elementCenterY:l}}}},t.prototype.getCanvasOffsets=function(e){var t,n;if(\"number\"==typeof(null==e?void 0:e.offsetLeft)&&\"number\"==typeof(null==e?void 0:e.offsetTop))return{offsetLeft:e.offsetLeft,offsetTop:e.offsetTop};if(null!==(t=this.excalidrawContainerRef)&&void 0!==t&&null!==(n=t.current)&&void 0!==n&&n.parentElement){var r=this.excalidrawContainerRef.current.parentElement.getBoundingClientRect(),a=r.left,o=r.top;return{offsetLeft:\"number\"==typeof(null==e?void 0:e.offsetLeft)?e.offsetLeft:a,offsetTop:\"number\"==typeof(null==e?void 0:e.offsetTop)?e.offsetTop:o}}return{offsetLeft:\"number\"==typeof(null==e?void 0:e.offsetLeft)?e.offsetLeft:0,offsetTop:\"number\"==typeof(null==e?void 0:e.offsetTop)?e.offsetTop:0}},t.prototype.updateLanguage=function(){var e=this;return p()((function(){var t;return Hp(this,(function(n){switch(n.label){case 0:return t=v.find((function(t){return t.code===e.props.langCode}))||g,[4,E(t)];case 1:return n.sent(),e.setAppState({}),[2]}}))}))()},t}(c().Component);tf.defaultProps={width:window.innerWidth,height:window.innerHeight};var nf=function(){var e=this;this.canvas=null,this.rc=null,this.unmounted=!1,this.excalidrawContainerRef=c().createRef(),this.getSceneElementsIncludingDeleted=function(){return e.scene.getElementsIncludingDeleted()},this.getSceneElements=function(){return e.scene.getElements()},this.syncActionResult=Bn((function(t){if(!e.unmounted&&!1!==t){var n=null;if(t.elements&&(t.elements.forEach((function(t){var r;(null===(r=e.state.editingElement)||void 0===r?void 0:r.id)===t.id&&e.state.editingElement!==t&&ri(t)&&(n=t)})),e.scene.replaceAllElements(t.elements),t.commitToHistory&&Wp.resumeRecording()),t.appState||n){var r,a,o;t.commitToHistory&&Wp.resumeRecording();var i=(null==t||null===(r=t.appState)||void 0===r?void 0:r.viewModeEnabled)||!1,l=(null==t||null===(a=t.appState)||void 0===a?void 0:a.zenModeEnabled)||!1,c=(null==t||null===(o=t.appState)||void 0===o?void 0:o.gridSize)||null;void 0!==e.props.viewModeEnabled&&(i=e.props.viewModeEnabled),void 0!==e.props.zenModeEnabled&&(l=e.props.zenModeEnabled),void 0!==e.props.gridModeEnabled&&(c=e.props.gridModeEnabled?s.k:null),e.setState((function(e){var r;return Object.assign(t.appState||{},{editingElement:n||(null===(r=t.appState)||void 0===r?void 0:r.editingElement)||null,width:e.width,height:e.height,offsetTop:e.offsetTop,offsetLeft:e.offsetLeft,viewModeEnabled:i,zenModeEnabled:l,gridSize:c})}),(function(){t.syncHistory&&Wp.setCurrentState(e.state,e.scene.getElementsIncludingDeleted())}))}}})),this.onBlur=Bn((function(){Yp=!1,e.setState({isBindingEnabled:!0})})),this.onUnload=function(){e.onBlur()},this.disableEvent=function(e){e.preventDefault()},this.onFontLoaded=function(){e.scene.getElementsIncludingDeleted().forEach((function(e){Be(e)&&er(e)})),e.onSceneUpdated()},this.importLibraryFromUrl=function(){var t=p()((function(t){var n,r,a,o,i;return Hp(this,(function(l){switch(l.label){case 0:window.history.replaceState({},s.iC,window.location.origin),l.label=1;case 1:return l.trys.push([1,7,,8]),[4,fetch(t)];case 2:return[4,l.sent().blob()];case 3:return n=l.sent(),o=(a=JSON).parse,[4,n.text()];case 4:if(!function(e){return\"object\"==typeof e&&e&&\"excalidrawlib\"===e.type&&1===e.version}(r=o.apply(a,[l.sent()])))throw new Error;return window.confirm(C(\"alerts.confirmAddLibrary\",{numShapes:r.library.length}))?[4,Ps.importLibrary(n)]:[3,6];case 5:l.sent(),e.setState({isLibraryOpen:!0}),l.label=6;case 6:return[3,8];case 7:return i=l.sent(),window.alert(C(\"alerts.errorLoadingLibrary\")),console.error(i),[3,8];case 8:return[2]}}))}));return function(e){return t.apply(this,arguments)}}(),this.resetHistory=function(){Wp.clear()},this.resetScene=Bn((function(t){e.scene.replaceAllElements([]),e.setState((function(n){return Fp(Fp({},Rn()),{},{isLoading:(null==t||!t.resetLoadingState)&&n.isLoading,appearance:e.state.appearance})})),e.resetHistory()})),this.initializeScene=p()((function(){var t,n,r,a,o;return Hp(this,(function(i){switch(i.label){case 0:\"launchQueue\"in window&&\"LaunchParams\"in window&&window.launchQueue.setConsumer(function(){var t=p()((function(t){var n,r;return Hp(this,(function(a){switch(a.label){case 0:return t.files.length?[4,(n=t.files[0]).getFile()]:[2];case 1:return(r=a.sent()).handle=n,Ws(r,e.state).then((function(t){var n=t.elements,r=t.appState;return e.syncActionResult({elements:n,appState:Fp(Fp({},r||e.state),{},{isLoading:!1}),commitToHistory:!0})})).catch((function(t){e.setState({isLoading:!1,errorMessage:t.message})})),[2]}}))}));return function(e){return t.apply(this,arguments)}}()),e.state.isLoading||e.setState({isLoading:!0}),n=null,i.label=1;case 1:return i.trys.push([1,3,,4]),[4,e.props.initialData];case 2:return n=i.sent()||null,[3,4];case 3:return r=i.sent(),console.error(r),[3,4];case 4:return(a=Ms(n,null)).appState=Fp(Fp({},a.appState),{},{isLoading:!1}),null!==(t=n)&&void 0!==t&&t.scrollToCenter&&(a.appState=Fp(Fp({},a.appState),di(a.elements,Fp(Fp({},a.appState),{},{width:e.state.width,height:e.state.height,offsetTop:e.state.offsetTop,offsetLeft:e.state.offsetLeft})))),e.resetHistory(),e.syncActionResult(Fp(Fp({},a),{},{commitToHistory:!0})),(o=new URLSearchParams(window.location.search).get(\"addLibrary\"))?[4,e.importLibraryFromUrl(o)]:[3,6];case 5:i.sent(),i.label=6;case 6:return[2]}}))})),this.onResize=Bn((function(){e.scene.getElementsIncludingDeleted().forEach((function(e){return er(e)})),e.setState({})})),this.onScroll=xn((function(){var t=e.getCanvasOffsets(),n=t.offsetTop,r=t.offsetLeft;e.setState((function(e){return e.offsetLeft===r&&e.offsetTop===n?null:{offsetTop:n,offsetLeft:r}}))}),s.HM),this.onCut=Bn((function(t){vn(t.target)||(e.cutAll(),t.preventDefault())})),this.onCopy=Bn((function(t){var n=document.getSelection();null!=n&&n.anchorNode&&!e.excalidrawContainerRef.current.contains(n.anchorNode)||vn(t.target)||(e.copyAll(),t.preventDefault())})),this.cutAll=function(){e.copyAll(),e.actionManager.executeAction(Ml)},this.copyAll=function(){$s(e.scene.getElements(),e.state)},this.onTapStart=function(t){if(!Gp)return Gp=!0,clearTimeout(Vp),void(Vp=window.setTimeout(tf.resetTapTwice,s.Gj));if(Gp&&1===t.touches.length){var n=t.touches[0];e.handleCanvasDoubleClick({clientX:n.clientX,clientY:n.clientY}),Gp=!1,clearTimeout(Vp)}t.preventDefault(),2===t.touches.length&&e.setState({selectedElementIds:{}})},this.onTapEnd=function(t){t.preventDefault(),t.touches.length>0&&e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds})},this.pasteFromClipboard=Bn(function(){var t=p()((function(t){var n,r,a;return Hp(this,(function(o){switch(o.label){case 0:return n=document.activeElement,r=document.elementFromPoint(Kp,Up),!t||r instanceof HTMLCanvasElement&&!vn(n)?[4,nu(t)]:[2];case 1:return(a=o.sent()).errorMessage?e.setState({errorMessage:a.errorMessage}):a.spreadsheet?e.setState({pasteDialog:{data:a.spreadsheet,shown:!0}}):a.elements?e.addElementsFromPasteOrLibrary(a.elements):a.text&&e.addTextFromPaste(a.text),e.selectShapeTool(\"selection\"),null==t||t.preventDefault(),[2]}}))}));return function(e){return t.apply(this,arguments)}}()),this.addElementsFromPasteOrLibrary=function(t,n,r){void 0===n&&(n=Kp),void 0===r&&(r=Up);var a=ot(t),o=a[0],i=a[1],l=a[2],c=a[3],s=Sn(o,l)\/2,u=Sn(i,c)\/2,d=Pn({clientX:n,clientY:r},e.state),p=d.x-s,f=d.y-u,h=new Map,m=$e(p,f,e.state.gridSize),g=m[0],v=m[1],b=new Map,y=t.map((function(t){var n=Rr(e.state.editingGroupId,h,t,{x:t.x+g-o,y:t.y+v-i});return b.set(t.id,n.id),n})),w=Np(Np([],e.scene.getElementsIncludingDeleted()),y);Po(w,t,b),e.scene.replaceAllElements(w),Wp.resumeRecording(),e.setState(Mr(Fp(Fp({},e.state),{},{isLibraryOpen:!1,selectedElementIds:y.reduce((function(e,t){return e[t.id]=!0,e}),{}),selectedGroupIds:{}}),e.scene.getElements()))},this.setAppState=function(t){e.setState(t)},this.removePointer=function(e){\"touch\"===e.pointerType&&Qp&&(clearTimeout(Qp),Qp=0,$p=!1),ef.pointers.delete(e.pointerId)},this.toggleLock=function(){e.setState((function(e){return{elementLocked:!e.elementLocked,elementType:e.elementLocked?\"selection\":e.elementType}}))},this.toggleZenMode=function(){e.actionManager.executeAction(ad)},this.toggleStats=function(){e.state.showStats||Oc(\"dialog\",\"stats\"),e.actionManager.executeAction(ld)},this.setScrollToCenter=function(t){e.setState(Fp({},di(ni(t),e.state,e.canvas)))},this.clearToast=function(){e.setState({toastMessage:null})},this.updateScene=Bn((function(t){var n;t.commitToHistory&&Wp.resumeRecording(),null!==(n=t.appState)&&void 0!==n&&n.viewBackgroundColor&&e.setState({viewBackgroundColor:t.appState.viewBackgroundColor}),t.elements&&e.scene.replaceAllElements(t.elements),t.collaborators&&e.setState({collaborators:t.collaborators})})),this.onSceneUpdated=function(){e.setState({})},this.updateCurrentCursorPosition=Bn((function(e){Kp=e.x,Up=e.y})),this.onKeyDown=Bn((function(t){var n;if((\"Proxy\"in window&&(!t.shiftKey&&\/^[A-Z]$\/.test(t.key)||t.shiftKey&&\/^[a-z]$\/.test(t.key))&&(t=new Proxy(t,{get:function(e,n){var r=e[n];return\"function\"==typeof r?r.bind(e):\"key\"===n?t.shiftKey?e.key.toUpperCase():e.key.toLowerCase():r}})),!(vn(t.target)&&t.key!==Vt||sn(t.key)&&(n=t.target,n instanceof HTMLElement&&\"wysiwyg\"===n.dataset.type||n instanceof HTMLBRElement||n instanceof HTMLInputElement||n instanceof HTMLTextAreaElement||n instanceof HTMLSelectElement)))&&(t.key===Kt&&e.setState({showHelpDialog:!0}),!e.actionManager.handleKeyDown(t)&&!e.state.viewModeEnabled)){if(t[Ft]&&e.setState({isBindingEnabled:!1}),t.code===St&&e.setState({isLibraryOpen:!e.state.isLibraryOpen}),sn(t.key)){var r=e.state.gridSize&&(t.shiftKey?s.$e:e.state.gridSize)||(t.shiftKey?s.Iw:s.$e),a=e.scene.getElements().filter((function(t){return e.state.selectedElementIds[t.id]})),o=0,i=0;t.key===zt?o=-r:t.key===Bt?o=r:t.key===Ht?i=-r:t.key===jt&&(i=r),a.forEach((function(e){fr(e,{x:e.x+o,y:e.y+i}),wo(e,{simultaneouslyUpdated:a})})),e.maybeSuggestBindingForAll(a),t.preventDefault()}else if(t.key===Gt){var l=ci(e.scene.getElements(),e.state);if(1===l.length&&He(l[0]))e.state.editingLinearElement&&e.state.editingLinearElement.elementId===l[0].id||(Wp.resumeRecording(),e.setState({editingLinearElement:new ro(l[0],e.scene)}));else if(1===l.length&&!He(l[0])){var c=l[0];return e.startTextEditing({sceneX:c.x+c.width\/2,sceneY:c.y+c.height\/2}),void t.preventDefault()}}else if(!t.ctrlKey&&!t.altKey&&!t.metaKey&&null===e.state.draggingElement){var u=function(e){var t=wd.find((function(t,n){return e===(n+1).toString()||(\"string\"==typeof t.key?t.key===e:t.key.includes(e))}));return(null==t?void 0:t.value)||null}(t.key);u?e.selectShapeTool(u):t.key===en&&e.toggleLock()}t.key===Ut&&0===ef.pointers.size&&(Yp=!0,On(e.canvas,s.oc.GRABBING))}})),this.onKeyUp=Bn((function(t){if(t.key===Ut&&(\"selection\"===e.state.elementType?Cn(e.canvas):(Mn(e.canvas,e.state.elementType),e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})),Yp=!1),t[Ft]||e.state.isBindingEnabled||e.setState({isBindingEnabled:!0}),sn(t.key)){var n=ci(e.scene.getElements(),e.state);io(e.state)?so(n):go(n),e.setState({suggestedBindings:[]})}})),this.onGestureStart=Bn((function(t){t.preventDefault(),e.setState({selectedElementIds:{}}),ef.initialScale=e.state.zoom.value})),this.onGestureChange=Bn((function(t){if(t.preventDefault(),2!==ef.pointers.size){var n=ef.initialScale;n&&e.setState((function(e){var r=e.zoom,a=e.offsetLeft,o=e.offsetTop;return{zoom:bi(yi(n*t.scale),r,{left:a,top:o},{x:Kp,y:Up})}}))}})),this.onGestureEnd=Bn((function(t){t.preventDefault(),e.setState({previousSelectedElementIds:{},selectedElementIds:e.state.previousSelectedElementIds}),ef.initialScale=null})),this.startTextEditing=function(t){var n=t.sceneX,r=t.sceneY,a=t.insertAtParentCenter,o=void 0===a||a,i=e.getTextElementAtPosition(n,r),l=o&&e.getTextWysiwygSnappedToCenterPosition(n,r,e.state,e.canvas,window.devicePixelRatio),c=i||zr({x:l?l.elementCenterX:n,y:l?l.elementCenterY:r,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemStrokeSharpness,text:\"\",fontSize:e.state.currentItemFontSize,fontFamily:e.state.currentItemFontFamily,textAlign:l?\"center\":e.state.currentItemTextAlign,verticalAlign:l?\"middle\":s.hs});e.setState({editingElement:c}),i?l&&\"center\"===c.textAlign||fr(c,{verticalAlign:s.hs}):(e.scene.replaceAllElements(Np(Np([],e.scene.getElementsIncludingDeleted()),[c])),l||fr(c,{y:c.y-c.baseline\/2})),e.setState({editingElement:c}),e.handleTextWysiwyg(c,{isExistingElement:!!i})},this.handleCanvasDoubleClick=function(t){if(!e.state.multiElement&&\"selection\"===e.state.elementType){var n=ci(e.scene.getElements(),e.state);if(1===n.length&&He(n[0]))e.state.editingLinearElement&&e.state.editingLinearElement.elementId===n[0].id||(Wp.resumeRecording(),e.setState({editingLinearElement:new ro(n[0],e.scene)}));else{Cn(e.canvas);var r=Pn(t,e.state),a=r.x,o=r.y;if(Or(e.state).length>0){var i=e.getElementAtPosition(a,o),l=i&&function(e,t){return e.groupIds.find((function(e){return t[e]}))}(i,e.state.selectedGroupIds);if(l)return void e.setState((function(t){var n;return Mr(Fp(Fp({},t),{},{editingGroupId:l,selectedElementIds:(n={},n[i.id]=!0,n),selectedGroupIds:{}}),e.scene.getElements())}))}Cn(e.canvas),t[Ft]||e.startTextEditing({sceneX:a,sceneY:o,insertAtParentCenter:!t.altKey})}}},this.handleCanvasPointerMove=function(t){e.savePointer(t.clientX,t.clientY,e.state.cursorButton),ef.pointers.has(t.pointerId)&&ef.pointers.set(t.pointerId,{x:t.clientX,y:t.clientY});var n=ef.initialScale;if(2===ef.pointers.size&&ef.lastCenter&&n&&ef.initialDistance){var r=pd(ef.pointers),a=r.x-ef.lastCenter.x,o=r.y-ef.lastCenter.y;ef.lastCenter=r;var i=fd(Array.from(ef.pointers.values()))\/ef.initialDistance;e.setState((function(e){var t=e.zoom,l=e.scrollX,c=e.scrollY,s=e.offsetLeft,u=e.offsetTop;return{scrollX:l+a\/t.value,scrollY:c+o\/t.value,zoom:bi(yi(n*i),t,{left:s,top:u},r),shouldCacheIgnoreZoom:!0}})),e.resetShouldCacheIgnoreZoomDebounced()}else ef.lastCenter=ef.initialDistance=ef.initialScale=null;if(!(Yp||Xp||Zp)){var l=ii(qp,t.clientX-e.state.offsetLeft,t.clientY-e.state.offsetTop).isOverEither;e.state.draggingElement||e.state.multiElement||(l?Cn(e.canvas):Mn(e.canvas,e.state.elementType));var c=Pn(t,e.state),u=c.x,d=c.y;if(e.state.editingLinearElement&&!e.state.editingLinearElement.isDragging){var p=ro.handlePointerMove(t,u,d,e.state.editingLinearElement,e.state.gridSize);p!==e.state.editingLinearElement&&e.setState({editingLinearElement:p}),null!=p.lastUncommittedPoint?e.maybeSuggestBindingAtCursor(c):e.setState({suggestedBindings:[]})}if(Fe(e.state.elementType)){var f=e.state.draggingElement;Re(f)?e.maybeSuggestBindingForLinearElementAtCursor(f,\"end\",c,e.state.startBoundElement):e.maybeSuggestBindingAtCursor(c)}if(e.state.multiElement){var h=e.state.multiElement,m=h.x,g=h.y,v=h.points,b=h.lastCommittedPoint,y=v[v.length-1];return Mn(e.canvas,e.state.elementType),void(y===b?Ue(u-m,d-g,y[0],y[1])>=s.qx?fr(h,{points:Np(Np([],v),[[u-m,d-g]])}):On(e.canvas,s.oc.POINTER):v.length>2&&b&&Ue(u-m,d-g,b[0],b[1])<s.qx?(On(e.canvas,s.oc.POINTER),fr(h,{points:v.slice(0,-1)})):(Ye(v,e.state.zoom.value)&&On(e.canvas,s.oc.POINTER),fr(h,{points:Np(Np([],v.slice(0,-1)),[[u-m,d-g]])})))}if(!(Boolean(t.buttons)||\"selection\"!==e.state.elementType&&\"text\"!==e.state.elementType)){var w=e.scene.getElements(),x=ci(w,e.state);if(1!==x.length||l||e.state.editingLinearElement){if(x.length>1&&!l){var E=Qa(ot(x),u,d,e.state.zoom,t.pointerType);if(E)return void On(e.canvas,Ja({transformHandleType:E}))}}else{var k=qa(w,e.state,u,d,e.state.zoom,t.pointerType);if(k&&k.transformHandleType)return void On(e.canvas,Ja(k))}var S=e.getElementAtPosition(c.x,c.y);\"text\"===e.state.elementType?On(e.canvas,Be(S)?s.oc.TEXT:s.oc.CROSSHAIR):l?On(e.canvas,s.oc.AUTO):S||e.isHittingCommonBoundingBoxOfSelectedElements(c,x)?On(e.canvas,s.oc.MOVE):On(e.canvas,s.oc.AUTO)}}},this.handleTouchMove=function(e){$p=!0},this.handleCanvasPointerDown=function(t){if(t.persist(),e.maybeOpenContextMenuAfterPointerDownOnTouchDevices(t),e.maybeCleanupAfterMissingPointerUp(t),!Xp&&(e.setState({lastPointerDownWith:t.pointerType,cursorButton:\"down\"}),e.savePointer(t.clientX,t.clientY,\"down\"),!e.handleCanvasPanUsingWheelOrSpaceDrag(t)&&!(t.button!==s.Oh.MAIN&&t.button!==s.Oh.TOUCH||(e.updateGestureOnPointerDown(t),t.preventDefault(),document.activeElement instanceof HTMLElement&&document.activeElement.blur(),ef.pointers.size>1)))){var n=e.initialPointerDownState(t);if(!e.handleDraggingScrollBar(t,n)&&(e.clearSelectionIfNotUsingSelection(),e.updateBindingEnabledOnPointerMove(t),!e.handleSelectionOnPointerDown(t,n)))if(\"text\"!==e.state.elementType){\"arrow\"===e.state.elementType||\"draw\"===e.state.elementType||\"line\"===e.state.elementType?e.handleLinearElementOnPointerDown(t,e.state.elementType,n):e.createGenericElementOnPointerDown(e.state.elementType,n);var r=e.onPointerMoveFromPointerDownHandler(n),a=e.onPointerUpFromPointerDownHandler(n),o=e.onKeyDownFromPointerDownHandler(n),i=e.onKeyUpFromPointerDownHandler(n);Jp=a,e.state.viewModeEnabled||(window.addEventListener(s.Ks.POINTER_MOVE,r),window.addEventListener(s.Ks.POINTER_UP,a),window.addEventListener(s.Ks.KEYDOWN,o),window.addEventListener(s.Ks.KEYUP,i),n.eventListeners.onMove=r,n.eventListeners.onUp=a,n.eventListeners.onKeyUp=i,n.eventListeners.onKeyDown=o)}else e.handleTextOnPointerDown(t,n)}},this.maybeOpenContextMenuAfterPointerDownOnTouchDevices=function(t){\"touch\"===t.pointerType&&($p=!1,Qp?$p=!0:Qp=window.setTimeout((function(){Qp=0,$p||e.openContextMenu({clientX:t.clientX,clientY:t.clientY})}),s.nM))},this.handleCanvasPanUsingWheelOrSpaceDrag=function(t){if(0!==ef.pointers.size||!(t.button===s.Oh.WHEEL||t.button===s.Oh.MAIN&&Yp||e.state.viewModeEnabled))return!1;Xp=!0;var n=!1,r=\/Linux\/.test(window.navigator.platform);On(e.canvas,s.oc.GRABBING);var a=t.clientX,o=t.clientY,i=Bn((function(t){var i=a-t.clientX,l=o-t.clientY;if(a=t.clientX,o=t.clientY,r&&!n&&(Math.abs(i)>1||Math.abs(l)>1)){n=!0;var c=function(e){document.body.removeEventListener(s.Ks.PASTE,c),e.stopPropagation()},u=function(){setTimeout((function(){document.body.removeEventListener(s.Ks.PASTE,c),window.removeEventListener(s.Ks.POINTER_UP,u)}),100)};document.body.addEventListener(s.Ks.PASTE,c),window.addEventListener(s.Ks.POINTER_UP,u)}e.setState({scrollX:e.state.scrollX-i\/e.state.zoom.value,scrollY:e.state.scrollY-l\/e.state.zoom.value})})),l=Bn(Jp=function(){Jp=null,Xp=!1,Yp||Mn(e.canvas,e.state.elementType),e.setState({cursorButton:\"up\"}),e.savePointer(t.clientX,t.clientY,\"up\"),window.removeEventListener(s.Ks.POINTER_MOVE,i),window.removeEventListener(s.Ks.POINTER_UP,l),window.removeEventListener(s.Ks.BLUR,l)});return window.addEventListener(s.Ks.BLUR,l),window.addEventListener(s.Ks.POINTER_MOVE,i,{passive:!0}),window.addEventListener(s.Ks.POINTER_UP,l),!0},this.clearSelectionIfNotUsingSelection=function(){\"selection\"!==e.state.elementType&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null})},this.handleSelectionOnPointerDown=function(t,n){if(\"selection\"===e.state.elementType){var r=e.scene.getElements(),a=ci(r,e.state);if(1!==a.length||e.state.editingLinearElement)a.length>1&&(n.resize.handleType=Qa(ot(a),n.origin.x,n.origin.y,e.state.zoom,t.pointerType));else{var o=qa(r,e.state,n.origin.x,n.origin.y,e.state.zoom,t.pointerType);null!=o&&(e.setState({resizingElement:o.element}),n.resize.handleType=o.transformHandleType)}if(n.resize.handleType)On(e.canvas,Ja({transformHandleType:n.resize.handleType})),n.resize.isResizing=!0,n.resize.offset=jn(function(e,t,n,r){var a,o=1===t.length?et(t[0]):ot(t),i=o[0],l=o[1],c=o[2],s=o[3],u=(i+c)\/2,d=(l+s)\/2,p=1===t.length?t[0].angle:0;switch(n=(a=Ge(n,r,u,d,-p))[0],r=a[1],e){case\"n\":return Ge(n-(i+c)\/2,r-l,0,0,p);case\"s\":return Ge(n-(i+c)\/2,r-s,0,0,p);case\"w\":return Ge(n-i,r-(l+s)\/2,0,0,p);case\"e\":return Ge(n-c,r-(l+s)\/2,0,0,p);case\"nw\":return Ge(n-i,r-l,0,0,p);case\"ne\":return Ge(n-c,r-l,0,0,p);case\"sw\":return Ge(n-i,r-s,0,0,p);case\"se\":return Ge(n-c,r-s,0,0,p);default:return[0,0]}}(n.resize.handleType,a,n.origin.x,n.origin.y)),1===a.length&&He(a[0])&&2===a[0].points.length&&(n.resize.arrowDirection=(u=n.resize.handleType,d=a[0],p=d.points[1],f=p[0],h=p[1],\"nw\"===u&&(f<0||h<0)||\"ne\"===u&&f>=0||\"sw\"===u&&f<=0||\"se\"===u&&(f>0||h>0)?\"end\":\"origin\"));else{var i;if(e.state.editingLinearElement){var l=ro.handlePointerDown(t,e.state,(function(t){return e.setState(t)}),Wp,n.origin);if(l.hitElement&&(n.hit.element=l.hitElement),l.didAddPoint)return!0}n.hit.element=null!==(i=n.hit.element)&&void 0!==i?i:e.getElementAtPosition(n.origin.x,n.origin.y),n.hit.allHitElements=e.getElementsAtPosition(n.origin.x,n.origin.y);var c=n.hit.element,s=n.hit.allHitElements.some((function(t){return e.isASelectedElement(t)}));if(null!==c&&s||t.shiftKey||n.hit.hasHitCommonBoundingBoxOfSelectedElements||e.clearSelection(c),null!=c){if(t[Ft])return e.setState((function(t){return Fp(Fp({},function(e,t){var n;return Er(Er({},e),{},{editingGroupId:t.groupIds.length?t.groupIds[0]:null,selectedGroupIds:{},selectedElementIds:(n={},n[t.id]=!0,n)})}(t,c)),{},{previousSelectedElementIds:e.state.selectedElementIds})})),!1;e.state.selectedElementIds[c.id]||(e.state.editingGroupId&&!Tr(c,e.state.editingGroupId)&&e.setState({selectedElementIds:{},selectedGroupIds:{},editingGroupId:null}),s||n.hit.hasHitCommonBoundingBoxOfSelectedElements||(e.setState((function(t){var n;return Mr(Fp(Fp({},t),{},{selectedElementIds:Fp(Fp({},t.selectedElementIds),{},(n={},n[c.id]=!0,n))}),e.scene.getElements())})),n.hit.wasAddedToSelection=!0))}e.setState({previousSelectedElementIds:e.state.selectedElementIds})}}var u,d,p,f,h;return!1},this.handleTextOnPointerDown=function(t,n){var r;\"text\"!==(null===(r=e.state.editingElement)||void 0===r?void 0:r.type)&&(e.startTextEditing({sceneX:n.origin.x,sceneY:n.origin.y,insertAtParentCenter:!t.altKey}),Cn(e.canvas),e.state.elementLocked||e.setState({elementType:\"selection\"}))},this.handleLinearElementOnPointerDown=function(t,n,r){if(e.state.multiElement){var a=e.state.multiElement;if(\"line\"===a.type&&Ye(a.points,e.state.zoom.value))return fr(a,{lastCommittedPoint:a.points[a.points.length-1]}),void e.actionManager.executeAction(Cc);var o=a.x,i=a.y,l=a.lastCommittedPoint;if(a.points.length>1&&l&&Ue(r.origin.x-o,r.origin.y-i,l[0],l[1])<s.qx)return void e.actionManager.executeAction(Cc);e.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[a.id]=!0,t))}})),fr(a,{lastCommittedPoint:a.points[a.points.length-1]}),On(e.canvas,s.oc.POINTER)}else{var c=$e(r.origin.x,r.origin.y,\"draw\"===n?null:e.state.gridSize),u=c[0],d=c[1],p=e.state,f=p.currentItemStartArrowhead,h=p.currentItemEndArrowhead,m=\"arrow\"===n?[f,h]:[null,null],g=m[0],v=m[1],b=Hr({type:n,x:u,y:d,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemLinearStrokeSharpness,startArrowhead:g,endArrowhead:v});e.setState((function(e){var t;return{selectedElementIds:Fp(Fp({},e.selectedElementIds),{},(t={},t[b.id]=!1,t))}})),fr(b,{points:Np(Np([],b.points),[[0,0]])});var y=bo(r.origin,e.scene);e.scene.replaceAllElements(Np(Np([],e.scene.getElementsIncludingDeleted()),[b])),e.setState({draggingElement:b,editingElement:b,startBoundElement:y,suggestedBindings:[]})}},this.createGenericElementOnPointerDown=function(t,n){var r=$e(n.origin.x,n.origin.y,e.state.gridSize),a=r[0],o=r[1],i=Dr({type:t,x:a,y:o,strokeColor:e.state.currentItemStrokeColor,backgroundColor:e.state.currentItemBackgroundColor,fillStyle:e.state.currentItemFillStyle,strokeWidth:e.state.currentItemStrokeWidth,strokeStyle:e.state.currentItemStrokeStyle,roughness:e.state.currentItemRoughness,opacity:e.state.currentItemOpacity,strokeSharpness:e.state.currentItemStrokeSharpness});\"selection\"===i.type?e.setState({selectionElement:i,draggingElement:i}):(e.scene.replaceAllElements(Np(Np([],e.scene.getElementsIncludingDeleted()),[i])),e.setState({multiElement:null,draggingElement:i,editingElement:i}))},this.updateBindingEnabledOnPointerMove=function(t){var n=function(e){return!e[Ft]}(t);e.state.isBindingEnabled!==n&&e.setState({isBindingEnabled:n})},this.maybeSuggestBindingAtCursor=function(t){var n=bo(t,e.scene);e.setState({suggestedBindings:null!=n?[n]:[]})},this.maybeSuggestBindingForLinearElementAtCursor=function(t,n,r,a){var o=bo(r,e.scene);e.setState({suggestedBindings:null==o||mo(t,null==a?void 0:a.id,o)?[]:[o]})},this.handleCanvasRef=function(t){var n,r,a;null!==t?(e.canvas=t,e.rc=De.canvas(e.canvas),e.canvas.addEventListener(s.Ks.WHEEL,e.handleWheel,{passive:!1}),e.canvas.addEventListener(s.Ks.TOUCH_START,e.onTapStart),e.canvas.addEventListener(s.Ks.TOUCH_END,e.onTapEnd)):(null===(n=e.canvas)||void 0===n||n.removeEventListener(s.Ks.WHEEL,e.handleWheel),null===(r=e.canvas)||void 0===r||r.removeEventListener(s.Ks.TOUCH_START,e.onTapStart),null===(a=e.canvas)||void 0===a||a.removeEventListener(s.Ks.TOUCH_END,e.onTapEnd))},this.handleCanvasOnDrop=function(){var t=p()((function(t){var n,r,a,o,i,l,c,u,d,p,f;return Hp(this,(function(h){switch(h.label){case 0:return h.trys.push([0,3,,4]),\"image\/png\"!==(null==(r=t.dataTransfer.files[0])?void 0:r.type)&&\"image\/svg+xml\"!==(null==r?void 0:r.type)?[3,2]:[4,Ws(r,e.state)];case 1:return a=h.sent(),o=a.elements,i=a.appState,e.syncActionResult({elements:o,appState:Fp(Fp({},i||e.state),{},{isLoading:!1}),commitToHistory:!0}),[2];case 2:return[3,4];case 3:return l=h.sent(),[2,e.setState({isLoading:!1,errorMessage:l.message})];case 4:if(\"\"!==(c=t.dataTransfer.getData(s.LO.excalidrawlib)))return e.addElementsFromPasteOrLibrary(JSON.parse(c),t.clientX,t.clientY),[2];if(!(\"application\/json\"===(null==(u=null===(n=t.dataTransfer)||void 0===n?void 0:n.files[0])?void 0:u.type)||null!=u&&u.name.endsWith(\".excalidraw\")))return[3,9];if(e.setState({isLoading:!0}),!(\"chooseFileSystemEntries\"in window)&&!(\"showOpenFilePicker\"in window))return[3,8];h.label=5;case 5:return h.trys.push([5,7,,8]),d=t.dataTransfer.items[0],p=u,[4,d.getAsFileSystemHandle()];case 6:return p.handle=h.sent(),[3,8];case 7:return f=h.sent(),console.warn(f.name,f.message),[3,8];case 8:return Ws(u,e.state).then((function(t){var n=t.elements,r=t.appState;return e.syncActionResult({elements:n,appState:Fp(Fp({},r||e.state),{},{isLoading:!1}),commitToHistory:!0})})).catch((function(t){e.setState({isLoading:!1,errorMessage:t.message})})),[3,10];case 9:(null==u?void 0:u.type)===s.LO.excalidrawlib||null!=u&&u.name.endsWith(\".excalidrawlib\")?Ps.importLibrary(u).then((function(){e.setState({isLibraryOpen:!1})})).catch((function(t){return e.setState({isLoading:!1,errorMessage:t.message})})):e.setState({isLoading:!1,errorMessage:C(\"alerts.couldNotLoadInvalidFile\")}),h.label=10;case 10:return[2]}}))}));return function(e){return t.apply(this,arguments)}}(),this.handleCanvasContextMenu=function(t){t.preventDefault(),e.openContextMenu(t)},this.maybeDragNewGenericElement=function(t,n){var r=e.state.draggingElement,a=t.lastCoords;if(r)if(\"selection\"===r.type)Uo(r,e.state.elementType,t.origin.x,t.origin.y,a.x,a.y,Sn(t.origin.x,a.x),Sn(t.origin.y,a.y),dn(n),un(n));else{var o=$e(a.x,a.y,e.state.gridSize),i=o[0],l=o[1];Uo(r,e.state.elementType,t.originInGrid.x,t.originInGrid.y,i,l,Sn(t.originInGrid.x,i),Sn(t.originInGrid.y,l),dn(n),un(n)),e.maybeSuggestBindingForAll([r])}},this.maybeHandleResize=function(t,n){var r=ci(e.scene.getElements(),e.state),a=t.resize.handleType;e.setState({isResizing:a&&\"rotation\"!==a,isRotating:\"rotation\"===a});var o=t.lastCoords,i=$e(o.x-t.resize.offset.x,o.y-t.resize.offset.y,e.state.gridSize),l=i[0],c=i[1];return!!function(e,t,n,r,a,o,i,l,c,s,u){if(1===n.length){var d=n[0];return\"rotation\"===t?(Ho(d,l,c,a),wo(d)):!He(d)||2!==d.points.length||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?!Be(d)||\"nw\"!==t&&\"ne\"!==t&&\"sw\"!==t&&\"se\"!==t?t&&Go(e.originalElements.get(d.id),i,d,t,o,l,c):(Wo(d,t,o,l,c),wo(d)):No(d,r,a,l,c),!0}if(n.length>1){if(\"rotation\"===t)return Ko(e,n,l,c,a,s,u),!0;if(\"nw\"===t||\"ne\"===t||\"sw\"===t||\"se\"===t)return Vo(n,t,l,c),!0}return!1}(t,a,r,t.resize.arrowDirection,pn(n),un(n),dn(n),l,c,t.resize.center.x,t.resize.center.y)&&(e.maybeSuggestBindingForAll(r),!0)},this.openContextMenu=function(t){var n,r=t.clientX,a=t.clientY,o=Pn({clientX:r,clientY:a},e.state),i=o.x,l=o.y,c=Ou.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),s=Mu.contextItemPredicate(e.actionManager.getElementsIncludingDeleted(),e.actionManager.getAppState()),u=\"separator\",d=gc(),p=e.scene.getElements(),f=e.getElementAtPosition(i,l),h=[];if(Qs&&p.length>0&&h.push($u),qs&&p.length>0&&h.push(Qu),f)e.state.selectedElementIds[f.id]||e.setState({selectedElementIds:(n={},n[f.id]=!0,n)}),e.state.viewModeEnabled?Cd({options:Np([navigator.clipboard&&Zu],h),top:a,left:r,actionManager:e.actionManager,appState:e.state}):Cd({options:Np(Np([d&&qu,d&&navigator.clipboard&&Zu,d&&navigator.clipboard&&{name:\"paste\",perform:function(t,n){return e.pasteFromClipboard(null),{commitToHistory:!1}},contextItemLabel:\"labels.paste\"},d&&u],h),[u,vu,bu,u,c&&Ou,s&&Mu,(c||s)&&u,_u,u,Bl,Hl,Nl,Rl,u,Yl,Ml]),top:a,left:r,actionManager:e.actionManager,appState:e.state});else{var m=Np(Np([],h),[void 0===e.props.gridModeEnabled&&td,void 0===e.props.zenModeEnabled&&ad,void 0===e.props.viewModeEnabled&&zp,ld]);if(Cd({options:m,top:a,left:r,actionManager:e.actionManager,appState:e.state}),e.state.viewModeEnabled)return;Cd({options:[d&&navigator.clipboard&&{name:\"paste\",perform:function(t,n){return e.pasteFromClipboard(null),{commitToHistory:!1}},contextItemLabel:\"labels.paste\"},d&&navigator.clipboard&&u,Qs&&p.length>0&&$u,qs&&p.length>0&&Qu,(Qs&&p.length>0||qs&&p.length>0)&&u,Gl,u,void 0===e.props.gridModeEnabled&&td,void 0===e.props.zenModeEnabled&&ad,void 0===e.props.viewModeEnabled&&zp,ld],top:a,left:r,actionManager:e.actionManager,appState:e.state})}},this.handleWheel=Bn((function(t){if(t.preventDefault(),!Xp){var n=t.deltaX,r=t.deltaY,a=e.state,o=a.selectedElementIds,i=a.previousSelectedElementIds;if(t.metaKey||t.ctrlKey){var l=Math.sign(r),c=Math.abs(r);c>10&&(c=10),c*=l,0!==Object.keys(i).length&&setTimeout((function(){e.setState({selectedElementIds:i,previousSelectedElementIds:{}})}),1e3);var u=e.state.zoom.value-c\/100;return u+=Math.log10(Math.max(1,e.state.zoom.value))*-l,u=Math.round(u*s.V4*100)\/(100*s.V4),e.setState((function(e){var t=e.zoom,n=e.offsetLeft,r=e.offsetTop;return{zoom:bi(yi(u),t,{left:n,top:r},{x:Kp,y:Up}),selectedElementIds:{},previousSelectedElementIds:0!==Object.keys(o).length?o:i,shouldCacheIgnoreZoom:!0}})),void e.resetShouldCacheIgnoreZoomDebounced()}t.shiftKey?e.setState((function(e){var t=e.zoom;return{scrollX:e.scrollX-(r||n)\/t.value}})):e.setState((function(e){var t=e.zoom,a=e.scrollX,o=e.scrollY;return{scrollX:a-n\/t.value,scrollY:o-r\/t.value}}))}})),this.savePointer=function(t,n,r){var a,o;if(t&&n){var i=Pn({clientX:t,clientY:n},e.state);isNaN(i.x)||isNaN(i.y),null===(a=(o=e.props).onPointerUpdate)||void 0===a||a.call(o,{pointer:i,button:r,pointersMap:ef.pointers})}},this.resetShouldCacheIgnoreZoomDebounced=xn((function(){e.unmounted||e.setState({shouldCacheIgnoreZoom:!1})}),300)};\"production\"!==s.Vi.TEST&&\"production\"!==s.Vi.DEVELOPMENT||(window.h=window.h||{},Object.defineProperties(window.h,{elements:{configurable:!0,get:function(){return this.app.scene.getElementsIncludingDeleted()},set:function(e){return this.app.scene.replaceAllElements(e)}},history:{configurable:!0,get:function(){return Wp}},library:{configurable:!0,value:Ps}}));const rf=tf;n(8234),n(4651);var af=function(e){var t=e.width,n=e.height,r=e.offsetLeft,a=e.offsetTop,o=e.onChange,i=e.initialData,s=e.excalidrawRef,u=e.onCollabButtonClick,d=e.isCollaborating,p=e.onPointerUpdate,f=e.onExportToBackend,h=e.renderFooter,m=e.langCode,v=void 0===m?g.code:m,b=e.viewModeEnabled,y=e.zenModeEnabled,w=e.gridModeEnabled;return(0,l.useEffect)((function(){var e=function(e){\"number\"==typeof e.scale&&1!==e.scale&&e.preventDefault()};return document.addEventListener(\"touchmove\",e,{passive:!1}),function(){document.removeEventListener(\"touchmove\",e)}}),[]),c().createElement(I,{langCode:v},c().createElement(mc,null,c().createElement(rf,{width:t,height:n,offsetLeft:r,offsetTop:a,onChange:o,initialData:i,excalidrawRef:s,onCollabButtonClick:u,isCollaborating:d,onPointerUpdate:p,onExportToBackend:f,renderFooter:h,langCode:v,viewModeEnabled:b,zenModeEnabled:y,gridModeEnabled:w})))},of=function(e,t){e.initialData;var n=i()(e,[\"initialData\"]),r=(t.initialData,i()(t,[\"initialData\"])),a=Object.keys(e),o=Object.keys(t);return a.length===o.length&&a.every((function(e){return n[e]===r[e]}))};af.defaultProps={lanCode:g.code};var lf=(0,l.forwardRef)((function(e,t){return c().createElement(af,a()({},e,{excalidrawRef:t}))}));const cf=c().memo(lf,of);n(6009);const sf=cf},4698:t=>{\"use strict\";t.exports=e},6207:e=>{\"use strict\";e.exports=t}},l={};function c(e){if(l[e])return l[e].exports;var t=l[e]={id:e,exports:{}};return i[e](t,t.exports,c),t.exports}return c.m=i,c.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return c.d(t,{a:t}),t},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,c.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if(\"object\"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&\"function\"==typeof e.then)return e}var a=Object.create(null);c.r(a);var o={};n=n||[null,r({}),r([]),r(r)];for(var i=2&t&&e;\"object\"==typeof i&&!~n.indexOf(i);i=r(i))Object.getOwnPropertyNames(i).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,c.d(a,o),a},c.d=(e,t)=>{for(var n in t)c.o(t,n)&&!c.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},c.f={},c.e=e=>Promise.all(Object.keys(c.f).reduce(((t,n)=>(c.f[n](e,t),t)),[])),c.u=e=>\"excalidraw-assets\/\"+{9:\"image\",43:\"i18n-de-DE-json\",60:\"i18n-ko-KR-json\",62:\"i18n-zh-TW-json\",137:\"i18n-ja-JP-json\",149:\"i18n-pt-PT-json\",164:\"i18n-kab-KAB-json\",196:\"i18n-nl-NL-json\",213:\"i18n-tr-TR-json\",242:\"i18n-my-MM-json\",246:\"i18n-nb-NO-json\",262:\"i18n-he-IL-json\",280:\"i18n-pa-IN-json\",304:\"i18n-zh-CN-json\",317:\"i18n-es-ES-json\",351:\"i18n-ca-ES-json\",364:\"i18n-fr-FR-json\",381:\"i18n-pt-BR-json\",384:\"i18n-bg-BG-json\",401:\"i18n-sk-SK-json\",465:\"i18n-it-IT-json\",472:\"i18n-fi-FI-json\",491:\"i18n-id-ID-json\",526:\"i18n-el-GR-json\",558:\"i18n-ar-SA-json\",565:\"i18n-oc-FR-json\",583:\"i18n-uk-UA-json\",661:\"i18n-hu-HU-json\",698:\"i18n-sv-SE-json\",710:\"i18n-fa-IR-json\",736:\"vendor\",752:\"i18n-ro-RO-json\",852:\"i18n-pl-PL-json\",869:\"i18n-ru-RU-json\",920:\"i18n-nn-NO-json\",933:\"i18n-hi-IN-json\"}[e]+\"-\"+{9:\"4c2d5c85067885b645af\",43:\"4823c48393124a3bc5fc\",60:\"75e2d73e015b1ef6a00d\",62:\"a0c2b649e55b974d40c5\",137:\"f474ca90ec8965ba76bc\",149:\"c9da04f1ebc22a355f86\",164:\"2fe8f05383d9a2909403\",196:\"2f881bef64ae25c364ac\",213:\"c242fdecb3c6041308d2\",242:\"ce2b98acffdb55807b6f\",246:\"c2cc1faff5c7d28c9137\",262:\"31401716f9d4fa7a8bbe\",280:\"e7099ca1ca91c8c95b90\",304:\"79915d2ad7106b7382fd\",317:\"7cd687c81182a9b5ed38\",351:\"6ac46acbf7738365c825\",364:\"61ce1bd7bc0a3d36b14d\",381:\"364638bb52b1d6ba5d98\",384:\"a01c652fed411bb7e219\",401:\"0e83170f656b45bc1b89\",465:\"29c2adfbbe19b39bc050\",472:\"0890c5432a9aab3f4334\",491:\"43dd7122a92d9af1cc73\",526:\"71e0e6e546481de5271a\",558:\"3be99fb5f680b3d25ba6\",565:\"deee05849e45de2af8e7\",583:\"0605fca3af66a20c3875\",661:\"b10cefa097a941371ce6\",698:\"2e1cd9ef4c7da46616c6\",710:\"cb2081671627c079b0fe\",736:\"3525c448906ddcdcb701\",752:\"22baa4391c498a5fffc5\",852:\"488381cf4df470095153\",869:\"f6493c191c20d85e2b08\",920:\"ee5d2b7fda6783d75f36\",933:\"f3ae9dac7b038b673e45\"}[e]+\".js\",c.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a={},o=\"Excalidraw:\",c.l=(e,t,n,r)=>{if(a[e])a[e].push(t);else{var i,l;if(void 0!==n)for(var s=document.getElementsByTagName(\"script\"),u=0;u<s.length;u++){var d=s[u];if(d.getAttribute(\"src\")==e||d.getAttribute(\"data-webpack\")==o+n){i=d;break}}i||(l=!0,(i=document.createElement(\"script\")).charset=\"utf-8\",i.timeout=120,c.nc&&i.setAttribute(\"nonce\",c.nc),i.setAttribute(\"data-webpack\",o+n),i.src=e),a[e]=[t];var p=(t,n)=>{i.onerror=i.onload=null,clearTimeout(f);var r=a[e];if(delete a[e],i.parentNode&&i.parentNode.removeChild(i),r&&r.forEach((e=>e(n))),t)return t(n)},f=setTimeout(p.bind(null,void 0,{type:\"timeout\",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),l&&document.head.appendChild(i)}},c.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},c.p=\"\",(()=>{var e={163:0};c.f.j=(t,n)=>{var r=c.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var a=new Promise(((n,a)=>{r=e[t]=[n,a]}));n.push(r[2]=a);var o=c.p+c.u(t),i=new Error;c.l(o,(n=>{if(c.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var a=n&&(\"load\"===n.type?\"missing\":n.type),o=n&&n.target&&n.target.src;i.message=\"Loading chunk \"+t+\" failed.\\n(\"+a+\": \"+o+\")\",i.name=\"ChunkLoadError\",i.type=a,i.request=o,r[1](i)}}),\"chunk-\"+t,t)}};var t=(t,n)=>{for(var r,a,[o,i,l]=n,s=0,u=[];s<o.length;s++)a=o[s],c.o(e,a)&&e[a]&&u.push(e[a][0]),e[a]=0;for(r in i)c.o(i,r)&&(c.m[r]=i[r]);for(l&&l(c),t&&t(n);u.length;)u.shift()()},n=self.webpackChunkExcalidraw=self.webpackChunkExcalidraw||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),c(3956)})()}));\n};","(ns frontend.rum\n  (:require [clojure.string :as s]\n            [clojure.set :as set]\n            [clojure.walk :as w]\n            [rum.core :refer [use-state use-effect!] :as rum]\n            [cljs-bean.core :as bean]))\n\n;; copy from https:\/\/github.com\/priornix\/antizer\/blob\/35ba264cf48b84e6597743e28b3570d8aa473e74\/src\/antizer\/core.cljs\n\n(defn kebab-case->camel-case\n  \"Converts from kebab case to camel case, eg: on-click to onClick\"\n  [input]\n  (let [words (s\/split input #\"-\")\n        capitalize (->> (rest words)\n                        (map #(apply str (s\/upper-case (first %)) (rest %))))]\n    (apply str (first words) capitalize)))\n\n(defn map-keys->camel-case\n  \"Stringifys all the keys of a cljs hashmap and converts them\n   from kebab case to camel case. If :html-props option is specified,\n   then rename the html properties values to their dom equivalent\n   before conversion\"\n  [data & {:keys [html-props]}]\n  (let [convert-to-camel (fn [[key value]]\n                           [(kebab-case->camel-case (name key)) value])]\n    (w\/postwalk (fn [x]\n                  (if (map? x)\n                    (let [new-map (if html-props\n                                    (set\/rename-keys x {:class :className :for :htmlFor})\n                                    x)]\n                      (into {} (map convert-to-camel new-map)))\n                    x))\n                data)))\n\n;; adapted from https:\/\/github.com\/tonsky\/rum\/issues\/20\n(defn adapt-class\n  ([react-class]\n   (adapt-class react-class false))\n  ([react-class skip-opts-transform?]\n   (fn [& args]\n    (let [[opts children] (if (map? (first args))\n                            [(first args) (rest args)]\n                            [{} args])\n          type# (first children)\n          ;; we have to make sure to check if the children is sequential\n          ;; as a list can be returned, eg: from a (for)\n          new-children (if (sequential? type#)\n                         (let [result (daiquiri.interpreter\/interpret children)]\n                           (if (sequential? result)\n                             result\n                             [result]))\n                         children)\n          ;; convert any options key value to a react element, if\n          ;; a valid html element tag is used, using sablono\n          vector->react-elems (fn [[key val]]\n                                (if (sequential? val)\n                                  [key (daiquiri.interpreter\/interpret val)]\n                                  [key val]))\n          new-options (into {}\n                            (if skip-opts-transform?\n                              opts\n                              (map vector->react-elems opts)))]\n      (apply js\/React.createElement react-class\n        ;; sablono html-to-dom-attrs does not work for nested hashmaps\n        (bean\/->js (map-keys->camel-case new-options :html-props true))\n        new-children)))))\n\n(defn use-atom-fn\n  [a getter-fn setter-fn]\n  (let [[val set-val] (use-state (getter-fn @a))]\n    (use-effect!\n      (fn []\n        (let [id (str (random-uuid))]\n          (add-watch a id (fn [_ _ prev-state next-state]\n                            (let [prev-value (getter-fn prev-state)\n                                  next-value (getter-fn next-state)]\n                              (when-not (= prev-value next-value)\n                                (set-val next-value)))))\n          #(remove-watch a id)))\n      [])\n    [val #(swap! a setter-fn %)]))\n\n(defn use-atom\n  \"(use-atom my-atom)\"\n  [a]\n  (use-atom-fn a identity (fn [_ v] v)))\n\n(defn use-atom-in\n  \"(use-atom my-atom [:path :to :data])\"\n  [a path]\n  (use-atom-fn a #(get-in % path) #(assoc-in %1 path %2)))\n\n(defn use-mounted\n  []\n  (let [*mounted (rum\/use-ref false)]\n    (use-effect!\n      (fn []\n         (rum\/set-ref! *mounted true)\n         #(rum\/set-ref! *mounted false))\n       [])\n    #(rum\/deref *mounted)))",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http:\/\/opensource.org\/licenses\/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core\n  (:require goog.math.Long\n            goog.math.Integer\n            [goog.string :as gstring]\n            [goog.object :as gobject]\n            [goog.array :as garray]\n            [goog.Uri])\n  (:import [goog.string StringBuffer]))\n\n;; next line is auto-generated by the build-script - Do not edit!\n(def *clojurescript-version* \"1.10.879\")\n\n;; Setting of these Vars is in ClojureScript code is associated with intrinsics\n;; that affect compilation state, but otherwise turn into no-ops in the emitted\n;; JavaScript.\n\n;; The scope of *unchecked-if* is controlled by balanced pairs of set! calls.\n(def *unchecked-if* false)\n;; The scope of *unchecked-arrays* is file-scope: In JVM ClojureScript its side-\n;; effect is to set same-named analyzer dynamic Var, which is unset via binding\n;; scopes. In self-hosted it is cleared via cljs.js\/post-file-side-effects.\n(def *unchecked-arrays* false)\n;; The scope of *warn-on-infer* is file-scope: Its side effect is to set the\n;; cljs.analyzer\/*cljs-warnings* dynamic Var, which is unset via binding scopes.\n(def *warn-on-infer* false)\n\n(set! *unchecked-arrays* true)\n\n(defonce PROTOCOL_SENTINEL #js {})\n\n(def MODULE_URIS nil) ;; set by compiler\n(def MODULE_INFOS nil) ;; set by compiler\n\n(goog-define\n  ^{:dynamic true\n    :doc \"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \\\"nodejs\\\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.\"}\n  *target* \"default\")\n\n(goog-define\n  ^{:dynamic true\n    :doc \"Manually set the JavaScript global context. Only \\\"window\\\", \\\"self\\\"\n  , and \\\"global\\\" supported. \"}\n  *global* \"default\")\n\n(def\n  ^{:dynamic true\n    :doc \"Var bound to the current namespace. Only used for bootstrapping.\"\n    :jsdoc [\"@type {*}\"]}\n  *ns* nil)\n\n(def\n  ^{:dynamic true\n    :jsdoc [\"@type {*}\"]}\n  *out* nil)\n\n(def\n  ^{:dynamic true}\n  *assert* true)\n\n(defonce\n  ^{:doc \"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.\" :dynamic true}\n  *print-fn* nil)\n\n(declare boolean)\n\n(defn ^{:doc \"Arranges to have tap functions executed via the supplied f, a\n  function of no arguments. Returns true if successful, false otherwise.\" :dynamic true}\n  *exec-tap-fn*\n  [f]\n  (and\n    (exists? js\/setTimeout)\n    ;; See CLJS-3274 - workaround for recent WebKit releases\n    (boolean (js\/setTimeout f 0))))\n\n(defonce\n  ^{:doc \"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.\" :dynamic true}\n  *print-err-fn* nil)\n\n(defn set-print-fn!\n  \"Set *print-fn* to f.\"\n  [f] (set! *print-fn* f))\n\n(defn set-print-err-fn!\n  \"Set *print-err-fn* to f.\"\n  [f] (set! *print-err-fn* f))\n\n(def\n  ^{:dynamic true\n    :doc \"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true.\"}\n  *flush-on-newline* true)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects.\"}\n  *print-newline* true)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true\"}\n  *print-readably* true)\n\n(def\n  ^{:dynamic true\n    :doc \"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false.\"}\n  *print-meta* false)\n\n(def\n  ^{:dynamic true\n    :doc \"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false.\"}\n  *print-dup* false)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true.\"}\n  *print-namespace-maps* false)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.\"\n    :jsdoc [\"@type {null|number}\"]}\n  *print-length* nil)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.\"\n    :jsdoc [\"@type {null|number}\"]}\n  *print-level* nil)\n\n(def\n  ^{:dynamic true\n    :doc \"*print-fns-bodies* controls whether functions print their source or\n    only their names.\"}\n  *print-fn-bodies* false)\n\n(defonce\n  ^{:dynamic true\n    :jsdoc [\"@type {*}\"]}\n  *loaded-libs* nil)\n\n(defn- pr-opts []\n  {:flush-on-newline *flush-on-newline*\n   :readably *print-readably*\n   :meta *print-meta*\n   :dup *print-dup*\n   :print-length *print-length*})\n\n(declare into-array)\n\n(defn enable-console-print!\n  \"Set *print-fn* to console.log\"\n  []\n  (set! *print-newline* false)\n  (set-print-fn!\n    (fn []\n      (let [xs (js-arguments)]\n        (.apply (.-log js\/console) js\/console (garray\/clone xs)))))\n  (set-print-err-fn!\n    (fn []\n      (let [xs (js-arguments)]\n        (.apply (.-error js\/console) js\/console (garray\/clone xs)))))\n  nil)\n\n(def\n  ^{:doc \"bound in a repl thread to the most recent value printed\"}\n  *1)\n\n(def\n  ^{:doc \"bound in a repl thread to the second most recent value printed\"}\n  *2)\n\n(def\n  ^{:doc \"bound in a repl thread to the third most recent value printed\"}\n  *3)\n\n(def\n  ^{:doc \"bound in a repl thread to the most recent exception caught by the repl\"}\n  *e)\n\n(defn truth_\n  \"Internal - do not use!\"\n  [x]\n  (cljs.core\/truth_ x))\n\n(def not-native nil)\n\n(declare instance? Keyword)\n\n(defn ^boolean identical?\n  \"Tests if 2 arguments are the same object\"\n  [x y]\n  (cljs.core\/identical? x y))\n\n(defn ^boolean nil?\n  \"Returns true if x is nil, false otherwise.\"\n  [x]\n  (coercive-= x nil))\n\n(defn ^boolean array?\n  \"Returns true if x is a JavaScript array.\"\n  [x]\n  (if (identical? *target* \"nodejs\")\n    (.isArray js\/Array x)\n    (instance? js\/Array x)))\n\n(defn ^boolean number?\n  \"Returns true if x is a JavaScript number.\"\n  [x]\n  (cljs.core\/number? x))\n\n(defn not\n  \"Returns true if x is logical false, false otherwise.\"\n  [x]\n  (cond\n    (nil? x) true\n    (false? x) true\n    :else false))\n\n(defn ^boolean some?\n  \"Returns true if x is not nil, false otherwise.\"\n  [x] (not (nil? x)))\n\n(defn object?\n  \"Returns true if x's constructor is Object\"\n  [x]\n  (if-not (nil? x)\n    (identical? (.-constructor x) js\/Object)\n    false))\n\n(defn ^boolean string?\n  \"Returns true if x is a JavaScript string.\"\n  [x]\n  (identical? \"string\" (goog\/typeOf x)))\n\n(defn char?\n  \"Returns true if x is a JavaScript string of length one.\"\n  [x]\n  (and (string? x) (== 1 (.-length x))))\n\n(defn any?\n  \"Returns true if given any argument.\"\n  [x] true)\n\n(set! *unchecked-if* true)\n(defn native-satisfies?\n  \"Internal - do not use!\"\n  [p x]\n  (let [x (if (nil? x) nil x)]\n    (cond\n     (unchecked-get p (goog\/typeOf x)) true\n     (unchecked-get p \"_\") true\n     :else false)))\n(set! *unchecked-if* false)\n\n(defn is_proto_\n  [x]\n  (identical? (.-prototype (.-constructor x)) x))\n\n(def\n  ^{:doc \"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments\"}\n  *main-cli-fn* nil)\n\n(def\n  ^{:doc \"A sequence of the supplied command line arguments, or nil if\n  none were supplied\"}\n  *command-line-args* nil)\n\n(defn type\n  \"Return x's constructor.\"\n  [x]\n  (when-not (nil? x)\n    (.-constructor x)))\n\n(defn missing-protocol [proto obj]\n  (let [ty (type obj)\n        ty (if (and ty (.-cljs$lang$type ty))\n             (.-cljs$lang$ctorStr ty)\n             (goog\/typeOf obj))]\n   (js\/Error.\n     (.join (array \"No protocol method \" proto\n                   \" defined for type \" ty \": \" obj) \"\"))))\n\n(defn type->str [ty]\n  (if-let [s (.-cljs$lang$ctorStr ty)]\n    s\n    (str ty)))\n\n;; INTERNAL - do not use, only for Node.js\n(defn load-file [file]\n  (when-not js\/COMPILED\n    (cljs.core\/load-file* file)))\n\n(if (and (exists? js\/Symbol)\n         (identical? (goog\/typeOf js\/Symbol) \"function\"))\n  (def ITER_SYMBOL (.-iterator js\/Symbol))\n  (def ITER_SYMBOL \"@@iterator\"))\n\n(def ^{:jsdoc [\"@enum {string}\"]}\n  CHAR_MAP\n  #js {\"-\"    \"_\"\n       \":\"    \"_COLON_\"\n       \"+\"    \"_PLUS_\"\n       \">\"    \"_GT_\"\n       \"<\"    \"_LT_\"\n       \"=\"    \"_EQ_\"\n       \"~\"    \"_TILDE_\"\n       \"!\"    \"_BANG_\"\n       \"@\"    \"_CIRCA_\"\n       \"#\"    \"_SHARP_\"\n       \"'\"    \"_SINGLEQUOTE_\"\n       \"\\\\\\\"\" \"_DOUBLEQUOTE_\"\n       \"%\"    \"_PERCENT_\"\n       \"^\"    \"_CARET_\"\n       \"&\"    \"_AMPERSAND_\"\n       \"*\"    \"_STAR_\"\n       \"|\"    \"_BAR_\"\n       \"{\"    \"_LBRACE_\"\n       \"}\"    \"_RBRACE_\"\n       \"[\"    \"_LBRACK_\"\n       \"]\"    \"_RBRACK_\"\n       \"\/\"    \"_SLASH_\"\n       \"\\\\\\\\\" \"_BSLASH_\"\n       \"?\"    \"_QMARK_\"})\n\n(def ^{:jsdoc [\"@enum {string}\"]}\n  DEMUNGE_MAP\n  #js {\"_\"             \"-\"\n       \"_COLON_\"       \":\"\n       \"_PLUS_\"        \"+\"\n       \"_GT_\"          \">\"\n       \"_LT_\"          \"<\"\n       \"_EQ_\"          \"=\"\n       \"_TILDE_\"       \"~\"\n       \"_BANG_\"        \"!\"\n       \"_CIRCA_\"       \"@\"\n       \"_SHARP_\"       \"#\"\n       \"_SINGLEQUOTE_\" \"'\"\n       \"_DOUBLEQUOTE_\" \"\\\\\\\"\"\n       \"_PERCENT_\"     \"%\"\n       \"_CARET_\"       \"^\"\n       \"_AMPERSAND_\"   \"&\"\n       \"_STAR_\"        \"*\"\n       \"_BAR_\"         \"|\"\n       \"_LBRACE_\"      \"{\"\n       \"_RBRACE_\"      \"}\"\n       \"_LBRACK_\"      \"[\"\n       \"_RBRACK_\"      \"]\"\n       \"_SLASH_\"       \"\/\"\n       \"_BSLASH_\"      \"\\\\\\\\\"\n       \"_QMARK_\"       \"?\"})\n\n(def DEMUNGE_PATTERN nil)\n\n(defn system-time\n  \"Returns highest resolution time offered by host in milliseconds.\"\n  []\n  (cond\n    (and (exists? js\/performance)\n         (not (nil? (. js\/performance -now))))\n    (.now js\/performance)\n\n    (and (exists? js\/process)\n         (not (nil? (. js\/process -hrtime))))\n    (let [t (.hrtime js\/process)]\n      (\/ (+ (* (aget t 0) 1e9) (aget t 1)) 1e6))\n\n    :else (.getTime (js\/Date.))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; arrays ;;;;;;;;;;;;;;;;\n\n(declare apply)\n\n(defn ^array make-array\n  \"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.\"\n  ([size]\n     (js\/Array. size))\n  ([type size]\n     (make-array size))\n  ([type size & more-sizes]\n    (let [dims more-sizes\n          dimarray (make-array size)]\n      (dotimes [i (alength dimarray)]\n        (aset dimarray i (apply make-array nil dims)))\n      dimarray)))\n\n(defn aclone\n  \"Returns a javascript array, cloned from the passed in array\"\n  [arr]\n  (let [len (alength arr)\n        new-arr (make-array len)]\n    (dotimes [i len]\n      (aset new-arr i (aget arr i)))\n    new-arr))\n\n(defn ^array array\n  \"Creates a new javascript array.\n@param {...*} var_args\" ;;array is a special case, don't emulate this doc string\n  [var-args]            ;; [& items]\n  (let [a (js\/Array. (alength (cljs.core\/js-arguments)))]\n    (loop [i 0]\n      (if (< i (alength a))\n        (do\n          (aset a i (aget (cljs.core\/js-arguments) i))\n          (recur (inc i)))\n        a))))\n\n(defn- maybe-warn\n  [e]\n  (when *print-err-fn*\n    (*print-err-fn* e)))\n\n(defn- checked-aget\n  ([array idx]\n   (when-assert\n     (try\n       (assert (or (array? array) (goog\/isArrayLike array)))\n       (assert (number? idx))\n       (assert (not (neg? idx)))\n       (assert (< idx (alength array)))\n       (catch :default e\n         (maybe-warn e))))\n   (unchecked-get array idx))\n  ([array idx & idxs]\n   (apply checked-aget (checked-aget array idx) idxs)))\n\n(defn- checked-aset\n  ([array idx val]\n   (when-assert\n     (try\n       (assert (or (array? array) (goog\/isArrayLike array)))\n       (assert (number? idx))\n       (assert (not (neg? idx)))\n       (assert (< idx (alength array)))\n       (catch :default e\n         (maybe-warn e))))\n   (unchecked-set array idx val))\n  ([array idx idx2 & idxv]\n   (apply checked-aset (checked-aget array idx) idx2 idxv)))\n\n(defn- checked-aget'\n  ([array idx]\n   {:pre [(or (array? array) (goog\/isArrayLike array))\n          (number? idx) (not (neg? idx)) (< idx (alength array))]}\n   (unchecked-get array idx))\n  ([array idx & idxs]\n   (apply checked-aget' (checked-aget' array idx) idxs)))\n\n(defn- checked-aset'\n  ([array idx val]\n   {:pre [(or (array? array) (goog\/isArrayLike array))\n          (number? idx) (not (neg? idx)) (< idx (alength array))]}\n   (unchecked-set array idx val))\n  ([array idx idx2 & idxv]\n   (apply checked-aset' (checked-aget' array idx) idx2 idxv)))\n\n(defn aget\n  \"Returns the value at the index\/indices. Works on JavaScript arrays.\"\n  ([array idx]\n     (cljs.core\/aget array idx))\n  ([array idx & idxs]\n     (apply aget (aget array idx) idxs)))\n\n(defn aset\n  \"Sets the value at the index\/indices. Works on JavaScript arrays.\n  Returns val.\"\n  ([array idx val]\n    (cljs.core\/aset array idx val))\n  ([array idx idx2 & idxv]\n    (apply aset (aget array idx) idx2 idxv)))\n\n(defn ^number alength\n  \"Returns the length of the array. Works on arrays of all types.\"\n  [array]\n  (cljs.core\/alength array))\n\n(declare reduce)\n\n(defn ^array into-array\n  \"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.\"\n  ([aseq]\n     (into-array nil aseq))\n  ([type aseq]\n     (reduce (fn [a x] (.push a x) a) (array) aseq)))\n\n(defn js-invoke\n  \"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.\"\n  [obj s & args]\n  (.apply (unchecked-get obj s) obj (into-array args)))\n\n(defn js-symbol?\n  \"Returns true if x is an instance of Symbol\"\n  [x]\n  (or (identical? (goog\/typeOf x) \"symbol\")\n      (and (exists? js\/Symbol)\n           (instance? js\/Symbol x))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;; core protocols ;;;;;;;;;;;;;\n\n(defprotocol Fn\n  \"Marker protocol\")\n\n(defprotocol IFn\n  \"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2\"\n  (-invoke\n    [this]\n    [this a]\n    [this a b]\n    [this a b c]\n    [this a b c d]\n    [this a b c d e]\n    [this a b c d e f]\n    [this a b c d e f g]\n    [this a b c d e f g h]\n    [this a b c d e f g h i]\n    [this a b c d e f g h i j]\n    [this a b c d e f g h i j k]\n    [this a b c d e f g h i j k l]\n    [this a b c d e f g h i j k l m]\n    [this a b c d e f g h i j k l m n]\n    [this a b c d e f g h i j k l m n o]\n    [this a b c d e f g h i j k l m n o p]\n    [this a b c d e f g h i j k l m n o p q]\n    [this a b c d e f g h i j k l m n o p q r]\n    [this a b c d e f g h i j k l m n o p q r s]\n    [this a b c d e f g h i j k l m n o p q r s t]\n    [this a b c d e f g h i j k l m n o p q r s t rest]))\n\n(defprotocol ICloneable\n  \"Protocol for cloning a value.\"\n  (^clj -clone [value]\n    \"Creates a clone of value.\"))\n\n(defprotocol ICounted\n  \"Protocol for adding the ability to count a collection in constant time.\"\n  (^number -count [coll]\n    \"Calculates the count of coll in constant time. Used by cljs.core\/count.\"))\n\n(defprotocol IEmptyableCollection\n  \"Protocol for creating an empty collection.\"\n  (-empty [coll]\n    \"Returns an empty collection of the same category as coll. Used\n     by cljs.core\/empty.\"))\n\n(defprotocol ICollection\n  \"Protocol for adding to a collection.\"\n  (^clj -conj [coll o]\n    \"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)\"))\n\n#_(defprotocol IOrdinal\n    (-index [coll]))\n\n(defprotocol IIndexed\n  \"Protocol for collections to provide indexed-based access to their items.\"\n  (-nth [coll n] [coll n not-found]\n    \"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.\"))\n\n(defprotocol ASeq\n  \"Marker protocol indicating an array sequence.\")\n\n(defprotocol ISeq\n  \"Protocol for collections to provide access to their items as sequences.\"\n  (-first [coll]\n    \"Returns the first item in the collection coll. Used by cljs.core\/first.\")\n  (^clj -rest [coll]\n    \"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()\"))\n\n(defprotocol INext\n  \"Protocol for accessing the next items of a collection.\"\n  (^clj-or-nil -next [coll]\n    \"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil\"))\n\n(defprotocol ILookup\n  \"Protocol for looking up a value in a data structure.\"\n  (-lookup [o k] [o k not-found]\n    \"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.\"))\n\n(defprotocol IAssociative\n  \"Protocol for adding associativity to collections.\"\n  (^boolean -contains-key? [coll k]\n    \"Returns true if k is a key in coll.\")\n  #_(-entry-at [coll k])\n  (^clj -assoc [coll k v]\n    \"Returns a new collection of coll with a mapping from key k to\n     value v added to it.\"))\n\n(defprotocol IFind\n  \"Protocol for implementing entry finding in collections.\"\n  (-find [coll k] \"Returns the map entry for key, or nil if key not present.\"))\n\n(defprotocol IMap\n  \"Protocol for adding mapping functionality to collections.\"\n  #_(-assoc-ex [coll k v])\n  (^clj -dissoc [coll k]\n    \"Returns a new collection of coll without the mapping for key k.\"))\n\n(defprotocol IMapEntry\n  \"Protocol for examining a map entry.\"\n  (-key [coll]\n    \"Returns the key of the map entry.\")\n  (-val [coll]\n    \"Returns the value of the map entry.\"))\n\n(defprotocol ISet\n  \"Protocol for adding set functionality to a collection.\"\n  (^clj -disjoin [coll v]\n    \"Returns a new collection of coll that does not contain v.\"))\n\n(defprotocol IStack\n  \"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.\"\n  (-peek [coll]\n    \"Returns the item from the top of the stack. Is used by cljs.core\/peek.\")\n  (^clj -pop [coll]\n    \"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core\/pop.\"))\n\n(defprotocol IVector\n  \"Protocol for adding vector functionality to collections.\"\n  (^clj -assoc-n [coll n val]\n    \"Returns a new vector with value val added at position n.\"))\n\n(defprotocol IDeref\n  \"Protocol for adding dereference functionality to a reference.\"\n  (-deref [o]\n    \"Returns the value of the reference o.\"))\n\n(defprotocol IDerefWithTimeout\n  (-deref-with-timeout [o msec timeout-val]))\n\n(defprotocol IMeta\n  \"Protocol for accessing the metadata of an object.\"\n  (^clj-or-nil -meta [o]\n    \"Returns the metadata of object o.\"))\n\n(defprotocol IWithMeta\n  \"Protocol for adding metadata to an object.\"\n  (^clj -with-meta [o meta]\n    \"Returns a new object with value of o and metadata meta added to it.\"))\n\n(defprotocol IReduce\n  \"Protocol for seq types that can reduce themselves.\n  Called by cljs.core\/reduce.\"\n  (-reduce [coll f] [coll f start]\n    \"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.\"))\n\n(defprotocol IKVReduce\n  \"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core\/reduce-kv.\"\n  (-kv-reduce [coll f init]\n    \"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.\"))\n\n(defprotocol IEquiv\n  \"Protocol for adding value comparison functionality to a type.\"\n  (^boolean -equiv [o other]\n    \"Returns true if o and other are equal, false otherwise.\"))\n\n(defprotocol IHash\n  \"Protocol for adding hashing functionality to a type.\"\n  (-hash [o]\n    \"Returns the hash code of o.\"))\n\n(defprotocol ISeqable\n  \"Protocol for adding the ability to a type to be transformed into a sequence.\"\n  (^clj-or-nil -seq [o]\n    \"Returns a seq of o, or nil if o is empty.\"))\n\n(defprotocol ISequential\n  \"Marker interface indicating a persistent collection of sequential items\")\n\n(defprotocol IList\n  \"Marker interface indicating a persistent list\")\n\n(defprotocol IRecord\n  \"Marker interface indicating a record object\")\n\n(defprotocol IReversible\n  \"Protocol for reversing a seq.\"\n  (^clj -rseq [coll]\n    \"Returns a seq of the items in coll in reversed order.\"))\n\n(defprotocol ISorted\n  \"Protocol for a collection which can represent their items\n  in a sorted manner. \"\n  (^clj -sorted-seq [coll ascending?]\n    \"Returns a sorted seq from coll in either ascending or descending order.\")\n  (^clj -sorted-seq-from [coll k ascending?]\n    \"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)\")\n  (-entry-key [coll entry]\n    \"Returns the key for entry.\")\n  (-comparator [coll]\n    \"Returns the comparator for coll.\"))\n\n(defprotocol IWriter\n  \"Protocol for writing. Currently only implemented by StringBufferWriter.\"\n  (-write [writer s]\n    \"Writes s with writer and returns the result.\")\n  (-flush [writer]\n    \"Flush writer.\"))\n\n(defprotocol IPrintWithWriter\n  \"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.\"\n  (-pr-writer [o writer opts]))\n\n(defprotocol IPending\n  \"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.\"\n  (^boolean -realized? [x]\n    \"Returns true if a value for x has been produced, false otherwise.\"))\n\n(defprotocol IWatchable\n  \"Protocol for types that can be watched. Currently only implemented by Atom.\"\n  (-notify-watches [this oldval newval]\n    \"Calls all watchers with this, oldval and newval.\")\n  (-add-watch [this key f]\n    \"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.\")\n  (-remove-watch [this key]\n    \"Removes watcher that corresponds to key from this.\"))\n\n(defprotocol IEditableCollection\n  \"Protocol for collections which can transformed to transients.\"\n  (^clj -as-transient [coll]\n    \"Returns a new, transient version of the collection, in constant time.\"))\n\n(defprotocol ITransientCollection\n  \"Protocol for adding basic functionality to transient collections.\"\n  (^clj -conj! [tcoll val]\n    \"Adds value val to tcoll and returns tcoll.\")\n  (^clj -persistent! [tcoll]\n    \"Creates a persistent data structure from tcoll and returns it.\"))\n\n(defprotocol ITransientAssociative\n  \"Protocol for adding associativity to transient collections.\"\n  (^clj -assoc! [tcoll key val]\n    \"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.\"))\n\n(defprotocol ITransientMap\n  \"Protocol for adding mapping functionality to transient collections.\"\n  (^clj -dissoc! [tcoll key]\n    \"Returns a new transient collection of tcoll without the mapping for key.\"))\n\n(defprotocol ITransientVector\n  \"Protocol for adding vector functionality to transient collections.\"\n  (^clj -assoc-n! [tcoll n val]\n    \"Returns tcoll with value val added at position n.\")\n  (^clj -pop! [tcoll]\n    \"Returns tcoll with the last item removed from it.\"))\n\n(defprotocol ITransientSet\n  \"Protocol for adding set functionality to a transient collection.\"\n  (^clj -disjoin! [tcoll v]\n    \"Returns tcoll without v.\"))\n\n(defprotocol IComparable\n  \"Protocol for values that can be compared.\"\n  (^number -compare [x y]\n    \"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.\"))\n\n(defprotocol IChunk\n  \"Protocol for accessing the items of a chunk.\"\n  (-drop-first [coll]\n    \"Return a new chunk of coll with the first item removed.\"))\n\n(defprotocol IChunkedSeq\n  \"Protocol for accessing a collection as sequential chunks.\"\n  (-chunked-first [coll]\n    \"Returns the first chunk in coll.\")\n  (-chunked-rest [coll]\n    \"Return a new collection of coll with the first chunk removed.\"))\n\n(defprotocol IChunkedNext\n  \"Protocol for accessing the chunks of a collection.\"\n  (-chunked-next [coll]\n    \"Returns a new collection of coll without the first chunk.\"))\n\n(defprotocol INamed\n  \"Protocol for adding a name.\"\n  (^string -name [x]\n    \"Returns the name String of x.\")\n  ( ^{:tag #{string clj-nil}}-namespace [x]\n    \"Returns the namespace String of x.\"))\n\n(defprotocol IAtom\n  \"Marker protocol indicating an atom.\")\n\n(defprotocol IReset\n  \"Protocol for adding resetting functionality.\"\n  (-reset! [o new-value]\n    \"Sets the value of o to new-value.\"))\n\n(defprotocol ISwap\n  \"Protocol for adding swapping functionality.\"\n  (-swap! [o f] [o f a] [o f a b] [o f a b xs]\n    \"Swaps the value of o to be (apply f current-value-of-atom args).\"))\n\n(defprotocol IVolatile\n  \"Protocol for adding volatile functionality.\"\n  (-vreset! [o new-value]\n    \"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.\"))\n\n(defprotocol IIterable\n  \"Protocol for iterating over a collection.\"\n  (-iterator [coll]\n    \"Returns an iterator for coll.\"))\n\n;; Printing support\n\n(deftype StringBufferWriter [sb]\n  IWriter\n  (-write [_ s] (.append sb s))\n  (-flush [_] nil))\n\n(defn pr-str*\n  \"Support so that collections can implement toString without\n   loading all the printing machinery.\"\n  [^not-native obj]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (-pr-writer obj writer (pr-opts))\n    (-flush writer)\n    (str sb)))\n\n;;;;;;;;;;;;;;;;;;; Murmur3 ;;;;;;;;;;;;;;;\n\n;;http:\/\/hg.openjdk.java.net\/jdk7u\/jdk7u6\/jdk\/file\/8c2c5d63a17e\/src\/share\/classes\/java\/lang\/Integer.java\n(defn ^number int-rotate-left [x n]\n  (bit-or\n    (bit-shift-left x n)\n    (unsigned-bit-shift-right x (- n))))\n\n;; http:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Math\/imul\n(if (and (exists? Math\/imul)\n         (not (zero? (Math\/imul 0xffffffff 5))))\n  (defn ^number imul [a b] (Math\/imul a b))\n  (defn ^number imul [a b]\n    (let [ah (bit-and (unsigned-bit-shift-right a 16) 0xffff)\n          al (bit-and a 0xffff)\n          bh (bit-and (unsigned-bit-shift-right b 16) 0xffff)\n          bl (bit-and b 0xffff)]\n      (bit-or\n        (+ (* al bl)\n           (unsigned-bit-shift-right\n             (bit-shift-left (+ (* ah bl) (* al bh)) 16) 0)) 0))))\n\n;; http:\/\/smhasher.googlecode.com\/svn\/trunk\/MurmurHash3.cpp\n(def m3-seed 0)\n(def m3-C1 (int 0xcc9e2d51))\n(def m3-C2 (int 0x1b873593))\n\n(defn ^number m3-mix-K1 [k1]\n  (-> (int k1) (imul m3-C1) (int-rotate-left 15) (imul m3-C2)))\n\n(defn ^number m3-mix-H1 [h1 k1]\n  (int (-> (int h1) (bit-xor (int k1)) (int-rotate-left 13) (imul 5) (+ (int 0xe6546b64)))))\n\n(defn ^number m3-fmix [h1 len]\n  (as-> (int h1) h1\n    (bit-xor h1 len)\n    (bit-xor h1 (unsigned-bit-shift-right h1 16))\n    (imul h1 (int 0x85ebca6b))\n    (bit-xor h1 (unsigned-bit-shift-right h1 13))\n    (imul h1 (int 0xc2b2ae35))\n    (bit-xor h1 (unsigned-bit-shift-right h1 16))))\n\n(defn ^number m3-hash-int [in]\n  (if (zero? in)\n    in\n    (let [k1 (m3-mix-K1 in)\n          h1 (m3-mix-H1 m3-seed k1)]\n      (m3-fmix h1 4))))\n\n(defn ^number m3-hash-unencoded-chars [in]\n  (let [h1 (loop [i 1 h1 m3-seed]\n             (if (< i (.-length in))\n               (recur (+ i 2)\n                 (m3-mix-H1 h1\n                   (m3-mix-K1\n                     (bit-or (.charCodeAt in (dec i))\n                       (bit-shift-left (.charCodeAt in i) 16)))))\n               h1))\n        h1 (if (== (bit-and (.-length in) 1) 1)\n             (bit-xor h1 (m3-mix-K1 (.charCodeAt in (dec (.-length in)))))\n             h1)]\n    (m3-fmix h1 (imul 2 (.-length in)))))\n\n;;;;;;;;;;;;;;;;;;; symbols ;;;;;;;;;;;;;;;\n\n(declare list Symbol = compare)\n\n;; Simple caching of string hashcode\n(def string-hash-cache (js-obj))\n(def string-hash-cache-count 0)\n\n;;http:\/\/hg.openjdk.java.net\/jdk7u\/jdk7u6\/jdk\/file\/8c2c5d63a17e\/src\/share\/classes\/java\/lang\/String.java\n(defn hash-string* [s]\n  (if-not (nil? s)\n    (let [len (.-length s)]\n      (if (pos? len)\n        (loop [i 0 hash 0]\n          (if (< i len)\n            (recur (inc i) (+ (imul 31 hash) (.charCodeAt s i)))\n            hash))\n        0))\n    0))\n\n(defn add-to-string-hash-cache [k]\n  (let [h (hash-string* k)]\n    (gobject\/set string-hash-cache k h)\n    (set! string-hash-cache-count (inc string-hash-cache-count))\n    h))\n\n(defn hash-string [k]\n  (when (> string-hash-cache-count 255)\n    (set! string-hash-cache (js-obj))\n    (set! string-hash-cache-count 0))\n  (if (nil? k)\n    0\n    (let [h (unchecked-get string-hash-cache k)]\n      (if (number? h)\n        h\n        (add-to-string-hash-cache k)))))\n\n(defn hash\n  \"Returns the hash code of its argument. Note this is the hash code\n   consistent with =.\"\n  [o]\n  (cond\n    (implements? IHash o)\n    (bit-xor (-hash o) 0)\n\n    (number? o)\n    (if (js\/isFinite o)\n      (js-mod (Math\/floor o) 2147483647)\n      (case o\n        ##Inf\n        2146435072\n        ##-Inf\n        -1048576\n        2146959360))\n\n    ;; note: mirrors Clojure's behavior on the JVM, where the hashCode is\n    ;; 1231 for true and 1237 for false\n    ;; http:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/lang\/Boolean.html#hashCode%28%29\n    (true? o) 1231\n\n    (false? o) 1237\n\n    (string? o)\n    (m3-hash-int (hash-string o))\n\n    (instance? js\/Date o)\n    (bit-xor (.valueOf o) 0)\n\n    (nil? o) 0\n\n    :else\n    (bit-xor (-hash o) 0)))\n\n(defn hash-combine [seed hash]\n  ; a la boost\n  (bit-xor seed\n    (+ hash 0x9e3779b9\n      (bit-shift-left seed 6)\n      (bit-shift-right seed 2))))\n\n(defn ^boolean instance?\n  \"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false\"\n  [c x]\n  (cljs.core\/instance? c x))\n\n(defn ^boolean symbol?\n  \"Return true if x is a Symbol\"\n  [x]\n  (instance? Symbol x))\n\n(defn- hash-symbol [sym]\n  (hash-combine\n    (m3-hash-unencoded-chars (.-name sym))\n    (hash-string (.-ns sym))))\n\n(defn- compare-symbols [a b]\n  (cond\n   (identical? (.-str a) (.-str b)) 0\n   (and (not (.-ns a)) (.-ns b)) -1\n   (.-ns a) (if-not (.-ns b)\n              1\n              (let [nsc (garray\/defaultCompare (.-ns a) (.-ns b))]\n                (if (== 0 nsc)\n                  (garray\/defaultCompare (.-name a) (.-name b))\n                  nsc)))\n   :default (garray\/defaultCompare (.-name a) (.-name b))))\n\n(declare get)\n\n(deftype Symbol [ns name str ^:mutable _hash _meta]\n  Object\n  (toString [_] str)\n  (equiv [this other] (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Symbol other)\n      (identical? str (.-str other))\n      false))\n\n  IFn\n  (-invoke [sym coll]\n    (get coll sym))\n  (-invoke [sym coll not-found]\n    (get coll sym not-found))\n\n  IMeta\n  (-meta [_] _meta)\n\n  IWithMeta\n  (-with-meta [_ new-meta] (Symbol. ns name str _hash new-meta))\n\n  IHash\n  (-hash [sym]\n    (caching-hash sym hash-symbol _hash))\n\n  INamed\n  (-name [_] name)\n  (-namespace [_] ns)\n\n  IPrintWithWriter\n  (-pr-writer [o writer _] (-write writer str)))\n\n(defn var?\n  \"Returns true if v is of type cljs.core.Var\"\n  [v]\n  (instance? cljs.core.Var v))\n\n(defn symbol\n  \"Returns a Symbol with the given namespace and name. Arity-1 works\n  on strings, keywords, and vars.\"\n  ([name]\n   (cond (symbol? name) name\n         (string? name) (let [idx (.indexOf name \"\/\")]\n                          (if (< idx 1)\n                            (symbol nil name)\n                            (symbol (.substring name 0 idx)\n                                    (.substring name (inc idx) (. name -length)))))\n         (var? name) (.-sym name)\n         (keyword? name) (recur (.-fqn name))\n         :else (throw (new js\/Error \"no conversion to symbol\"))))\n  ([ns name]\n   (let [sym-str (if-not (nil? ns)\n                   (str ns \"\/\" name)\n                   name)]\n     (Symbol. ns name sym-str nil nil))))\n\n(deftype Var [val sym _meta]\n  Object\n  (isMacro [_]\n    (. (val) -cljs$lang$macro))\n  (toString [_]\n    (str \"#'\" sym))\n  IDeref\n  (-deref [_] (val))\n  IMeta\n  (-meta [_] _meta)\n  IWithMeta\n  (-with-meta [_ new-meta]\n    (Var. val sym new-meta))\n  IEquiv\n  (-equiv [this other]\n    (if (instance? Var other)\n      (= (.-sym this) (.-sym other))\n      false))\n  IHash\n  (-hash [_]\n    (hash-symbol sym))\n  Fn\n  IFn\n  (-invoke [_]\n    ((val)))\n  (-invoke [_ a]\n    ((val) a))\n  (-invoke [_ a b]\n    ((val) a b))\n  (-invoke [_ a b c]\n    ((val) a b c))\n  (-invoke [_ a b c d]\n    ((val) a b c d))\n  (-invoke [_ a b c d e]\n    ((val) a b c d e))\n  (-invoke [_ a b c d e f]\n    ((val) a b c d e f))\n  (-invoke [_ a b c d e f g]\n    ((val) a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    ((val) a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    ((val) a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    ((val) a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    ((val) a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    ((val) a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    ((val) a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    ((val) a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    ((val) a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    ((val) a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    ((val) a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    ((val) a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    ((val) a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    ((val) a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply (val) a b c d e f g h i j k l m n o p q r s t rest)))\n\n;;;;;;;;;;;;;;;;;;; fundamentals ;;;;;;;;;;;;;;;\n\n(declare array-seq prim-seq IndexedSeq)\n\n(defn iterable?\n  \"Return true if x implements IIterable protocol.\"\n  [x]\n  (satisfies? IIterable x))\n\n(defn js-iterable?\n  \"Return true if x has a JavaScript iterator property\"\n  [x]\n  (and (not (nil? x))\n       (not (nil? (js* \"~{}[~{}]\" x ITER_SYMBOL)))))\n\n(defn clone\n  \"Clone the supplied value which must implement ICloneable.\"\n  [value]\n  (-clone value))\n\n(defn cloneable?\n  \"Return true if x implements ICloneable protocol.\"\n  [value]\n  (satisfies? ICloneable value))\n\n(declare es6-iterator-seq)\n\n(defn ^seq seq\n  \"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings.\"\n  [coll]\n  (when-not (nil? coll)\n    (cond\n      (implements? ISeqable coll)\n      (-seq coll)\n\n      (array? coll)\n      (when-not (zero? (alength coll))\n        (IndexedSeq. coll 0 nil))\n\n      (string? coll)\n      (when-not (zero? (.-length coll))\n        (IndexedSeq. coll 0 nil))\n\n      (js-iterable? coll)\n      (es6-iterator-seq\n        (.call (gobject\/get coll ITER_SYMBOL) coll))\n\n      (native-satisfies? ISeqable coll)\n      (-seq coll)\n\n      :else (throw (js\/Error. (str coll \" is not ISeqable\"))))))\n\n(defn first\n  \"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil.\"\n  [coll]\n  (when-not (nil? coll)\n    (if (implements? ISeq coll)\n      (-first coll)\n      (let [s (seq coll)]\n        (when-not (nil? s)\n          (-first s))))))\n\n(defn ^seq rest\n  \"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.\"\n  [coll]\n  (if-not (nil? coll)\n    (if (implements? ISeq coll)\n      (-rest coll)\n      (let [s (seq coll)]\n        (if s\n          (-rest ^not-native s)\n          ())))\n    ()))\n\n(defn ^seq next\n  \"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil\"\n  [coll]\n  (when-not (nil? coll)\n    (if (implements? INext coll)\n      (-next coll)\n      (seq (rest coll)))))\n\n(defn ^boolean =\n  \"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.\"\n  ([x] true)\n  ([x y]\n    (if (nil? x)\n      (nil? y)\n      (or (identical? x y)\n        ^boolean (-equiv x y))))\n  ([x y & more]\n     (if (= x y)\n       (if (next more)\n         (recur y (first more) (next more))\n         (= y (first more)))\n       false)))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6Iterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [x (first s)]\n        (set! s (next s))\n        #js {:value x :done false})\n      #js {:value nil :done true})))\n\n(defn es6-iterator\n  \"EXPERIMENTAL: Return a ES2015 compatible iterator for coll.\"\n  [coll]\n  (ES6Iterator. (seq coll)))\n\n(deftype ES6IteratorSeq [value iter ^:mutable _rest]\n  ISeqable\n  (-seq [this] this)\n  ISeq\n  (-first [_] value)\n  (-rest [_]\n    (when (nil? _rest)\n      (set! _rest (es6-iterator-seq iter)))\n    _rest))\n\n(defn es6-iterator-seq\n  \"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq.\"\n  [iter]\n  (let [v (.next iter)]\n    (if (.-done v)\n      nil\n      (ES6IteratorSeq. (.-value v) iter nil))))\n\n;;;;;;;;;;;;;;;;;;; Murmur3 Helpers ;;;;;;;;;;;;;;;;\n\n(defn ^number mix-collection-hash\n  \"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [hash-basis count]\n  (let [h1 m3-seed\n        k1 (m3-mix-K1 hash-basis)\n        h1 (m3-mix-H1 h1 k1)]\n    (m3-fmix h1 count)))\n\n(defn ^number hash-ordered-coll\n  \"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [coll]\n  (loop [n 0 hash-code 1 coll (seq coll)]\n    (if-not (nil? coll)\n      (recur (inc n) (bit-or (+ (imul 31 hash-code) (hash (first coll))) 0)\n        (next coll))\n      (mix-collection-hash hash-code n))))\n\n(def ^:private empty-ordered-hash\n  (mix-collection-hash 1 0))\n\n(defn ^number hash-unordered-coll\n  \"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http:\/\/clojure.org\/data_structures#hash for full algorithms.\"\n  [coll]\n  (loop [n 0 hash-code 0 coll (seq coll)]\n    (if-not (nil? coll)\n      (recur (inc n) (bit-or (+ hash-code (hash (first coll))) 0) (next coll))\n      (mix-collection-hash hash-code n))))\n\n(def ^:private empty-unordered-hash\n  (mix-collection-hash 0 0))\n\n;;;;;;;;;;;;;;;;;;; protocols on primitives ;;;;;;;;\n(declare hash-map list equiv-sequential)\n\n(extend-type nil\n  ICounted\n  (-count [_] 0))\n\n;; TODO: we should remove this and handle date equality checking\n;; by some other means, probably by adding a new primitive type\n;; case to the hash table lookup - David\n\n(extend-type js\/Date\n  IEquiv\n  (-equiv [o other]\n    (and (instance? js\/Date other)\n         (== (.valueOf o) (.valueOf other))))\n\n  IComparable\n  (-compare [this other]\n    (if (instance? js\/Date other)\n      (garray\/defaultCompare (.valueOf this) (.valueOf other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(defprotocol Inst\n  (inst-ms* [inst]))\n\n(extend-protocol Inst\n  js\/Date\n  (inst-ms* [inst] (.getTime inst)))\n\n(defn inst-ms\n  \"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT\"\n  [inst]\n  (inst-ms* inst))\n\n(defn inst?\n  \"Return true if x satisfies Inst\"\n  [x]\n  (satisfies? Inst x))\n\n(extend-type number\n  IEquiv\n  (-equiv [x o] (identical? x o)))\n\n(declare with-meta)\n\n(extend-type function\n  Fn\n  IMeta\n  (-meta [_] nil))\n\n(extend-type default\n  IHash\n  (-hash [o]\n    (goog\/getUid o)))\n\n;;this is primitive because & emits call to array-seq\n(defn inc\n  \"Returns a number one greater than num.\"\n  [x] (cljs.core\/+ x 1))\n\n(declare deref)\n\n(deftype Reduced [val]\n  IDeref\n  (-deref [o] val))\n\n(defn reduced\n  \"Wraps x in a way such that a reduce will terminate with the value x\"\n  [x]\n  (Reduced. x))\n\n(defn reduced?\n  \"Returns true if x is the result of a call to reduced\"\n  [r]\n  (instance? Reduced r))\n\n(defn ensure-reduced\n  \"If x is already reduced?, returns it, else returns (reduced x)\"\n  [x]\n  (if (reduced? x) x (reduced x)))\n\n(defn unreduced\n  \"If x is reduced?, returns (deref x), else returns x\"\n  [x]\n  (if (reduced? x) (deref x) x))\n\n;; generic to all refs\n;; (but currently hard-coded to atom!)\n(defn deref\n  \"Also reader macro: @var\/@atom\/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?.\"\n  [o]\n  (-deref o))\n\n(defn- ci-reduce\n  \"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization\"\n  ([^not-native cicoll f]\n     (let [cnt (-count cicoll)]\n       (if (zero? cnt)\n         (f)\n         (loop [val (-nth cicoll 0), n 1]\n           (if (< n cnt)\n             (let [nval (f val (-nth cicoll n))]\n               (if (reduced? nval)\n                 @nval\n                 (recur nval (inc n))))\n             val)))))\n  ([^not-native cicoll f val]\n     (let [cnt (-count cicoll)]\n       (loop [val val, n 0]\n         (if (< n cnt)\n           (let [nval (f val (-nth cicoll n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n\n(defn- array-reduce\n  ([arr f]\n     (let [cnt (alength arr)]\n       (if (zero? (alength arr))\n         (f)\n         (loop [val (aget arr 0), n 1]\n           (if (< n cnt)\n             (let [nval (f val (aget arr n))]\n               (if (reduced? nval)\n                 @nval\n                 (recur nval (inc n))))\n             val)))))\n  ([arr f val]\n     (let [cnt (alength arr)]\n       (loop [val val, n 0]\n         (if (< n cnt)\n           (let [nval (f val (aget arr n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val))))\n  ([arr f val idx]\n     (let [cnt (alength arr)]\n       (loop [val val, n idx]\n         (if (< n cnt)\n           (let [nval (f val (aget arr n))]\n             (if (reduced? nval)\n               @nval\n               (recur nval (inc n))))\n           val)))))\n\n(declare hash-coll cons drop count nth RSeq List)\n\n(defn counted?\n  \"Returns true if coll implements count in constant time\"\n  [x] (satisfies? ICounted x))\n\n(defn indexed?\n  \"Returns true if coll implements nth in constant time\"\n  [x] (satisfies? IIndexed x))\n\n(defn- -indexOf\n  ([coll x]\n   (-indexOf coll x 0))\n  ([coll x start]\n   (let [len (count coll)]\n     (if (>= start len)\n       -1\n       (loop [idx (cond\n                    (pos? start) start\n                    (neg? start) (max 0 (+ start len))\n                    :else start)]\n         (if (< idx len)\n           (if (= (nth coll idx) x)\n             idx\n             (recur (inc idx)))\n           -1))))))\n\n(defn- -lastIndexOf\n  ([coll x]\n   (-lastIndexOf coll x (count coll)))\n  ([coll x start]\n   (let [len (count coll)]\n    (if (zero? len)\n      -1\n      (loop [idx (cond\n                   (pos? start) (min (dec len) start)\n                   (neg? start) (+ len start)\n                   :else start)]\n        (if (>= idx 0)\n          (if (= (nth coll idx) x)\n            idx\n            (recur (dec idx)))\n          -1))))))\n\n(deftype IndexedSeqIterator [arr ^:mutable i]\n  Object\n  (hasNext [_]\n    (< i (alength arr)))\n  (next [_]\n    (let [ret (aget arr i)]\n      (set! i (inc i))\n      ret)))\n\n(deftype IndexedSeq [arr i meta]\n  Object\n  (toString [coll]\n   (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (IndexedSeq. arr i meta))\n\n  ISeqable\n  (-seq [this]\n    (when (< i (alength arr))\n      this))\n\n  IMeta\n  (-meta [coll] meta)\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (IndexedSeq. arr i new-meta)))\n\n  ASeq\n  ISeq\n  (-first [_] (aget arr i))\n  (-rest [_] (if (< (inc i) (alength arr))\n               (IndexedSeq. arr (inc i) nil)\n               (list)))\n\n  INext\n  (-next [_] (if (< (inc i) (alength arr))\n               (IndexedSeq. arr (inc i) nil)\n               nil))\n\n  ICounted\n  (-count [_]\n    (max 0 (- (alength arr) i)))\n\n  IIndexed\n  (-nth [coll n]\n    (let [i (+ n i)]\n      (if (and (<= 0 i) (< i (alength arr)))\n        (aget arr i)\n        (throw (js\/Error. \"Index out of bounds\")))))\n  (-nth [coll n not-found]\n    (let [i (+ n i)]\n      (if (and (<= 0 i) (< i (alength arr)))\n        (aget arr i)\n        not-found)))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IIterable\n  (-iterator [coll]\n    (IndexedSeqIterator. arr i))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IReduce\n  (-reduce [coll f]\n    (array-reduce arr f (aget arr i) (inc i)))\n  (-reduce [coll f start]\n    (array-reduce arr f start i))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  IReversible\n  (-rseq [coll]\n    (let [c (-count coll)]\n      (if (pos? c)\n        (RSeq. coll (dec c) nil)))))\n\n(es6-iterable IndexedSeq)\n\n(defn prim-seq\n  \"Create seq from a primitive JavaScript Array-like.\"\n  ([prim]\n     (prim-seq prim 0))\n  ([prim i]\n     (when (< i (alength prim))\n       (IndexedSeq. prim i nil))))\n\n(defn array-seq\n  \"Create a seq from a JavaScript array.\"\n  ([array]\n     (prim-seq array 0))\n  ([array i]\n     (prim-seq array i)))\n\n(declare with-meta seq-reduce)\n\n(deftype RSeq [ci i meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (RSeq. ci i meta))\n\n  IMeta\n  (-meta [coll] meta)\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (RSeq. ci i new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ISeq\n  (-first [coll]\n    (-nth ci i))\n  (-rest [coll]\n    (if (pos? i)\n      (RSeq. ci (dec i) nil)\n      ()))\n\n  INext\n  (-next [coll]\n    (when (pos? i)\n      (RSeq. ci (dec i) nil)))\n\n  ICounted\n  (-count [coll] (inc i))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  IReduce\n  (-reduce [col f] (seq-reduce f col))\n  (-reduce [col f start] (seq-reduce f start col)))\n\n(es6-iterable RSeq)\n\n(defn second\n  \"Same as (first (next x))\"\n  [coll]\n  (first (next coll)))\n\n(defn ffirst\n  \"Same as (first (first x))\"\n  [coll]\n  (first (first coll)))\n\n(defn nfirst\n  \"Same as (next (first x))\"\n  [coll]\n  (next (first coll)))\n\n(defn fnext\n  \"Same as (first (next x))\"\n  [coll]\n  (first (next coll)))\n\n(defn nnext\n  \"Same as (next (next x))\"\n  [coll]\n  (next (next coll)))\n\n(defn last\n  \"Return the last item in coll, in linear time\"\n  [s]\n  (let [sn (next s)]\n    (if-not (nil? sn)\n      (recur sn)\n      (first s))))\n\n(extend-type default\n  IEquiv\n  (-equiv [x o] (identical? x o)))\n\n(defn conj\n  \"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).\n  (conj coll) returns coll. (conj) returns [].\n  The 'addition' may happen at different 'places' depending\n  on the concrete type.\"\n  ([] [])\n  ([coll] coll)\n  ([coll x]\n    (if-not (nil? coll)\n      (-conj coll x)\n      (list x)))\n  ([coll x & xs]\n    (if xs\n      (recur (conj coll x) (first xs) (next xs))\n      (conj coll x))))\n\n(defn empty\n  \"Returns an empty collection of the same category as coll, or nil\"\n  [coll]\n  (when-not (nil? coll)\n    (cond\n      (implements? IEmptyableCollection coll)\n      (-empty coll)\n\n      (satisfies? IEmptyableCollection coll)\n      (-empty coll)\n\n      :else nil)))\n\n(defn- accumulating-seq-count [coll]\n  (loop [s (seq coll) acc 0]\n    (if (counted? s) ; assumes nil is counted, which it currently is\n      (+ acc (-count s))\n      (recur (next s) (inc acc)))))\n\n(defn count\n  \"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps\"\n  [coll]\n  (if-not (nil? coll)\n    (cond\n      (implements? ICounted coll)\n      (-count coll)\n\n      (array? coll)\n      (alength coll)\n\n      (string? coll)\n      ^number (.-length coll)\n\n      (implements? ISeqable coll)\n      (accumulating-seq-count coll)\n\n      :else (-count coll))\n    0))\n\n(defn- linear-traversal-nth\n  ([coll n]\n     (cond\n       (nil? coll)     (throw (js\/Error. \"Index out of bounds\"))\n       (zero? n)       (if (seq coll)\n                         (first coll)\n                         (throw (js\/Error. \"Index out of bounds\")))\n       (indexed? coll) (-nth coll n)\n       (seq coll)      (recur (next coll) (dec n))\n       :else           (throw (js\/Error. \"Index out of bounds\"))))\n  ([coll n not-found]\n     (cond\n       (nil? coll)     not-found\n       (zero? n)       (if (seq coll)\n                         (first coll)\n                         not-found)\n       (indexed? coll) (-nth coll n not-found)\n       (seq coll)      (recur (next coll) (dec n) not-found)\n       :else           not-found)))\n\n(defn nth\n  \"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.\"\n  ([coll n]\n    (cond\n      (not (number? n))\n      (throw (js\/Error. \"Index argument to nth must be a number\"))\n\n      (nil? coll)\n      coll\n\n      (implements? IIndexed coll)\n      (-nth coll n)\n\n      (array? coll)\n      (if (and (< -1 n (.-length coll)))\n        (aget coll (int n))\n        (throw (js\/Error. \"Index out of bounds\")))\n\n      (string? coll)\n      (if (and (< -1 n (.-length coll)))\n        (.charAt coll (int n))\n        (throw (js\/Error. \"Index out of bounds\")))\n\n      (or (implements? ISeq coll)\n          (implements? ISequential coll))\n      (if (neg? n)\n        (throw (js\/Error. \"Index out of bounds\"))\n        (linear-traversal-nth coll n))\n\n      (native-satisfies? IIndexed coll)\n      (-nth coll n)\n\n      :else\n      (throw (js\/Error. (str \"nth not supported on this type \"\n                          (type->str (type coll)))))))\n  ([coll n not-found]\n    (cond\n      (not (number? n))\n      (throw (js\/Error. \"Index argument to nth must be a number.\"))\n\n      (nil? coll)\n      not-found\n\n      (implements? IIndexed coll)\n      (-nth coll n not-found)\n\n      (array? coll)\n      (if (and (< -1 n (.-length coll)))\n        (aget coll (int n))\n        not-found)\n\n      (string? coll)\n      (if (and (< -1 n (.-length coll)))\n        (.charAt coll (int n))\n        not-found)\n\n      (or (implements? ISeq coll)\n          (implements? ISequential coll))\n      (if (neg? n)\n        not-found\n        (linear-traversal-nth coll n not-found))\n\n      (native-satisfies? IIndexed coll)\n      (-nth coll n not-found)\n\n      :else\n      (throw (js\/Error. (str \"nth not supported on this type \"\n                          (type->str (type coll))))))))\n\n(defn nthrest\n  \"Returns the nth rest of coll, coll when n is 0.\"\n  [coll n]\n    (loop [n n xs coll]\n      (if-let [xs (and (pos? n) (seq xs))]\n        (recur (dec n) (rest xs))\n        xs)))\n\n(defn get\n  \"Returns the value mapped to key, not-found or nil if key not present.\"\n  ([o k]\n    (when-not (nil? o)\n      (cond\n        (implements? ILookup o)\n        (-lookup o k)\n\n        (array? o)\n        (when (and (some? k) (< k (.-length o)))\n          (aget o (int k)))\n\n        (string? o)\n        (when (and (some? k) (< -1 k (.-length o)))\n          (.charAt o (int k)))\n\n        (native-satisfies? ILookup o)\n        (-lookup o k)\n\n        :else nil)))\n  ([o k not-found]\n    (if-not (nil? o)\n      (cond\n        (implements? ILookup o)\n        (-lookup o k not-found)\n\n        (array? o)\n        (if (and (some? k) (< -1 k (.-length o)))\n          (aget o (int k))\n          not-found)\n\n        (string? o)\n        (if (and (some? k) (< -1 k (.-length o)))\n          (.charAt o (int k))\n          not-found)\n\n        (native-satisfies? ILookup o)\n        (-lookup o k not-found)\n\n        :else not-found)\n      not-found)))\n\n(declare PersistentHashMap PersistentArrayMap MapEntry)\n\n(defn assoc\n  \"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed\/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index. Note - index must be <= (count vector).\"\n  ([coll k v]\n   (if (implements? IAssociative coll)\n     (-assoc coll k v)\n     (if-not (nil? coll)\n       (-assoc coll k v)\n       (array-map k v))))\n  ([coll k v & kvs]\n     (let [ret (assoc coll k v)]\n       (if kvs\n         (recur ret (first kvs) (second kvs) (nnext kvs))\n         ret))))\n\n(defn dissoc\n  \"dissoc[iate]. Returns a new map of the same (hashed\/sorted) type,\n  that does not contain a mapping for key(s).\"\n  ([coll] coll)\n  ([coll k]\n    (when-not (nil? coll)\n      (-dissoc coll k)))\n  ([coll k & ks]\n    (when-not (nil? coll)\n      (let [ret (dissoc coll k)]\n        (if ks\n          (recur ret (first ks) (next ks))\n          ret)))))\n\n(defn fn?\n  \"Return true if f is a JavaScript function or satisfies the Fn protocol.\"\n  [f]\n  (or (js-fn? f) (satisfies? Fn f)))\n\n(deftype MetaFn [afn meta]\n  IMeta\n  (-meta [_] meta)\n  IWithMeta\n  (-with-meta [_ new-meta]\n    (MetaFn. afn new-meta))\n  Fn\n  IFn\n  (-invoke [_]\n    (afn))\n  (-invoke [_ a]\n    (afn a))\n  (-invoke [_ a b]\n    (afn a b))\n  (-invoke [_ a b c]\n    (afn a b c))\n  (-invoke [_ a b c d]\n    (afn a b c d))\n  (-invoke [_ a b c d e]\n    (afn a b c d e))\n  (-invoke [_ a b c d e f]\n    (afn a b c d e f))\n  (-invoke [_ a b c d e f g]\n    (afn a b c d e f g))\n  (-invoke [_ a b c d e f g h]\n    (afn a b c d e f g h))\n  (-invoke [_ a b c d e f g h i]\n    (afn a b c d e f g h i))\n  (-invoke [_ a b c d e f g h i j]\n    (afn a b c d e f g h i j))\n  (-invoke [_ a b c d e f g h i j k]\n    (afn a b c d e f g h i j k))\n  (-invoke [_ a b c d e f g h i j k l]\n    (afn a b c d e f g h i j k l))\n  (-invoke [_ a b c d e f g h i j k l m]\n    (afn a b c d e f g h i j k l m))\n  (-invoke [_ a b c d e f g h i j k l m n]\n    (afn a b c d e f g h i j k l m n))\n  (-invoke [_ a b c d e f g h i j k l m n o]\n    (afn a b c d e f g h i j k l m n o))\n  (-invoke [_ a b c d e f g h i j k l m n o p]\n    (afn a b c d e f g h i j k l m n o p))\n  (-invoke [_ a b c d e f g h i j k l m n o p q]\n    (afn a b c d e f g h i j k l m n o p q))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r]\n    (afn a b c d e f g h i j k l m n o p q r))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s]\n    (afn a b c d e f g h i j k l m n o p q r s))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t]\n    (afn a b c d e f g h i j k l m n o p q r s t))\n  (-invoke [_ a b c d e f g h i j k l m n o p q r s t rest]\n    (apply afn a b c d e f g h i j k l m n o p q r s t rest)))\n\n(defn with-meta\n  \"Returns an object of the same type and value as obj, with\n  map m as its metadata.\"\n  [o meta]\n  (if (js-fn? o)\n    (MetaFn. o meta)\n    (when-not (nil? o)\n      (-with-meta o meta))))\n\n(defn meta\n  \"Returns the metadata of obj, returns nil if there is no metadata.\"\n  [o]\n  (when (and (not (nil? o))\n             (satisfies? IMeta o))\n    (-meta o)))\n\n(defn peek\n  \"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.\"\n  [coll]\n  (when-not (nil? coll)\n    (-peek coll)))\n\n(defn pop\n  \"For a list or queue, returns a new list\/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next\/butlast.\"\n  [coll]\n  (when-not (nil? coll)\n    (-pop coll)))\n\n(defn disj\n  \"disj[oin]. Returns a new set of the same (hashed\/sorted) type, that\n  does not contain key(s).\"\n  ([coll] coll)\n  ([coll k]\n    (when-not (nil? coll)\n      (-disjoin coll k)))\n  ([coll k & ks]\n    (when-not (nil? coll)\n      (let [ret (disj coll k)]\n        (if ks\n          (recur ret (first ks) (next ks))\n          ret)))))\n\n(defn empty?\n  \"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))\"\n  [coll] (or (nil? coll)\n             (not (seq coll))))\n\n(defn coll?\n  \"Returns true if x satisfies ICollection\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? ICollection x)))\n\n(defn set?\n  \"Returns true if x satisfies ISet\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? ISet x)))\n\n(defn associative?\n \"Returns true if coll implements IAssociative\"\n  [x] (satisfies? IAssociative x))\n\n(defn ifind?\n \"Returns true if coll implements IFind\"\n  [x] (satisfies? IFind x))\n\n(defn sequential?\n  \"Returns true if coll satisfies ISequential\"\n  [x] (satisfies? ISequential x))\n\n(defn sorted?\n  \"Returns true if coll satisfies ISorted\"\n  [x] (satisfies? ISorted x))\n\n(defn reduceable?\n  \"Returns true if coll satisfies IReduce\"\n  [x] (satisfies? IReduce x))\n\n(defn map?\n  \"Return true if x satisfies IMap\"\n  [x]\n  (if (nil? x)\n    false\n    (satisfies? IMap x)))\n\n(defn record?\n  \"Return true if x satisfies IRecord\"\n  [x]\n  (satisfies? IRecord x))\n\n(defn vector?\n  \"Return true if x satisfies IVector\"\n  [x] (satisfies? IVector x))\n\n(declare ChunkedCons ChunkedSeq)\n\n(defn chunked-seq?\n  \"Return true if x satisfies IChunkedSeq.\"\n  [x] (implements? IChunkedSeq x))\n\n;;;;;;;;;;;;;;;;;;;; js primitives ;;;;;;;;;;;;\n(defn js-obj\n  \"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.\"\n  ([]\n     (cljs.core\/js-obj))\n  ([& keyvals]\n     (apply gobject\/create keyvals)))\n\n(defn js-keys\n  \"Return the JavaScript keys for an object.\"\n  [obj]\n  (gobject\/getKeys obj))\n\n(defn js-delete\n  \"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise.\"\n  [obj key]\n  (cljs.core\/js-delete obj key))\n\n(defn- array-copy\n  ([from i to j len]\n    (loop [i i j j len len]\n       (if (zero? len)\n         to\n         (do (aset to j (aget from i))\n             (recur (inc i) (inc j) (dec len)))))))\n\n(defn- array-copy-downward\n  ([from i to j len]\n     (loop [i (+ i (dec len)) j (+ j (dec len)) len len]\n       (if (zero? len)\n         to\n         (do (aset to j (aget from i))\n             (recur (dec i) (dec j) (dec len)))))))\n\n;;;;;;;;;;;;;;;; preds ;;;;;;;;;;;;;;;;;;\n\n(def ^:private lookup-sentinel (js-obj))\n\n(defn ^boolean false?\n  \"Returns true if x is the value false, false otherwise.\"\n  [x] (cljs.core\/false? x))\n\n(defn ^boolean true?\n  \"Returns true if x is the value true, false otherwise.\"\n  [x] (cljs.core\/true? x))\n\n(defn boolean?\n  \"Return true if x is a Boolean\"\n  [x] (or (cljs.core\/true? x) (cljs.core\/false? x)))\n\n(defn ^boolean undefined?\n  \"Returns true if x identical to the JavaScript undefined value.\"\n  [x]\n  (cljs.core\/undefined? x))\n\n(defn seq?\n  \"Return true if s satisfies ISeq\"\n  [s]\n  (if (nil? s)\n    false\n    (satisfies? ISeq s)))\n\n(defn seqable?\n  \"Return true if the seq function is supported for s\"\n  [s]\n  (or\n   (nil? s)\n   (satisfies? ISeqable s)\n   (array? s)\n   (string? s)))\n\n(defn boolean\n  \"Coerce to boolean\"\n  [x]\n  (cond\n    (nil? x) false\n    (false? x) false\n    :else true))\n\n(defn ifn?\n  \"Returns true if f returns true for fn? or satisfies IFn.\"\n  [f]\n  (or (fn? f) (satisfies? IFn f)))\n\n(defn integer?\n  \"Returns true if n is a JavaScript number with no decimal part.\"\n  [n]\n  (and (number? n)\n       (not ^boolean (js\/isNaN n))\n       (not (identical? n js\/Infinity))\n       (== (js\/parseFloat n) (js\/parseInt n 10))))\n\n(defn int?\n  \"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long.\"\n  [x]\n  (or (integer? x)\n      (instance? goog.math.Integer x)\n      (instance? goog.math.Long x)))\n\n(defn pos-int?\n  \"Return true if x satisfies int? and is positive.\"\n  [x]\n  (cond\n    (integer? x) (pos? x)\n\n    (instance? goog.math.Integer x)\n    (and (not (.isNegative x))\n         (not (.isZero x)))\n\n    (instance? goog.math.Long x)\n    (and (not (.isNegative x))\n         (not (.isZero x)))\n\n    :else false))\n\n(defn ^boolean neg-int?\n  \"Return true if x satisfies int? and is negative.\"\n  [x]\n  (cond\n    (integer? x) (neg? x)\n\n    (instance? goog.math.Integer x)\n    (.isNegative x)\n\n    (instance? goog.math.Long x)\n    (.isNegative x)\n\n    :else false))\n\n(defn nat-int?\n  \"Return true if x satisfies int? and is a natural integer value.\"\n  [x]\n  (cond\n    (integer? x)\n    (not (neg? x))\n\n    (instance? goog.math.Integer x)\n    (not (.isNegative x))\n\n    (instance? goog.math.Long x)\n    (not (.isNegative x))\n\n    :else false))\n\n(defn float?\n  \"Returns true for JavaScript numbers, false otherwise.\"\n  [x]\n  (number? x))\n\n(defn double?\n  \"Returns true for JavaScript numbers, false otherwise.\"\n  [x]\n  (number? x))\n\n(defn infinite?\n  \"Returns true for Infinity and -Infinity values.\"\n  [x]\n  (or (identical? x js\/Number.POSITIVE_INFINITY)\n      (identical? x js\/Number.NEGATIVE_INFINITY)))\n\n(defn contains?\n  \"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.\"\n  [coll v]\n  (cond\n    (implements? IAssociative coll)\n    (-contains-key? coll v)\n\n    (native-satisfies? IAssociative coll)\n    (-contains-key? coll v)\n\n    (identical? (get coll v lookup-sentinel) lookup-sentinel)\n    false\n\n    :else\n    true))\n\n(defn find\n  \"Returns the map entry for key, or nil if key not present.\"\n  [coll k]\n  (if (ifind? coll)\n    (-find coll k)\n    (when (and (not (nil? coll))\n            (associative? coll)\n            (contains? coll k))\n      (MapEntry. k (get coll k) nil))))\n\n(defn ^boolean distinct?\n  \"Returns true if no two of the arguments are =\"\n  ([x] true)\n  ([x y] (not (= x y)))\n  ([x y & more]\n     (if (not (= x y))\n     (loop [s #{x y} xs more]\n       (let [x (first xs)\n             etc (next xs)]\n         (if xs\n           (if (contains? s x)\n             false\n             (recur (conj s x) etc))\n           true)))\n     false)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Seq fns ;;;;;;;;;;;;;;;;\n\n(defn ^number compare\n  \"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object.\"\n  [x y]\n  (cond\n   (identical? x y) 0\n\n   (nil? x) -1\n\n   (nil? y) 1\n\n   (number? x) (if (number? y)\n                 (garray\/defaultCompare x y)\n                 (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))\n\n   (satisfies? IComparable x)\n   (-compare x y)\n\n   :else\n   (if (and (or (string? x) (array? x) (true? x) (false? x))\n            (identical? (type x) (type y)))\n     (garray\/defaultCompare x y)\n     (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))))\n\n(defn ^:private compare-indexed\n  \"Compare indexed collection.\"\n  ([xs ys]\n     (let [xl (count xs)\n           yl (count ys)]\n       (cond\n        (< xl yl) -1\n        (> xl yl) 1\n        (== xl 0) 0\n        :else (compare-indexed xs ys xl 0))))\n  ([xs ys len n]\n     (let [d (compare (nth xs n) (nth ys n))]\n       (if (and (zero? d) (< (+ n 1) len))\n         (recur xs ys len (inc n))\n         d))))\n\n(defn ^:private fn->comparator\n  \"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator.\"\n  [f]\n  (if (= f compare)\n    compare\n    (fn [x y]\n      (let [r (f x y)]\n        (if (number? r)\n          r\n          (if r\n            -1\n            (if (f y x) 1 0)))))))\n\n(declare to-array)\n\n(defn sort\n  \"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -\/0\/+ valued comparator.\n   Comp defaults to compare.\"\n  ([coll]\n   (sort compare coll))\n  ([comp coll]\n   (if (seq coll)\n     (let [a (to-array coll)]\n       ;; matching Clojure's stable sort, though docs don't promise it\n       (garray\/stableSort a (fn->comparator comp))\n       (with-meta (seq a) (meta coll)))\n     ())))\n\n(defn sort-by\n  \"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -\/0\/+ valued comparator.\n   Comp defaults to compare.\"\n  ([keyfn coll]\n   (sort-by keyfn compare coll))\n  ([keyfn comp coll]\n     (sort (fn [x y] ((fn->comparator comp) (keyfn x) (keyfn y))) coll)))\n\n; simple reduce based on seqs, used as default\n(defn- seq-reduce\n  ([f coll]\n    (if-let [s (seq coll)]\n      (reduce f (first s) (next s))\n      (f)))\n  ([f val coll]\n    (loop [val val, coll (seq coll)]\n      (if coll\n        (let [nval (f val (first coll))]\n          (if (reduced? nval)\n            @nval\n            (recur nval (next coll))))\n        val))))\n\n(declare vec)\n\n(defn shuffle\n  \"Return a random permutation of coll\"\n  [coll]\n  (let [a (to-array coll)]\n    (garray\/shuffle a)\n    (vec a)))\n\n(defn- iter-reduce\n  ([coll f]\n   (let [iter (-iterator coll)]\n     (if (.hasNext iter)\n       (let [init (.next iter)]\n         (loop [acc init]\n           (if ^boolean (.hasNext iter)\n             (let [nacc (f acc (.next iter))]\n               (if (reduced? nacc)\n                 @nacc\n                 (recur nacc)))\n             acc)))\n       (f))))\n  ([coll f init]\n   (let [iter (-iterator coll)]\n     (loop [acc init]\n       (if ^boolean (.hasNext iter)\n         (let [nacc (f acc (.next iter))]\n           (if (reduced? nacc)\n             @nacc\n             (recur nacc)))\n         acc)))))\n\n(defn reduce\n  \"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.\"\n  ([f coll]\n     (cond\n       (implements? IReduce coll)\n       (-reduce coll f)\n\n       (array? coll)\n       (array-reduce coll f)\n\n       (string? coll)\n       (array-reduce coll f)\n\n       (native-satisfies? IReduce coll)\n       (-reduce coll f)\n\n       (iterable? coll)\n       (iter-reduce coll f)\n\n       :else\n       (seq-reduce f coll)))\n  ([f val coll]\n     (cond\n       (implements? IReduce coll)\n       (-reduce coll f val)\n\n       (array? coll)\n       (array-reduce coll f val)\n\n       (string? coll)\n       (array-reduce coll f val)\n\n       (native-satisfies? IReduce coll)\n       (-reduce coll f val)\n\n       (iterable? coll)\n       (iter-reduce coll f val)\n\n       :else\n       (seq-reduce f val coll))))\n\n(defn reduce-kv\n  \"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.\"\n  ([f init coll]\n    (if-not (nil? coll)\n      (-kv-reduce coll f init)\n      init)))\n\n(defn identity\n  \"Returns its argument.\"\n  [x] x)\n\n(defn completing\n  \"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.\"\n  ([f] (completing f identity))\n  ([f cf]\n    (fn\n      ([] (f))\n      ([x] (cf x))\n      ([x y] (f x y)))))\n\n(defn transduce\n  \"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.\"\n  ([xform f coll] (transduce xform f (f) coll))\n  ([xform f init coll]\n     (let [f (xform f)\n           ret (reduce f init coll)]\n       (f ret))))\n\n;;; Math - variadic forms will not work until the following implemented:\n;;; first, next, reduce\n\n(defn ^number +\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/+ x y))\n  ([x y & more]\n    (reduce + (cljs.core\/+ x y) more)))\n\n(defn ^number -\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/- x))\n  ([x y] (cljs.core\/- x y))\n  ([x y & more] (reduce - (cljs.core\/- x y) more)))\n\n(defn ^number *\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/* x y))\n  ([x y & more] (reduce * (cljs.core\/* x y) more)))\n\n(declare divide)\n\n(defn ^number \/\n  \"If no denominators are supplied, returns 1\/numerator,\n  else returns numerator divided by all of the denominators.\"\n  ([x] (\/ 1 x))\n  ([x y] (cljs.core\/divide x y)) ;; FIXME: waiting on cljs.core\/\/\n  ([x y & more] (reduce \/ (\/ x y) more)))\n\n(defn ^boolean <\n  \"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/< x y))\n  ([x y & more]\n     (if (cljs.core\/< x y)\n       (if (next more)\n         (recur y (first more) (next more))\n         (cljs.core\/< y (first more)))\n       false)))\n\n(defn ^boolean <=\n  \"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/<= x y))\n  ([x y & more]\n   (if (cljs.core\/<= x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/<= y (first more)))\n     false)))\n\n(defn ^boolean >\n  \"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/> x y))\n  ([x y & more]\n   (if (cljs.core\/> x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/> y (first more)))\n     false)))\n\n(defn ^boolean >=\n  \"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.\"\n  ([x] true)\n  ([x y] (cljs.core\/>= x y))\n  ([x y & more]\n   (if (cljs.core\/>= x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (cljs.core\/>= y (first more)))\n     false)))\n\n(defn dec\n  \"Returns a number one less than num.\"\n  [x] (- x 1))\n\n(defn ^number max\n  \"Returns the greatest of the nums.\"\n  ([x] x)\n  ([x y] (cljs.core\/max x y))\n  ([x y & more]\n   (reduce max (cljs.core\/max x y) more)))\n\n(defn ^number min\n  \"Returns the least of the nums.\"\n  ([x] x)\n  ([x y] (cljs.core\/min x y))\n  ([x y & more]\n   (reduce min (cljs.core\/min x y) more)))\n\n(defn ^number byte [x] x)\n\n(defn char\n  \"Coerce to char\"\n  [x]\n  (cond\n    (number? x) (.fromCharCode js\/String x)\n    (and (string? x) (== (.-length x) 1)) x\n    :else (throw (js\/Error. \"Argument to char must be a character or number\"))))\n\n(defn ^number short [x] x)\n(defn ^number float [x] x)\n(defn ^number double [x] x)\n\n(defn ^number unchecked-byte [x] x)\n(defn ^number unchecked-char [x] x)\n(defn ^number unchecked-short [x] x)\n(defn ^number unchecked-float [x] x)\n(defn ^number unchecked-double [x] x)\n\n(defn ^number unchecked-add\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-add x y))\n  ([x y & more] (reduce unchecked-add (cljs.core\/unchecked-add x y) more)))\n\n(defn ^number unchecked-add-int\n  \"Returns the sum of nums. (+) returns 0.\"\n  ([] 0)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-add-int x y))\n  ([x y & more] (reduce unchecked-add-int (cljs.core\/unchecked-add-int x y) more)))\n\n(defn unchecked-dec\n  \"Returns a number one less than x, an int.\"\n  [x]\n  (cljs.core\/unchecked-dec x))\n\n(defn unchecked-dec-int\n  \"Returns a number one less than x, an int.\"\n  [x]\n  (cljs.core\/unchecked-dec-int x))\n\n(defn ^number unchecked-divide-int\n  \"If no denominators are supplied, returns 1\/numerator,\n  else returns numerator divided by all of the denominators.\"\n  ([x] (unchecked-divide-int 1 x))\n  ([x y] (cljs.core\/divide x y)) ;; FIXME: waiting on cljs.core\/\/\n  ([x y & more] (reduce unchecked-divide-int (unchecked-divide-int x y) more)))\n\n(defn unchecked-inc [x]\n  (cljs.core\/unchecked-inc x))\n\n(defn unchecked-inc-int [x]\n  (cljs.core\/unchecked-inc-int x))\n\n(defn ^number unchecked-multiply\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-multiply x y))\n  ([x y & more] (reduce unchecked-multiply (cljs.core\/unchecked-multiply x y) more)))\n\n(defn ^number unchecked-multiply-int\n  \"Returns the product of nums. (*) returns 1.\"\n  ([] 1)\n  ([x] x)\n  ([x y] (cljs.core\/unchecked-multiply-int x y))\n  ([x y & more] (reduce unchecked-multiply-int (cljs.core\/unchecked-multiply-int x y) more)))\n\n(defn unchecked-negate [x]\n  (cljs.core\/unchecked-negate x))\n\n(defn unchecked-negate-int [x]\n  (cljs.core\/unchecked-negate-int x))\n\n(declare mod)\n\n(defn unchecked-remainder-int [x n]\n  (cljs.core\/unchecked-remainder-int x n))\n\n(defn ^number unchecked-subtract\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/unchecked-subtract x))\n  ([x y] (cljs.core\/unchecked-subtract x y))\n  ([x y & more] (reduce unchecked-subtract (cljs.core\/unchecked-subtract x y) more)))\n\n(defn ^number unchecked-subtract-int\n  \"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.\"\n  ([x] (cljs.core\/unchecked-subtract-int x))\n  ([x y] (cljs.core\/unchecked-subtract-int x y))\n  ([x y & more] (reduce unchecked-subtract-int (cljs.core\/unchecked-subtract-int x y) more)))\n\n(defn- ^number fix [q]\n  (if (>= q 0)\n    (Math\/floor q)\n    (Math\/ceil q)))\n\n(defn int\n  \"Coerce to int by stripping decimal places.\"\n  [x]\n  (bit-or x 0))\n\n(defn unchecked-int\n  \"Coerce to int by stripping decimal places.\"\n  [x]\n  (fix x))\n\n(defn long\n  \"Coerce to long by stripping decimal places. Identical to `int'.\"\n  [x]\n  (fix x))\n\n(defn unchecked-long\n  \"Coerce to long by stripping decimal places. Identical to `int'.\"\n  [x]\n  (fix x))\n\n(defn booleans [x] x)\n(defn bytes [x] x)\n(defn chars [x] x)\n(defn shorts [x] x)\n(defn ints [x] x)\n(defn floats [x] x)\n(defn doubles [x] x)\n(defn longs [x] x)\n\n(defn js-mod\n  \"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers\"\n  [n d]\n  (cljs.core\/js-mod n d))\n\n(defn mod\n  \"Modulus of num and div. Truncates toward negative infinity.\"\n  [n d]\n  (js-mod (+ (js-mod n d) d) d))\n\n(defn quot\n  \"quot[ient] of dividing numerator by denominator.\"\n  [n d]\n  (let [rem (js-mod n d)]\n    (fix (\/ (- n rem) d))))\n\n(defn rem\n  \"remainder of dividing numerator by denominator.\"\n  [n d]\n  (let [q (quot n d)]\n    (- n (* d q))))\n\n(defn bit-xor\n  \"Bitwise exclusive or\"\n  ([x y] (cljs.core\/bit-xor x y))\n  ([x y & more]\n     (reduce bit-xor (cljs.core\/bit-xor x y) more)))\n\n(defn bit-and\n  \"Bitwise and\"\n  ([x y] (cljs.core\/bit-and x y))\n  ([x y & more]\n     (reduce bit-and (cljs.core\/bit-and x y) more)))\n\n(defn bit-or\n  \"Bitwise or\"\n  ([x y] (cljs.core\/bit-or x y))\n  ([x y & more]\n     (reduce bit-or (cljs.core\/bit-or x y) more)))\n\n(defn bit-and-not\n  \"Bitwise and with complement\"\n  ([x y] (cljs.core\/bit-and-not x y))\n  ([x y & more]\n     (reduce bit-and-not (cljs.core\/bit-and-not x y) more)))\n\n(defn bit-clear\n  \"Clear bit at index n\"\n  [x n]\n  (cljs.core\/bit-clear x n))\n\n(defn bit-flip\n  \"Flip bit at index n\"\n  [x n]\n  (cljs.core\/bit-flip x n))\n\n(defn bit-not\n  \"Bitwise complement\"\n  [x] (cljs.core\/bit-not x))\n\n(defn bit-set\n  \"Set bit at index n\"\n  [x n]\n  (cljs.core\/bit-set x n))\n\n(defn ^boolean bit-test\n  \"Test bit at index n\"\n  [x n]\n  (cljs.core\/bit-test x n))\n\n(defn bit-shift-left\n  \"Bitwise shift left\"\n  [x n] (cljs.core\/bit-shift-left x n))\n\n(defn bit-shift-right\n  \"Bitwise shift right\"\n  [x n] (cljs.core\/bit-shift-right x n))\n\n(defn bit-shift-right-zero-fill\n  \"DEPRECATED: Bitwise shift right with zero fill\"\n  [x n] (cljs.core\/bit-shift-right-zero-fill x n))\n\n(defn unsigned-bit-shift-right\n  \"Bitwise shift right with zero fill\"\n  [x n] (cljs.core\/unsigned-bit-shift-right x n))\n\n(defn bit-count\n  \"Counts the number of bits set in n\"\n  [v]\n  (let [v (- v (bit-and (bit-shift-right v 1) 0x55555555))\n        v (+ (bit-and v 0x33333333) (bit-and (bit-shift-right v 2) 0x33333333))]\n    (bit-shift-right (* (bit-and (+ v (bit-shift-right v 4)) 0xF0F0F0F) 0x1010101) 24)))\n\n(defn ^boolean ==\n  \"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.\"\n  ([x] true)\n  ([x y] (-equiv x y))\n  ([x y & more]\n   (if (== x y)\n     (if (next more)\n       (recur y (first more) (next more))\n       (== y (first more)))\n     false)))\n\n(defn ^boolean pos?\n  \"Returns true if num is greater than zero, else false\"\n  [x] (cljs.core\/pos? x))\n\n(defn ^boolean zero?\n  \"Returns true if num is zero, else false\"\n  [x]\n  (cljs.core\/zero? x))\n\n(defn ^boolean neg?\n  \"Returns true if num is less than zero, else false\"\n  [x] (cljs.core\/neg? x))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; protocols for host types ;;;;;;\n\n(defn nthnext\n  \"Returns the nth next of coll, (seq coll) when n is 0.\"\n  [coll n]\n  (loop [n n xs (seq coll)]\n    (if (and xs (pos? n))\n      (recur (dec n) (next xs))\n      xs)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;; basics ;;;;;;;;;;;;;;;;;;\n\n(defn str\n  \"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.\"\n  ([] \"\")\n  ([x] (if (nil? x)\n         \"\"\n         (.join #js [x] \"\")))\n  ([x & ys]\n    (loop [sb (StringBuffer. (str x)) more ys]\n      (if more\n        (recur (. sb  (append (str (first more)))) (next more))\n        (.toString sb)))))\n\n(defn subs\n  \"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.\"\n  ([s start] ^string (.substring s start))\n  ([s start end] ^string (.substring s start end)))\n\n(declare map name)\n\n(defn- equiv-sequential\n  \"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false.\"\n  [x y]\n  (boolean\n    (when (sequential? y)\n      (if (and (counted? x) (counted? y)\n               (not (== (count x) (count y))))\n        false\n        (loop [xs (seq x) ys (seq y)]\n          (cond (nil? xs) (nil? ys)\n            (nil? ys) false\n            (= (first xs) (first ys)) (recur (next xs) (next ys))\n            :else false))))))\n\n(defn- hash-coll [coll]\n  (if (seq coll)\n    (loop [res (hash (first coll)) s (next coll)]\n      (if (nil? s)\n        res\n        (recur (hash-combine res (hash (first s))) (next s))))\n    0))\n\n(declare key val)\n\n(defn- hash-imap [m]\n  ;; a la clojure.lang.APersistentMap\n  (loop [h 0 s (seq m)]\n    (if s\n      (let [e (first s)]\n        (recur (js-mod (+ h (bit-xor (hash (key e)) (hash (val e))))\n                    4503599627370496)\n               (next s)))\n      h)))\n\n(defn- hash-iset [s]\n  ;; a la clojure.lang.APersistentSet\n  (loop [h 0 s (seq s)]\n    (if s\n      (let [e (first s)]\n        (recur (js-mod (+ h (hash e)) 4503599627370496)\n               (next s)))\n      h)))\n\n(declare name chunk-first chunk-rest)\n\n(defn- extend-object!\n  \"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached.\"\n  [obj fn-map]\n  (doseq [[key-name f] fn-map]\n    (let [str-name (name key-name)]\n      (gobject\/set obj str-name f)))\n  obj)\n\n;;;;;;;;;;;;;;;; cons ;;;;;;;;;;;;;;;;\n(deftype List [meta first rest count ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x count))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (List. meta first rest count __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (List. new-meta first rest count __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ASeq\n  ISeq\n  (-first [coll] first)\n  (-rest [coll]\n    (if (== count 1)\n      ()\n      rest))\n\n  INext\n  (-next [coll]\n    (if (== count 1)\n      nil\n      rest))\n\n  IStack\n  (-peek [coll] first)\n  (-pop [coll] (-rest coll))\n\n  ICollection\n  (-conj [coll o] (List. meta o coll (inc count) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ICounted\n  (-count [coll] count)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(defn list?\n  \"Returns true if x implements IList\"\n  [x]\n  (satisfies? IList x))\n\n(es6-iterable List)\n\n(deftype EmptyList [meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (EmptyList. meta))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (EmptyList. new-meta)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] nil)\n  (-rest [coll] ())\n\n  INext\n  (-next [coll] nil)\n\n  IStack\n  (-peek [coll] nil)\n  (-pop [coll] (throw (js\/Error. \"Can't pop empty list\")))\n\n  ICollection\n  (-conj [coll o] (List. meta o nil 1 nil))\n\n  IEmptyableCollection\n  (-empty [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other]\n    (if (or (list? other)\n            (sequential? other))\n      (nil? (seq other))\n      false))\n\n  IHash\n  (-hash [coll] empty-ordered-hash)\n\n  ISeqable\n  (-seq [coll] nil)\n\n  ICounted\n  (-count [coll] 0)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(set! (.-EMPTY List) (EmptyList. nil))\n\n(es6-iterable EmptyList)\n\n(defn reversible?\n  \"Returns true if coll satisfies? IReversible.\"\n  [coll]\n  (satisfies? IReversible coll))\n\n(defn ^seq rseq\n  \"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil\"\n  [rev]\n  (-rseq rev))\n\n(defn reverse\n  \"Returns a seq of the items in coll in reverse order. Not lazy.\"\n  [coll]\n  (if (reversible? coll)\n    (or (rseq coll) ())\n    (reduce conj () coll)))\n\n(defn list\n  \"Creates a new list containing the items.\"\n  [& xs]\n  (let [arr (if (and (instance? IndexedSeq xs) (zero? (.-i xs)))\n              (.-arr xs)\n              (let [arr (array)]\n                (loop [^not-native xs xs]\n                  (if-not (nil? xs)\n                    (do\n                      (.push arr (-first xs))\n                      (recur (-next xs)))\n                    arr))))]\n    (loop [i (alength arr) r ()]\n      (if (> i 0)\n        (recur (dec i) (-conj r (aget arr (dec i))))\n        r))))\n\n(deftype Cons [meta first rest ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IList\n\n  ICloneable\n  (-clone [_] (Cons. meta first rest __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Cons. new-meta first rest __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ASeq\n  ISeq\n  (-first [coll] first)\n  (-rest [coll] (if (nil? rest) () rest))\n\n  INext\n  (-next [coll]\n    (if (nil? rest) nil (seq rest)))\n\n  ICollection\n  (-conj [coll o] (Cons. nil o coll nil))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable Cons)\n\n(defn cons\n  \"Returns a new seq where x is the first element and coll is the rest.\"\n  [x coll]\n  (cond\n    (nil? coll)             (List. nil x nil 1 nil)\n    (implements? ISeq coll) (Cons. nil x coll nil)\n    :default                (Cons. nil x (seq coll) nil)))\n\n(defn hash-keyword [k]\n  (int (+ (hash-symbol k) 0x9e3779b9)))\n\n(defn- compare-keywords [a b]\n  (cond\n   (identical? (.-fqn a) (.-fqn b)) 0\n   (and (not (.-ns a)) (.-ns b)) -1\n   (.-ns a) (if-not (.-ns b)\n              1\n              (let [nsc (garray\/defaultCompare (.-ns a) (.-ns b))]\n                (if (== 0 nsc)\n                  (garray\/defaultCompare (.-name a) (.-name b))\n                  nsc)))\n   :default (garray\/defaultCompare (.-name a) (.-name b))))\n\n(deftype Keyword [ns name fqn ^:mutable _hash]\n  Object\n  (toString [_] (str \":\" fqn))\n  (equiv [this other]\n    (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Keyword other)\n      (identical? fqn (.-fqn other))\n      false))\n  IFn\n  (-invoke [kw coll]\n    (get coll kw))\n  (-invoke [kw coll not-found]\n    (get coll kw not-found))\n\n  IHash\n  (-hash [this]\n    (caching-hash this hash-keyword _hash))\n\n  INamed\n  (-name [_] name)\n  (-namespace [_] ns)\n\n  IPrintWithWriter\n  (-pr-writer [o writer _] (-write writer (str \":\" fqn))))\n\n(defn keyword?\n  \"Return true if x is a Keyword\"\n  [x]\n  (instance? Keyword x))\n\n(defn keyword-identical?\n  \"Efficient test to determine that two keywords are identical.\"\n  [x y]\n  (if (identical? x y)\n    true\n    (if (and (keyword? x) (keyword? y))\n      (identical? (.-fqn x) (.-fqn y))\n      false)))\n\n(defn symbol-identical?\n  \"Efficient test to determine that two symbols are identical.\"\n  [x y]\n  (if (identical? x y)\n    true\n    (if (and (symbol? x) (symbol? y))\n      (identical? (.-str x) (.-str y))\n      false)))\n\n(defn namespace\n  \"Returns the namespace String of a symbol or keyword, or nil if not present.\"\n  [x]\n  (if (implements? INamed x)\n    (-namespace x)\n    (throw (js\/Error. (str \"Doesn't support namespace: \" x)))))\n\n(defn ident?\n  \"Return true if x is a symbol or keyword\"\n  [x] (or (keyword? x) (symbol? x)))\n\n(defn simple-ident?\n  \"Return true if x is a symbol or keyword without a namespace\"\n  [x] (and (ident? x) (nil? (namespace x))))\n\n(defn qualified-ident?\n  \"Return true if x is a symbol or keyword with a namespace\"\n  [x] (boolean (and (ident? x) (namespace x) true)))\n\n(defn simple-symbol?\n  \"Return true if x is a symbol without a namespace\"\n  [x] (and (symbol? x) (nil? (namespace x))))\n\n(defn qualified-symbol?\n  \"Return true if x is a symbol with a namespace\"\n  [x] (boolean (and (symbol? x) (namespace x) true)))\n\n(defn simple-keyword?\n  \"Return true if x is a keyword without a namespace\"\n  [x] (and (keyword? x) (nil? (namespace x))))\n\n(defn qualified-keyword?\n  \"Return true if x is a keyword with a namespace\"\n  [x] (boolean (and (keyword? x) (namespace x) true)))\n\n(defn keyword\n  \"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.\"\n  ([name] (cond\n            (keyword? name) name\n            (symbol? name) (Keyword.\n                             (cljs.core\/namespace name)\n                             (cljs.core\/name name) (.-str name) nil)\n            (= \"\/\" name) (Keyword. nil name name nil)\n            (string? name) (let [parts (.split name \"\/\")]\n                             (if (== (alength parts) 2)\n                               (Keyword. (aget parts 0) (aget parts 1) name nil)\n                               (Keyword. nil (aget parts 0) name nil)))))\n  ([ns name]\n   (let [ns   (cond\n                (keyword? ns) (cljs.core\/name ns)\n                (symbol? ns)  (cljs.core\/name ns)\n                :else ns)\n         name (cond\n                (keyword? name) (cljs.core\/name name)\n                (symbol? name) (cljs.core\/name name)\n                :else name)]\n     (Keyword. ns name (str (when ns (str ns \"\/\")) name) nil))))\n\n\n(deftype LazySeq [meta ^:mutable fn ^:mutable s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (sval [coll]\n    (if (nil? fn)\n      s\n      (do\n        (set! s (fn))\n        (set! fn nil)\n        s)))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IPending\n  (-realized? [coll]\n    (not fn))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (LazySeq. new-meta #(-seq coll) nil __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (-seq coll)\n    (when-not (nil? s)\n      (first s)))\n  (-rest [coll]\n    (-seq coll)\n    (if-not (nil? s)\n      (rest s)\n      ()))\n\n  INext\n  (-next [coll]\n    (-seq coll)\n    (when-not (nil? s)\n      (next s)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (.sval coll)\n    (when-not (nil? s)\n      (loop [ls s]\n        (if (instance? LazySeq ls)\n          (recur (.sval ls))\n          (do (set! s ls)\n            (seq s))))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable LazySeq)\n\n(declare ArrayChunk)\n\n(deftype ChunkBuffer [^:mutable buf ^:mutable end]\n  Object\n  (add [_ o]\n    (aset buf end o)\n    (set! end (inc end)))\n\n  (chunk [_]\n    (let [ret (ArrayChunk. buf 0 end)]\n      (set! buf nil)\n      ret))\n\n  ICounted\n  (-count [_] end))\n\n(defn chunk-buffer [capacity]\n  (ChunkBuffer. (make-array capacity) 0))\n\n(deftype ArrayChunk [arr off end]\n  ICounted\n  (-count [_] (- end off))\n\n  IIndexed\n  (-nth [coll i]\n    (aget arr (+ off i)))\n  (-nth [coll i not-found]\n    (if (and (>= i 0) (< i (- end off)))\n      (aget arr (+ off i))\n      not-found))\n\n  IChunk\n  (-drop-first [coll]\n    (if (== off end)\n      (throw (js\/Error. \"-drop-first of empty chunk\"))\n      (ArrayChunk. arr (inc off) end)))\n\n  IReduce\n  (-reduce [coll f]\n    (array-reduce arr f (aget arr off) (inc off)))\n  (-reduce [coll f start]\n    (array-reduce arr f start off)))\n\n(defn array-chunk\n  ([arr]\n     (ArrayChunk. arr 0 (alength arr)))\n  ([arr off]\n     (ArrayChunk. arr off (alength arr)))\n  ([arr off end]\n     (ArrayChunk. arr off end)))\n\n(deftype ChunkedCons [chunk more meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ChunkedCons. chunk more new-meta __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ASeq\n  ISeq\n  (-first [coll] (-nth chunk 0))\n  (-rest [coll]\n    (if (> (-count chunk) 1)\n      (ChunkedCons. (-drop-first chunk) more nil nil)\n      (if (nil? more)\n        ()\n        more)))\n\n  INext\n  (-next [coll]\n    (if (> (-count chunk) 1)\n      (ChunkedCons. (-drop-first chunk) more nil nil)\n      (when-not (nil? more)\n        (-seq more))))\n\n  IChunkedSeq\n  (-chunked-first [coll] chunk)\n  (-chunked-rest [coll]\n    (if (nil? more)\n      ()\n      more))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (if (nil? more)\n      nil\n      more))\n\n  ICollection\n  (-conj [this o]\n    (cons o this))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash)))\n\n(es6-iterable ChunkedCons)\n\n(defn chunk-cons [chunk rest]\n  (if (zero? (-count chunk))\n    rest\n    (ChunkedCons. chunk rest nil nil)))\n\n(defn chunk-append [b x]\n  (.add b x))\n\n(defn chunk [b]\n  (.chunk b))\n\n(defn chunk-first [s]\n  (-chunked-first s))\n\n(defn chunk-rest [s]\n  (-chunked-rest s))\n\n(defn chunk-next [s]\n  (if (implements? IChunkedNext s)\n    (-chunked-next s)\n    (seq (-chunked-rest s))))\n\n;;;;;;;;;;;;;;;;\n\n(defn to-array\n  \"Returns an array containing the contents of coll.\"\n  [coll]\n  (let [ary (array)]\n    (loop [s (seq coll)]\n      (if-not (nil? s)\n        (do (. ary push (first s))\n            (recur (next s)))\n        ary))))\n\n(defn to-array-2d\n  \"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll.\"\n  [coll]\n    (let [ret (make-array (count coll))]\n      (loop [i 0 xs (seq coll)]\n        (when-not (nil? xs)\n          (aset ret i (to-array (first xs)))\n          (recur (inc i) (next xs))))\n      ret))\n\n(defn int-array\n  \"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (int-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn long-array\n  \"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (long-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn double-array\n  \"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (double-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn object-array\n  \"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.\"\n  ([size-or-seq]\n     (if (number? size-or-seq)\n       (object-array size-or-seq nil)\n       (into-array size-or-seq)))\n  ([size init-val-or-seq]\n     (let [a (make-array size)]\n       (if (seq? init-val-or-seq)\n         (let [s (seq init-val-or-seq)]\n           (loop [i 0 s s]\n             (if (and s (< i size))\n               (do\n                 (aset a i (first s))\n                 (recur (inc i) (next s)))\n               a)))\n         (do\n           (dotimes [i size]\n             (aset a i init-val-or-seq))\n           a)))))\n\n(defn bounded-count\n  \"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq\"\n  {:added \"1.9\"}\n  [n coll]\n  (if (counted? coll)\n    (count coll)\n    (loop [i 0 s (seq coll)]\n      (if (and (not (nil? s)) (< i n))\n        (recur (inc i) (next s))\n        i))))\n\n(defn spread\n  [arglist]\n  (when-not (nil? arglist)\n    (let [n (next arglist)]\n      (if (nil? n)\n        (seq (first arglist))\n        (cons (first arglist)\n              (spread n))))))\n\n(defn concat\n  \"Returns a lazy seq representing the concatenation of the elements in the supplied colls.\"\n  ([] (lazy-seq nil))\n  ([x] (lazy-seq x))\n  ([x y]\n    (lazy-seq\n      (let [s (seq x)]\n        (if s\n          (if (chunked-seq? s)\n            (chunk-cons (chunk-first s) (concat (chunk-rest s) y))\n            (cons (first s) (concat (rest s) y)))\n          y))))\n  ([x y & zs]\n     (let [cat (fn cat [xys zs]\n                 (lazy-seq\n                   (let [xys (seq xys)]\n                     (if xys\n                       (if (chunked-seq? xys)\n                         (chunk-cons (chunk-first xys)\n                                     (cat (chunk-rest xys) zs))\n                         (cons (first xys) (cat (rest xys) zs)))\n                       (when zs\n                         (cat (first zs) (next zs)))))))]\n       (cat (concat x y) zs))))\n\n(defn list*\n  \"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.\"\n  ([args] (seq args))\n  ([a args] (cons a args))\n  ([a b args] (cons a (cons b args)))\n  ([a b c args] (cons a (cons b (cons c args))))\n  ([a b c d & more]\n     (cons a (cons b (cons c (cons d (spread more)))))))\n\n\n;;; Transients\n\n(defn transient\n  \"Returns a new, transient version of the collection, in constant time.\"\n  [coll]\n  (-as-transient coll))\n\n(defn persistent!\n  \"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.\"\n  [tcoll]\n  (-persistent! tcoll))\n\n(defn conj!\n  \"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.\"\n  ([] (transient []))\n  ([tcoll] tcoll)\n  ([tcoll val]\n    (-conj! tcoll val))\n  ([tcoll val & vals]\n    (let [ntcoll (-conj! tcoll val)]\n      (if vals\n        (recur ntcoll (first vals) (next vals))\n        ntcoll))))\n\n(defn assoc!\n  \"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.\"\n  ([tcoll key val]\n    (-assoc! tcoll key val))\n  ([tcoll key val & kvs]\n    (let [ntcoll (-assoc! tcoll key val)]\n      (if kvs\n        (recur ntcoll (first kvs) (second kvs) (nnext kvs))\n        ntcoll))))\n\n(defn dissoc!\n  \"Returns a transient map that doesn't contain a mapping for key(s).\"\n  ([tcoll key]\n    (-dissoc! tcoll key))\n  ([tcoll key & ks]\n    (let [ntcoll (-dissoc! tcoll key)]\n      (if ks\n        (recur ntcoll (first ks) (next ks))\n        ntcoll))))\n\n(defn pop!\n  \"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll\"\n  [tcoll]\n  (-pop! tcoll))\n\n(defn disj!\n  \"disj[oin]. Returns a transient set of the same (hashed\/sorted) type, that\n  does not contain key(s).\"\n  ([tcoll val]\n    (-disjoin! tcoll val))\n  ([tcoll val & vals]\n    (let [ntcoll (-disjoin! tcoll val)]\n      (if vals\n        (recur ntcoll (first vals) (next vals))\n        ntcoll))))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; apply ;;;;;;;;;;;;;;;;\n\n;; see core.clj\n(gen-apply-to)\n\n(set! *unchecked-if* true)\n\n(defn- ^seq next*\n  \"Internal. DO NOT USE! Next without the nil? check.\"\n  [coll]\n  (if (implements? INext coll)\n    (-next ^not-native coll)\n    (seq (rest coll))))\n\n(defn- apply-to-simple\n  \"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!\"\n  ([f ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$0 f)\n       (.cljs$core$IFn$_invoke$arity$0 f)\n       (.call f f))\n     (apply-to-simple f (-first args) (next* args))))\n  ([f a0 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$1 f)\n       (.cljs$core$IFn$_invoke$arity$1 f a0)\n       (.call f f a0))\n     (apply-to-simple f a0 (-first args) (next* args))))\n  ([f a0 a1 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$2 f)\n       (.cljs$core$IFn$_invoke$arity$2 f a0 a1)\n       (.call f f a0 a1))\n     (apply-to-simple f a0 a1 (-first args) (next* args))))\n  ([f a0 a1 a2 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$3 f)\n       (.cljs$core$IFn$_invoke$arity$3 f a0 a1 a2)\n       (.call f f a0 a1 a2))\n     (apply-to-simple f a0 a1 a2 (-first args) (next* args))))\n  ([f a0 a1 a2 a3 ^seq args]\n   (if (nil? args)\n     (if (.-cljs$core$IFn$_invoke$arity$4 f)\n       (.cljs$core$IFn$_invoke$arity$4 f a0 a1 a2 a3)\n       (.call f f a0 a1 a2 a3))\n     (gen-apply-to-simple f 4 args))))\n\n(defn apply\n  \"Applies fn f to the argument list formed by prepending intervening arguments to args.\"\n  ([f args]\n   (if (.-cljs$lang$applyTo f)\n     (let [fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (bounded-count (inc fixed-arity) args)]\n       (if (<= bc fixed-arity)\n         (apply-to f bc args)\n         (.cljs$lang$applyTo f args)))\n     (apply-to-simple f (seq args))))\n  ([f x args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (inc (bounded-count fixed-arity args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x (seq args))))\n  ([f x y args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x y args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 2 (bounded-count (dec fixed-arity) args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x y (seq args))))\n  ([f x y z args]\n   (if (.-cljs$lang$applyTo f)\n     (let [arglist (list* x y z args)\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 3 (bounded-count (- fixed-arity 2) args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f x y z (seq args))))\n  ([f a b c d & args]\n   (if (.-cljs$lang$applyTo f)\n     (let [spread-args (spread args)\n           arglist (cons a (cons b (cons c (cons d spread-args))))\n           fixed-arity (.-cljs$lang$maxFixedArity f)\n           bc (+ 4 (bounded-count (- fixed-arity 3) spread-args))]\n       (if (<= bc fixed-arity)\n         (apply-to f bc arglist)\n         (.cljs$lang$applyTo f arglist)))\n     (apply-to-simple f a b c d (spread args)))))\n\n(set! *unchecked-if* false)\n\n;; CLJS-3200: used by destructure macro for maps to reduce amount of repeated code\n;; placed here because it needs apply and hash-map (only declared at this point)\n(defn --destructure-map [x]\n  (if (implements? ISeq x) (apply cljs.core\/hash-map x) x))\n\n(defn vary-meta\n \"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.\"\n  ([obj f]\n   (with-meta obj (f (meta obj))))\n  ([obj f a]\n   (with-meta obj (f (meta obj) a)))\n  ([obj f a b]\n   (with-meta obj (f (meta obj) a b)))\n  ([obj f a b c]\n   (with-meta obj (f (meta obj) a b c)))\n  ([obj f a b c d]\n   (with-meta obj (f (meta obj) a b c d)))\n  ([obj f a b c d & args]\n   (with-meta obj (apply f (meta obj) a b c d args))))\n\n(defn ^boolean not=\n  \"Same as (not (= obj1 obj2))\"\n  ([x] false)\n  ([x y] (not (= x y)))\n  ([x y & more]\n   (not (apply = x y more))))\n\n(defn not-empty\n  \"If coll is empty, returns nil, else coll\"\n  [coll] (when (seq coll) coll))\n\n(defn nil-iter []\n  (reify\n    Object\n    (hasNext [_] false)\n    (next [_] (js\/Error. \"No such element\"))\n    (remove [_] (js\/Error. \"Unsupported operation\"))))\n\n(deftype StringIter [s ^:mutable i]\n  Object\n  (hasNext [_] (< i (.-length s)))\n  (next [_]\n    (let [ret (.charAt s i)]\n      (set! i (inc i))\n      ret))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn string-iter [x]\n  (StringIter. x 0))\n\n(deftype ArrayIter [arr ^:mutable i]\n  Object\n  (hasNext [_] (< i (alength arr)))\n  (next [_]\n    (let [ret (aget arr i)]\n      (set! i (inc i))\n      ret))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn array-iter [x]\n  (ArrayIter. x 0))\n\n(def INIT #js {})\n(def START #js {})\n\n(deftype SeqIter [^:mutable _seq ^:mutable _next]\n  Object\n  (hasNext [_]\n    (if (identical? _seq INIT)\n      (do\n        (set! _seq START)\n        (set! _next (seq _next)))\n      (if (identical? _seq _next)\n        (set! _next (next _seq))))\n    (not (nil? _next)))\n  (next [this]\n    (if-not ^boolean (.hasNext this)\n      (throw (js\/Error. \"No such element\"))\n      (do\n        (set! _seq _next)\n        (first _next))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(defn seq-iter [coll]\n  (SeqIter. INIT coll))\n\n(defn iter [coll]\n  (cond\n    (iterable? coll) (-iterator coll)\n    (nil? coll) (nil-iter)\n    (string? coll) (string-iter coll)\n    (array? coll) (array-iter coll)\n    (seqable? coll) (seq-iter coll)\n    :else (throw (js\/Error. (str \"Cannot create iterator from \" coll)))))\n\n(deftype Many [vals]\n  Object\n  (add [this o]\n    (.push vals o)\n    this)\n  (remove [this]\n    (.shift vals))\n  (isEmpty [this]\n    (zero? (.-length vals)))\n  (toString [this]\n    (str \"Many: \" vals)))\n\n(def ^:private NONE #js {})\n\n(deftype Single [^:mutable val]\n  Object\n  (add [this o]\n    (if (identical? val NONE)\n      (do\n        (set! val o)\n        this)\n      (Many. #js [val o])))\n  (remove [this]\n    (if (identical? val NONE)\n      (throw (js\/Error. (str \"Removing object from empty buffer\")))\n      (let [ret val]\n        (set! val NONE)\n        ret)))\n  (isEmpty [this]\n    (identical? val NONE))\n  (toString [this]\n    (str \"Single: \" val)))\n\n(deftype Empty []\n  Object\n  (add [this o]\n    (Single. o))\n  (remove [this]\n    (throw (js\/Error. (str \"Removing object from empty buffer\"))))\n  (isEmpty [this]\n    true)\n  (toString [this]\n    \"Empty\"))\n\n(def ^:private EMPTY (Empty.))\n\n(deftype MultiIterator [iters]\n  Object\n  (hasNext [_]\n    (loop [iters (seq iters)]\n      (if-not (nil? iters)\n        (let [iter (first iters)]\n          (if-not ^boolean (.hasNext iter)\n            false\n            (recur (next iters))))\n        true)))\n  (next [_]\n    (let [nexts (array)]\n      (dotimes [i (alength iters)]\n        (aset nexts i (.next (aget iters i))))\n      (prim-seq nexts 0))))\n\n(defn- chunkIteratorSeq [iter]\n  (lazy-seq\n    (when ^boolean (.hasNext iter)\n      (let [arr (array)]\n        (loop [n 0]\n          (if (and (.hasNext iter) (< n 32))\n            (do\n              (aset arr n (.next iter))\n              (recur (inc n)))\n            (chunk-cons (array-chunk arr 0 n) (chunkIteratorSeq iter))))))))\n\n(deftype TransformerIterator [^:mutable buffer ^:mutable _next ^:mutable completed ^:mutable xf sourceIter multi]\n  Object\n  (step [this]\n    (if-not (identical? _next NONE)\n      true\n      (loop []\n        (if (identical? _next NONE)\n          (if ^boolean (.isEmpty buffer)\n            (if ^boolean completed\n              false\n              (if ^boolean (.hasNext sourceIter)\n                (let [iter (if ^boolean multi\n                             (apply xf (cons nil (.next sourceIter)))\n                             (xf nil (.next sourceIter)))]\n                  (when (reduced? iter)\n                    (xf nil)\n                    (set! completed true))\n                  (recur))\n                (do\n                  (xf nil)\n                  (set! completed true)\n                  (recur))))\n            (do\n              (set! _next (.remove buffer))\n              (recur)))\n          true))))\n  (hasNext [this]\n    (.step this))\n  (next [this]\n    (if ^boolean (.hasNext this)\n      (let [ret _next]\n        (set! _next NONE)\n        ret)\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_]\n    (js\/Error. \"Unsupported operation\")))\n\n(es6-iterable TransformerIterator)\n\n(defn transformer-iterator\n  [xform sourceIter multi]\n  (let [iterator (TransformerIterator. EMPTY NONE false nil sourceIter multi)]\n    (set! (.-xf iterator)\n      (xform (fn\n               ([] nil)\n               ([acc] acc)\n               ([acc o]\n                (set! (.-buffer iterator) (.add (.-buffer iterator) o))\n                acc))))\n    iterator))\n\n(set! (.-create TransformerIterator)\n  (fn [xform source]\n    (transformer-iterator xform source false)))\n\n(set! (.-createMulti TransformerIterator)\n  (fn [xform sources]\n    (transformer-iterator xform (MultiIterator. (to-array sources)) true)))\n\n(defn sequence\n  \"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments\"\n  ([coll]\n     (if (seq? coll)\n       coll\n       (or (seq coll) ())))\n  ([xform coll]\n   (or (chunkIteratorSeq\n         (.create TransformerIterator xform (iter coll)))\n       ()))\n  ([xform coll & colls]\n   (or (chunkIteratorSeq\n         (.createMulti TransformerIterator xform (map iter (cons coll colls))))\n       ())))\n\n(defn every?\n  \"Returns true if (pred x) is logical true for every x in coll, else\n  false.\"\n  [pred coll]\n  (cond\n   (nil? (seq coll)) true\n   (pred (first coll)) (recur pred (next coll))\n   :else false))\n\n(defn not-every?\n  \"Returns false if (pred x) is logical true for every x in\n  coll, else true.\"\n  [pred coll] (not (every? pred coll)))\n\n(defn some\n  \"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)\"\n  [pred coll]\n  (when-let [s (seq coll)]\n    (or (pred (first s)) (recur pred (next s)))))\n\n(defn not-any?\n  \"Returns false if (pred x) is logical true for any x in coll,\n  else true.\"\n  [pred coll] (not (some pred coll)))\n\n(defn even?\n  \"Returns true if n is even, throws an exception if n is not an integer\"\n   [n] (if (integer? n)\n        (zero? (bit-and n 1))\n        (throw (js\/Error. (str \"Argument must be an integer: \" n)))))\n\n(defn odd?\n  \"Returns true if n is odd, throws an exception if n is not an integer\"\n  [n] (not (even? n)))\n\n(defn complement\n  \"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.\"\n  [f]\n  (fn\n    ([] (not (f)))\n    ([x] (not (f x)))\n    ([x y] (not (f x y)))\n    ([x y & zs] (not (apply f x y zs)))))\n\n(defn constantly\n  \"Returns a function that takes any number of arguments and returns x.\"\n  [x] (fn [& args] x))\n\n(defn comp\n  \"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.\"\n  ([] identity)\n  ([f] f)\n  ([f g]\n     (fn\n       ([] (f (g)))\n       ([x] (f (g x)))\n       ([x y] (f (g x y)))\n       ([x y z] (f (g x y z)))\n       ([x y z & args] (f (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (f (g (h))))\n       ([x] (f (g (h x))))\n       ([x y] (f (g (h x y))))\n       ([x y z] (f (g (h x y z))))\n       ([x y z & args] (f (g (apply h x y z args))))))\n  ([f1 f2 f3 & fs]\n    (let [fs (reverse (list* f1 f2 f3 fs))]\n      (fn [& args]\n        (loop [ret (apply (first fs) args) fs (next fs)]\n          (if fs\n            (recur ((first fs) ret) (next fs))\n            ret))))))\n\n(defn partial\n  \"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.\"\n  ([f] f)\n  ([f arg1]\n   (fn\n     ([] (f arg1))\n     ([x] (f arg1 x))\n     ([x y] (f arg1 x y))\n     ([x y z] (f arg1 x y z))\n     ([x y z & args] (apply f arg1 x y z args))))\n  ([f arg1 arg2]\n   (fn\n     ([] (f arg1 arg2))\n     ([x] (f arg1 arg2 x))\n     ([x y] (f arg1 arg2 x y))\n     ([x y z] (f arg1 arg2 x y z))\n     ([x y z & args] (apply f arg1 arg2 x y z args))))\n  ([f arg1 arg2 arg3]\n   (fn\n     ([] (f arg1 arg2 arg3))\n     ([x] (f arg1 arg2 arg3 x))\n     ([x y] (f arg1 arg2 arg3 x y))\n     ([x y z] (f arg1 arg2 arg3 x y z))\n     ([x y z & args] (apply f arg1 arg2 arg3 x y z args))))\n  ([f arg1 arg2 arg3 & more]\n   (fn [& args] (apply f arg1 arg2 arg3 (concat more args)))))\n\n(defn fnil\n  \"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.\"\n  ([f x]\n   (fn\n     ([a] (f (if (nil? a) x a)))\n     ([a b] (f (if (nil? a) x a) b))\n     ([a b c] (f (if (nil? a) x a) b c))\n     ([a b c & ds] (apply f (if (nil? a) x a) b c ds))))\n  ([f x y]\n   (fn\n     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))\n     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) c))\n     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) c ds))))\n  ([f x y z]\n   (fn\n     ([a b] (f (if (nil? a) x a) (if (nil? b) y b)))\n     ([a b c] (f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c)))\n     ([a b c & ds] (apply f (if (nil? a) x a) (if (nil? b) y b) (if (nil? c) z c) ds)))))\n\n(declare volatile!)\n\n(defn map-indexed\n  \"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.\"\n  ([f]\n    (fn [rf]\n      (let [i (volatile! -1)]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (rf result (f (vswap! i inc) input)))))))\n  ([f coll]\n    (letfn [(mapi [idx coll]\n              (lazy-seq\n                (when-let [s (seq coll)]\n                  (if (chunked-seq? s)\n                    (let [c (chunk-first s)\n                          size (count c)\n                          b (chunk-buffer size)]\n                      (dotimes [i size]\n                        (chunk-append b (f (+ idx i) (-nth c i))))\n                      (chunk-cons (chunk b) (mapi (+ idx size) (chunk-rest s))))\n                    (cons (f idx (first s)) (mapi (inc idx) (rest s)))))))]\n      (mapi 0 coll))))\n\n(defn keep\n  \"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.\"\n  ([f]\n   (fn [rf]\n     (fn\n       ([] (rf))\n       ([result] (rf result))\n       ([result input]\n          (let [v (f input)]\n            (if (nil? v)\n              result\n              (rf result v)))))))\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n            (let [x (f (-nth c i))]\n              (when-not (nil? x)\n                (chunk-append b x))))\n          (chunk-cons (chunk b) (keep f (chunk-rest s))))\n        (let [x (f (first s))]\n          (if (nil? x)\n            (keep f (rest s))\n            (cons x (keep f (rest s))))))))))\n\n;; =============================================================================\n;; Atom\n\n(deftype Atom [state meta validator watches]\n  Object\n  (equiv [this other]\n    (-equiv this other))\n\n  IAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [_] state)\n\n  IMeta\n  (-meta [_] meta)\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (doseq [[key f] watches]\n      (f key this oldval newval)))\n  (-add-watch [this key f]\n    (set! (.-watches this) (assoc watches key f))\n    this)\n  (-remove-watch [this key]\n    (set! (.-watches this) (dissoc watches key)))\n\n  IHash\n  (-hash [this] (goog\/getUid this)))\n\n(defn atom\n  \"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.\"\n  ([x] (Atom. x nil nil nil))\n  ([x & {:keys [meta validator]}] (Atom. x meta validator nil)))\n\n(declare pr-str)\n\n(defn reset!\n  \"Sets the value of atom to newval without regard for the\n  current value. Returns new-value.\"\n  [a new-value]\n  (if (instance? Atom a)\n    (let [validate (.-validator a)]\n      (when-not (nil? validate)\n        (when-not (validate new-value)\n          (throw (js\/Error. \"Validator rejected reference state\"))))\n      (let [old-value (.-state a)]\n        (set! (.-state a) new-value)\n        (when-not (nil? (.-watches a))\n          (-notify-watches a old-value new-value))\n        new-value))\n    (-reset! a new-value)))\n\n(defn reset-vals!\n  \"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.\"\n  {:added \"1.9\"}\n  [a new-value]\n  (let [validate (.-validator a)]\n    (when-not (nil? validate)\n      (when-not (validate new-value)\n        (throw (js\/Error. \"Validator rejected reference state\"))))\n    (let [old-value (.-state a)]\n      (set! (.-state a) new-value)\n      (when-not (nil? (.-watches a))\n        (-notify-watches a old-value new-value))\n      [old-value new-value])))\n\n(defn swap!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.\"\n  ([a f]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a)))\n     (-swap! a f)))\n  ([a f x]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a) x))\n     (-swap! a f x)))\n  ([a f x y]\n   (if (instance? Atom a)\n     (reset! a (f (.-state a) x y))\n     (-swap! a f x y)))\n  ([a f x y & more]\n   (if (instance? Atom a)\n     (reset! a (apply f (.-state a) x y more))\n     (-swap! a f x y more))))\n\n(defn swap-vals!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.\"\n  {:added \"1.9\"}\n  ([a f]\n   (reset-vals! a (f (.-state a))))\n  ([a f x]\n   (reset-vals! a (f (.-state a) x)))\n  ([a f x y]\n   (reset-vals! a (f (.-state a) x y)))\n  ([a f x y & more]\n   (reset-vals! a (apply f (.-state a) x y more))))\n\n(defn compare-and-set!\n  \"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false.\"\n  [^not-native a oldval newval]\n  (if (= (-deref a) oldval)\n    (do (reset! a newval) true)\n    false))\n\n(defn set-validator!\n  \"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed.\"\n  [iref val]\n  (when (and (some? val)\n             (not (val (-deref iref))))\n    (throw (js\/Error. \"Validator rejected reference state\")))\n  (set! (.-validator iref) val))\n\n(defn get-validator\n  \"Gets the validator-fn for a var\/ref\/agent\/atom.\"\n  [iref]\n  (.-validator iref))\n\n(deftype Volatile [^:mutable state]\n  IVolatile\n  (-vreset! [_ new-state]\n    (set! state new-state))\n\n  IDeref\n  (-deref [_] state))\n\n(defn volatile!\n  \"Creates and returns a Volatile with an initial value of val.\"\n  [val]\n  (Volatile. val))\n\n(defn volatile?\n  \"Returns true if x is a volatile.\"\n  [x] (instance? Volatile x))\n\n(defn vreset!\n  \"Sets the value of volatile to newval without regard for the\n   current value. Returns newval.\"\n  [vol newval]  (-vreset! vol newval))\n\n(defn keep-indexed\n  \"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.\"\n  ([f]\n   (fn [rf]\n     (let [ia (volatile! -1)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (let [i (vswap! ia inc)\n                  v (f i input)]\n              (if (nil? v)\n                result\n                (rf result v))))))))\n  ([f coll]\n     (letfn [(keepi [idx coll]\n               (lazy-seq\n                (when-let [s (seq coll)]\n                  (if (chunked-seq? s)\n                    (let [c (chunk-first s)\n                          size (count c)\n                          b (chunk-buffer size)]\n                      (dotimes [i size]\n                        (let [x (f (+ idx i) (-nth c i))]\n                          (when-not (nil? x)\n                            (chunk-append b x))))\n                      (chunk-cons (chunk b) (keepi (+ idx size) (chunk-rest s))))\n                    (let [x (f idx (first s))]\n                      (if (nil? x)\n                        (keepi (inc idx) (rest s))\n                        (cons x (keepi (inc idx) (rest s)))))))))]\n       (keepi 0 coll))))\n\n(defn every-pred\n  \"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.\"\n  ([p]\n     (fn ep1\n       ([] true)\n       ([x] (boolean (p x)))\n       ([x y] (boolean (and (p x) (p y))))\n       ([x y z] (boolean (and (p x) (p y) (p z))))\n       ([x y z & args] (boolean (and (ep1 x y z)\n                                     (every? p args))))))\n  ([p1 p2]\n     (fn ep2\n       ([] true)\n       ([x] (boolean (and (p1 x) (p2 x))))\n       ([x y] (boolean (and (p1 x) (p1 y) (p2 x) (p2 y))))\n       ([x y z] (boolean (and (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z))))\n       ([x y z & args] (boolean (and (ep2 x y z)\n                                     (every? #(and (p1 %) (p2 %)) args))))))\n  ([p1 p2 p3]\n     (fn ep3\n       ([] true)\n       ([x] (boolean (and (p1 x) (p2 x) (p3 x))))\n       ([x y] (boolean (and (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y))))\n       ([x y z] (boolean (and (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z))))\n       ([x y z & args] (boolean (and (ep3 x y z)\n                                     (every? #(and (p1 %) (p2 %) (p3 %)) args))))))\n  ([p1 p2 p3 & ps]\n     (let [ps (list* p1 p2 p3 ps)]\n       (fn epn\n         ([] true)\n         ([x] (every? #(% x) ps))\n         ([x y] (every? #(and (% x) (% y)) ps))\n         ([x y z] (every? #(and (% x) (% y) (% z)) ps))\n         ([x y z & args] (boolean (and (epn x y z)\n                                       (every? #(every? % args) ps))))))))\n\n(defn some-fn\n  \"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.\"\n  ([p]\n     (fn sp1\n       ([] nil)\n       ([x] (p x))\n       ([x y] (or (p x) (p y)))\n       ([x y z] (or (p x) (p y) (p z)))\n       ([x y z & args] (or (sp1 x y z)\n                           (some p args)))))\n  ([p1 p2]\n     (fn sp2\n       ([] nil)\n       ([x] (or (p1 x) (p2 x)))\n       ([x y] (or (p1 x) (p1 y) (p2 x) (p2 y)))\n       ([x y z] (or (p1 x) (p1 y) (p1 z) (p2 x) (p2 y) (p2 z)))\n       ([x y z & args] (or (sp2 x y z)\n                           (some #(or (p1 %) (p2 %)) args)))))\n  ([p1 p2 p3]\n     (fn sp3\n       ([] nil)\n       ([x] (or (p1 x) (p2 x) (p3 x)))\n       ([x y] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y)))\n       ([x y z] (or (p1 x) (p2 x) (p3 x) (p1 y) (p2 y) (p3 y) (p1 z) (p2 z) (p3 z)))\n       ([x y z & args] (or (sp3 x y z)\n                           (some #(or (p1 %) (p2 %) (p3 %)) args)))))\n  ([p1 p2 p3 & ps]\n     (let [ps (list* p1 p2 p3 ps)]\n       (fn spn\n         ([] nil)\n         ([x] (some #(% x) ps))\n         ([x y] (some #(or (% x) (% y)) ps))\n         ([x y z] (some #(or (% x) (% y) (% z)) ps))\n         ([x y z & args] (or (spn x y z)\n                             (some #(some % args) ps)))))))\n\n(defn map\n  \"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.\"\n  ([f]\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n           (rf result (f input)))\n        ([result input & inputs]\n           (rf result (apply f input inputs))))))\n  ([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (chunk-append b (f (-nth c i))))\n          (chunk-cons (chunk b) (map f (chunk-rest s))))\n        (cons (f (first s)) (map f (rest s)))))))\n  ([f c1 c2]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2)]\n      (when (and s1 s2)\n        (cons (f (first s1) (first s2))\n              (map f (rest s1) (rest s2)))))))\n  ([f c1 c2 c3]\n   (lazy-seq\n    (let [s1 (seq c1) s2 (seq c2) s3 (seq c3)]\n      (when (and  s1 s2 s3)\n        (cons (f (first s1) (first s2) (first s3))\n              (map f (rest s1) (rest s2) (rest s3)))))))\n  ([f c1 c2 c3 & colls]\n   (let [step (fn step [cs]\n                 (lazy-seq\n                  (let [ss (map seq cs)]\n                    (when (every? identity ss)\n                      (cons (map first ss) (step (map rest ss)))))))]\n     (map #(apply f %) (step (conj colls c3 c2 c1))))))\n\n(defn take\n  \"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [na (volatile! n)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [n @na\n                    nn (vswap! na dec)\n                    result (if (pos? n)\n                             (rf result input)\n                             result)]\n                (if (not (pos? nn))\n                  (ensure-reduced result)\n                  result)))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (lazy-seq\n       (when (pos? n)\n         (when-let [s (seq coll)]\n           (cons (first s) (take (dec n) (rest s))))))))\n\n(defn drop\n  \"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [na (volatile! n)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [n @na]\n                (vswap! na dec)\n                (if (pos? n)\n                  result\n                  (rf result input))))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (let [step (fn [n coll]\n                  (let [s (seq coll)]\n                    (if (and (pos? n) s)\n                      (recur (dec n) (rest s))\n                      s)))]\n       (lazy-seq (step n coll)))))\n\n(defn drop-last\n  \"Return a lazy sequence of all but the last n (default 1) items in coll\"\n  ([s] (drop-last 1 s))\n  ([n s] (map (fn [x _] x) s (drop n s))))\n\n(defn take-last\n  \"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.\"\n  [n coll]\n  (loop [s (seq coll), lead (seq (drop n coll))]\n    (if lead\n      (recur (next s) (next lead))\n      s)))\n\n(defn drop-while\n  \"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.\"\n  ([pred]\n     (fn [rf]\n       (let [da (volatile! true)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [drop? @da]\n                (if (and drop? (pred input))\n                  result\n                  (do\n                    (vreset! da nil)\n                    (rf result input)))))))))\n  ([pred coll]\n     (let [step (fn [pred coll]\n                  (let [s (seq coll)]\n                    (if (and s (pred (first s)))\n                      (recur pred (rest s))\n                      s)))]\n       (lazy-seq (step pred coll)))))\n\n(deftype Cycle [meta all prev ^:mutable current ^:mutable _next]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (currentval [coll]\n    (when-not ^seq current\n      (if-let [c (next prev)]\n        (set! current c)\n        (set! current all)))\n    current)\n\n  IPending\n  (-realized? [coll]\n    (some? current))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Cycle. new-meta all prev current _next)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (first (.currentval coll)))\n  (-rest [coll]\n    (when (nil? _next)\n      (set! _next (Cycle. nil all (.currentval coll) nil nil)))\n    _next)\n\n  INext\n  (-next [coll]\n    (-rest coll))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll f]\n    (loop [s (.currentval coll) ret (first s)]\n      (let [s   (or (next s) all)\n            ret (f ret (first s))]\n        (if (reduced? ret)\n          @ret\n          (recur s ret)))))\n  (-reduce [coll f start]\n    (loop [s (.currentval coll) ret start]\n      (let [ret (f ret (first s))]\n        (if (reduced? ret)\n          @ret\n          (recur (or (next s) all) ret))))))\n\n(defn cycle\n  \"Returns a lazy (infinite!) sequence of repetitions of the items in coll.\"\n  [coll] (if-let [vals (seq coll)]\n           (Cycle. nil vals nil vals nil)\n           (.-EMPTY List)))\n\n(defn split-at\n  \"Returns a vector of [(take n coll) (drop n coll)]\"\n  [n coll]\n  [(take n coll) (drop n coll)])\n\n(deftype Repeat [meta count val ^:mutable next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x count))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IPending\n  (-realized? [coll] false)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Repeat. new-meta count val next nil)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    val)\n  (-rest [coll]\n    (if (nil? next)\n      (if (> count 1)\n        (do\n          (set! next (Repeat. nil (dec count) val nil nil))\n          next)\n        (if (== -1 count)\n          coll\n          ()))\n      next))\n\n  INext\n  (-next [coll]\n    (if (nil? next)\n      (if (> count 1)\n        (do\n          (set! next (Repeat. nil (dec count) val nil nil))\n          next)\n        (if (== -1 count)\n          coll\n          nil))\n      next))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IReduce\n  (-reduce [coll f]\n    (if (== count -1)\n      (loop [ret (f val val)]\n        (if (reduced? ret)\n          @ret\n          (recur (f ret val))))\n      (loop [i 1 ret val]\n        (if (< i count)\n          (let [ret (f ret val)]\n            (if (reduced? ret)\n              @ret\n              (recur (inc i) ret)))\n          ret))))\n  (-reduce [coll f start]\n    (if (== count -1)\n      (loop [ret (f start val)]\n        (if (reduced? ret)\n          @ret\n          (recur (f ret val))))\n      (loop [i 0 ret start]\n        (if (< i count)\n          (let [ret (f ret val)]\n            (if (reduced? ret)\n              @ret\n              (recur (inc i) ret)))\n          ret)))))\n\n(defn repeat\n  \"Returns a lazy (infinite!, or length n if supplied) sequence of xs.\"\n  ([x] (Repeat. nil -1 x nil nil))\n  ([n x] (if (pos? n)\n           (Repeat. nil n x nil nil)\n           (.-EMPTY List))))\n\n(defn replicate\n  \"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs.\"\n  [n x] (take n (repeat x)))\n\n(defn repeatedly\n  \"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it\"\n  ([f] (lazy-seq (cons (f) (repeatedly f))))\n  ([n f] (take n (repeatedly f))))\n\n(def ^:private UNREALIZED-SEED #js {})\n\n(deftype Iterate [meta f prev-seed ^:mutable seed ^:mutable next]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IPending\n  (-realized? [coll]\n    (not (identical? seed UNREALIZED-SEED)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (Iterate. new-meta f prev-seed seed next)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll]\n    (when (identical? UNREALIZED-SEED seed)\n      (set! seed (f prev-seed)))\n    seed)\n  (-rest [coll]\n    (when (nil? next)\n      (set! next (Iterate. nil f (-first coll) UNREALIZED-SEED nil)))\n    next)\n\n  INext\n  (-next [coll]\n    (-rest coll))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeqable\n  (-seq [coll] coll)\n\n  IReduce\n  (-reduce [coll rf]\n    (let [first (-first coll)\n          v     (f first)]\n      (loop [ret (rf first v) v v]\n        (if (reduced? ret)\n          @ret\n          (let [v (f v)]\n            (recur (rf ret v) v))))))\n  (-reduce [coll rf start]\n    (let [v (-first coll)]\n      (loop [ret (rf start v) v v]\n        (if (reduced? ret)\n          @ret\n          (let [v (f v)]\n            (recur (rf ret v) v)))))))\n\n(defn iterate\n  \"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\"\n  {:added \"1.0\"}\n  [f x] (Iterate. nil f nil x nil))\n\n(defn interleave\n  \"Returns a lazy seq of the first item in each coll, then the second etc.\"\n  ([] ())\n  ([c1] (lazy-seq c1))\n  ([c1 c2]\n     (lazy-seq\n      (let [s1 (seq c1) s2 (seq c2)]\n        (when (and s1 s2)\n          (cons (first s1) (cons (first s2)\n                                 (interleave (rest s1) (rest s2))))))))\n  ([c1 c2 & colls]\n     (lazy-seq\n      (let [ss (map seq (conj colls c2 c1))]\n        (when (every? identity ss)\n          (concat (map first ss) (apply interleave (map rest ss))))))))\n\n(defn interpose\n  \"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.\"\n  ([sep]\n    (fn [rf]\n      (let [started (volatile! false)]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (if @started\n              (let [sepr (rf result sep)]\n                (if (reduced? sepr)\n                  sepr\n                  (rf sepr input)))\n              (do\n                (vreset! started true)\n                (rf result input))))))))\n  ([sep coll] (drop 1 (interleave (repeat sep) coll))))\n\n\n\n(defn- flatten1\n  \"Take a collection of collections, and return a lazy seq\n  of items from the inner collection\"\n  [colls]\n  (let [cat (fn cat [coll colls]\n              (lazy-seq\n                (if-let [coll (seq coll)]\n                  (cons (first coll) (cat (rest coll) colls))\n                  (when (seq colls)\n                    (cat (first colls) (rest colls))))))]\n    (cat nil colls)))\n\n(declare cat)\n\n(defn mapcat\n  \"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided\"\n  {:added \"1.0\"\n   :static true}\n  ([f] (comp (map f) cat))\n  ([f & colls]\n     (apply concat (apply map f colls))))\n\n(defn filter\n  \"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred]\n    (fn [rf]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n           (if (pred input)\n             (rf result input)\n             result)))))\n  ([pred coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (count c)\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (when (pred (-nth c i))\n                (chunk-append b (-nth c i))))\n          (chunk-cons (chunk b) (filter pred (chunk-rest s))))\n        (let [f (first s) r (rest s)]\n          (if (pred f)\n            (cons f (filter pred r))\n            (filter pred r))))))))\n\n(defn remove\n  \"Returns a lazy sequence of the items in coll for which\n  (pred item) returns logical false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred] (filter (complement pred)))\n  ([pred coll]\n     (filter (complement pred) coll)))\n\n(defn tree-seq\n  \"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree.\"\n   [branch? children root]\n   (let [walk (fn walk [node]\n                (lazy-seq\n                 (cons node\n                  (when (branch? node)\n                    (mapcat walk (children node))))))]\n     (walk root)))\n\n(defn flatten\n  \"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil.\"\n  [x]\n  (filter #(not (sequential? %))\n          (rest (tree-seq sequential? seq x))))\n\n(defn into\n  \"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.\"\n  ([] [])\n  ([to] to)\n  ([to from]\n     (if-not (nil? to)\n       (if (implements? IEditableCollection to)\n         (-with-meta (persistent! (reduce -conj! (transient to) from)) (meta to))\n         (reduce -conj to from))\n       (reduce conj to from)))\n  ([to xform from]\n     (if (implements? IEditableCollection to)\n       (-with-meta (persistent! (transduce xform conj! (transient to) from)) (meta to))\n       (transduce xform conj to from))))\n\n(defn mapv\n  \"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.\"\n  ([f coll]\n     (-> (reduce (fn [v o] (conj! v (f o))) (transient []) coll)\n         persistent!))\n  ([f c1 c2]\n     (into [] (map f c1 c2)))\n  ([f c1 c2 c3]\n     (into [] (map f c1 c2 c3)))\n  ([f c1 c2 c3 & colls]\n     (into [] (apply map f c1 c2 c3 colls))))\n\n(defn filterv\n  \"Returns a vector of the items in coll for which\n  (pred item) returns logical true. pred must be free of side-effects.\"\n  [pred coll]\n  (-> (reduce (fn [v o] (if (pred o) (conj! v o) v))\n              (transient [])\n              coll)\n      persistent!))\n\n(defn partition\n  \"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.\"\n  ([n coll]\n     (partition n n coll))\n  ([n step coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (when (== n (count p))\n             (cons p (partition n step (drop step s))))))))\n  ([n step pad coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [p (take n s)]\n           (if (== n (count p))\n             (cons p (partition n step pad (drop step s)))\n             (list (take n (concat p pad)))))))))\n\n(defn get-in\n  \"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied.\"\n  {:added \"1.2\"\n   :static true}\n  ([m ks]\n     (reduce get m ks))\n  ([m ks not-found]\n     (loop [sentinel lookup-sentinel\n            m m\n            ks (seq ks)]\n       (if-not (nil? ks)\n         (let [m (get m (first ks) sentinel)]\n           (if (identical? sentinel m)\n             not-found\n             (recur sentinel m (next ks))))\n         m))))\n\n(defn assoc-in\n  \"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.\"\n  [m [k & ks] v]\n  (if ks\n    (assoc m k (assoc-in (get m k) ks v))\n    (assoc m k v)))\n\n(defn update-in\n  \"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.\"\n  ([m [k & ks] f]\n   (if ks\n     (assoc m k (update-in (get m k) ks f))\n     (assoc m k (f (get m k)))))\n  ([m [k & ks] f a]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a))\n     (assoc m k (f (get m k) a))))\n  ([m [k & ks] f a b]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a b))\n     (assoc m k (f (get m k) a b))))\n  ([m [k & ks] f a b c]\n   (if ks\n     (assoc m k (update-in (get m k) ks f a b c))\n     (assoc m k (f (get m k) a b c))))\n  ([m [k & ks] f a b c & args]\n   (if ks\n     (assoc m k (apply update-in (get m k) ks f a b c args))\n     (assoc m k (apply f (get m k) a b c args)))))\n\n(defn update\n  \"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.\"\n  ([m k f]\n   (assoc m k (f (get m k))))\n  ([m k f x]\n   (assoc m k (f (get m k) x)))\n  ([m k f x y]\n   (assoc m k (f (get m k) x y)))\n  ([m k f x y z]\n   (assoc m k (f (get m k) x y z)))\n  ([m k f x y z & more]\n   (assoc m k (apply f (get m k) x y z more))))\n\n;;; PersistentVector\n\n(deftype VectorNode [edit arr])\n\n(defn- pv-fresh-node [edit]\n  (VectorNode. edit (make-array 32)))\n\n(defn- pv-aget [node idx]\n  (aget (.-arr node) idx))\n\n(defn- pv-aset [node idx val]\n  (aset (.-arr node) idx val))\n\n(defn- pv-clone-node [node]\n  (VectorNode. (.-edit node) (aclone (.-arr node))))\n\n(defn- tail-off [pv]\n  (let [cnt (.-cnt pv)]\n    (if (< cnt 32)\n      0\n      (bit-shift-left (bit-shift-right-zero-fill (dec cnt) 5) 5))))\n\n(defn- new-path [edit level node]\n  (loop [ll level\n         ret node]\n    (if (zero? ll)\n      ret\n      (let [embed ret\n            r (pv-fresh-node edit)\n            _ (pv-aset r 0 embed)]\n        (recur (- ll 5) r)))))\n\n(defn- push-tail [pv level parent tailnode]\n  (let [ret (pv-clone-node parent)\n        subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt pv)) level) 0x01f)]\n    (if (== 5 level)\n      (do\n        (pv-aset ret subidx tailnode)\n        ret)\n      (let [child (pv-aget parent subidx)]\n        (if-not (nil? child)\n          (let [node-to-insert (push-tail pv (- level 5) child tailnode)]\n            (pv-aset ret subidx node-to-insert)\n            ret)\n          (let [node-to-insert (new-path nil (- level 5) tailnode)]\n            (pv-aset ret subidx node-to-insert)\n            ret))))))\n\n(defn- vector-index-out-of-bounds [i cnt]\n  (throw (js\/Error. (str \"No item \" i \" in vector of length \" cnt))))\n\n(defn- first-array-for-longvec [pv]\n  ;; invariants: (count pv) > 32.\n  (loop [node (.-root pv)\n         level (.-shift pv)]\n    (if (pos? level)\n      (recur (pv-aget node 0) (- level 5))\n      (.-arr node))))\n\n(defn- unchecked-array-for [pv i]\n  ;; invariant: i is a valid index of pv (use array-for if unknown).\n  (if (>= i (tail-off pv))\n      (.-tail pv)\n      (loop [node (.-root pv)\n             level (.-shift pv)]\n        (if (pos? level)\n          (recur (pv-aget node (bit-and (bit-shift-right-zero-fill i level) 0x01f))\n                 (- level 5))\n          (.-arr node)))))\n\n(defn- array-for [pv i]\n  (if (and (<= 0 i) (< i (.-cnt pv)))\n    (unchecked-array-for pv i)\n    (vector-index-out-of-bounds i (.-cnt pv))))\n\n(defn- do-assoc [pv level node i val]\n  (let [ret (pv-clone-node node)]\n    (if (zero? level)\n      (do\n        (pv-aset ret (bit-and i 0x01f) val)\n        ret)\n      (let [subidx (bit-and (bit-shift-right-zero-fill i level) 0x01f)]\n        (pv-aset ret subidx (do-assoc pv (- level 5) (pv-aget node subidx) i val))\n        ret))))\n\n(defn- pop-tail [pv level node]\n  (let [subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt pv) 2) level) 0x01f)]\n    (cond\n     (> level 5) (let [new-child (pop-tail pv (- level 5) (pv-aget node subidx))]\n                   (if (and (nil? new-child) (zero? subidx))\n                     nil\n                     (let [ret (pv-clone-node node)]\n                       (pv-aset ret subidx new-child)\n                       ret)))\n     (zero? subidx) nil\n     :else (let [ret (pv-clone-node node)]\n             (pv-aset ret subidx nil)\n             ret))))\n\n(deftype RangedIterator [^:mutable i ^:mutable base ^:mutable arr v start end]\n  Object\n  (hasNext [this]\n    (< i end))\n  (next [this]\n    (when (== (- i base) 32)\n      (set! arr (unchecked-array-for v i))\n      (set! base (+ base 32)))\n    (let [ret (aget arr (bit-and i 0x01f))]\n      (set! i (inc i))\n      ret)))\n\n(defn ranged-iterator [v start end]\n  (let [i start]\n    (RangedIterator. i (- i (js-mod i 32))\n      (when (< start (count v))\n        (unchecked-array-for v i))\n      v start end)))\n\n(defn- pv-reduce\n  ([pv f start end]\n   (if (< start end)\n     (pv-reduce pv f (nth pv start) (inc start) end)\n     (f)))\n  ([pv f init start end]\n   (loop [acc init i start arr (unchecked-array-for pv start)]\n     (if (< i end)\n       (let [j (bit-and i 0x01f)\n             arr (if (zero? j) (unchecked-array-for pv i) arr)\n             nacc (f acc (aget arr j))]\n         (if (reduced? nacc)\n           @nacc\n           (recur nacc (inc i) arr)))\n       acc))))\n\n(declare tv-editable-root tv-editable-tail TransientVector deref\n         pr-sequential-writer pr-writer chunked-seq)\n\n(defprotocol APersistentVector\n  \"Marker protocol\")\n\n(deftype PersistentVector [meta cnt shift root tail ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (PersistentVector. meta cnt shift root tail __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentVector. new-meta cnt shift root tail __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IStack\n  (-peek [coll]\n    (when (> cnt 0)\n      (-nth coll (dec cnt))))\n  (-pop [coll]\n    (cond\n     (zero? cnt) (throw (js\/Error. \"Can't pop empty vector\"))\n     (== 1 cnt) (-with-meta (.-EMPTY PersistentVector) meta)\n     (< 1 (- cnt (tail-off coll)))\n      (PersistentVector. meta (dec cnt) shift root (.slice tail 0 -1) nil)\n      :else (let [new-tail (unchecked-array-for coll (- cnt 2))\n                  nr (pop-tail coll shift root)\n                  new-root (if (nil? nr) (.-EMPTY-NODE PersistentVector) nr)\n                  cnt-1 (dec cnt)]\n              (if (and (< 5 shift) (nil? (pv-aget new-root 1)))\n                (PersistentVector. meta cnt-1 (- shift 5) (pv-aget new-root 0) new-tail nil)\n                (PersistentVector. meta cnt-1 shift new-root new-tail nil)))))\n\n  ICollection\n  (-conj [coll o]\n    (if (< (- cnt (tail-off coll)) 32)\n      (let [len (alength tail)\n            new-tail (make-array (inc len))]\n        (dotimes [i len]\n          (aset new-tail i (aget tail i)))\n        (aset new-tail len o)\n        (PersistentVector. meta (inc cnt) shift root new-tail nil))\n      (let [root-overflow? (> (bit-shift-right-zero-fill cnt 5) (bit-shift-left 1 shift))\n            new-shift (if root-overflow? (+ shift 5) shift)\n            new-root (if root-overflow?\n                       (let [n-r (pv-fresh-node nil)]\n                           (pv-aset n-r 0 root)\n                           (pv-aset n-r 1 (new-path nil shift (VectorNode. nil tail)))\n                           n-r)\n                       (push-tail coll shift root (VectorNode. nil tail)))]\n        (PersistentVector. meta (inc cnt) new-shift new-root (array o) nil))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentVector) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other]\n    (if (instance? PersistentVector other)\n      (if (== cnt (count other))\n        (let [me-iter  (-iterator coll)\n              you-iter (-iterator other)]\n          (loop []\n            (if ^boolean (.hasNext me-iter)\n              (let [x (.next me-iter)\n                    y (.next you-iter)]\n                (if (= x y)\n                  (recur)\n                  false))\n              true)))\n        false)\n      (equiv-sequential coll other)))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (cond\n      (zero? cnt) nil\n      (<= cnt 32) (IndexedSeq. tail 0 nil)\n      :else (chunked-seq coll (first-array-for-longvec coll) 0 0)))\n\n  ICounted\n  (-count [coll] cnt)\n\n  IIndexed\n  (-nth [coll n]\n    (aget (array-for coll n) (bit-and n 0x01f)))\n  (-nth [coll n not-found]\n    (if (and (<= 0 n) (< n cnt))\n      (aget (unchecked-array-for coll n) (bit-and n 0x01f))\n      not-found))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found] (if (number? k)\n                                (-nth coll k not-found)\n                                not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (number? k)\n      (-assoc-n coll k v)\n      (throw (js\/Error. \"Vector's key for assoc must be a number.\"))))\n  (-contains-key? [coll k]\n    (if (integer? k)\n      (and (<= 0 k) (< k cnt))\n      false))\n\n  IFind\n  (-find [coll n]\n    (when (and (<= 0 n) (< n cnt))\n      (MapEntry. n (aget (unchecked-array-for coll n) (bit-and n 0x01f)) nil)))\n\n  APersistentVector\n  IVector\n  (-assoc-n [coll n val]\n    (cond\n       (and (<= 0 n) (< n cnt))\n       (if (<= (tail-off coll) n)\n         (let [new-tail (aclone tail)]\n           (aset new-tail (bit-and n 0x01f) val)\n           (PersistentVector. meta cnt shift root new-tail nil))\n         (PersistentVector. meta cnt shift (do-assoc coll shift root n val) tail nil))\n       (== n cnt) (-conj coll val)\n       :else (throw (js\/Error. (str \"Index \" n \" out of bounds  [0,\" cnt \"]\")))))\n\n  IReduce\n  (-reduce [v f]\n    (pv-reduce v f 0 cnt))\n  (-reduce [v f init]\n    (loop [i 0 init init]\n      (if (< i cnt)\n        (let [arr  (unchecked-array-for v i)\n              len  (alength arr)\n              init (loop [j 0 init init]\n                     (if (< j len)\n                       (let [init (f init (aget arr j))]\n                         (if (reduced? init)\n                           init\n                           (recur (inc j) init)))\n                       init))]\n          (if (reduced? init)\n            @init\n            (recur (+ i len) init)))\n        init)))\n\n  IKVReduce\n  (-kv-reduce [v f init]\n    (loop [i 0 init init]\n      (if (< i cnt)\n        (let [arr  (unchecked-array-for v i)\n              len  (alength arr)\n              init (loop [j 0 init init]\n                     (if (< j len)\n                       (let [init (f init (+ j i) (aget arr j))]\n                         (if (reduced? init)\n                           init\n                           (recur (inc j) init)))\n                       init))]\n          (if (reduced? init)\n            @init\n            (recur (+ i len) init)))\n        init)))\n\n  IFn\n  (-invoke [coll k]\n    (-nth coll k))\n  (-invoke [coll k not-found]\n    (-nth coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientVector. cnt shift (tv-editable-root root) (tv-editable-tail tail)))\n\n  IReversible\n  (-rseq [coll]\n    (when (pos? cnt)\n      (RSeq. coll (dec cnt) nil)))\n\n  IIterable\n  (-iterator [this]\n    (ranged-iterator this 0 cnt)))\n\n(set! (.-EMPTY-NODE PersistentVector) (VectorNode. nil (make-array 32)))\n\n(set! (.-EMPTY PersistentVector)\n  (PersistentVector. nil 0 5 (.-EMPTY-NODE PersistentVector) (array) empty-ordered-hash))\n\n(set! (.-fromArray PersistentVector)\n  (fn [xs ^boolean no-clone]\n    (let [l (alength xs)\n          xs (if no-clone xs (aclone xs))]\n      (if (< l 32)\n        (PersistentVector. nil l 5 (.-EMPTY-NODE PersistentVector) xs nil)\n        (let [node (.slice xs 0 32)\n              v (PersistentVector. nil 32 5 (.-EMPTY-NODE PersistentVector) node nil)]\n          (loop [i 32 out (-as-transient v)]\n            (if (< i l)\n              (recur (inc i) (conj! out (aget xs i)))\n              (persistent! out))))))))\n\n(es6-iterable PersistentVector)\n\n(declare map-entry?)\n\n(defn vec\n  \"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified.\"\n  [coll]\n  (cond\n    (map-entry? coll)\n    [(key coll) (val coll)]\n\n    (vector? coll)\n    (with-meta coll nil)\n\n    (array? coll)\n    (.fromArray PersistentVector coll true)\n\n    :else\n    (-persistent!\n      (reduce -conj!\n        (-as-transient (.-EMPTY PersistentVector))\n        coll))))\n\n(defn vector\n  \"Creates a new vector containing the args.\"\n  [& args]\n  (if (and (instance? IndexedSeq args) (zero? (.-i args)))\n    (.fromArray PersistentVector (.-arr args) (not (array? (.-arr args))))\n    (vec args)))\n\n(declare subvec)\n\n(deftype ChunkedSeq [vec node i off meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (chunked-seq vec node i off new-meta)))\n  IMeta\n  (-meta [coll] meta)\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ASeq\n  ISeq\n  (-first [coll]\n    (aget node off))\n  (-rest [coll]\n    (if (< (inc off) (alength node))\n      (let [s (chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          ()\n          s))\n      (-chunked-rest coll)))\n\n  INext\n  (-next [coll]\n    (if (< (inc off) (alength node))\n      (let [s (chunked-seq vec node i (inc off))]\n        (if (nil? s)\n          nil\n          s))\n      (-chunked-next coll)))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll]\n    ())\n\n  IChunkedSeq\n  (-chunked-first [coll]\n    (array-chunk node off))\n  (-chunked-rest [coll]\n    (let [end (+ i (alength node))]\n      (if (< end (-count vec))\n        (chunked-seq vec (unchecked-array-for vec end) end 0)\n        ())))\n\n  IChunkedNext\n  (-chunked-next [coll]\n    (let [end (+ i (alength node))]\n      (when (< end (-count vec))\n        (chunked-seq vec (unchecked-array-for vec end) end 0))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f]\n    (pv-reduce vec f (+ i off) (count vec)))\n\n  (-reduce [coll f start]\n    (pv-reduce vec f start (+ i off) (count vec))))\n\n(es6-iterable ChunkedSeq)\n\n(defn chunked-seq\n  ([vec i off] (ChunkedSeq. vec (array-for vec i) i off nil nil))\n  ([vec node i off] (ChunkedSeq. vec node i off nil nil))\n  ([vec node i off meta]\n     (ChunkedSeq. vec node i off meta nil)))\n\n(declare build-subvec)\n\n(deftype Subvec [meta v start end ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [_] (Subvec. meta v start end __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (build-subvec new-meta v start end __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IStack\n  (-peek [coll]\n    (when-not (== start end)\n      (-nth v (dec end))))\n  (-pop [coll]\n    (if (== start end)\n      (throw (js\/Error. \"Can't pop empty vector\"))\n      (build-subvec meta v start (dec end) nil)))\n\n  ICollection\n  (-conj [coll o]\n    (build-subvec meta (-assoc-n v end o) start (inc end) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentVector) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (let [subvec-seq (fn subvec-seq [i]\n                       (when-not (== i end)\n                         (cons (-nth v i)\n                               (lazy-seq\n                                (subvec-seq (inc i))))))]\n      (subvec-seq start)))\n\n  IReversible\n  (-rseq [coll]\n    (if-not (== start end)\n      (RSeq. coll (dec (- end start)) nil)))\n\n  ICounted\n  (-count [coll] (- end start))\n\n  IIndexed\n  (-nth [coll n]\n    (if (or (neg? n) (<= end (+ start n)))\n      (vector-index-out-of-bounds n (- end start))\n      (-nth v (+ start n))))\n  (-nth [coll n not-found]\n    (if (or (neg? n) (<= end (+ start n)))\n      not-found\n      (-nth v (+ start n) not-found)))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found] (if (number? k)\n                                (-nth coll k not-found)\n                                not-found))\n\n  IAssociative\n  (-assoc [coll key val]\n    (if (number? key)\n      (-assoc-n coll key val)\n      (throw (js\/Error. \"Subvec's key for assoc must be a number.\"))))\n  (-contains-key? [coll key]\n    (if (integer? key)\n      (and (<= 0 key) (< key (- end start)))\n      false))\n\n  IFind\n  (-find [coll n]\n    (when-not (neg? n)\n      (let [idx (+ start n)]\n        (when (< idx end)\n          (MapEntry. n (-lookup v idx) nil)))))\n\n  IVector\n  (-assoc-n [coll n val]\n    (let [v-pos (+ start n)]\n      (if (or (neg? n) (<= (inc end) v-pos))\n        (throw (js\/Error. (str \"Index \" n \" out of bounds [0,\" (-count coll) \"]\")))\n        (build-subvec meta (assoc v v-pos val) start (max end (inc v-pos)) nil))))\n\n  IReduce\n  (-reduce [coll f]\n    (if (implements? APersistentVector v)\n      (pv-reduce v f start end)\n      (ci-reduce coll f)))\n  (-reduce [coll f init]\n    (if (implements? APersistentVector v)\n      (pv-reduce v f init start end)\n      (ci-reduce coll f init)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (loop [i start j 0 init init]\n      (if (< i end)\n        (let [init (f init j (-nth v i))]\n          (if (reduced? init)\n            @init\n            (recur (inc i) (inc j) init)))\n        init)))\n\n  IFn\n  (-invoke [coll k]\n    (-nth coll k))\n  (-invoke [coll k not-found]\n    (-nth coll k not-found))\n\n  IIterable\n  (-iterator [coll]\n    (if (implements? APersistentVector v)\n      (ranged-iterator v start end)\n      (seq-iter coll))))\n\n(es6-iterable Subvec)\n\n(defn- build-subvec [meta v start end __hash]\n  (if (instance? Subvec v)\n    (recur meta (.-v v) (+ (.-start v) start) (+ (.-start v) end) __hash)\n    (do\n      (when-not (vector? v)\n        (throw (js\/Error. \"v must satisfy IVector\")))\n      (when (or (neg? start)\n                (< end start)\n                (> end (count v)))\n        (throw (js\/Error. \"Index out of bounds\")))\n      (Subvec. meta v start end __hash))))\n\n(defn subvec\n  \"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.\"\n  ([v start]\n   (subvec v start (count v)))\n  ([v start end]\n   (assert (and (not (nil? start)) (not (nil? end))))\n   (build-subvec nil v (int start) (int end) nil)))\n\n(defn- tv-ensure-editable [edit node]\n  (if (identical? edit (.-edit node))\n    node\n    (VectorNode. edit (aclone (.-arr node)))))\n\n(defn- tv-editable-root [node]\n  (VectorNode. (js-obj) (aclone (.-arr node))))\n\n(defn- tv-editable-tail [tl]\n  (let [ret (make-array 32)]\n    (array-copy tl 0 ret 0 (alength tl))\n    ret))\n\n(defn- tv-push-tail [tv level parent tail-node]\n  (let [ret    (tv-ensure-editable (.. tv -root -edit) parent)\n        subidx (bit-and (bit-shift-right-zero-fill (dec (.-cnt tv)) level) 0x01f)]\n    (pv-aset ret subidx\n             (if (== level 5)\n               tail-node\n               (let [child (pv-aget ret subidx)]\n                 (if-not (nil? child)\n                   (tv-push-tail tv (- level 5) child tail-node)\n                   (new-path (.. tv -root -edit) (- level 5) tail-node)))))\n    ret))\n\n(defn- tv-pop-tail [tv level node]\n  (let [node   (tv-ensure-editable (.. tv -root -edit) node)\n        subidx (bit-and (bit-shift-right-zero-fill (- (.-cnt tv) 2) level) 0x01f)]\n    (cond\n      (> level 5) (let [new-child (tv-pop-tail\n                                   tv (- level 5) (pv-aget node subidx))]\n                    (if (and (nil? new-child) (zero? subidx))\n                      nil\n                      (do (pv-aset node subidx new-child)\n                          node)))\n      (zero? subidx) nil\n      :else (do (pv-aset node subidx nil)\n                node))))\n\n(defn- unchecked-editable-array-for [tv i]\n  ;; invariant: i is a valid index of tv.\n  (if (>= i (tail-off tv))\n    (.-tail tv)\n    (let [root (.-root tv)]\n      (loop [node  root\n             level (.-shift tv)]\n        (if (pos? level)\n          (recur (tv-ensure-editable\n                   (.-edit root)\n                   (pv-aget node\n                            (bit-and (bit-shift-right-zero-fill i level)\n                                     0x01f)))\n                 (- level 5))\n          (.-arr node))))))\n\n(deftype TransientVector [^:mutable cnt\n                          ^:mutable shift\n                          ^:mutable root\n                          ^:mutable tail]\n  ITransientCollection\n  (-conj! [tcoll o]\n    (if ^boolean (.-edit root)\n      (if (< (- cnt (tail-off tcoll)) 32)\n        (do (aset tail (bit-and cnt 0x01f) o)\n            (set! cnt (inc cnt))\n            tcoll)\n        (let [tail-node (VectorNode. (.-edit root) tail)\n              new-tail  (make-array 32)]\n          (aset new-tail 0 o)\n          (set! tail new-tail)\n          (if (> (bit-shift-right-zero-fill cnt 5)\n                 (bit-shift-left 1 shift))\n            (let [new-root-array (make-array 32)\n                  new-shift      (+ shift 5)]\n              (aset new-root-array 0 root)\n              (aset new-root-array 1 (new-path (.-edit root) shift tail-node))\n              (set! root  (VectorNode. (.-edit root) new-root-array))\n              (set! shift new-shift)\n              (set! cnt   (inc cnt))\n              tcoll)\n            (let [new-root (tv-push-tail tcoll shift root tail-node)]\n              (set! root new-root)\n              (set! cnt  (inc cnt))\n              tcoll))))\n      (throw (js\/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [tcoll]\n    (if ^boolean (.-edit root)\n      (do (set! (.-edit root) nil)\n          (let [len (- cnt (tail-off tcoll))\n                trimmed-tail (make-array len)]\n            (array-copy tail 0 trimmed-tail 0 len)\n            (PersistentVector. nil cnt shift root trimmed-tail nil)))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val]\n    (if (number? key)\n      (-assoc-n! tcoll key val)\n      (throw (js\/Error. \"TransientVector's key for assoc! must be a number.\"))))\n\n  ITransientVector\n  (-assoc-n! [tcoll n val]\n    (if ^boolean (.-edit root)\n      (cond\n        (and (<= 0 n) (< n cnt))\n        (if (<= (tail-off tcoll) n)\n          (do (aset tail (bit-and n 0x01f) val)\n              tcoll)\n          (let [new-root\n                ((fn go [level node]\n                   (let [node (tv-ensure-editable (.-edit root) node)]\n                     (if (zero? level)\n                       (do (pv-aset node (bit-and n 0x01f) val)\n                           node)\n                       (let [subidx (bit-and (bit-shift-right-zero-fill n level)\n                                             0x01f)]\n                         (pv-aset node subidx\n                                  (go (- level 5) (pv-aget node subidx)))\n                         node))))\n                 shift root)]\n            (set! root new-root)\n            tcoll))\n        (== n cnt) (-conj! tcoll val)\n        :else\n        (throw\n         (js\/Error.\n          (str \"Index \" n \" out of bounds for TransientVector of length\" cnt))))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  (-pop! [tcoll]\n    (if ^boolean (.-edit root)\n      (cond\n        (zero? cnt) (throw (js\/Error. \"Can't pop empty vector\"))\n        (== 1 cnt)                       (do (set! cnt 0) tcoll)\n        (pos? (bit-and (dec cnt) 0x01f)) (do (set! cnt (dec cnt)) tcoll)\n        :else\n        (let [new-tail (unchecked-editable-array-for tcoll (- cnt 2))\n              new-root (let [nr (tv-pop-tail tcoll shift root)]\n                         (if-not (nil? nr)\n                           nr\n                           (VectorNode. (.-edit root) (make-array 32))))]\n          (if (and (< 5 shift) (nil? (pv-aget new-root 1)))\n            (let [new-root (tv-ensure-editable (.-edit root) (pv-aget new-root 0))]\n              (set! root  new-root)\n              (set! shift (- shift 5))\n              (set! cnt   (dec cnt))\n              (set! tail  new-tail)\n              tcoll)\n            (do (set! root new-root)\n                (set! cnt  (dec cnt))\n                (set! tail new-tail)\n                tcoll))))\n      (throw (js\/Error. \"pop! after persistent!\"))))\n\n  ICounted\n  (-count [coll]\n    (if ^boolean (.-edit root)\n      cnt\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  IIndexed\n  (-nth [coll n]\n    (if ^boolean (.-edit root)\n      (aget (array-for coll n) (bit-and n 0x01f))\n      (throw (js\/Error. \"nth after persistent!\"))))\n\n  (-nth [coll n not-found]\n    (if (and (<= 0 n) (< n cnt))\n      (-nth coll n)\n      not-found))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (cond\n      (not ^boolean (.-edit root)) (throw (js\/Error. \"lookup after persistent!\"))\n      (number? k) (-nth coll k not-found)\n      :else not-found))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found)))\n\n;;; PersistentQueue ;;;\n\n(deftype PersistentQueueIter [^:mutable fseq riter]\n  Object\n  (hasNext [_]\n    (or (and (some? fseq) (seq fseq)) (and (some? riter) (.hasNext riter))))\n  (next [_]\n    (cond\n      (some? fseq)\n      (let [ret (first fseq)]\n        (set! fseq (next fseq))\n        ret)\n      (and (some? riter) ^boolean (.hasNext riter))\n      (.next riter)\n      :else (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentQueueSeq [meta front rear ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentQueueSeq. new-meta front rear __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] (first front))\n  (-rest  [coll]\n    (if-let [f1 (next front)]\n      (PersistentQueueSeq. meta f1 rear nil)\n      (if (nil? rear)\n        (-empty coll)\n        (PersistentQueueSeq. meta rear nil nil))))\n\n  INext\n  (-next [coll]\n    (if-let [f1 (next front)]\n      (PersistentQueueSeq. meta f1 rear nil)\n      (when (some? rear)\n        (PersistentQueueSeq. meta rear nil nil))))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY List) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] coll))\n\n(es6-iterable PersistentQueueSeq)\n\n(deftype PersistentQueue [meta count front rear ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ICloneable\n  (-clone [coll] (PersistentQueue. meta count front rear __hash))\n\n  IIterable\n  (-iterator [coll]\n    (PersistentQueueIter. front (-iterator rear)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentQueue. new-meta count front rear __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ISeq\n  (-first [coll] (first front))\n  (-rest [coll] (rest (seq coll)))\n\n  IStack\n  (-peek [coll] (first front))\n  (-pop [coll]\n    (if front\n      (if-let [f1 (next front)]\n        (PersistentQueue. meta (dec count) f1 rear nil)\n        (PersistentQueue. meta (dec count) (seq rear) [] nil))\n      coll))\n\n  ICollection\n  (-conj [coll o]\n    (if front\n      (PersistentQueue. meta (inc count) front (conj (or rear []) o) nil)\n      (PersistentQueue. meta (inc count) (conj front o) [] nil)))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentQueue) meta))\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (let [rear (seq rear)]\n      (if (or front rear)\n        (PersistentQueueSeq. nil front (seq rear) nil))))\n\n  ICounted\n  (-count [coll] count))\n\n(set! (.-EMPTY PersistentQueue) (PersistentQueue. nil 0 nil [] empty-ordered-hash))\n\n(es6-iterable PersistentQueue)\n\n(deftype NeverEquiv []\n  Object\n  (equiv [this other]\n    (-equiv this other))\n  IEquiv\n  (-equiv [o other] false))\n\n(def ^:private never-equiv (NeverEquiv.))\n\n(defn equiv-map\n  \"Test map equivalence. Returns true if x equals y, otherwise returns false.\"\n  [x y]\n  (boolean\n    (when (and (map? y) (not (record? y)))\n      ; assume all maps are counted\n      (when (== (count x) (count y))\n        (if (satisfies? IKVReduce x)\n          (reduce-kv\n            (fn [_ k v]\n              (if (= (get y k never-equiv) v)\n                true\n                (reduced false)))\n            true x)\n          (every?\n            (fn [xkv]\n              (= (get y (first xkv) never-equiv) (second xkv)))\n            x))))))\n\n\n(defn- scan-array [incr k array]\n  (let [len (alength array)]\n    (loop [i 0]\n      (when (< i len)\n        (if (identical? k (aget array i))\n          i\n          (recur (+ i incr)))))))\n\n; The keys field is an array of all keys of this map, in no particular\n; order. Any string, keyword, or symbol key is used as a property name\n; to store the value in strobj.  If a key is assoc'ed when that same\n; key already exists in strobj, the old value is overwritten. If a\n; non-string key is assoc'ed, return a HashMap object instead.\n\n(defn- obj-map-compare-keys [a b]\n  (let [a (hash a)\n        b (hash b)]\n    (cond\n     (< a b) -1\n     (> a b) 1\n     :else 0)))\n\n(defn- obj-map->hash-map [m k v]\n  (let [ks  (.-keys m)\n        len (alength ks)\n        so  (.-strobj m)\n        mm  (meta m)]\n    (loop [i   0\n           out (transient (.-EMPTY PersistentHashMap))]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (inc i) (assoc! out k (gobject\/get so k))))\n        (-with-meta (persistent! (assoc! out k v)) mm)))))\n\n;;; ObjMap - DEPRECATED\n\n(defn- obj-clone [obj ks]\n  (let [new-obj (js-obj)\n        l (alength ks)]\n    (loop [i 0]\n      (when (< i l)\n        (let [k (aget ks i)]\n          (gobject\/set new-obj k (gobject\/get obj k))\n          (recur (inc i)))))\n    new-obj))\n\n(deftype ObjMap [meta keys strobj update-count ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ObjMap. new-meta keys strobj update-count __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (reduce -conj\n              coll\n              entry)))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY ObjMap) meta))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (when (pos? (alength keys))\n      (map #(vector % (unchecked-get strobj %))\n           (.sort keys obj-map-compare-keys))))\n\n  ICounted\n  (-count [coll] (alength keys))\n\n  ILookup\n  (-lookup [coll k] (-lookup coll k nil))\n  (-lookup [coll k not-found]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      (unchecked-get strobj k)\n      not-found))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (string? k)\n        (if (or (> update-count (.-HASHMAP_THRESHOLD ObjMap))\n                (>= (alength keys) (.-HASHMAP_THRESHOLD ObjMap)))\n          (obj-map->hash-map coll k v)\n          (if-not (nil? (scan-array 1 k keys))\n            (let [new-strobj (obj-clone strobj keys)]\n              (gobject\/set new-strobj k v)\n              (ObjMap. meta keys new-strobj (inc update-count) nil)) ; overwrite\n            (let [new-strobj (obj-clone strobj keys) ; append\n                  new-keys (aclone keys)]\n              (gobject\/set new-strobj k v)\n              (.push new-keys k)\n              (ObjMap. meta new-keys new-strobj (inc update-count) nil))))\n        ;; non-string key. game over.\n        (obj-map->hash-map coll k v)))\n  (-contains-key? [coll k]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      true\n      false))\n\n  IFind\n  (-find [coll k]\n    (when (and (string? k)\n            (not (nil? (scan-array 1 k keys))))\n      (MapEntry. k (unchecked-get strobj k) nil)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [len (alength keys)]\n      (loop [keys (.sort keys obj-map-compare-keys)\n             init init]\n        (if (seq keys)\n          (let [k (first keys)\n                init (f init k (unchecked-get strobj k))]\n            (if (reduced? init)\n              @init\n              (recur (rest keys) init)))\n          init))))\n\n  IMap\n  (-dissoc [coll k]\n    (if (and (string? k)\n             (not (nil? (scan-array 1 k keys))))\n      (let [new-keys (aclone keys)\n            new-strobj (obj-clone strobj keys)]\n        (.splice new-keys (scan-array 1 k new-keys) 1)\n        (js-delete new-strobj k)\n        (ObjMap. meta new-keys new-strobj (inc update-count) nil))\n      coll)) ; key not found, return coll unchanged\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (transient (into (hash-map) coll))))\n\n(set! (.-EMPTY ObjMap) (ObjMap. nil (array) (js-obj) 0 empty-unordered-hash))\n\n(set! (.-HASHMAP_THRESHOLD ObjMap) 8)\n\n(set! (.-fromObject ObjMap) (fn [ks obj] (ObjMap. nil ks obj 0 nil)))\n\n;; Record Iterator\n(deftype RecordIter [^:mutable i record base-count fields ext-map-iter]\n  Object\n  (hasNext [_]\n    (or (< i base-count) (.hasNext ext-map-iter)))\n  (next [_]\n    (if (< i base-count)\n      (let [k (nth fields i)]\n        (set! i (inc i))\n        (MapEntry. k (-lookup record k) nil))\n      (.next ext-map-iter)))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6EntriesIterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [[k v] (first s)]\n        (set! s (next s))\n        #js {:value #js [k v] :done false})\n      #js {:value nil :done true})))\n\n(defn es6-entries-iterator [coll]\n  (ES6EntriesIterator. (seq coll)))\n\n;; EXPERIMENTAL: subject to change\n(deftype ES6SetEntriesIterator [^:mutable s]\n  Object\n  (next [_]\n    (if-not (nil? s)\n      (let [x (first s)]\n        (set! s (next s))\n        #js {:value #js [x x] :done false})\n      #js {:value nil :done true})))\n\n(defn es6-set-entries-iterator [coll]\n  (ES6SetEntriesIterator. (seq coll)))\n\n;;; PersistentArrayMap\n\n(defn- array-index-of-nil? [arr]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (nil? (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-keyword? [arr k]\n  (let [len  (alength arr)\n        kstr (.-fqn k)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (and (keyword? (aget arr i))\n             (identical? kstr (.-fqn (aget arr i)))) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-symbol? [arr k]\n  (let [len  (alength arr)\n        kstr (.-str k)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (and (symbol? (aget arr i))\n             (identical? kstr (.-str (aget arr i)))) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-identical? [arr k]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (identical? k (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn- array-index-of-equiv? [arr k]\n  (let [len (alength arr)]\n    (loop [i 0]\n      (cond\n        (<= len i) -1\n        (= k (aget arr i)) i\n        :else (recur (+ i 2))))))\n\n(defn array-index-of [arr k]\n  (cond\n    (keyword? k) (array-index-of-keyword? arr k)\n\n    (or (string? k) (number? k))\n    (array-index-of-identical? arr k)\n\n    (symbol? k) (array-index-of-symbol? arr k)\n\n    (nil? k)\n    (array-index-of-nil? arr)\n\n    :else (array-index-of-equiv? arr k)))\n\n(defn- array-map-index-of [m k]\n  (array-index-of (.-arr m) k))\n\n(defn- array-extend-kv [arr k v]\n  (let [l (alength arr)\n        narr (make-array (+ l 2))]\n    (loop [i 0]\n      (when (< i l)\n        (aset narr i (aget arr i))\n        (recur (inc i))))\n    (aset narr l k)\n    (aset narr (inc l) v)\n    narr))\n\n(defn- array-map-extend-kv [m k v]\n  (array-extend-kv (.-arr m) k v))\n\n(declare TransientArrayMap)\n\n(deftype MapEntry [key val ^:mutable __hash]\n  Object\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(defn map-entry?\n  \"Returns true if x satisfies IMapEntry\"\n  [x]\n  (implements? IMapEntry x))\n\n(deftype PersistentArrayMapSeq [arr i _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (PersistentArrayMapSeq. arr i new-meta)))\n\n  ICounted\n  (-count [coll]\n    (\/ (- (alength arr) i) 2))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (MapEntry. (aget arr i) (aget arr (inc i)) nil))\n\n  (-rest [coll]\n    (if (< i (- (alength arr) 2))\n      (PersistentArrayMapSeq. arr (+ i 2) nil)\n      ()))\n\n  INext\n  (-next [coll]\n    (when (< i (- (alength arr) 2))\n      (PersistentArrayMapSeq. arr (+ i 2) nil)))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable PersistentArrayMapSeq)\n\n(defn persistent-array-map-seq [arr i _meta]\n  (when (<= i (- (alength arr) 2))\n    (PersistentArrayMapSeq. arr i _meta)))\n\n(declare keys vals)\n\n(deftype PersistentArrayMapIterator [arr ^:mutable i cnt]\n  Object\n  (hasNext [_]\n    (< i cnt))\n  (next [_]\n    (let [ret (MapEntry. (aget arr i) (aget arr (inc i)) nil)]\n      (set! i (+ i 2))\n      ret)))\n\n(deftype PersistentArrayMap [meta cnt arr ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentArrayMap. meta cnt arr __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentArrayMap. new-meta cnt arr __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentArrayMap) meta))\n\n  IEquiv\n  (-equiv [coll other]\n    (if (and (map? other) (not (record? other)))\n      (let [alen (alength arr)\n            ^not-native other other]\n        (if (== cnt (-count other))\n          (loop [i 0]\n            (if (< i alen)\n              (let [v (-lookup other (aget arr i) lookup-sentinel)]\n                (if-not (identical? v lookup-sentinel)\n                  (if (= (aget arr (inc i)) v)\n                    (recur (+ i 2))\n                    false)\n                  false))\n              true))\n          false))\n      false))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  IIterable\n  (-iterator [this]\n    (PersistentArrayMapIterator. arr 0 (* cnt 2)))\n\n  ISeqable\n  (-seq [coll]\n    (persistent-array-map-seq arr 0 nil))\n\n  ICounted\n  (-count [coll] cnt)\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (let [idx (array-map-index-of coll k)]\n      (if (== idx -1)\n        not-found\n        (aget arr (inc idx)))))\n\n  IAssociative\n  (-assoc [coll k v]\n    (let [idx (array-map-index-of coll k)]\n      (cond\n        (== idx -1)\n        (if (< cnt (.-HASHMAP-THRESHOLD PersistentArrayMap))\n          (let [arr (array-map-extend-kv coll k v)]\n            (PersistentArrayMap. meta (inc cnt) arr nil))\n          (-> (into (.-EMPTY PersistentHashMap) coll)\n            (-assoc k v)\n            (-with-meta meta)))\n\n        (identical? v (aget arr (inc idx)))\n        coll\n\n        :else\n        (let [arr (doto (aclone arr)\n                    (aset (inc idx) v))]\n          (PersistentArrayMap. meta cnt arr nil)))))\n\n  (-contains-key? [coll k]\n    (not (== (array-map-index-of coll k) -1)))\n\n  IFind\n  (-find [coll k]\n    (let [idx (array-map-index-of coll k)]\n      (when-not (== idx -1)\n        (MapEntry. (aget arr idx) (aget arr (inc idx)) nil))))\n\n  IMap\n  (-dissoc [coll k]\n    (let [idx (array-map-index-of coll k)]\n      (if (>= idx 0)\n        (let [len     (alength arr)\n              new-len (- len 2)]\n          (if (zero? new-len)\n            (-empty coll)\n            (let [new-arr (make-array new-len)]\n              (loop [s 0 d 0]\n                (cond\n                  (>= s len) (PersistentArrayMap. meta (dec cnt) new-arr nil)\n                  (= k (aget arr s)) (recur (+ s 2) d)\n                  :else (do (aset new-arr d (aget arr s))\n                            (aset new-arr (inc d) (aget arr (inc s)))\n                            (recur (+ s 2) (+ d 2))))))))\n        coll)))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [len (alength arr)]\n      (loop [i 0 init init]\n        (if (< i len)\n          (let [init (f init (aget arr i) (aget arr (inc i)))]\n            (if (reduced? init)\n              @init\n              (recur (+ i 2) init)))\n          init))))\n\n  IReduce\n  (-reduce [coll f]\n    (iter-reduce coll f))\n  (-reduce [coll f start]\n    (iter-reduce coll f start))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientArrayMap. (js-obj) (alength arr) (aclone arr))))\n\n(set! (.-EMPTY PersistentArrayMap) (PersistentArrayMap. nil 0 (array) empty-unordered-hash))\n\n(set! (.-HASHMAP-THRESHOLD PersistentArrayMap) 8)\n\n(set! (.-fromArray PersistentArrayMap)\n  (fn [arr ^boolean no-clone ^boolean no-check]\n    (as-> (if no-clone arr (aclone arr)) arr\n      (if no-check\n        arr\n        (let [ret (array)]\n          (loop [i 0]\n            (when (< i (alength arr))\n              (let [k (aget arr i)\n                    v (aget arr (inc i))\n                    idx (array-index-of ret k)]\n                (when (== idx -1)\n                  (.push ret k)\n                  (.push ret v)))\n              (recur (+ i 2))))\n          ret))\n      (let [cnt (\/ (alength arr) 2)]\n        (PersistentArrayMap. nil cnt arr nil)))))\n\n(set! (.-createWithCheck PersistentArrayMap)\n  (fn [arr]\n    (let [ret (array)]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (let [k (aget arr i)\n                v (aget arr (inc i))\n                idx (array-index-of ret k)]\n            (if (== idx -1)\n              (doto ret (.push k) (.push v))\n              (throw (js\/Error. (str \"Duplicate key: \" k)))))\n          (recur (+ i 2))))\n      (let [cnt (\/ (alength arr) 2)]\n        (PersistentArrayMap. nil cnt arr nil)))))\n\n(set! (.-createAsIfByAssoc PersistentArrayMap)\n  (fn [arr]\n    (let [ret (array)]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (let [k (aget arr i)\n                v (aget arr (inc i))\n                idx (array-index-of ret k)]\n            (if (== idx -1)\n              (doto ret (.push k) (.push v))\n              (aset ret (inc idx) v)))\n          (recur (+ i 2))))\n      (PersistentArrayMap. nil (\/ (alength ret) 2) ret nil))))\n\n(es6-iterable PersistentArrayMap)\n\n(declare array->transient-hash-map)\n\n(deftype TransientArrayMap [^:mutable ^boolean editable?\n                            ^:mutable len\n                            arr]\n  ICounted\n  (-count [tcoll]\n    (if editable?\n      (quot len 2)\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  ILookup\n  (-lookup [tcoll k]\n    (-lookup tcoll k nil))\n\n  (-lookup [tcoll k not-found]\n    (if editable?\n      (let [idx (array-map-index-of tcoll k)]\n        (if (== idx -1)\n          not-found\n          (aget arr (inc idx))))\n      (throw (js\/Error. \"lookup after persistent!\"))))\n\n  ITransientCollection\n  (-conj! [tcoll o]\n    (if editable?\n      (cond\n        (map-entry? o)\n        (-assoc! tcoll (key o) (val o))\n\n        (vector? o)\n        (-assoc! tcoll (o 0) (o 1))\n\n        :else\n        (loop [es (seq o) tcoll tcoll]\n          (if-let [e (first es)]\n            (recur (next es)\n                   (-assoc! tcoll (key e) (val e)))\n            tcoll)))\n      (throw (js\/Error. \"conj! after persistent!\"))))\n\n  (-persistent! [tcoll]\n    (if editable?\n      (do (set! editable? false)\n          (PersistentArrayMap. nil (quot len 2) arr nil))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val]\n    (if editable?\n      (let [idx (array-map-index-of tcoll key)]\n        (if (== idx -1)\n          (if (<= (+ len 2) (* 2 (.-HASHMAP-THRESHOLD PersistentArrayMap)))\n            (do (set! len (+ len 2))\n                (.push arr key)\n                (.push arr val)\n                tcoll)\n            (assoc! (array->transient-hash-map len arr) key val))\n          (if (identical? val (aget arr (inc idx)))\n            tcoll\n            (do (aset arr (inc idx) val)\n                tcoll))))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  ITransientMap\n  (-dissoc! [tcoll key]\n    (if editable?\n      (let [idx (array-map-index-of tcoll key)]\n        (when (>= idx 0)\n          (aset arr idx (aget arr (- len 2)))\n          (aset arr (inc idx) (aget arr (dec len)))\n          (doto arr .pop .pop)\n          (set! len (- len 2)))\n        tcoll)\n      (throw (js\/Error. \"dissoc! after persistent!\"))))\n\n  IFn\n  (-invoke [tcoll key]\n    (-lookup tcoll key nil))\n  (-invoke [tcoll key not-found]\n    (-lookup tcoll key not-found)))\n\n(declare TransientHashMap)\n\n(defn- array->transient-hash-map [len arr]\n  (loop [out (transient (.-EMPTY PersistentHashMap))\n         i   0]\n    (if (< i len)\n      (recur (assoc! out (aget arr i) (aget arr (inc i))) (+ i 2))\n      out)))\n\n;;; PersistentHashMap\n\n(deftype Box [^:mutable val])\n\n(declare create-inode-seq create-array-node-seq reset! create-node atom deref)\n\n(defn key-test [key other]\n  (cond\n    (identical? key other) true\n    (keyword-identical? key other) true\n    :else (= key other)))\n\n(defn- mask [hash shift]\n  (bit-and (bit-shift-right-zero-fill hash shift) 0x01f))\n\n(defn- clone-and-set\n  ([arr i a]\n     (doto (aclone arr)\n       (aset i a)))\n  ([arr i a j b]\n     (doto (aclone arr)\n       (aset i a)\n       (aset j b))))\n\n(defn- remove-pair [arr i]\n  (let [new-arr (make-array (- (alength arr) 2))]\n    (array-copy arr 0 new-arr 0 (* 2 i))\n    (array-copy arr (* 2 (inc i)) new-arr (* 2 i) (- (alength new-arr) (* 2 i)))\n    new-arr))\n\n(defn- bitmap-indexed-node-index [bitmap bit]\n  (bit-count (bit-and bitmap (dec bit))))\n\n(defn- bitpos [hash shift]\n  (bit-shift-left 1 (mask hash shift)))\n\n(defn- edit-and-set\n  ([inode edit i a]\n     (let [editable (.ensure-editable inode edit)]\n       (aset (.-arr editable) i a)\n       editable))\n  ([inode edit i a j b]\n     (let [editable (.ensure-editable inode edit)]\n       (aset (.-arr editable) i a)\n       (aset (.-arr editable) j b)\n       editable)))\n\n(defn- inode-kv-reduce [arr f init]\n  (let [len (alength arr)]\n    (loop [i 0 init init]\n      (if (< i len)\n        (let [init (let [k (aget arr i)]\n                     (if-not (nil? k)\n                       (f init k (aget arr (inc i)))\n                       (let [node (aget arr (inc i))]\n                         (if-not (nil? node)\n                           (.kv-reduce node f init)\n                           init))))]\n          (if (reduced? init)\n            init\n            (recur (+ i 2) init)))\n        init))))\n\n(declare ArrayNode)\n\n (deftype NodeIterator [arr ^:mutable i ^:mutable next-entry ^:mutable next-iter]\n  Object\n  (advance [this]\n    (let [len (alength arr)]\n      (loop []\n        (if (< i len)\n          (let [key (aget arr i)\n                node-or-val (aget arr (inc i))\n                ^boolean found\n                (cond (some? key)\n                      (set! next-entry (MapEntry. key node-or-val nil))\n                      (some? node-or-val)\n                      (let [new-iter (-iterator node-or-val)]\n                        (if ^boolean (.hasNext new-iter)\n                          (set! next-iter new-iter)\n                          false))\n                      :else false)]\n            (set! i (+ i 2))\n            (if found true (recur)))\n          false))))\n  (hasNext [this]\n    (or (some? next-entry) (some? next-iter) (.advance this)))\n  (next [this]\n    (cond\n      (some? next-entry)\n      (let [ret next-entry]\n        (set! next-entry nil)\n        ret)\n      (some? next-iter)\n      (let [ret (.next next-iter)]\n        (when-not ^boolean (.hasNext next-iter)\n          (set! next-iter nil))\n        ret)\n      ^boolean (.advance this)\n      (.next this)\n      :else (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype BitmapIndexedNode [edit ^:mutable bitmap ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (let [bit (bitpos hash shift)\n          idx (bitmap-indexed-node-index bitmap bit)]\n      (if (zero? (bit-and bitmap bit))\n        (let [n (bit-count bitmap)]\n          (if (>= n 16)\n            (let [nodes (make-array 32)\n                  jdx   (mask hash shift)]\n              (aset nodes jdx (.inode-assoc (.-EMPTY BitmapIndexedNode) (+ shift 5) hash key val added-leaf?))\n              (loop [i 0 j 0]\n                (if (< i 32)\n                  (if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))\n                    (recur (inc i) j)\n                    (do (aset nodes i\n                              (if-not (nil? (aget arr j))\n                                (.inode-assoc (.-EMPTY BitmapIndexedNode)\n                                              (+ shift 5) (cljs.core\/hash (aget arr j)) (aget arr j) (aget arr (inc j)) added-leaf?)\n                                (aget arr (inc j))))\n                        (recur (inc i) (+ j 2))))))\n              (ArrayNode. nil (inc n) nodes))\n            (let [new-arr (make-array (* 2 (inc n)))]\n              (array-copy arr 0 new-arr 0 (* 2 idx))\n              (aset new-arr (* 2 idx) key)\n              (aset new-arr (inc (* 2 idx)) val)\n              (array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))\n              (set! (.-val added-leaf?) true)\n              (BitmapIndexedNode. nil (bit-or bitmap bit) new-arr))))\n        (let [key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-assoc val-or-node (+ shift 5) hash key val added-leaf?)]\n                  (if (identical? n val-or-node)\n                    inode\n                    (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))))\n\n                (key-test key key-or-nil)\n                (if (identical? val val-or-node)\n                  inode\n                  (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) val)))\n\n                :else\n                (do (set! (.-val added-leaf?) true)\n                    (BitmapIndexedNode. nil bitmap\n                                        (clone-and-set arr (* 2 idx) nil (inc (* 2 idx))\n                                                       (create-node (+ shift 5) key-or-nil val-or-node hash key val)))))))))\n\n  (inode-without [inode shift hash key]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        inode\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-without val-or-node (+ shift 5) hash key)]\n                  (cond (identical? n val-or-node) inode\n                        (not (nil? n)) (BitmapIndexedNode. nil bitmap (clone-and-set arr (inc (* 2 idx)) n))\n                        (== bitmap bit) nil\n                        :else (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx))))\n                (key-test key key-or-nil)\n                (BitmapIndexedNode. nil (bit-xor bitmap bit) (remove-pair arr idx))\n                :else inode)))))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        not-found\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)  (.inode-lookup val-or-node (+ shift 5) hash key not-found)\n                (key-test key key-or-nil) val-or-node\n                :else not-found)))))\n\n  (inode-find [inode shift hash key not-found]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        not-found\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil) (.inode-find val-or-node (+ shift 5) hash key not-found)\n                (key-test key key-or-nil)          (MapEntry. key-or-nil val-or-node nil)\n                :else not-found)))))\n\n  (inode-seq [inode]\n    (create-inode-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (let [n       (bit-count bitmap)\n            new-arr (make-array (if (neg? n) 4 (* 2 (inc n))))]\n        (array-copy arr 0 new-arr 0 (* 2 n))\n        (BitmapIndexedNode. e bitmap new-arr))))\n\n  (edit-and-remove-pair [inode e bit i]\n    (if (== bitmap bit)\n      nil\n      (let [editable (.ensure-editable inode e)\n            earr     (.-arr editable)\n            len      (alength earr)]\n        (set! (.-bitmap editable) (bit-xor bit (.-bitmap editable)))\n        (array-copy earr (* 2 (inc i))\n                    earr (* 2 i)\n                    (- len (* 2 (inc i))))\n        (aset earr (- len 2) nil)\n        (aset earr (dec len) nil)\n        editable)))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (let [bit (bitpos hash shift)\n          idx (bitmap-indexed-node-index bitmap bit)]\n      (if (zero? (bit-and bitmap bit))\n        (let [n (bit-count bitmap)]\n          (cond\n            (< (* 2 n) (alength arr))\n            (let [editable (.ensure-editable inode edit)\n                  earr     (.-arr editable)]\n              (set! (.-val added-leaf?) true)\n              (array-copy-downward earr (* 2 idx)\n                                   earr (* 2 (inc idx))\n                                   (* 2 (- n idx)))\n              (aset earr (* 2 idx) key)\n              (aset earr (inc (* 2 idx)) val)\n              (set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))\n              editable)\n\n            (>= n 16)\n            (let [nodes (make-array 32)\n                  jdx   (mask hash shift)]\n              (aset nodes jdx (.inode-assoc! (.-EMPTY BitmapIndexedNode) edit (+ shift 5) hash key val added-leaf?))\n              (loop [i 0 j 0]\n                (if (< i 32)\n                  (if (zero? (bit-and (bit-shift-right-zero-fill bitmap i) 1))\n                    (recur (inc i) j)\n                    (do (aset nodes i\n                              (if-not (nil? (aget arr j))\n                                (.inode-assoc! (.-EMPTY BitmapIndexedNode)\n                                               edit (+ shift 5) (cljs.core\/hash (aget arr j)) (aget arr j) (aget arr (inc j)) added-leaf?)\n                                (aget arr (inc j))))\n                        (recur (inc i) (+ j 2))))))\n              (ArrayNode. edit (inc n) nodes))\n\n            :else\n            (let [new-arr (make-array (* 2 (+ n 4)))]\n              (array-copy arr 0 new-arr 0 (* 2 idx))\n              (aset new-arr (* 2 idx) key)\n              (aset new-arr (inc (* 2 idx)) val)\n              (array-copy arr (* 2 idx) new-arr (* 2 (inc idx)) (* 2 (- n idx)))\n              (set! (.-val added-leaf?) true)\n              (let [editable (.ensure-editable inode edit)]\n                (set! (.-arr editable) new-arr)\n                (set! (.-bitmap editable) (bit-or (.-bitmap editable) bit))\n                editable))))\n        (let [key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-assoc! val-or-node edit (+ shift 5) hash key val added-leaf?)]\n                  (if (identical? n val-or-node)\n                    inode\n                    (edit-and-set inode edit (inc (* 2 idx)) n)))\n\n                (key-test key key-or-nil)\n                (if (identical? val val-or-node)\n                  inode\n                  (edit-and-set inode edit (inc (* 2 idx)) val))\n\n                :else\n                (do (set! (.-val added-leaf?) true)\n                    (edit-and-set inode edit (* 2 idx) nil (inc (* 2 idx))\n                                  (create-node edit (+ shift 5) key-or-nil val-or-node hash key val))))))))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [bit (bitpos hash shift)]\n      (if (zero? (bit-and bitmap bit))\n        inode\n        (let [idx         (bitmap-indexed-node-index bitmap bit)\n              key-or-nil  (aget arr (* 2 idx))\n              val-or-node (aget arr (inc (* 2 idx)))]\n          (cond (nil? key-or-nil)\n                (let [n (.inode-without! val-or-node edit (+ shift 5) hash key removed-leaf?)]\n                  (cond (identical? n val-or-node) inode\n                        (not (nil? n)) (edit-and-set inode edit (inc (* 2 idx)) n)\n                        (== bitmap bit) nil\n                        :else (.edit-and-remove-pair inode edit bit idx)))\n                (key-test key key-or-nil)\n                (do (set! (.-val removed-leaf?) true)\n                    (.edit-and-remove-pair inode edit bit idx))\n                :else inode)))))\n\n  (kv-reduce [inode f init]\n    (inode-kv-reduce arr f init))\n\n  IIterable\n  (-iterator [coll]\n    (NodeIterator. arr 0 nil nil)))\n\n(set! (.-EMPTY BitmapIndexedNode) (BitmapIndexedNode. nil 0 (make-array 0)))\n\n(defn- pack-array-node [array-node edit idx]\n  (let [arr     (.-arr array-node)\n        len     (alength arr)\n        new-arr (make-array (* 2 (dec (.-cnt array-node))))]\n    (loop [i 0 j 1 bitmap 0]\n      (if (< i len)\n        (if (and (not (== i idx))\n                 (not (nil? (aget arr i))))\n          (do (aset new-arr j (aget arr i))\n              (recur (inc i) (+ j 2) (bit-or bitmap (bit-shift-left 1 i))))\n          (recur (inc i) j bitmap))\n        (BitmapIndexedNode. edit bitmap new-arr)))))\n\n(deftype ArrayNodeIterator [arr ^:mutable i ^:mutable next-iter]\n  Object\n  (hasNext [this]\n    (let [len (alength arr)]\n      (loop []\n        (if-not (and  (some? next-iter) ^boolean (.hasNext next-iter))\n          (if (< i len)\n            (let [node (aget arr i)]\n              (set! i (inc i))\n              (when (some? node)\n                (set! next-iter (-iterator node)))\n              (recur))\n            false)\n          true))))\n  (next [this]\n    (if ^boolean (.hasNext this)\n      (.next next-iter)\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype ArrayNode [edit ^:mutable cnt ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        (ArrayNode. nil (inc cnt) (clone-and-set arr idx (.inode-assoc (.-EMPTY BitmapIndexedNode) (+ shift 5) hash key val added-leaf?)))\n        (let [n (.inode-assoc node (+ shift 5) hash key val added-leaf?)]\n          (if (identical? n node)\n            inode\n            (ArrayNode. nil cnt (clone-and-set arr idx n)))))))\n\n  (inode-without [inode shift hash key]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (let [n (.inode-without node (+ shift 5) hash key)]\n          (cond\n            (identical? n node)\n            inode\n\n            (nil? n)\n            (if (<= cnt 8)\n              (pack-array-node inode nil idx)\n              (ArrayNode. nil (dec cnt) (clone-and-set arr idx n)))\n\n            :else\n            (ArrayNode. nil cnt (clone-and-set arr idx n))))\n        inode)))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (.inode-lookup node (+ shift 5) hash key not-found)\n        not-found)))\n\n  (inode-find [inode shift hash key not-found]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if-not (nil? node)\n        (.inode-find node (+ shift 5) hash key not-found)\n        not-found)))\n\n  (inode-seq [inode]\n    (create-array-node-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (ArrayNode. e cnt (aclone arr))))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        (let [editable (edit-and-set inode edit idx (.inode-assoc! (.-EMPTY BitmapIndexedNode) edit (+ shift 5) hash key val added-leaf?))]\n          (set! (.-cnt editable) (inc (.-cnt editable)))\n          editable)\n        (let [n (.inode-assoc! node edit (+ shift 5) hash key val added-leaf?)]\n          (if (identical? n node)\n            inode\n            (edit-and-set inode edit idx n))))))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [idx  (mask hash shift)\n          node (aget arr idx)]\n      (if (nil? node)\n        inode\n        (let [n (.inode-without! node edit (+ shift 5) hash key removed-leaf?)]\n          (cond\n            (identical? n node)\n            inode\n\n            (nil? n)\n            (if (<= cnt 8)\n              (pack-array-node inode edit idx)\n              (let [editable (edit-and-set inode edit idx n)]\n                (set! (.-cnt editable) (dec (.-cnt editable)))\n                editable))\n\n            :else\n            (edit-and-set inode edit idx n))))))\n\n  (kv-reduce [inode f init]\n    (let [len (alength arr)]           ; actually 32\n      (loop [i 0 init init]\n        (if (< i len)\n          (let [node (aget arr i)]\n            (if-not (nil? node)\n              (let [init (.kv-reduce node f init)]\n                (if (reduced? init)\n                  init\n                  (recur (inc i) init)))\n              (recur (inc i) init)))\n          init))))\n\n IIterable\n (-iterator [coll]\n    (ArrayNodeIterator. arr 0 nil)))\n\n(defn- hash-collision-node-find-index [arr cnt key]\n  (let [lim (* 2 cnt)]\n    (loop [i 0]\n      (if (< i lim)\n        (if (key-test key (aget arr i))\n          i\n          (recur (+ i 2)))\n        -1))))\n\n(deftype HashCollisionNode [edit\n                            ^:mutable collision-hash\n                            ^:mutable cnt\n                            ^:mutable arr]\n  Object\n  (inode-assoc [inode shift hash key val added-leaf?]\n    (if (== hash collision-hash)\n      (let [idx (hash-collision-node-find-index arr cnt key)]\n        (if (== idx -1)\n          (let [len     (* 2 cnt)\n                new-arr (make-array (+ len 2))]\n            (array-copy arr 0 new-arr 0 len)\n            (aset new-arr len key)\n            (aset new-arr (inc len) val)\n            (set! (.-val added-leaf?) true)\n            (HashCollisionNode. nil collision-hash (inc cnt) new-arr))\n          (if (= (aget arr (inc idx)) val)\n            inode\n            (HashCollisionNode. nil collision-hash cnt (clone-and-set arr (inc idx) val)))))\n      (.inode-assoc (BitmapIndexedNode. nil (bitpos collision-hash shift) (array nil inode))\n                    shift hash key val added-leaf?)))\n\n  (inode-without [inode shift hash key]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (== idx -1) inode\n            (== cnt 1)  nil\n            :else (HashCollisionNode. nil collision-hash (dec cnt) (remove-pair arr (quot idx 2))))))\n\n  (inode-lookup [inode shift hash key not-found]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (< idx 0)              not-found\n            (key-test key (aget arr idx)) (aget arr (inc idx))\n            :else                  not-found)))\n\n  (inode-find [inode shift hash key not-found]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (cond (< idx 0)              not-found\n            (key-test key (aget arr idx)) (MapEntry. (aget arr idx) (aget arr (inc idx)) nil)\n            :else                  not-found)))\n\n  (inode-seq [inode]\n    (create-inode-seq arr))\n\n  (ensure-editable [inode e]\n    (if (identical? e edit)\n      inode\n      (let [new-arr (make-array (* 2 (inc cnt)))]\n        (array-copy arr 0 new-arr 0 (* 2 cnt))\n        (HashCollisionNode. e collision-hash cnt new-arr))))\n\n  (ensure-editable-array [inode e count array]\n    (if (identical? e edit)\n      (do (set! arr array)\n          (set! cnt count)\n          inode)\n      (HashCollisionNode. edit collision-hash count array)))\n\n  (inode-assoc! [inode edit shift hash key val added-leaf?]\n    (if (== hash collision-hash)\n      (let [idx (hash-collision-node-find-index arr cnt key)]\n        (if (== idx -1)\n          (if (> (alength arr) (* 2 cnt))\n            (let [editable (edit-and-set inode edit (* 2 cnt) key (inc (* 2 cnt)) val)]\n              (set! (.-val added-leaf?) true)\n              (set! (.-cnt editable) (inc (.-cnt editable)))\n              editable)\n            (let [len     (alength arr)\n                  new-arr (make-array (+ len 2))]\n              (array-copy arr 0 new-arr 0 len)\n              (aset new-arr len key)\n              (aset new-arr (inc len) val)\n              (set! (.-val added-leaf?) true)\n              (.ensure-editable-array inode edit (inc cnt) new-arr)))\n          (if (identical? (aget arr (inc idx)) val)\n            inode\n            (edit-and-set inode edit (inc idx) val))))\n      (.inode-assoc! (BitmapIndexedNode. edit (bitpos collision-hash shift) (array nil inode nil nil))\n                     edit shift hash key val added-leaf?)))\n\n  (inode-without! [inode edit shift hash key removed-leaf?]\n    (let [idx (hash-collision-node-find-index arr cnt key)]\n      (if (== idx -1)\n        inode\n        (do (set! (.-val removed-leaf?) true)\n            (if (== cnt 1)\n              nil\n              (let [editable (.ensure-editable inode edit)\n                    earr     (.-arr editable)]\n                (aset earr idx (aget earr (- (* 2 cnt) 2)))\n                (aset earr (inc idx) (aget earr (dec (* 2 cnt))))\n                (aset earr (dec (* 2 cnt)) nil)\n                (aset earr (- (* 2 cnt) 2) nil)\n                (set! (.-cnt editable) (dec (.-cnt editable)))\n                editable))))))\n\n  (kv-reduce [inode f init]\n    (inode-kv-reduce arr f init))\n\n  IIterable\n  (-iterator [coll]\n    (NodeIterator. arr 0 nil nil)))\n\n(defn- create-node\n  ([shift key1 val1 key2hash key2 val2]\n     (let [key1hash (hash key1)]\n       (if (== key1hash key2hash)\n         (HashCollisionNode. nil key1hash 2 (array key1 val1 key2 val2))\n         (let [added-leaf? (Box. false)]\n           (-> (.-EMPTY BitmapIndexedNode)\n               (.inode-assoc shift key1hash key1 val1 added-leaf?)\n               (.inode-assoc shift key2hash key2 val2 added-leaf?))))))\n  ([edit shift key1 val1 key2hash key2 val2]\n     (let [key1hash (hash key1)]\n       (if (== key1hash key2hash)\n         (HashCollisionNode. nil key1hash 2 (array key1 val1 key2 val2))\n         (let [added-leaf? (Box. false)]\n           (-> (.-EMPTY BitmapIndexedNode)\n               (.inode-assoc! edit shift key1hash key1 val1 added-leaf?)\n               (.inode-assoc! edit shift key2hash key2 val2 added-leaf?)))))))\n\n(deftype NodeSeq [meta nodes i s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (NodeSeq. new-meta nodes i s __hash)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeq\n  (-first [coll]\n    (if (nil? s)\n      (MapEntry. (aget nodes i) (aget nodes (inc i)) nil)\n      (first s)))\n\n  (-rest [coll]\n    (let [ret (if (nil? s)\n                (create-inode-seq nodes (+ i 2) nil)\n                (create-inode-seq nodes i (next s)))]\n      (if-not (nil? ret) ret ())))\n\n  INext\n  (-next [coll]\n    (if (nil? s)\n      (create-inode-seq nodes (+ i 2) nil)\n      (create-inode-seq nodes i (next s))))\n\n  ISeqable\n  (-seq [this] this)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable NodeSeq)\n\n(defn- create-inode-seq\n  ([nodes]\n     (create-inode-seq nodes 0 nil))\n  ([nodes i s]\n     (if (nil? s)\n       (let [len (alength nodes)]\n         (loop [j i]\n           (if (< j len)\n             (if-not (nil? (aget nodes j))\n               (NodeSeq. nil nodes j nil nil)\n               (if-let [node (aget nodes (inc j))]\n                 (if-let [node-seq (.inode-seq node)]\n                   (NodeSeq. nil nodes (+ j 2) node-seq nil)\n                   (recur (+ j 2)))\n                 (recur (+ j 2)))))))\n       (NodeSeq. nil nodes i s nil))))\n\n(deftype ArrayNodeSeq [meta nodes i s ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (ArrayNodeSeq. new-meta nodes i s __hash)))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  ISequential\n  ISeq\n  (-first [coll] (first s))\n  (-rest  [coll]\n    (let [ret (create-array-node-seq nodes i (next s))]\n      (if-not (nil? ret) ret ())))\n\n  INext\n  (-next [coll]\n    (create-array-node-seq nodes i (next s)))\n\n  ISeqable\n  (-seq [this] this)\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable ArrayNodeSeq)\n\n(defn- create-array-node-seq\n  ([nodes] (create-array-node-seq nodes 0 nil))\n  ([nodes i s]\n     (if (nil? s)\n       (let [len (alength nodes)]\n         (loop [j i]\n           (if (< j len)\n             (if-let [nj (aget nodes j)]\n               (if-let [ns (.inode-seq nj)]\n                 (ArrayNodeSeq. nil nodes (inc j) ns nil)\n                 (recur (inc j)))\n               (recur (inc j))))))\n       (ArrayNodeSeq. nil nodes i s nil))))\n\n(deftype HashMapIter [nil-val root-iter ^:mutable seen]\n  Object\n  (hasNext [_]\n    (or (not ^boolean seen) ^boolean (.hasNext root-iter)))\n  (next [_]\n    (if-not ^boolean seen\n      (do\n        (set! seen true)\n        (MapEntry. nil nil-val nil))\n      (.next root-iter)))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentHashMap [meta cnt root ^boolean has-nil? nil-val ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentHashMap. meta cnt root has-nil? nil-val __hash))\n\n  IIterable\n  (-iterator [coll]\n    (let [root-iter (if ^boolean root (-iterator root) (nil-iter))]\n      (if has-nil?\n        (HashMapIter. nil-val root-iter false)\n        root-iter)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentHashMap. new-meta cnt root has-nil? nil-val __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentHashMap) meta))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll]\n    (when (pos? cnt)\n      (let [s (if-not (nil? root) (.inode-seq root))]\n        (if has-nil?\n          (cons (MapEntry. nil nil-val nil) s)\n          s))))\n\n  ICounted\n  (-count [coll] cnt)\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (cond (nil? k)    (if has-nil?\n                        nil-val\n                        not-found)\n          (nil? root) not-found\n          :else       (.inode-lookup root 0 (hash k) k not-found)))\n\n  IAssociative\n  (-assoc [coll k v]\n    (if (nil? k)\n      (if (and has-nil? (identical? v nil-val))\n        coll\n        (PersistentHashMap. meta (if has-nil? cnt (inc cnt)) root true v nil))\n      (let [added-leaf? (Box. false)\n            new-root    (-> (if (nil? root)\n                              (.-EMPTY BitmapIndexedNode)\n                              root)\n                            (.inode-assoc 0 (hash k) k v added-leaf?))]\n        (if (identical? new-root root)\n          coll\n          (PersistentHashMap. meta (if ^boolean (.-val added-leaf?) (inc cnt) cnt) new-root has-nil? nil-val nil)))))\n\n  (-contains-key? [coll k]\n    (cond (nil? k)    has-nil?\n          (nil? root) false\n          :else       (not (identical? (.inode-lookup root 0 (hash k) k lookup-sentinel)\n                                       lookup-sentinel))))\n\n  IFind\n  (-find [coll k]\n    (cond\n      (nil? k) (when has-nil? (MapEntry. nil nil-val nil))\n      (nil? root) nil\n      :else (.inode-find root 0 (hash k) k nil)))\n\n  IMap\n  (-dissoc [coll k]\n    (cond (nil? k)    (if has-nil?\n                        (PersistentHashMap. meta (dec cnt) root false nil nil)\n                        coll)\n          (nil? root) coll\n          :else\n          (let [new-root (.inode-without root 0 (hash k) k)]\n            (if (identical? new-root root)\n              coll\n              (PersistentHashMap. meta (dec cnt) new-root has-nil? nil-val nil)))))\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (let [init (if has-nil? (f init nil nil-val) init)]\n      (cond\n        (reduced? init)          @init\n        (not (nil? root)) (unreduced (.kv-reduce root f init))\n        :else                    init)))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll]\n    (TransientHashMap. (js-obj) root cnt has-nil? nil-val)))\n\n(set! (.-EMPTY PersistentHashMap) (PersistentHashMap. nil 0 nil false nil empty-unordered-hash))\n\n(set! (.-fromArray PersistentHashMap)\n  (fn [arr ^boolean no-clone]\n    (let [arr (if no-clone arr (aclone arr))\n          len (alength arr)]\n      (loop [i 0 ret (transient (.-EMPTY PersistentHashMap))]\n        (if (< i len)\n          (recur (+ i 2)\n            (-assoc! ret (aget arr i) (aget arr (inc i))))\n          (-persistent! ret))))))\n\n(set! (.-fromArrays PersistentHashMap)\n  (fn [ks vs]\n    (let [len (alength ks)]\n      (loop [i 0 ^not-native out (transient (.-EMPTY PersistentHashMap))]\n        (if (< i len)\n          (recur (inc i) (-assoc! out (aget ks i) (aget vs i)))\n          (persistent! out))))))\n\n(set! (.-createWithCheck PersistentHashMap)\n  (fn [arr]\n    (let [len (alength arr)\n          ret (transient (.-EMPTY PersistentHashMap))]\n      (loop [i 0]\n        (when (< i len)\n          (-assoc! ret (aget arr i) (aget arr (inc i)))\n          (if (not= (-count ret) (inc (\/ i 2)))\n            (throw (js\/Error. (str \"Duplicate key: \" (aget arr i))))\n            (recur (+ i 2)))))\n      (-persistent! ret))))\n\n(es6-iterable PersistentHashMap)\n\n(deftype TransientHashMap [^:mutable ^boolean edit\n                           ^:mutable root\n                           ^:mutable count\n                           ^:mutable ^boolean has-nil?\n                           ^:mutable nil-val]\n  Object\n  (conj! [tcoll o]\n    (if edit\n      (cond\n        (map-entry? o)\n        (.assoc! tcoll (key o) (val o))\n\n        (vector? o)\n        (.assoc! tcoll (o 0) (o 1))\n\n        :else\n        (loop [es (seq o) tcoll tcoll]\n          (if-let [e (first es)]\n            (recur (next es)\n                   (.assoc! tcoll (key e) (val e)))\n            tcoll)))\n      (throw (js\/Error. \"conj! after persistent\"))))\n\n  (assoc! [tcoll k v]\n    (if edit\n      (if (nil? k)\n        (do (if (identical? nil-val v)\n              nil\n              (set! nil-val v))\n            (if has-nil?\n              nil\n              (do (set! count (inc count))\n                  (set! has-nil? true)))\n            tcoll)\n        (let [added-leaf? (Box. false)\n              node        (-> (if (nil? root)\n                                (.-EMPTY BitmapIndexedNode)\n                                root)\n                              (.inode-assoc! edit 0 (hash k) k v added-leaf?))]\n          (if (identical? node root)\n            nil\n            (set! root node))\n          (if ^boolean (.-val added-leaf?)\n            (set! count (inc count)))\n          tcoll))\n      (throw (js\/Error. \"assoc! after persistent!\"))))\n\n  (without! [tcoll k]\n    (if edit\n      (if (nil? k)\n        (if has-nil?\n          (do (set! has-nil? false)\n              (set! nil-val nil)\n              (set! count (dec count))\n              tcoll)\n          tcoll)\n        (if (nil? root)\n          tcoll\n          (let [removed-leaf? (Box. false)\n                node (.inode-without! root edit 0 (hash k) k removed-leaf?)]\n            (if (identical? node root)\n              nil\n              (set! root node))\n            (if ^boolean (.-val removed-leaf?)\n              (set! count (dec count)))\n            tcoll)))\n      (throw (js\/Error. \"dissoc! after persistent!\"))))\n\n  (persistent! [tcoll]\n    (if edit\n      (do (set! edit nil)\n          (PersistentHashMap. nil count root has-nil? nil-val nil))\n      (throw (js\/Error. \"persistent! called twice\"))))\n\n  ICounted\n  (-count [coll]\n    (if edit\n      count\n      (throw (js\/Error. \"count after persistent!\"))))\n\n  ILookup\n  (-lookup [tcoll k]\n    (if (nil? k)\n      (if has-nil?\n        nil-val)\n      (if (nil? root)\n        nil\n        (.inode-lookup root 0 (hash k) k))))\n\n  (-lookup [tcoll k not-found]\n    (if (nil? k)\n      (if has-nil?\n        nil-val\n        not-found)\n      (if (nil? root)\n        not-found\n        (.inode-lookup root 0 (hash k) k not-found))))\n\n  ITransientCollection\n  (-conj! [tcoll val] (.conj! tcoll val))\n\n  (-persistent! [tcoll] (.persistent! tcoll))\n\n  ITransientAssociative\n  (-assoc! [tcoll key val] (.assoc! tcoll key val))\n\n  ITransientMap\n  (-dissoc! [tcoll key] (.without! tcoll key))\n\n  IFn\n  (-invoke [tcoll key]\n    (-lookup tcoll key))\n  (-invoke [tcoll key not-found]\n    (-lookup tcoll key not-found)))\n\n;;; PersistentTreeMap\n\n(defn- tree-map-seq-push [node stack ^boolean ascending?]\n  (loop [t node stack stack]\n    (if-not (nil? t)\n      (recur (if ascending? (.-left t) (.-right t))\n             (conj stack t))\n      stack)))\n\n(deftype PersistentTreeMapSeq [meta stack ^boolean ascending? cnt ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ISeqable\n  (-seq [this] this)\n\n  ISequential\n  ISeq\n  (-first [this] (peek stack))\n  (-rest [this]\n    (let [t (first stack)\n          next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))\n                                        (next stack)\n                                        ascending?)]\n      (if-not (nil? next-stack)\n        (PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil)\n        ())))\n  INext\n  (-next [this]\n    (let [t (first stack)\n          next-stack (tree-map-seq-push (if ascending? (.-right t) (.-left t))\n                                        (next stack)\n                                        ascending?)]\n      (when-not (nil? next-stack)\n        (PersistentTreeMapSeq. nil next-stack ascending? (dec cnt) nil))))\n\n  ICounted\n  (-count [coll]\n    (if (neg? cnt)\n      (inc (count (next coll)))\n      cnt))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o] (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IMeta\n  (-meta [coll] meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeMapSeq. new-meta stack ascending? cnt __hash)))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable PersistentTreeMapSeq)\n\n(defn- create-tree-map-seq [tree ascending? cnt]\n  (PersistentTreeMapSeq. nil (tree-map-seq-push tree nil ascending?) ascending? cnt nil))\n\n(declare RedNode BlackNode)\n\n(defn- balance-left [key val ins right]\n  (if (instance? RedNode ins)\n    (cond\n      (instance? RedNode (.-left ins))\n      (RedNode. (.-key ins) (.-val ins)\n              (.blacken (.-left ins))\n              (BlackNode. key val (.-right ins) right nil)\n              nil)\n\n      (instance? RedNode (.-right ins))\n      (RedNode. (.. ins -right -key) (.. ins -right -val)\n                (BlackNode. (.-key ins) (.-val ins)\n                            (.-left ins)\n                            (.. ins -right -left)\n                            nil)\n                (BlackNode. key val\n                            (.. ins -right -right)\n                            right\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. key val ins right nil))\n    (BlackNode. key val ins right nil)))\n\n(defn- balance-right [key val left ins]\n  (if (instance? RedNode ins)\n    (cond\n      (instance? RedNode (.-right ins))\n      (RedNode. (.-key ins) (.-val ins)\n                (BlackNode. key val left (.-left ins) nil)\n                (.blacken (.-right ins))\n                nil)\n\n      (instance? RedNode (.-left ins))\n      (RedNode. (.. ins -left -key) (.. ins -left -val)\n                (BlackNode. key val left (.. ins -left -left) nil)\n                (BlackNode. (.-key ins) (.-val ins)\n                            (.. ins -left -right)\n                            (.-right ins)\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. key val left ins nil))\n    (BlackNode. key val left ins nil)))\n\n(defn- balance-left-del [key val del right]\n  (cond\n    (instance? RedNode del)\n    (RedNode. key val (.blacken del) right nil)\n\n    (instance? BlackNode right)\n    (balance-right key val del (.redden right))\n\n    (and (instance? RedNode right) (instance? BlackNode (.-left right)))\n    (RedNode. (.. right -left -key) (.. right -left -val)\n              (BlackNode. key val del (.. right -left -left) nil)\n              (balance-right (.-key right) (.-val right)\n                             (.. right -left -right)\n                             (.redden (.-right right)))\n              nil)\n\n    :else\n    (throw (js\/Error. \"red-black tree invariant violation\"))))\n\n(defn- balance-right-del [key val left del]\n  (cond\n    (instance? RedNode del)\n    (RedNode. key val left (.blacken del) nil)\n\n    (instance? BlackNode left)\n    (balance-left key val (.redden left) del)\n\n    (and (instance? RedNode left) (instance? BlackNode (.-right left)))\n    (RedNode. (.. left -right -key) (.. left -right -val)\n              (balance-left (.-key left) (.-val left)\n                            (.redden (.-left left))\n                            (.. left -right -left))\n              (BlackNode. key val (.. left -right -right) del nil)\n              nil)\n\n    :else\n    (throw (js\/Error. \"red-black tree invariant violation\"))))\n\n(defn- tree-map-kv-reduce [node f init]\n  (let [init (if-not (nil? (.-left node))\n               (tree-map-kv-reduce (.-left node) f init)\n               init)]\n    (if (reduced? init)\n      init\n      (let [init (f init (.-key node) (.-val node))]\n        (if (reduced? init)\n          init\n          (if-not (nil? (.-right node))\n            (tree-map-kv-reduce (.-right node) f init)\n            init))))))\n\n(deftype BlackNode [key val left right ^:mutable __hash]\n  Object\n  (add-left [node ins]\n    (.balance-left ins node))\n\n  (add-right [node ins]\n    (.balance-right ins node))\n\n  (remove-left [node del]\n    (balance-left-del key val del right))\n\n  (remove-right [node del]\n    (balance-right-del key val left del))\n\n  (blacken [node] node)\n\n  (redden [node] (RedNode. key val left right nil))\n\n  (balance-left [node parent]\n    (BlackNode. (.-key parent) (.-val parent) node (.-right parent) nil))\n\n  (balance-right [node parent]\n    (BlackNode. (.-key parent) (.-val parent) (.-left parent) node nil))\n\n  (replace [node key val left right]\n    (BlackNode. key val left right nil))\n\n  (kv-reduce [node f init]\n    (tree-map-kv-reduce node f init))\n\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (-with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(es6-iterable BlackNode)\n\n(deftype RedNode [key val left right ^:mutable __hash]\n  Object\n  (add-left [node ins]\n    (RedNode. key val ins right nil))\n\n  (add-right [node ins]\n    (RedNode. key val left ins nil))\n\n  (remove-left [node del]\n    (RedNode. key val del right nil))\n\n  (remove-right [node del]\n    (RedNode. key val left del nil))\n\n  (blacken [node]\n    (BlackNode. key val left right nil))\n\n  (redden [node]\n    (throw (js\/Error. \"red-black tree invariant violation\")))\n\n  (balance-left [node parent]\n    (cond\n      (instance? RedNode left)\n      (RedNode. key val\n                (.blacken left)\n                (BlackNode. (.-key parent) (.-val parent) right (.-right parent) nil)\n                nil)\n\n      (instance? RedNode right)\n      (RedNode. (.-key right) (.-val right)\n                (BlackNode. key val left (.-left right) nil)\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-right right)\n                            (.-right parent)\n                            nil)\n                nil)\n\n      :else\n      (BlackNode. (.-key parent) (.-val parent) node (.-right parent) nil)))\n\n  (balance-right [node parent]\n    (cond\n      (instance? RedNode right)\n      (RedNode. key val\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-left parent)\n                            left\n                            nil)\n                (.blacken right)\n                nil)\n\n      (instance? RedNode left)\n      (RedNode. (.-key left) (.-val left)\n                (BlackNode. (.-key parent) (.-val parent)\n                            (.-left parent)\n                            (.-left left)\n                            nil)\n                (BlackNode. key val (.-right left) right nil)\n                nil)\n\n      :else\n      (BlackNode. (.-key parent) (.-val parent) (.-left parent) node nil)))\n\n  (replace [node key val left right]\n    (RedNode. key val left right nil))\n\n  (kv-reduce [node f init]\n    (tree-map-kv-reduce node f init))\n\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMapEntry\n  (-key [node] key)\n  (-val [node] val)\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-ordered-coll __hash))\n\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  IMeta\n  (-meta [node] nil)\n\n  IWithMeta\n  (-with-meta [node meta]\n    (-with-meta [key val] meta))\n\n  IStack\n  (-peek [node] val)\n\n  (-pop [node] [key])\n\n  ICollection\n  (-conj [node o] [key val o])\n\n  IEmptyableCollection\n  (-empty [node] nil)\n\n  ISequential\n  ISeqable\n  (-seq [node] (IndexedSeq. #js [key val] 0 nil))\n\n  IReversible\n  (-rseq [node] (IndexedSeq. #js [val key] 0 nil))\n\n  ICounted\n  (-count [node] 2)\n\n  IIndexed\n  (-nth [node n]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    (throw (js\/Error. \"Index out of bounds\"))))\n\n  (-nth [node n not-found]\n    (cond (== n 0) key\n          (== n 1) val\n          :else    not-found))\n\n  ILookup\n  (-lookup [node k] (-nth node k nil))\n  (-lookup [node k not-found] (-nth node k not-found))\n\n  IAssociative\n  (-assoc [node k v]\n    (assoc [key val] k v))\n  (-contains-key? [node k]\n    (or (== k 0) (== k 1)))\n\n  IFind\n  (-find [node k]\n    (case k\n      0 (MapEntry. 0 key nil)\n      1 (MapEntry. 1 val nil)\n      nil))\n\n  IVector\n  (-assoc-n [node n v]\n    (-assoc-n [key val] n v))\n\n  IReduce\n  (-reduce [node f]\n    (ci-reduce node f))\n\n  (-reduce [node f start]\n    (ci-reduce node f start))\n\n  IFn\n  (-invoke [node k]\n    (-nth node k))\n\n  (-invoke [node k not-found]\n    (-nth node k not-found)))\n\n(es6-iterable RedNode)\n\n(defn- tree-map-add [comp tree k v found]\n  (if (nil? tree)\n    (RedNode. k v nil nil nil)\n    (let [c (comp k (.-key tree))]\n      (cond\n        (zero? c)\n        (do (aset found 0 tree)\n            nil)\n\n        (neg? c)\n        (let [ins (tree-map-add comp (.-left tree) k v found)]\n          (if-not (nil? ins)\n            (.add-left tree ins)))\n\n        :else\n        (let [ins (tree-map-add comp (.-right tree) k v found)]\n          (if-not (nil? ins)\n            (.add-right tree ins)))))))\n\n(defn- tree-map-append [left right]\n  (cond\n    (nil? left)\n    right\n\n    (nil? right)\n    left\n\n    (instance? RedNode left)\n    (if (instance? RedNode right)\n      (let [app (tree-map-append (.-right left) (.-left right))]\n        (if (instance? RedNode app)\n          (RedNode. (.-key app) (.-val app)\n                    (RedNode. (.-key left) (.-val left)\n                              (.-left left)\n                              (.-left app)\n                              nil)\n                    (RedNode. (.-key right) (.-val right)\n                              (.-right app)\n                              (.-right right)\n                              nil)\n                    nil)\n          (RedNode. (.-key left) (.-val left)\n                    (.-left left)\n                    (RedNode. (.-key right) (.-val right) app (.-right right) nil)\n                    nil)))\n      (RedNode. (.-key left) (.-val left)\n                (.-left left)\n                (tree-map-append (.-right left) right)\n                nil))\n\n    (instance? RedNode right)\n    (RedNode. (.-key right) (.-val right)\n              (tree-map-append left (.-left right))\n              (.-right right)\n              nil)\n\n    :else\n    (let [app (tree-map-append (.-right left) (.-left right))]\n      (if (instance? RedNode app)\n        (RedNode. (.-key app) (.-val app)\n                  (BlackNode. (.-key left) (.-val left)\n                              (.-left left)\n                              (.-left app)\n                              nil)\n                  (BlackNode. (.-key right) (.-val right)\n                              (.-right app)\n                              (.-right right)\n                              nil)\n                  nil)\n        (balance-left-del (.-key left) (.-val left)\n                          (.-left left)\n                          (BlackNode. (.-key right) (.-val right)\n                                      app\n                                      (.-right right)\n                                      nil))))))\n\n(defn- tree-map-remove [comp tree k found]\n  (if-not (nil? tree)\n    (let [c (comp k (.-key tree))]\n      (cond\n        (zero? c)\n        (do (aset found 0 tree)\n            (tree-map-append (.-left tree) (.-right tree)))\n\n        (neg? c)\n        (let [del (tree-map-remove comp (.-left tree) k found)]\n          (if (or (not (nil? del)) (not (nil? (aget found 0))))\n            (if (instance? BlackNode (.-left tree))\n              (balance-left-del (.-key tree) (.-val tree) del (.-right tree))\n              (RedNode. (.-key tree) (.-val tree) del (.-right tree) nil))))\n\n        :else\n        (let [del (tree-map-remove comp (.-right tree) k found)]\n          (if (or (not (nil? del)) (not (nil? (aget found 0))))\n            (if (instance? BlackNode (.-right tree))\n              (balance-right-del (.-key tree) (.-val tree) (.-left tree) del)\n              (RedNode. (.-key tree) (.-val tree) (.-left tree) del nil))))))))\n\n(defn- tree-map-replace [comp tree k v]\n  (let [tk (.-key tree)\n        c  (comp k tk)]\n    (cond (zero? c) (.replace tree tk v (.-left tree) (.-right tree))\n          (neg? c)  (.replace tree tk (.-val tree) (tree-map-replace comp (.-left tree) k v) (.-right tree))\n          :else     (.replace tree tk (.-val tree) (.-left tree) (tree-map-replace comp (.-right tree) k v)))))\n\n(declare key)\n\n(deftype PersistentTreeMap [comp tree cnt meta ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (keys coll)))\n  (entries [coll]\n    (es6-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (vals coll)))\n  (has [coll k]\n    (contains? coll k))\n  (get [coll k not-found]\n    (-lookup coll k not-found))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  (entry-at [coll k]\n    (loop [t tree]\n      (if-not (nil? t)\n        (let [c (comp k (.-key t))]\n          (cond (zero? c) t\n                (neg? c)  (recur (.-left t))\n                :else     (recur (.-right t)))))))\n\n  ICloneable\n  (-clone [_] (PersistentTreeMap. comp tree cnt meta __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeMap. comp tree cnt new-meta __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll entry]\n    (if (vector? entry)\n      (-assoc coll (-nth entry 0) (-nth entry 1))\n      (loop [ret coll es (seq entry)]\n        (if (nil? es)\n          ret\n          (let [e (first es)]\n            (if (vector? e)\n              (recur (-assoc ret (-nth e 0) (-nth e 1))\n                     (next es))\n              (throw (js\/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n  IEmptyableCollection\n  (-empty [coll] (PersistentTreeMap. comp nil 0 meta 0))\n\n  IEquiv\n  (-equiv [coll other] (equiv-map coll other))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ICounted\n  (-count [coll] cnt)\n\n  IKVReduce\n  (-kv-reduce [coll f init]\n    (if-not (nil? tree)\n      (unreduced (tree-map-kv-reduce tree f init))\n      init))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  ISeqable\n  (-seq [coll]\n    (if (pos? cnt)\n      (create-tree-map-seq tree true cnt)))\n\n  IReversible\n  (-rseq [coll]\n    (if (pos? cnt)\n      (create-tree-map-seq tree false cnt)))\n\n  ILookup\n  (-lookup [coll k]\n    (-lookup coll k nil))\n\n  (-lookup [coll k not-found]\n    (let [n (.entry-at coll k)]\n      (if-not (nil? n)\n        (.-val n)\n        not-found)))\n\n  IAssociative\n  (-assoc [coll k v]\n    (let [found (array nil)\n          t     (tree-map-add comp tree k v found)]\n      (if (nil? t)\n        (let [found-node (nth found 0)]\n          (if (= v (.-val found-node))\n            coll\n            (PersistentTreeMap. comp (tree-map-replace comp tree k v) cnt meta nil)))\n        (PersistentTreeMap. comp (.blacken t) (inc cnt) meta nil))))\n\n  (-contains-key? [coll k]\n    (not (nil? (.entry-at coll k))))\n\n  IFind\n  (-find [coll k]\n    (.entry-at coll k))\n\n  IMap\n  (-dissoc [coll k]\n    (let [found (array nil)\n          t     (tree-map-remove comp tree k found)]\n      (if (nil? t)\n        (if (nil? (nth found 0))\n          coll\n          (PersistentTreeMap. comp nil 0 meta nil))\n        (PersistentTreeMap. comp (.blacken t) (dec cnt) meta nil))))\n\n  ISorted\n  (-sorted-seq [coll ascending?]\n    (if (pos? cnt)\n      (create-tree-map-seq tree ascending? cnt)))\n\n  (-sorted-seq-from [coll k ascending?]\n    (if (pos? cnt)\n      (loop [stack nil t tree]\n        (if-not (nil? t)\n          (let [c (comp k (.-key t))]\n            (cond\n              (zero? c)  (PersistentTreeMapSeq. nil (conj stack t) ascending? -1 nil)\n              ascending? (if (neg? c)\n                           (recur (conj stack t) (.-left t))\n                           (recur stack          (.-right t)))\n              :else      (if (pos? c)\n                           (recur (conj stack t) (.-right t))\n                           (recur stack          (.-left t)))))\n          (when-not (nil? stack)\n            (PersistentTreeMapSeq. nil stack ascending? -1 nil))))))\n\n  (-entry-key [coll entry] (key entry))\n\n  (-comparator [coll] comp))\n\n(set! (.-EMPTY PersistentTreeMap) (PersistentTreeMap. compare nil 0 nil empty-unordered-hash))\n\n(es6-iterable PersistentTreeMap)\n\n(defn hash-map\n  \"keyval => key val\n  Returns a new hash map with supplied mappings.\"\n  [& keyvals]\n  (loop [in (seq keyvals), out (transient (.-EMPTY PersistentHashMap))]\n    (if in\n      (recur (nnext in) (assoc! out (first in) (second in)))\n      (persistent! out))))\n\n(defn array-map\n  \"keyval => key val\n  Returns a new array map with supplied mappings.\"\n  [& keyvals]\n  (let [arr (if (and (instance? IndexedSeq keyvals) (zero? (.-i keyvals)))\n              (.-arr keyvals)\n              (into-array keyvals))]\n    (.createAsIfByAssoc PersistentArrayMap arr)))\n\n(defn obj-map\n  \"keyval => key val\n  Returns a new object map with supplied mappings.\"\n  [& keyvals]\n  (let [ks  (array)\n        obj (js-obj)]\n    (loop [kvs (seq keyvals)]\n      (if kvs\n        (do (.push ks (first kvs))\n            (gobject\/set obj (first kvs) (second kvs))\n            (recur (nnext kvs)))\n        (.fromObject ObjMap ks obj)))))\n\n(defn sorted-map\n  \"keyval => key val\n  Returns a new sorted map with supplied mappings.\"\n  ([& keyvals]\n     (loop [in (seq keyvals) out (.-EMPTY PersistentTreeMap)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(defn sorted-map-by\n  \"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.\"\n  ([comparator & keyvals]\n     (loop [in (seq keyvals)\n            out (PersistentTreeMap. (fn->comparator comparator) nil 0 nil 0)]\n       (if in\n         (recur (nnext in) (assoc out (first in) (second in)))\n         out))))\n\n(deftype KeySeq [^not-native mseq _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (KeySeq. mseq new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (let [^not-native me (-first mseq)]\n      (-key me)))\n\n  (-rest [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (if-not (nil? nseq)\n        (KeySeq. nseq nil)\n        ())))\n\n  INext\n  (-next [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (when-not (nil? nseq)\n        (KeySeq. nseq nil))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable KeySeq)\n\n(defn keys\n  \"Returns a sequence of the map's keys, in the same order as (seq map).\"\n  [map]\n  (when-let [mseq (seq map)]\n    (KeySeq. mseq nil)))\n\n(defn key\n  \"Returns the key of the map entry.\"\n  [map-entry]\n  (-key map-entry))\n\n(deftype ValSeq [^not-native mseq _meta]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  IMeta\n  (-meta [coll] _meta)\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta _meta)\n      coll\n      (ValSeq. mseq new-meta)))\n\n  ISeqable\n  (-seq [coll] coll)\n\n  ISequential\n  IEquiv\n  (-equiv [coll other] (equiv-sequential coll other))\n\n  ICollection\n  (-conj [coll o]\n    (cons o coll))\n\n  IEmptyableCollection\n  (-empty [coll] (.-EMPTY List))\n\n  IHash\n  (-hash [coll] (hash-ordered-coll coll))\n\n  ISeq\n  (-first [coll]\n    (let [^not-native me (-first mseq)]\n      (-val me)))\n\n  (-rest [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (if-not (nil? nseq)\n        (ValSeq. nseq nil)\n        ())))\n\n  INext\n  (-next [coll]\n    (let [nseq (if (satisfies? INext mseq)\n                 (-next mseq)\n                 (next mseq))]\n      (when-not (nil? nseq)\n        (ValSeq. nseq nil))))\n\n  IReduce\n  (-reduce [coll f] (seq-reduce f coll))\n  (-reduce [coll f start] (seq-reduce f start coll)))\n\n(es6-iterable ValSeq)\n\n(defn vals\n  \"Returns a sequence of the map's values, in the same order as (seq map).\"\n  [map]\n  (when-let [mseq (seq map)]\n    (ValSeq. mseq nil)))\n\n(defn val\n  \"Returns the value in the map entry.\"\n  [map-entry]\n  (-val map-entry))\n\n(defn merge\n  \"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.\"\n  [& maps]\n  (when (some identity maps)\n    (reduce #(conj (or %1 {}) %2) maps)))\n\n(defn merge-with\n  \"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).\"\n  [f & maps]\n  (when (some identity maps)\n    (let [merge-entry (fn [m e]\n                        (let [k (key e) v (val e)]\n                          (if (contains? m k)\n                            (assoc m k (f (get m k) v))\n                            (assoc m k v))))\n          merge2 (fn [m1 m2]\n                   (reduce merge-entry (or m1 {}) (seq m2)))]\n      (reduce merge2 maps))))\n\n(defn select-keys\n  \"Returns a map containing only those entries in map whose key is in keys\"\n  [map keyseq]\n    (loop [ret {} keys (seq keyseq)]\n      (if keys\n        (let [key   (first keys)\n              entry (get map key ::not-found)]\n          (recur\n           (if (not= entry ::not-found)\n             (assoc ret key entry)\n             ret)\n           (next keys)))\n        (-with-meta ret (meta map)))))\n\n;;; PersistentHashSet\n\n(declare TransientHashSet)\n\n(deftype HashSetIter [iter]\n  Object\n  (hasNext [_]\n    (.hasNext iter))\n  (next [_]\n    (if ^boolean (.hasNext iter)\n      (.-key (.next iter))\n      (throw (js\/Error. \"No such element\"))))\n  (remove [_] (js\/Error. \"Unsupported operation\")))\n\n(deftype PersistentHashSet [meta hash-map ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (seq coll)))\n  (entries [coll]\n    (es6-set-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (seq coll)))\n  (has [coll k]\n    (contains? coll k))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentHashSet. meta hash-map __hash))\n\n  IIterable\n  (-iterator [coll]\n    (HashSetIter. (-iterator hash-map)))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentHashSet. new-meta hash-map __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll o]\n    (PersistentHashSet. meta (assoc hash-map o nil) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (-with-meta (.-EMPTY PersistentHashSet) meta))\n\n  IEquiv\n  (-equiv [coll other]\n    (and\n     (set? other)\n     (== (count coll) (count other))\n     ^boolean\n     (try\n       (reduce-kv\n         #(or (contains? other %2) (reduced false))\n         true hash-map)\n       (catch js\/Error ex\n         false))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] (keys hash-map))\n\n  ICounted\n  (-count [coll] (-count hash-map))\n\n  ILookup\n  (-lookup [coll v]\n    (-lookup coll v nil))\n  (-lookup [coll v not-found]\n    (if-let [entry (-find hash-map v)]\n      (key entry)\n      not-found))\n\n  ISet\n  (-disjoin [coll v]\n    (PersistentHashSet. meta (-dissoc hash-map v) nil))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found))\n\n  IEditableCollection\n  (-as-transient [coll] (TransientHashSet. (-as-transient hash-map))))\n\n(set! (.-EMPTY PersistentHashSet)\n  (PersistentHashSet. nil (.-EMPTY PersistentArrayMap) empty-unordered-hash))\n\n(set! (.-fromArray PersistentHashSet)\n  (fn [items ^boolean no-clone]\n    (let [len (alength items)]\n      (if (<= len (.-HASHMAP-THRESHOLD PersistentArrayMap))\n        (let [arr (if no-clone items (aclone items))]\n          (loop [i 0\n                 out (transient (.-EMPTY PersistentArrayMap))]\n            (if (< i len)\n              (recur (inc i) (-assoc! out (aget items i) nil))\n              (PersistentHashSet. nil (-persistent! out) nil))))\n       (loop [i 0\n              out (transient (.-EMPTY PersistentHashSet))]\n         (if (< i len)\n           (recur (inc i) (-conj! out (aget items i)))\n           (-persistent! out)))))))\n\n(set! (.-createWithCheck PersistentHashSet)\n      (fn [items]\n        (let [len (alength items)\n              t (-as-transient (.-EMPTY PersistentHashSet))]\n          (dotimes [i len]\n            (-conj! t (aget items i))\n            (when-not (= (count t) (inc i))\n              (throw (js\/Error. (str \"Duplicate key: \" (aget items i))))))\n          (-persistent! t))))\n\n(set! (.-createAsIfByAssoc PersistentHashSet)\n      (fn [items]\n        (let [len (alength items)\n              t (-as-transient (.-EMPTY PersistentHashSet))]\n          (dotimes [i len] (-conj! t (aget items i)))\n          (-persistent! t))))\n\n(es6-iterable PersistentHashSet)\n\n(deftype TransientHashSet [^:mutable transient-map]\n  ITransientCollection\n  (-conj! [tcoll o]\n    (set! transient-map (assoc! transient-map o nil))\n    tcoll)\n\n  (-persistent! [tcoll]\n    (PersistentHashSet. nil (persistent! transient-map) nil))\n\n  ITransientSet\n  (-disjoin! [tcoll v]\n    (set! transient-map (dissoc! transient-map v))\n    tcoll)\n\n  ICounted\n  (-count [tcoll] (count transient-map))\n\n  ILookup\n  (-lookup [tcoll v]\n    (-lookup tcoll v nil))\n\n  (-lookup [tcoll v not-found]\n    (if (identical? (-lookup transient-map v lookup-sentinel) lookup-sentinel)\n      not-found\n      v))\n\n  IFn\n  (-invoke [tcoll k]\n    (if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)\n      nil\n      k))\n\n  (-invoke [tcoll k not-found]\n    (if (identical? (-lookup transient-map k lookup-sentinel) lookup-sentinel)\n      not-found\n      k)))\n\n(deftype PersistentTreeSet [meta tree-map ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n\n  ;; EXPERIMENTAL: subject to change\n  (keys [coll]\n    (es6-iterator (seq coll)))\n  (entries [coll]\n    (es6-set-entries-iterator (seq coll)))\n  (values [coll]\n    (es6-iterator (seq coll)))\n  (has [coll k]\n    (contains? coll k))\n  (forEach [coll f]\n    (doseq [[k v] coll]\n      (f v k)))\n\n  ICloneable\n  (-clone [_] (PersistentTreeSet. meta tree-map __hash))\n\n  IWithMeta\n  (-with-meta [coll new-meta]\n    (if (identical? new-meta meta)\n      coll\n      (PersistentTreeSet. new-meta tree-map __hash)))\n\n  IMeta\n  (-meta [coll] meta)\n\n  ICollection\n  (-conj [coll o]\n    (PersistentTreeSet. meta (assoc tree-map o nil) nil))\n\n  IEmptyableCollection\n  (-empty [coll] (PersistentTreeSet. meta (-empty tree-map) 0))\n\n  IEquiv\n  (-equiv [coll other]\n    (and\n     (set? other)\n     (== (count coll) (count other))\n     ^boolean\n     (try\n       (reduce-kv\n         #(or (contains? other %2) (reduced false))\n         true tree-map)\n       (catch js\/Error ex\n         false))))\n\n  IHash\n  (-hash [coll] (caching-hash coll hash-unordered-coll __hash))\n\n  ISeqable\n  (-seq [coll] (keys tree-map))\n\n  ISorted\n  (-sorted-seq [coll ascending?]\n    (map key (-sorted-seq tree-map ascending?)))\n\n  (-sorted-seq-from [coll k ascending?]\n    (map key (-sorted-seq-from tree-map k ascending?)))\n\n  (-entry-key [coll entry] entry)\n\n  (-comparator [coll] (-comparator tree-map))\n\n  IReversible\n  (-rseq [coll]\n    (if (pos? (count tree-map))\n      (map key (rseq tree-map))))\n\n  ICounted\n  (-count [coll] (count tree-map))\n\n  ILookup\n  (-lookup [coll v]\n    (-lookup coll v nil))\n  (-lookup [coll v not-found]\n    (let [n (.entry-at tree-map v)]\n      (if-not (nil? n)\n        (.-key n)\n        not-found)))\n\n  ISet\n  (-disjoin [coll v]\n    (PersistentTreeSet. meta (dissoc tree-map v) nil))\n\n  IFn\n  (-invoke [coll k]\n    (-lookup coll k))\n  (-invoke [coll k not-found]\n    (-lookup coll k not-found)))\n\n(set! (.-EMPTY PersistentTreeSet)\n  (PersistentTreeSet. nil (.-EMPTY PersistentTreeMap) empty-unordered-hash))\n\n(es6-iterable PersistentTreeSet)\n\n(defn set-from-indexed-seq [iseq]\n  (let [arr (.-arr iseq)\n        ret (areduce arr i ^not-native res (-as-transient #{})\n              (-conj! res (aget arr i)))]\n    (-persistent! ^not-native ret)))\n\n(defn set\n  \"Returns a set of the distinct elements of coll.\"\n  [coll]\n  (if (set? coll)\n    (with-meta coll nil)\n    (let [in (seq coll)]\n      (cond\n        (nil? in) #{}\n\n        (and (instance? IndexedSeq in) (zero? (.-i in)))\n        (.createAsIfByAssoc PersistentHashSet (.-arr in))\n\n        :else\n        (loop [^not-native in  in\n               ^not-native out (-as-transient #{})]\n          (if-not (nil? in)\n            (recur (next in) (-conj! out (-first in)))\n            (persistent! out)))))))\n\n(defn hash-set\n  \"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.\"\n  ([] #{})\n  ([& keys] (set keys)))\n\n(defn sorted-set\n  \"Returns a new sorted set with supplied keys.\"\n  ([& keys]\n   (reduce -conj (.-EMPTY PersistentTreeSet) keys)))\n\n(defn sorted-set-by\n  \"Returns a new sorted set with supplied keys, using the supplied comparator.\"\n  ([comparator & keys]\n   (reduce -conj\n           (PersistentTreeSet. nil (sorted-map-by comparator) 0)\n           keys)))\n\n(defn replace\n  \"Given a map of replacement pairs and a vector\/collection, returns a\n  vector\/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.\"\n  ([smap]\n     (map #(if-let [e (find smap %)] (val e) %)))\n  ([smap coll]\n     (if (vector? coll)\n       (let [n (count coll)]\n         (reduce (fn [v i]\n                   (if-let [e (find smap (nth v i))]\n                     (assoc v i (second e))\n                     v))\n           coll (take n (iterate inc 0))))\n       (map #(if-let [e (find smap %)] (second e) %) coll))))\n\n(defn distinct\n  \"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.\"\n  ([]\n    (fn [rf]\n      (let [seen (volatile! #{})]\n        (fn\n          ([] (rf))\n          ([result] (rf result))\n          ([result input]\n            (if (contains? @seen input)\n              result\n              (do (vswap! seen conj input)\n                  (rf result input))))))))\n  ([coll]\n    (let [step (fn step [xs seen]\n                 (lazy-seq\n                   ((fn [[f :as xs] seen]\n                      (when-let [s (seq xs)]\n                        (if (contains? seen f)\n                          (recur (rest s) seen)\n                          (cons f (step (rest s) (conj seen f))))))\n                     xs seen)))]\n      (step coll #{}))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn butlast\n  \"Return a seq of all but the last item in coll, in linear time\"\n  [s]\n  (loop [ret [] s s]\n    (if (next s)\n      (recur (conj ret (first s)) (next s))\n      (seq ret))))\n\n(defn name\n  \"Returns the name String of a string, symbol or keyword.\"\n  [x]\n  (if (implements? INamed x)\n    (-name x)\n    (if (string? x)\n      x\n      (throw (js\/Error. (str \"Doesn't support name: \" x))))))\n\n(defn zipmap\n  \"Returns a map with the keys mapped to the corresponding vals.\"\n  [keys vals]\n    (loop [map (transient {})\n           ks (seq keys)\n           vs (seq vals)]\n      (if (and ks vs)\n        (recur (assoc! map (first ks) (first vs))\n               (next ks)\n               (next vs))\n        (persistent! map))))\n\n(defn max-key\n  \"Returns the x for which (k x), a number, is greatest.\n\n  If there are multiple such xs, the last one is returned.\"\n  ([k x] x)\n  ([k x y] (if (> (k x) (k y)) x y))\n  ([k x y & more]\n   (reduce #(max-key k %1 %2) (max-key k x y) more)))\n\n(defn min-key\n  \"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.\"\n  ([k x] x)\n  ([k x y] (if (< (k x) (k y)) x y))\n  ([k x y & more]\n     (reduce #(min-key k %1 %2) (min-key k x y) more)))\n\n(deftype ArrayList [^:mutable arr]\n  Object\n  (add [_ x] (.push arr x))\n  (size [_] (alength arr))\n  (clear [_] (set! arr (array)))\n  (isEmpty [_] (zero? (alength arr)))\n  (toArray [_] arr))\n\n(defn array-list []\n  (ArrayList. (array)))\n\n(defn partition-all\n  \"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.\"\n  ([n]\n   (fn [rf]\n     (let [a (array-list)]\n       (fn\n         ([] (rf))\n         ([result]\n            (let [result (if (.isEmpty a)\n                           result\n                           (let [v (vec (.toArray a))]\n                             ;;clear first!\n                             (.clear a)\n                             (unreduced (rf result v))))]\n              (rf result)))\n         ([result input]\n            (.add a input)\n            (if (== n (.size a))\n              (let [v (vec (.toArray a))]\n                (.clear a)\n                (rf result v))\n              result))))))\n  ([n coll]\n     (partition-all n n coll))\n  ([n step coll]\n     (lazy-seq\n      (when-let [s (seq coll)]\n        (cons (take n s) (partition-all n step (drop step s)))))))\n\n(defn take-while\n  \"Returns a lazy sequence of successive items from coll while\n  (pred item) returns logical true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.\"\n  ([pred]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (if (pred input)\n              (rf result input)\n              (reduced result))))))\n  ([pred coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (when (pred (first s))\n           (cons (first s) (take-while pred (rest s))))))))\n\n(defn mk-bound-fn\n  [sc test key]\n  (fn [e]\n    (let [comp (-comparator sc)]\n      (test (comp (-entry-key sc e) key) 0))))\n\n(defn subseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  ([sc test key]\n     (let [include (mk-bound-fn sc test key)]\n       (if (#{> >=} test)\n         (when-let [[e :as s] (-sorted-seq-from sc key true)]\n           (if (include e) s (next s)))\n         (take-while include (-sorted-seq sc true)))))\n  ([sc start-test start-key end-test end-key]\n     (when-let [[e :as s] (-sorted-seq-from sc start-key true)]\n       (take-while (mk-bound-fn sc end-test end-key)\n                   (if ((mk-bound-fn sc start-test start-key) e) s (next s))))))\n\n(defn rsubseq\n  \"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true\"\n  ([sc test key]\n     (let [include (mk-bound-fn sc test key)]\n       (if (#{< <=} test)\n         (when-let [[e :as s] (-sorted-seq-from sc key false)]\n           (if (include e) s (next s)))\n         (take-while include (-sorted-seq sc false)))))\n  ([sc start-test start-key end-test end-key]\n     (when-let [[e :as s] (-sorted-seq-from sc end-key false)]\n       (take-while (mk-bound-fn sc start-test start-key)\n                   (if ((mk-bound-fn sc end-test end-key) e) s (next s))))))\n\n(deftype IntegerRangeChunk [start step count]\n  ICounted\n  (-count [coll] count)\n\n  ISeq\n  (-first [coll] start)\n\n  IIndexed\n  (-nth [coll i]\n    (+ start (* i step)))\n  (-nth [coll i not-found]\n    (if (and (>= i 0) (< i count))\n      (+ start (* i step))\n      not-found))\n\n  IChunk\n  (-drop-first [coll]\n    (if (<= count 1)\n      (throw (js\/Error. \"-drop-first of empty chunk\"))\n      (IntegerRangeChunk. (+ start step) step (dec count)))))\n\n(deftype RangeIterator [^:mutable i end step]\n  Object\n  (hasNext [_]\n    (if (pos? step)\n      (< i end)\n      (> i end)))\n  (next [_]\n    (let [ret i]\n      (set! i (+ i step))\n      ret)))\n\n(deftype IntegerRange [meta start end step ^:mutable chunk ^:mutable chunk-next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n  (forceChunk [coll]\n    (when (nil? chunk)\n      (let [count (-count coll)]\n        (if (> count 32)\n          (do\n            (set! chunk-next (IntegerRange. nil (+ start (* step 32)) end step nil nil nil))\n            (set! chunk (IntegerRangeChunk. start step 32)))\n          (set! chunk (IntegerRangeChunk. start step count))))))\n\n  ICloneable\n  (-clone [_] (IntegerRange. meta start end step chunk chunk-next __hash))\n\n  IWithMeta\n  (-with-meta [rng new-meta]\n    (if (identical? new-meta meta)\n      rng\n      (IntegerRange. new-meta start end step chunk chunk-next __hash)))\n\n  IMeta\n  (-meta [rng] meta)\n\n  ISeqable\n  (-seq [rng] rng)\n\n  ISeq\n  (-first [rng] start)\n  (-rest [rng]\n    (let [s (-next rng)]\n      (if (nil? s)\n        ()\n        s)))\n\n  IIterable\n  (-iterator [_]\n    (RangeIterator. start end step))\n\n  INext\n  (-next [rng]\n    (if (pos? step)\n      (when (< (+ start step) end)\n        (IntegerRange. nil (+ start step) end step nil nil nil))\n      (when (> (+ start step) end)\n        (IntegerRange. nil (+ start step) end step nil nil nil))))\n\n  IChunkedSeq\n  (-chunked-first [rng]\n    (.forceChunk rng)\n    chunk)\n  (-chunked-rest [rng]\n    (.forceChunk rng)\n    (if (nil? chunk-next)\n      ()\n      chunk-next))\n\n  IChunkedNext\n  (-chunked-next [rng]\n    (seq (-chunked-rest rng)))\n\n  ICollection\n  (-conj [rng o] (cons o rng))\n\n  IEmptyableCollection\n  (-empty [rng] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [rng other] (equiv-sequential rng other))\n\n  IHash\n  (-hash [rng] (caching-hash rng hash-ordered-coll __hash))\n\n  ICounted\n  (-count [rng]\n    (Math\/ceil (\/ (- end start) step)))\n\n  IIndexed\n  (-nth [rng n]\n    (if (and (<= 0 n) (< n (-count rng)))\n      (+ start (* n step))\n      (if (and (<= 0 n) (> start end) (zero? step))\n        start\n        (throw (js\/Error. \"Index out of bounds\")))))\n  (-nth [rng n not-found]\n    (if (and (<= 0 n) (< n (-count rng)))\n      (+ start (* n step))\n      (if (and (<= 0 n) (> start end) (zero? step))\n        start\n        not-found)))\n\n  IReduce\n  (-reduce [rng f] (ci-reduce rng f))\n  (-reduce [rng f init]\n    (loop [i start ret init]\n      (if (if (pos? step) (< i end) (> i end))\n        (let [ret (f ret i)]\n          (if (reduced? ret)\n            @ret\n            (recur (+ i step) ret)))\n        ret))))\n\n(es6-iterable IntegerRange)\n\n(deftype Range [meta start end step ^:mutable chunk ^:mutable chunk-next ^:mutable __hash]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n  (equiv [this other]\n    (-equiv this other))\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n  (forceChunk [coll]\n    (when (nil? chunk)\n      (let [arr (make-array 32)\n            val (loop [n 0 val start]\n                  (if (< n 32)\n                    (do\n                      (aset arr n val)\n                      (let [n (inc n)\n                            val (+ val step)]\n                        (if (if (pos? step) (< val end) (> val end))\n                          (recur n val)\n                          (set! chunk (array-chunk arr 0 n)))))\n                    val))]\n        (when (nil? chunk)\n          (set! chunk (array-chunk arr 0 32))\n          (when (if (pos? step) (< val end) (> val end))\n            (set! chunk-next (Range. nil val end step nil nil nil)))))))\n\n  ICloneable\n  (-clone [_] (Range. meta start end step chunk chunk-next __hash))\n\n  IWithMeta\n  (-with-meta [rng new-meta]\n    (if (identical? new-meta meta)\n      rng\n      (Range. new-meta start end step chunk chunk-next __hash)))\n\n  IMeta\n  (-meta [rng] meta)\n\n  ISeqable\n  (-seq [rng] rng)\n\n  ISeq\n  (-first [rng] start)\n  (-rest [rng]\n    (let [s (-next rng)]\n      (if (nil? s)\n        ()\n        s)))\n\n  IIterable\n  (-iterator [_]\n    (RangeIterator. start end step))\n\n  INext\n  (-next [rng]\n    (if (pos? step)\n      (when (< (+ start step) end)\n        (Range. nil (+ start step) end step nil nil nil))\n      (when (> (+ start step) end)\n        (Range. nil (+ start step) end step nil nil nil))))\n\n  IChunkedSeq\n  (-chunked-first [rng]\n    (.forceChunk rng)\n    chunk)\n  (-chunked-rest [rng]\n    (.forceChunk rng)\n    (if (nil? chunk-next)\n      ()\n      chunk-next))\n\n  IChunkedNext\n  (-chunked-next [rng]\n    (seq (-chunked-rest rng)))\n\n  ICollection\n  (-conj [rng o] (cons o rng))\n\n  IEmptyableCollection\n  (-empty [rng] (.-EMPTY List))\n\n  ISequential\n  IEquiv\n  (-equiv [rng other] (equiv-sequential rng other))\n\n  IHash\n  (-hash [rng] (caching-hash rng hash-ordered-coll __hash))\n\n  IReduce\n  (-reduce [rng f] (seq-reduce f rng))\n  (-reduce [rng f init]\n    (loop [i start ret init]\n      (if (if (pos? step) (< i end) (> i end))\n        (let [ret (f ret i)]\n          (if (reduced? ret)\n            @ret\n            (recur (+ i step) ret)))\n        ret))))\n\n(es6-iterable Range)\n\n(defn range\n  \"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.\"\n  ([] (range 0 (.-MAX_VALUE js\/Number) 1))\n  ([end] (range 0 end 1))\n  ([start end] (range start end 1))\n  ([start end step]\n   (cond\n     (pos? step)\n     (if (<= end start)\n       ()\n       (if (and (integer? start) (integer? end) (integer? step))\n         (IntegerRange. nil start end step nil nil nil)\n         (Range. nil start end step nil nil nil)))\n\n     (neg? step)\n     (if (>= end start)\n       ()\n       (if (and (integer? start) (integer? end) (integer? step))\n         (IntegerRange. nil start end step nil nil nil)\n         (Range. nil start end step nil nil nil)))\n\n     :else\n     (if (== end start)\n       ()\n       (repeat start)))))\n\n(defn take-nth\n  \"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.\"\n  ([n]\n   {:pre [(number? n)]}\n     (fn [rf]\n       (let [ia (volatile! -1)]\n         (fn\n           ([] (rf))\n           ([result] (rf result))\n           ([result input]\n              (let [i (vswap! ia inc)]\n                (if (zero? (rem i n))\n                  (rf result input)\n                  result)))))))\n  ([n coll]\n   {:pre [(number? n)]}\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (cons (first s) (take-nth n (drop n s)))))))\n\n(defn split-with\n  \"Returns a vector of [(take-while pred coll) (drop-while pred coll)]\"\n  [pred coll]\n  [(take-while pred coll) (drop-while pred coll)])\n\n(defn partition-by\n  \"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.\"\n  ([f]\n     (fn [rf]\n       (let [a (array-list)\n             pa (volatile! ::none)]\n         (fn\n           ([] (rf))\n           ([result]\n              (let [result (if (.isEmpty a)\n                             result\n                             (let [v (vec (.toArray a))]\n                               ;;clear first!\n                               (.clear a)\n                               (unreduced (rf result v))))]\n                (rf result)))\n           ([result input]\n              (let [pval @pa\n                    val (f input)]\n                (vreset! pa val)\n                (if (or (keyword-identical? pval ::none)\n                        (= val pval))\n                  (do\n                    (.add a input)\n                    result)\n                  (let [v (vec (.toArray a))]\n                    (.clear a)\n                    (let [ret (rf result v)]\n                      (when-not (reduced? ret)\n                        (.add a input))\n                      ret)))))))))\n  ([f coll]\n     (lazy-seq\n       (when-let [s (seq coll)]\n         (let [fst (first s)\n               fv (f fst)\n               run (cons fst (take-while #(= fv (f %)) (next s)))]\n           (cons run (partition-by f (lazy-seq (drop (count run) s)))))))))\n\n(defn frequencies\n  \"Returns a map from distinct items in coll to the number of times\n  they appear.\"\n  [coll]\n  (persistent!\n   (reduce (fn [counts x]\n             (assoc! counts x (inc (get counts x 0))))\n           (transient {}) coll)))\n\n(defn reductions\n  \"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.\"\n  ([f coll]\n   (lazy-seq\n     (if-let [s (seq coll)]\n       (reductions f (first s) (rest s))\n       (list (f)))))\n  ([f init coll]\n   (if (reduced? init)\n     (list @init)\n     (cons init\n       (lazy-seq\n         (when-let [s (seq coll)]\n           (reductions f (f init (first s)) (rest s))))))))\n\n(defn juxt\n  \"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]\"\n  ([f]\n     (fn\n       ([] (vector (f)))\n       ([x] (vector (f x)))\n       ([x y] (vector (f x y)))\n       ([x y z] (vector (f x y z)))\n       ([x y z & args] (vector (apply f x y z args)))))\n  ([f g]\n     (fn\n       ([] (vector (f) (g)))\n       ([x] (vector (f x) (g x)))\n       ([x y] (vector (f x y) (g x y)))\n       ([x y z] (vector (f x y z) (g x y z)))\n       ([x y z & args] (vector (apply f x y z args) (apply g x y z args)))))\n  ([f g h]\n     (fn\n       ([] (vector (f) (g) (h)))\n       ([x] (vector (f x) (g x) (h x)))\n       ([x y] (vector (f x y) (g x y) (h x y)))\n       ([x y z] (vector (f x y z) (g x y z) (h x y z)))\n       ([x y z & args] (vector (apply f x y z args) (apply g x y z args) (apply h x y z args)))))\n  ([f g h & fs]\n     (let [fs (list* f g h fs)]\n       (fn\n         ([] (reduce #(conj %1 (%2)) [] fs))\n         ([x] (reduce #(conj %1 (%2 x)) [] fs))\n         ([x y] (reduce #(conj %1 (%2 x y)) [] fs))\n         ([x y z] (reduce #(conj %1 (%2 x y z)) [] fs))\n         ([x y z & args] (reduce #(conj %1 (apply %2 x y z args)) [] fs))))))\n\n(defn dorun\n  \"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.\"\n  ([coll]\n   (when-let [s (seq coll)]\n     (recur (next s))))\n  ([n coll]\n   (when (and (seq coll) (pos? n))\n     (recur (dec n) (next coll)))))\n\n(defn doall\n  \"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.\"\n  ([coll]\n   (dorun coll)\n   coll)\n  ([n coll]\n   (dorun n coll)\n   coll))\n\n;;;;;;;;;;;;;;;;;;;;;;;;; Regular Expressions ;;;;;;;;;;\n\n(defn regexp?\n  \"Returns true if x is a JavaScript RegExp instance.\"\n  [x]\n  (instance? js\/RegExp x))\n\n(defn re-matches\n  \"Returns the result of (re-find re s) if re fully matches s.\"\n  [re s]\n  (if (string? s)\n    (let [matches (.exec re s)]\n      (when (and (not (nil? matches))\n                 (= (aget matches 0) s))\n        (if (== (count ^array matches) 1)\n          (aget matches 0)\n          (vec matches))))\n    (throw (js\/TypeError. \"re-matches must match against a string.\"))))\n\n\n(defn re-find\n  \"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups.\"\n  [re s]\n  (if (string? s)\n    (let [matches (.exec re s)]\n      (when-not (nil? matches)\n        (if (== (count ^array matches) 1)\n          (aget matches 0)\n          (vec matches))))\n    (throw (js\/TypeError. \"re-find must match against a string.\"))))\n\n(defn- re-seq* [re s]\n  (when-some [matches (.exec re s)]\n    (let [match-str (aget matches 0)\n          match-vals (if (== (.-length matches) 1)\n                       match-str\n                       (vec matches))]\n      (cons match-vals\n            (lazy-seq\n             (let [post-idx (+ (.-index matches)\n                               (max 1 (.-length match-str)))]\n               (when (<= post-idx (.-length s))\n                 (re-seq* re (subs s post-idx)))))))))\n\n(defn re-seq\n  \"Returns a lazy sequence of successive matches of re in s.\"\n  [re s]\n  (if (string? s)\n    (re-seq* re s)\n    (throw (js\/TypeError. \"re-seq must match against a string.\"))))\n\n(defn re-pattern\n  \"Returns an instance of RegExp which has compiled the provided string.\"\n  [s]\n  (if (instance? js\/RegExp s)\n    s\n    (let [[prefix flags] (re-find #\"^\\(\\?([idmsux]*)\\)\" s)\n          pattern (subs s (if (nil? prefix)\n                            0\n                            (count ^string prefix)))]\n      (js\/RegExp. pattern (or flags \"\")))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Printing ;;;;;;;;;;;;;;;;\n\n(defn pr-sequential-writer [writer print-one begin sep end opts coll]\n  (binding [*print-level* (when-not (nil? *print-level*) (dec *print-level*))]\n    (if (and (not (nil? *print-level*)) (neg? *print-level*))\n      (-write writer \"#\")\n      (do\n        (-write writer begin)\n        (if (zero? (:print-length opts))\n          (when (seq coll)\n            (-write writer (or (:more-marker opts) \"...\")))\n          (do\n            (when (seq coll)\n              (print-one (first coll) writer opts))\n            (loop [coll (next coll) n (dec (:print-length opts))]\n              (if (and coll (or (nil? n) (not (zero? n))))\n                (do\n                  (-write writer sep)\n                  (print-one (first coll) writer opts)\n                  (recur (next coll) (dec n)))\n                (when (and (seq coll) (zero? n))\n                  (-write writer sep)\n                  (-write writer (or (:more-marker opts) \"...\")))))))\n        (-write writer end)))))\n\n(defn write-all [writer & ss]\n  (doseq [s ss]\n    (-write writer s)))\n\n(defn string-print [x]\n  (when (nil? *print-fn*)\n    (throw (js\/Error. \"No *print-fn* fn set for evaluation environment\")))\n  (*print-fn* x)\n  nil)\n\n(defn flush [] ;stub\n  nil)\n\n(def ^:private char-escapes\n  (js-obj\n    \"\\\"\" \"\\\\\\\"\"\n    \"\\\\\" \"\\\\\\\\\"\n    \"\\b\" \"\\\\b\"\n    \"\\f\" \"\\\\f\"\n    \"\\n\" \"\\\\n\"\n    \"\\r\" \"\\\\r\"\n    \"\\t\" \"\\\\t\"))\n\n(defn ^:private quote-string\n  [s]\n  (str \\\"\n       (.replace s (js\/RegExp \"[\\\\\\\\\\\"\\b\\f\\n\\r\\t]\" \"g\")\n         (fn [match] (unchecked-get char-escapes match)))\n       \\\"))\n\n(declare print-map)\n\n(defn print-meta? [opts obj]\n  (and (boolean (get opts :meta))\n       (implements? IMeta obj)\n       (not (nil? (meta obj)))))\n\n(defn- pr-writer-impl\n  [obj writer opts]\n  (cond\n    (nil? obj) (-write writer \"nil\")\n    :else\n    (do\n      (when (print-meta? opts obj)\n        (-write writer \"^\")\n        (pr-writer (meta obj) writer opts)\n        (-write writer \" \"))\n      (cond\n        ;; handle CLJS ctors\n        ^boolean (.-cljs$lang$type obj)\n        (.cljs$lang$ctorPrWriter obj obj writer opts)\n\n        ; Use the new, more efficient, IPrintWithWriter interface when possible.\n        (satisfies? IPrintWithWriter obj)\n        (-pr-writer obj writer opts)\n\n        (or (true? obj) (false? obj))\n        (-write writer (str obj))\n\n        (number? obj)\n        (-write writer\n          (cond\n            ^boolean (js\/isNaN obj) \"##NaN\"\n            (identical? obj js\/Number.POSITIVE_INFINITY) \"##Inf\"\n            (identical? obj js\/Number.NEGATIVE_INFINITY) \"##-Inf\"\n            :else (str obj)))\n\n        (object? obj)\n        (do\n          (-write writer \"#js \")\n          (print-map\n            (map (fn [k]\n                   (MapEntry. (cond-> k (some? (re-matches #\"[A-Za-z_\\*\\+\\?!\\-'][\\w\\*\\+\\?!\\-']*\" k)) keyword) (unchecked-get obj k) nil))\n              (js-keys obj))\n            pr-writer writer opts))\n\n        (array? obj)\n        (pr-sequential-writer writer pr-writer \"#js [\" \" \" \"]\" opts obj)\n\n        (string? obj)\n        (if (:readably opts)\n          (-write writer (quote-string obj))\n          (-write writer obj))\n\n        (js-fn? obj)\n        (let [name (.-name obj)\n              name (if (or (nil? name) (gstring\/isEmpty name))\n                     \"Function\"\n                     name)]\n          (write-all writer \"#object[\" name\n            (if *print-fn-bodies*\n              (str \" \\\"\" (str obj) \"\\\"\")\n              \"\")\n            \"]\"))\n\n        (instance? js\/Date obj)\n        (let [normalize (fn [n len]\n                          (loop [ns (str n)]\n                            (if (< (count ns) len)\n                              (recur (str \"0\" ns))\n                              ns)))]\n          (write-all writer\n            \"#inst \\\"\"\n            (normalize (.getUTCFullYear obj) 4)     \"-\"\n            (normalize (inc (.getUTCMonth obj)) 2)  \"-\"\n            (normalize (.getUTCDate obj) 2)         \"T\"\n            (normalize (.getUTCHours obj) 2)        \":\"\n            (normalize (.getUTCMinutes obj) 2)      \":\"\n            (normalize (.getUTCSeconds obj) 2)      \".\"\n            (normalize (.getUTCMilliseconds obj) 3) \"-\"\n            \"00:00\\\"\"))\n\n        (regexp? obj) (write-all writer \"#\\\"\" (.-source obj) \"\\\"\")\n\n        (js-symbol? obj) (write-all writer \"#object[\" (.toString obj) \"]\" )\n\n        :else\n        (if (some-> obj .-constructor .-cljs$lang$ctorStr)\n          (write-all writer\n            \"#object[\" (.replace (.. obj -constructor -cljs$lang$ctorStr)\n                         (js\/RegExp. \"\/\" \"g\") \".\") \"]\")\n          (let [name (some-> obj .-constructor .-name)\n                name (if (or (nil? name) (gstring\/isEmpty name))\n                       \"Object\"\n                       name)]\n            (if (nil? (. obj -constructor))\n              (write-all writer \"#object[\" name \"]\")\n              (write-all writer \"#object[\" name \" \" (str obj) \"]\"))))))))\n\n(defn- pr-writer\n  \"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer.\"\n  [obj writer opts]\n  (if-let [alt-impl (:alt-impl opts)]\n    (alt-impl obj writer (assoc opts :fallback-impl pr-writer-impl))\n    (pr-writer-impl obj writer opts)))\n\n(defn pr-seq-writer [objs writer opts]\n  (pr-writer (first objs) writer opts)\n  (doseq [obj (next objs)]\n    (-write writer \" \")\n    (pr-writer obj writer opts)))\n\n(defn- pr-sb-with-opts [objs opts]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (pr-seq-writer objs writer opts)\n    (-flush writer)\n    sb))\n\n(defn pr-str-with-opts\n  \"Prints a sequence of objects to a string, observing all the\n  options given in opts\"\n  [objs opts]\n  (if (empty? objs)\n    \"\"\n    (str (pr-sb-with-opts objs opts))))\n\n(defn prn-str-with-opts\n  \"Same as pr-str-with-opts followed by (newline)\"\n  [objs opts]\n  (if (empty? objs)\n    \"\\n\"\n    (let [sb (pr-sb-with-opts objs opts)]\n      (.append sb \\newline)\n      (str sb))))\n\n(defn- pr-with-opts\n  \"Prints a sequence of objects using string-print, observing all\n  the options given in opts\"\n  [objs opts]\n  (string-print (pr-str-with-opts objs opts)))\n\n(defn newline\n  \"Prints a newline using *print-fn*\"\n  ([] (newline nil))\n  ([opts]\n   (string-print \"\\n\")\n   (when (get opts :flush-on-newline)\n     (flush))))\n\n(defn pr-str\n  \"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.\"\n  [& objs]\n  (pr-str-with-opts objs (pr-opts)))\n\n(defn prn-str\n  \"Same as pr-str followed by (newline)\"\n  [& objs]\n  (prn-str-with-opts objs (pr-opts)))\n\n(defn pr\n  \"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader\"\n  [& objs]\n  (pr-with-opts objs (pr-opts)))\n\n(def ^{:doc\n  \"Prints the object(s) using string-print.\n  print and println produce output for human consumption.\"}\n  print\n  (fn cljs-core-print [& objs]\n    (pr-with-opts objs (assoc (pr-opts) :readably false))))\n\n(defn print-str\n  \"print to a string, returning it\"\n  [& objs]\n  (pr-str-with-opts objs (assoc (pr-opts) :readably false)))\n\n(defn println\n  \"Same as print followed by (newline)\"\n  [& objs]\n  (pr-with-opts objs (assoc (pr-opts) :readably false))\n  (when *print-newline*\n    (newline (pr-opts))))\n\n(defn println-str\n  \"println to a string, returning it\"\n  [& objs]\n  (prn-str-with-opts objs (assoc (pr-opts) :readably false)))\n\n(defn prn\n  \"Same as pr followed by (newline).\"\n  [& objs]\n  (pr-with-opts objs (pr-opts))\n  (when *print-newline*\n    (newline (pr-opts))))\n\n(defn- strip-ns\n  [named]\n  (if (symbol? named)\n    (symbol nil (name named))\n    (keyword nil (name named))))\n\n(defn- lift-ns\n  \"Returns [lifted-ns lifted-map] or nil if m can't be lifted.\"\n  [m]\n  (when *print-namespace-maps*\n    (loop [ns nil\n           [[k v :as entry] & entries] (seq m)\n           lm (empty m)]\n      (if entry\n        (when (or (keyword? k) (symbol? k))\n          (if ns\n            (when (= ns (namespace k))\n              (recur ns entries (assoc lm (strip-ns k) v)))\n            (when-let [new-ns (namespace k)]\n              (recur new-ns entries (assoc lm (strip-ns k) v)))))\n        [ns lm]))))\n\n(defn print-prefix-map [prefix m print-one writer opts]\n  (pr-sequential-writer\n    writer\n    (fn [e w opts]\n      (do (print-one (key e) w opts)\n          (-write w \\space)\n          (print-one (val e) w opts)))\n    (str prefix \"{\") \", \" \"}\"\n    opts (seq m)))\n\n(defn print-map [m print-one writer opts]\n  (let [[ns lift-map] (when (map? m)\n                        (lift-ns m))]\n    (if ns\n      (print-prefix-map (str \"#:\" ns) lift-map print-one writer opts)\n      (print-prefix-map nil m print-one writer opts))))\n\n(extend-protocol IPrintWithWriter\n  LazySeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  TransformerIterator\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  IndexedSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  RSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentQueue\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#queue [\" \" \" \"]\" opts (seq coll)))\n\n  PersistentQueueSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentTreeMapSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  NodeSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ArrayNodeSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  List\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Cons\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  EmptyList\n  (-pr-writer [coll writer opts] (-write writer \"()\"))\n\n  PersistentVector\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  ChunkedCons\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ChunkedSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Subvec\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  BlackNode\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  RedNode\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  MapEntry\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll))\n\n  ObjMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  KeySeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ValSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentArrayMapSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  PersistentArrayMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentHashMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentTreeMap\n  (-pr-writer [coll writer opts]\n    (print-map coll pr-writer writer opts))\n\n  PersistentHashSet\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))\n\n  PersistentTreeSet\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts coll))\n\n  Range\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  IntegerRange\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Cycle\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Repeat\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Iterate\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  ES6IteratorSeq\n  (-pr-writer [coll writer opts] (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll))\n\n  Atom\n  (-pr-writer [a writer opts]\n    (-write writer \"#object[cljs.core.Atom \")\n    (pr-writer {:val (.-state a)} writer opts)\n    (-write writer \"]\"))\n\n  Volatile\n  (-pr-writer [a writer opts]\n    (-write writer \"#object[cljs.core.Volatile \")\n    (pr-writer {:val (.-state a)} writer opts)\n    (-write writer \"]\"))\n\n  Var\n  (-pr-writer [a writer opts]\n    (-write writer \"#'\")\n    (pr-writer (.-sym a) writer opts)))\n\n;; IComparable\n(extend-protocol IComparable\n  Symbol\n  (-compare [x y]\n    (if (symbol? y)\n      (compare-symbols x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  Keyword\n  (-compare [x y]\n    (if (keyword? y)\n      (compare-keywords x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  Subvec\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  PersistentVector\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  MapEntry\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  BlackNode\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y)))))\n\n  RedNode\n  (-compare [x y]\n    (if (vector? y)\n      (compare-indexed x y)\n      (throw (js\/Error. (str \"Cannot compare \" x \" to \" y))))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Reference Types ;;;;;;;;;;;;;;;;\n\n(defn alter-meta!\n  \"Atomically sets the metadata for a namespace\/var\/ref\/agent\/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects\"\n  [iref f & args]\n  (set! (.-meta iref) (apply f (.-meta iref) args)))\n\n(defn reset-meta!\n  \"Atomically resets the metadata for an atom\"\n  [iref m]\n  (set! (.-meta iref) m))\n\n(defn add-watch\n  \"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old\/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1\"\n  [iref key f]\n  (-add-watch iref key f)\n  iref)\n\n(defn remove-watch\n  \"Removes a watch (set by add-watch) from a reference\"\n  [iref key]\n  (-remove-watch iref key)\n  iref)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; gensym ;;;;;;;;;;;;;;;;\n;; Internal - do not use!\n(def\n  ^{:jsdoc [\"@type {*}\"]}\n  gensym_counter nil)\n\n(defn gensym\n  \"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.\"\n  ([] (gensym \"G__\"))\n  ([prefix-string]\n     (when (nil? gensym_counter)\n       (set! gensym_counter (atom 0)))\n     (symbol (str prefix-string (swap! gensym_counter inc)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Delay ;;;;;;;;;;;;;;;;;;;;\n\n(deftype Delay [^:mutable f ^:mutable value]\n  IDeref\n  (-deref [_]\n    (when f\n      (set! value (f))\n      (set! f nil))\n    value)\n\n  IPending\n  (-realized? [x]\n    (not f))\n\n  IPrintWithWriter\n  (-pr-writer [x writer opts]\n    (-write writer \"#object[cljs.core.Delay \")\n    (pr-writer {:status (if (nil? f) :ready :pending), :val value} writer opts)\n    (-write writer \"]\")))\n\n(defn delay?\n  \"returns true if x is a Delay created with delay\"\n  [x] (instance? Delay x))\n\n(defn force\n  \"If x is a Delay, returns the (possibly cached) value of its expression, else returns x\"\n  [x]\n  (if (delay? x)\n    (deref x)\n    x))\n\n(defn ^boolean realized?\n  \"Returns true if a value has been produced for a delay or lazy sequence.\"\n  [x]\n  (-realized? x))\n\n(defn- preserving-reduced\n  [rf]\n  #(let [ret (rf %1 %2)]\n     (if (reduced? ret)\n       (reduced ret)\n       ret)))\n\n(defn cat\n  \"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.\"\n  {:added \"1.7\"}\n  [rf]\n  (let [rf1 (preserving-reduced rf)]\n    (fn\n      ([] (rf))\n      ([result] (rf result))\n      ([result input]\n         (reduce rf1 result input)))))\n\n(defn halt-when\n  \"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.\"\n  {:added \"1.9\"}\n  ([pred] (halt-when pred nil))\n  ([pred retf]\n     (fn [rf]\n       (fn\n         ([] (rf))\n         ([result]\n            (if (and (map? result) (contains? result ::halt))\n              (::halt result)\n              (rf result)))\n         ([result input]\n            (if (pred input)\n              (reduced {::halt (if retf (retf (rf result) input) input)})\n              (rf result input)))))))\n\n(defn dedupe\n  \"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.\"\n  ([]\n   (fn [rf]\n     (let [pa (volatile! ::none)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result input]\n            (let [prior @pa]\n              (vreset! pa input)\n              (if (= prior input)\n                result\n                (rf result input))))))))\n  ([coll] (sequence (dedupe) coll)))\n\n(declare rand)\n\n(defn random-sample\n  \"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.\"\n  ([prob]\n     (filter (fn [_] (< (rand) prob))))\n  ([prob coll]\n     (filter (fn [_] (< (rand) prob)) coll)))\n\n(deftype Eduction [xform coll]\n  Object\n  (indexOf [coll x]\n    (-indexOf coll x 0))\n  (indexOf [coll x start]\n    (-indexOf coll x start))\n  (lastIndexOf [coll x]\n    (-lastIndexOf coll x (count coll)))\n  (lastIndexOf [coll x start]\n    (-lastIndexOf coll x start))\n\n  ISequential\n\n  IIterable\n  (-iterator [_]\n    (.create TransformerIterator xform (iter coll)))\n\n  ISeqable\n  (-seq [_] (seq (sequence xform coll)))\n\n  IReduce\n  (-reduce [_ f] (transduce xform (completing f) coll))\n  (-reduce [_ f init] (transduce xform (completing f) init coll))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts coll)))\n\n(es6-iterable Eduction)\n\n(defn eduction\n  \"Returns a reducible\/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce\/iterator is called.\"\n  {:arglists '([xform* coll])}\n  [& xforms]\n  (Eduction. (apply comp (butlast xforms)) (last xforms)))\n\n(defn run!\n  \"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil\"\n  [proc coll]\n  (reduce #(proc %2) nil coll)\n  nil)\n\n(defprotocol IEncodeJS\n  (-clj->js [x] \"Recursively transforms clj values to JavaScript\")\n  (-key->js [x] \"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)\"))\n\n(declare clj->js)\n\n(defn key->js\n  ([k] (key->js k clj->js))\n  ([k primitive-fn]\n   (cond\n     (satisfies? IEncodeJS k) (-clj->js k)\n     (or (string? k)\n         (number? k)\n         (keyword? k)\n         (symbol? k)) (primitive-fn k)\n     :default (pr-str k))))\n\n(defn clj->js\n  \"Recursively transforms ClojureScript values to JavaScript.\n  sets\/vectors\/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`.\"\n  [x & {:keys [keyword-fn]\n        :or   {keyword-fn name}\n        :as options}]\n  (letfn [(keyfn [k] (key->js k thisfn))\n          (thisfn [x] (cond\n                        (nil? x) nil\n                        (satisfies? IEncodeJS x) (-clj->js x)\n                        (keyword? x) (keyword-fn x)\n                        (symbol? x) (str x)\n                        (map? x) (let [m (js-obj)]\n                                   (doseq [[k v] x]\n                                     (gobject\/set m (keyfn k) (thisfn v)))\n                                   m)\n                        (coll? x) (let [arr (array)]\n                                    (doseq [x (map thisfn x)]\n                                      (.push arr x))\n                                    arr)\n                        :else x))]\n    (thisfn x)))\n\n\n(defprotocol IEncodeClojure\n  (-js->clj [x options] \"Transforms JavaScript values to Clojure\"))\n\n(defn js->clj\n  \"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.\"\n  ([x] (js->clj x :keywordize-keys false))\n  ([x & opts]\n    (let [{:keys [keywordize-keys]} opts\n          keyfn (if keywordize-keys keyword str)\n          f (fn thisfn [x]\n              (cond\n                (satisfies? IEncodeClojure x)\n                (-js->clj x (apply array-map opts))\n\n                (seq? x)\n                (doall (map thisfn x))\n\n                (map-entry? x)\n                (MapEntry. (thisfn (key x)) (thisfn (val x)) nil)\n\n                (coll? x)\n                (into (empty x) (map thisfn) x)\n\n                (array? x)\n                (persistent!\n                 (reduce #(conj! %1 (thisfn %2))\n                         (transient []) x))\n\n                (identical? (type x) js\/Object)\n                (persistent!\n                 (reduce (fn [r k] (assoc! r (keyfn k) (thisfn (gobject\/get x k))))\n                         (transient {}) (js-keys x)))\n                :else x))]\n      (f x))))\n\n(defn memoize\n  \"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.\"\n  [f]\n  (let [mem (atom {})]\n    (fn [& args]\n      (let [v (get @mem args lookup-sentinel)]\n        (if (identical? v lookup-sentinel)\n          (let [ret (apply f args)]\n            (swap! mem assoc args ret)\n            ret)\n          v)))))\n\n(defn trampoline\n  \"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.\"\n  ([f]\n     (let [ret (f)]\n       (if (fn? ret)\n         (recur ret)\n         ret)))\n  ([f & args]\n     (trampoline #(apply f args))))\n\n(defn rand\n  \"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).\"\n  ([] (rand 1))\n  ([n] (* (Math\/random) n)))\n\n(defn rand-int\n  \"Returns a random integer between 0 (inclusive) and n (exclusive).\"\n  [n] (Math\/floor (* (Math\/random) n)))\n\n(defn rand-nth\n  \"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.\"\n  [coll]\n  (nth coll (rand-int (count coll))))\n\n(defn group-by\n  \"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.\"\n  [f coll]\n  (persistent!\n    (reduce\n      (fn [ret x]\n        (let [k (f x)]\n          (assoc! ret k (conj (get ret k []) x))))\n      (transient {}) coll)))\n\n(defn make-hierarchy\n  \"Creates a hierarchy object for use with derive, isa? etc.\"\n  [] {:parents {} :descendants {} :ancestors {}})\n\n(def\n  ^{:private true\n    :jsdoc [\"@type {*}\"]}\n  -global-hierarchy nil)\n\n(defn- get-global-hierarchy []\n  (when (nil? -global-hierarchy)\n    (set! -global-hierarchy (atom (make-hierarchy))))\n  -global-hierarchy)\n\n(defn- swap-global-hierarchy! [f & args]\n  (apply swap! (get-global-hierarchy) f args))\n\n(defn ^boolean isa?\n  \"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy\"\n  ([child parent] (isa? @(get-global-hierarchy) child parent))\n  ([h child parent]\n     (or (= child parent)\n         ;; (and (class? parent) (class? child)\n         ;;    (. ^Class parent isAssignableFrom child))\n         (contains? ((:ancestors h) child) parent)\n         ;;(and (class? child) (some #(contains? ((:ancestors h) %) parent) (supers child)))\n         (and (vector? parent) (vector? child)\n              (== (count parent) (count child))\n              (loop [ret true i 0]\n                (if (or (not ret) (== i (count parent)))\n                  ret\n                  (recur (isa? h (child i) (parent i)) (inc i))))))))\n\n(defn parents\n  \"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  ([tag] (parents @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:parents h) tag))))\n\n(defn ancestors\n  \"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy\"\n  ([tag] (ancestors @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:ancestors h) tag))))\n\n(defn descendants\n  \"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.\"\n  ([tag] (descendants @(get-global-hierarchy) tag))\n  ([h tag] (not-empty (get (:descendants h) tag))))\n\n(defn derive\n  \"Establishes a parent\/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.\"\n  ([tag parent]\n   (assert (namespace parent))\n   ;; (assert (or (class? tag) (and (instance? cljs.core.Named tag) (namespace tag))))\n   (swap-global-hierarchy! derive tag parent) nil)\n  ([h tag parent]\n   (assert (not= tag parent))\n   ;; (assert (or (class? tag) (instance? clojure.lang.Named tag)))\n   ;; (assert (instance? clojure.lang.INamed tag))\n   ;; (assert (instance? clojure.lang.INamed parent))\n   (let [tp (:parents h)\n         td (:descendants h)\n         ta (:ancestors h)\n         tf (fn [m source sources target targets]\n              (reduce (fn [ret k]\n                        (assoc ret k\n                               (reduce conj (get targets k #{}) (cons target (targets target)))))\n                      m (cons source (sources source))))]\n     (or\n      (when-not (contains? (tp tag) parent)\n        (when (contains? (ta tag) parent)\n          (throw (js\/Error. (str tag \"already has\" parent \"as ancestor\"))))\n        (when (contains? (ta parent) tag)\n          (throw (js\/Error. (str \"Cyclic derivation:\" parent \"has\" tag \"as ancestor\"))))\n        {:parents (assoc (:parents h) tag (conj (get tp tag #{}) parent))\n         :ancestors (tf (:ancestors h) tag td parent ta)\n         :descendants (tf (:descendants h) parent ta tag td)})\n      h))))\n\n(defn underive\n  \"Removes a parent\/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.\"\n  ([tag parent]\n    (swap-global-hierarchy! underive tag parent)\n    nil)\n  ([h tag parent]\n    (let [parentMap (:parents h)\n          childsParents (if (parentMap tag)\n                          (disj (parentMap tag) parent) #{})\n          newParents (if (not-empty childsParents)\n                      (assoc parentMap tag childsParents)\n                      (dissoc parentMap tag))\n          deriv-seq (flatten (map #(cons (first %) (interpose (first %) (second %)))\n                                  (seq newParents)))]\n      (if (contains? (parentMap tag) parent)\n        (reduce #(apply derive %1 %2) (make-hierarchy)\n                (partition 2 deriv-seq))\n        h))))\n\n(defn- reset-cache\n  [method-cache method-table cached-hierarchy hierarchy]\n  (swap! method-cache (fn [_] (deref method-table)))\n  (swap! cached-hierarchy (fn [_] (deref hierarchy))))\n\n(defn- prefers*\n  [x y prefer-table]\n  (let [xprefs (@prefer-table x)]\n    (or\n     (when (and xprefs (xprefs y))\n       true)\n     (loop [ps (parents y)]\n       (when (pos? (count ps))\n         (when (prefers* x (first ps) prefer-table)\n           true)\n         (recur (rest ps))))\n     (loop [ps (parents x)]\n       (when (pos? (count ps))\n         (when (prefers* (first ps) y prefer-table)\n           true)\n         (recur (rest ps))))\n     false)))\n\n(defn- dominates\n  [x y prefer-table hierarchy]\n  (or (prefers* x y prefer-table) (isa? hierarchy x y)))\n\n(defn- find-and-cache-best-method\n  [name dispatch-val hierarchy method-table prefer-table method-cache cached-hierarchy default-dispatch-val]\n  (let [best-entry (reduce (fn [be [k _ :as e]]\n                             (if (isa? @hierarchy dispatch-val k)\n                               (let [be2 (if (or (nil? be) (dominates k (first be) prefer-table @hierarchy))\n                                           e\n                                           be)]\n                                 (when-not (dominates (first be2) k prefer-table @hierarchy)\n                                   (throw (js\/Error.\n                                            (str \"Multiple methods in multimethod '\" name\n                                              \"' match dispatch value: \" dispatch-val \" -> \" k\n                                              \" and \" (first be2) \", and neither is preferred\"))))\n                                 be2)\n                               be))\n                     nil @method-table)\n        best-entry (if-let [entry (and (nil? best-entry) (@method-table default-dispatch-val))]\n                     [default-dispatch-val entry]\n                     best-entry)]\n    (when best-entry\n      (if (= @cached-hierarchy @hierarchy)\n        (do\n          (swap! method-cache assoc dispatch-val (second best-entry))\n          (second best-entry))\n        (do\n          (reset-cache method-cache method-table cached-hierarchy hierarchy)\n          (find-and-cache-best-method name dispatch-val hierarchy method-table prefer-table\n            method-cache cached-hierarchy default-dispatch-val))))))\n\n(defprotocol IMultiFn\n  (-reset [mf])\n  (-add-method [mf dispatch-val method])\n  (-remove-method [mf dispatch-val])\n  (-prefer-method [mf dispatch-val dispatch-val-y])\n  (-get-method [mf dispatch-val])\n  (-methods [mf])\n  (-prefers [mf])\n  (-default-dispatch-val [mf])\n  (-dispatch-fn [mf]))\n\n(defn- throw-no-method-error [name dispatch-val]\n  (throw (js\/Error. (str \"No method in multimethod '\" name \"' for dispatch value: \" dispatch-val))))\n\n(deftype MultiFn [name dispatch-fn default-dispatch-val hierarchy\n                  method-table prefer-table method-cache cached-hierarchy]\n  IFn\n  (-invoke [mf]\n    (let [dispatch-val (dispatch-fn)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn)))\n  (-invoke [mf a]\n    (let [dispatch-val (dispatch-fn a)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a)))\n  (-invoke [mf a b]\n    (let [dispatch-val (dispatch-fn a b)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b)))\n  (-invoke [mf a b c]\n    (let [dispatch-val (dispatch-fn a b c)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c)))\n  (-invoke [mf a b c d]\n    (let [dispatch-val (dispatch-fn a b c d)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d)))\n  (-invoke [mf a b c d e]\n    (let [dispatch-val (dispatch-fn a b c d e)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e)))\n  (-invoke [mf a b c d e f]\n    (let [dispatch-val (dispatch-fn a b c d e f)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f)))\n  (-invoke [mf a b c d e f g]\n    (let [dispatch-val (dispatch-fn a b c d e f g)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g)))\n  (-invoke [mf a b c d e f g h]\n    (let [dispatch-val (dispatch-fn a b c d e f g h)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h)))\n  (-invoke [mf a b c d e f g h i]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i)))\n  (-invoke [mf a b c d e f g h i j]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j)))\n  (-invoke [mf a b c d e f g h i j k]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k)))\n  (-invoke [mf a b c d e f g h i j k l]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l)))\n  (-invoke [mf a b c d e f g h i j k l m]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m)))\n  (-invoke [mf a b c d e f g h i j k l m n]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n)))\n  (-invoke [mf a b c d e f g h i j k l m n o]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o)))\n  (-invoke [mf a b c d e f g h i j k l m n o p]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r s)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r s)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s t]\n    (let [dispatch-val (dispatch-fn a b c d e f g h i j k l m n o p q r s t)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (target-fn a b c d e f g h i j k l m n o p q r s t)))\n  (-invoke [mf a b c d e f g h i j k l m n o p q r s t rest]\n    (let [dispatch-val (apply dispatch-fn a b c d e f g h i j k l m n o p q r s t rest)\n          target-fn (-get-method mf dispatch-val)]\n      (when-not target-fn\n        (throw-no-method-error name dispatch-val))\n      (apply target-fn a b c d e f g h i j k l m n o p q r s t rest)))\n\n  IMultiFn\n  (-reset [mf]\n    (swap! method-table (fn [mf] {}))\n    (swap! method-cache (fn [mf] {}))\n    (swap! prefer-table (fn [mf] {}))\n    (swap! cached-hierarchy (fn [mf] nil))\n    mf)\n\n  (-add-method [mf dispatch-val method]\n    (swap! method-table assoc dispatch-val method)\n    (reset-cache method-cache method-table cached-hierarchy hierarchy)\n    mf)\n\n  (-remove-method [mf dispatch-val]\n    (swap! method-table dissoc dispatch-val)\n    (reset-cache method-cache method-table cached-hierarchy hierarchy)\n    mf)\n\n  (-get-method [mf dispatch-val]\n    (when-not (= @cached-hierarchy @hierarchy)\n      (reset-cache method-cache method-table cached-hierarchy hierarchy))\n    (if-let [target-fn (@method-cache dispatch-val)]\n      target-fn\n      (find-and-cache-best-method name dispatch-val hierarchy method-table\n        prefer-table method-cache cached-hierarchy default-dispatch-val)))\n\n  (-prefer-method [mf dispatch-val-x dispatch-val-y]\n    (when (prefers* dispatch-val-x dispatch-val-y prefer-table)\n      (throw (js\/Error. (str \"Preference conflict in multimethod '\" name \"': \" dispatch-val-y\n                   \" is already preferred to \" dispatch-val-x))))\n    (swap! prefer-table\n           (fn [old]\n             (assoc old dispatch-val-x\n                    (conj (get old dispatch-val-x #{})\n                          dispatch-val-y))))\n    (reset-cache method-cache method-table cached-hierarchy hierarchy))\n\n  (-methods [mf] @method-table)\n  (-prefers [mf] @prefer-table)\n  (-default-dispatch-val [mf] default-dispatch-val)\n  (-dispatch-fn [mf] dispatch-fn)\n\n  INamed\n  (-name [this] (-name name))\n  (-namespace [this] (-namespace name))\n\n  IHash\n  (-hash [this] (goog\/getUid this)))\n\n(defn remove-all-methods\n  \"Removes all of the methods of multimethod.\"\n [multifn]\n (-reset multifn))\n\n(defn remove-method\n  \"Removes the method of multimethod associated with dispatch-value.\"\n [multifn dispatch-val]\n (-remove-method multifn dispatch-val))\n\n(defn prefer-method\n  \"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict\"\n  [multifn dispatch-val-x dispatch-val-y]\n  (-prefer-method multifn dispatch-val-x dispatch-val-y))\n\n(defn methods\n  \"Given a multimethod, returns a map of dispatch values -> dispatch fns\"\n  [multifn] (-methods multifn))\n\n(defn get-method\n  \"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default\"\n  [multifn dispatch-val] (-get-method multifn dispatch-val))\n\n(defn prefers\n  \"Given a multimethod, returns a map of preferred value -> set of other values\"\n  [multifn] (-prefers multifn))\n\n(defn default-dispatch-val\n  \"Given a multimethod, return its default-dispatch-val.\"\n  [multifn] (-default-dispatch-val multifn))\n\n(defn dispatch-fn\n  \"Given a multimethod, return its dispatch-fn.\"\n  [multifn] (-dispatch-fn multifn))\n\n;; UUID\n(defprotocol IUUID \"A marker protocol for UUIDs\")\n\n(deftype UUID [uuid ^:mutable __hash]\n  IUUID\n\n  Object\n  (toString [_] uuid)\n  (equiv [this other]\n    (-equiv this other))\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? UUID other) (identical? uuid (.-uuid other))))\n\n  IPrintWithWriter\n  (-pr-writer [_ writer _]\n    (-write writer (str \"#uuid \\\"\" uuid \"\\\"\")))\n\n  IHash\n  (-hash [this]\n    (when (nil? __hash)\n      (set! __hash (hash uuid)))\n    __hash)\n\n  IComparable\n  (-compare [this other]\n    (if (instance? UUID other)\n      (garray\/defaultCompare uuid (.-uuid other))\n      (throw (js\/Error. (str \"Cannot compare \" this \" to \" other))))))\n\n(defn uuid [s]\n  (assert (string? s))\n  (UUID. (.toLowerCase s) nil))\n\n(defn random-uuid []\n  (letfn [(hex [] (.toString (rand-int 16) 16))]\n    (let [rhex (.toString (bit-or 0x8 (bit-and 0x3 (rand-int 16))) 16)]\n      (uuid\n        (str (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex) \"-\"\n             (hex) (hex) (hex) (hex) \"-\"\n             \"4\"   (hex) (hex) (hex) \"-\"\n             rhex  (hex) (hex) (hex) \"-\"\n             (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex)\n             (hex) (hex) (hex) (hex))))))\n\n(defn uuid?\n  [x] (implements? IUUID x))\n\n;;; ExceptionInfo\n\n(defn- pr-writer-ex-info [obj writer opts]\n  (-write writer \"#error {:message \")\n  (pr-writer (.-message obj) writer opts)\n  (when (.-data obj)\n    (-write writer \", :data \")\n    (pr-writer (.-data obj) writer opts))\n  (when (.-cause obj)\n    (-write writer \", :cause \")\n    (pr-writer (.-cause obj) writer opts))\n  (-write writer \"}\"))\n\n(defn ^{:jsdoc [\"@constructor\"]}\n  ExceptionInfo [message data cause]\n  (let [e (js\/Error. message)]\n    (this-as this\n      (set! (.-message this) message)\n      (set! (.-data this) data)\n      (set! (.-cause this) cause)\n      (do\n        (set! (.-name this) (.-name e))\n        ;; non-standard\n        (set! (.-description this) (.-description e))\n        (set! (.-number this) (.-number e))\n        (set! (.-fileName this) (.-fileName e))\n        (set! (.-lineNumber this) (.-lineNumber e))\n        (set! (.-columnNumber this) (.-columnNumber e))\n        (set! (.-stack this) (.-stack e)))\n      this)))\n\n(set! (.. ExceptionInfo -prototype -__proto__) js\/Error.prototype)\n\n(extend-type ExceptionInfo\n  IPrintWithWriter\n  (-pr-writer [obj writer opts]\n    (pr-writer-ex-info obj writer opts)))\n\n(set! (.. ExceptionInfo -prototype -toString)\n  (fn []\n    (this-as this (pr-str* this))))\n\n(defn ex-info\n  \"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.\"\n  ([msg data] (ex-info msg data nil))\n  ([msg data cause]\n    (ExceptionInfo. msg data cause)))\n\n(defn ex-data\n  \"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil.\"\n  [ex]\n  (when (instance? ExceptionInfo ex)\n    (.-data ex)))\n\n(defn ex-message\n  \"Returns the message attached to the given Error \/ ExceptionInfo object.\n  For non-Errors returns nil.\"\n  [ex]\n  (when (instance? js\/Error ex)\n    (.-message ex)))\n\n(defn ex-cause\n  \"Returns exception cause (an Error \/ ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil.\"\n  [ex]\n  (when (instance? ExceptionInfo ex)\n    (.-cause ex)))\n\n(defn comparator\n  \"Returns an JavaScript compatible comparator based upon pred.\"\n  [pred]\n  (fn [x y]\n    (cond (pred x y) -1 (pred y x) 1 :else 0)))\n\n(defn ^boolean special-symbol?\n  \"Returns true if x names a special form\"\n  [x]\n  (contains?\n    '#{if def fn* do let* loop* letfn* throw try catch finally\n       recur new set! ns deftype* defrecord* . js* & quote case* var ns*}\n    x))\n\n(defn test\n  \"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception\"\n  [v]\n  (let [f (.-cljs$lang$test v)]\n    (if f\n      (do (f) :ok)\n      :no-test)))\n\n\n(deftype TaggedLiteral [tag form]\n  Object\n  (toString [coll]\n    (pr-str* coll))\n\n  IEquiv\n  (-equiv [this other]\n    (and (instance? TaggedLiteral other)\n         (= tag (.-tag other))\n         (= form (.-form other))))\n\n  IHash\n  (-hash [this]\n    (+ (* 31 (hash tag))\n       (hash form)))\n\n  ILookup\n  (-lookup [this v]\n    (-lookup this v nil))\n  (-lookup [this v not-found]\n    (case v\n      :tag tag\n      :form form\n      not-found))\n\n  IPrintWithWriter\n  (-pr-writer [o writer opts]\n    (-write writer (str \"#\" tag \" \"))\n    (pr-writer form writer opts)))\n\n(defn tagged-literal?\n  \"Return true if the value is the data representation of a tagged literal\"\n  [value]\n  (instance? TaggedLiteral value))\n\n(defn tagged-literal\n  \"Construct a data representation of a tagged literal from a\n  tag symbol and a form.\"\n  [tag form]\n  {:pre [(symbol? tag)]}\n  (TaggedLiteral. tag form))\n\n(def\n  ^{:private true\n    :jsdoc [\"@type {*}\"]}\n  js-reserved-arr\n  #js [\"arguments\" \"abstract\" \"await\" \"boolean\" \"break\" \"byte\" \"case\"\n       \"catch\" \"char\" \"class\" \"const\" \"continue\"\n       \"debugger\" \"default\" \"delete\" \"do\" \"double\"\n       \"else\" \"enum\" \"export\" \"extends\" \"final\"\n       \"finally\" \"float\" \"for\" \"function\" \"goto\" \"if\"\n       \"implements\" \"import\" \"in\" \"instanceof\" \"int\"\n       \"interface\" \"let\" \"long\" \"native\" \"new\"\n       \"package\" \"private\" \"protected\" \"public\"\n       \"return\" \"short\" \"static\" \"super\" \"switch\"\n       \"synchronized\" \"this\" \"throw\" \"throws\"\n       \"transient\" \"try\" \"typeof\" \"var\" \"void\"\n       \"volatile\" \"while\" \"with\" \"yield\" \"methods\"\n       \"null\" \"constructor\"])\n\n(def\n  ^{:jsdoc [\"@type {null|Object}\"]}\n  js-reserved nil)\n\n(defn- js-reserved? [x]\n  (when (nil? js-reserved)\n    (set! js-reserved\n      (reduce #(do (gobject\/set %1 %2 true) %1)\n        #js {} js-reserved-arr)))\n  (.hasOwnProperty js-reserved x))\n\n(defn- demunge-pattern []\n  (when-not DEMUNGE_PATTERN\n    (set! DEMUNGE_PATTERN\n      (let [ks (sort (fn [a b] (- (. b -length) (. a -length)))\n                 (js-keys DEMUNGE_MAP))]\n        (loop [ks ks ret \"\"]\n          (if (seq ks)\n            (recur\n              (next ks)\n              (str\n                (cond-> ret\n                  (not (identical? ret \"\")) (str \"|\"))\n                (first ks)))\n            (str ret \"|\\\\$\"))))))\n  DEMUNGE_PATTERN)\n\n(defn- ^string munge-str [name]\n  (let [sb (StringBuffer.)]\n    (loop [i 0]\n      (if (< i (. name -length))\n        (let [c (.charAt name i)\n              sub (gobject\/get CHAR_MAP c)]\n          (if-not (nil? sub)\n            (.append sb sub)\n            (.append sb c))\n          (recur (inc i)))))\n    (.toString sb)))\n\n(defn munge [name]\n  (let [name' (munge-str (str name))\n        name' (cond\n                (identical? name' \"..\") \"_DOT__DOT_\"\n                (js-reserved? name') (str name' \"$\")\n                :else name')]\n    (if (symbol? name)\n      (symbol name')\n      name')))\n\n(defn- demunge-str [munged-name]\n  (let [r (js\/RegExp. (demunge-pattern) \"g\")\n        munged-name (if (gstring\/endsWith munged-name \"$\")\n                      (.substring munged-name 0 (dec (. munged-name -length)))\n                      munged-name)]\n    (loop [ret \"\" last-match-end 0]\n      (if-let [match (.exec r munged-name)]\n        (let [[x] match]\n          (recur\n            (str ret\n              (.substring munged-name last-match-end\n                (- (. r -lastIndex) (. x -length)))\n              (if (identical? x \"$\") \"\/\" (gobject\/get DEMUNGE_MAP x)))\n            (. r -lastIndex)))\n        (str ret\n          (.substring munged-name last-match-end (.-length munged-name)))))))\n\n(defn demunge [name]\n  ((if (symbol? name) symbol str)\n    (let [name' (str name)]\n      (if (identical? name' \"_DOT__DOT_\")\n        \"..\"\n        (demunge-str name')))))\n\n(defonce ^{:jsdoc [\"@type {*}\"] :private true}\n  tapset nil)\n\n(defn- maybe-init-tapset []\n  (when (nil? tapset)\n    (set! tapset (atom #{}))))\n\n(defn add-tap\n  \"Adds f, a fn of one argument, to the tap set. This function will be called with\n  anything sent via tap>. Remember f in order to remove-tap\"\n  [f]\n  (maybe-init-tapset)\n  (swap! tapset conj f)\n  nil)\n\n(defn remove-tap\n  \"Remove f from the tap set.\"\n  [f]\n  (maybe-init-tapset)\n  (swap! tapset disj f)\n  nil)\n\n(defn ^boolean tap>\n  \"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value.\"\n  [x]\n  (maybe-init-tapset)\n  (*exec-tap-fn*\n    (fn []\n      (doseq [tap @tapset]\n        (try\n          (tap x)\n          (catch js\/Error ex))))))\n\n;; -----------------------------------------------------------------------------\n;; Bootstrap helpers - incompatible with advanced compilation\n\n(defn- ns-lookup\n  \"Bootstrap only.\"\n  [ns-obj k]\n  (fn [] (gobject\/get ns-obj k)))\n\n;; Bootstrap only\n(deftype Namespace [obj name]\n  Object\n  (findInternedVar [this sym]\n    (let [k (munge (str sym))]\n      (when ^boolean (gobject\/containsKey obj k)\n        (let [var-sym (symbol (str name) (str sym))\n              var-meta {:ns this}]\n          (Var. (ns-lookup obj k) var-sym var-meta)))))\n  (getName [_] name)\n  (toString [_]\n    (str name))\n  IEquiv\n  (-equiv [_ other]\n    (if (instance? Namespace other)\n      (= name (.-name other))\n      false))\n  IHash\n  (-hash [_]\n    (hash name)))\n\n(def\n  ^{:doc \"Bootstrap only.\" :jsdoc [\"@type {*}\"]}\n  NS_CACHE nil)\n\n(defn- find-ns-obj*\n  \"Bootstrap only.\"\n  [ctxt xs]\n  (cond\n    (nil? ctxt) nil\n    (nil? xs) ctxt\n    :else (recur (gobject\/get ctxt (first xs)) (next xs))))\n\n(defn find-ns-obj\n  \"Bootstrap only.\"\n  [ns]\n  (let [munged-ns (munge (str ns))\n        segs (.split munged-ns \".\")]\n    (case *target*\n      \"nodejs\"  (if ^boolean js\/COMPILED\n                  ; Under simple optimizations on nodejs, namespaces will be in module\n                  ; rather than global scope and must be accessed by a direct call to eval.\n                  ; The first segment may refer to an undefined variable, so its evaluation\n                  ; may throw ReferenceError.\n                  (find-ns-obj*\n                    (try\n                      (let [ctxt (js\/eval (first segs))]\n                        (when (and ctxt (object? ctxt))\n                          ctxt))\n                      (catch js\/ReferenceError e\n                        nil))\n                    (next segs))\n                  (find-ns-obj* goog\/global segs))\n      (\"default\" \"webworker\") (find-ns-obj* goog\/global segs)\n      (throw (js\/Error. (str \"find-ns-obj not supported for target \" *target*))))))\n\n(defn ns-interns*\n  \"Returns a map of the intern mappings for the namespace.\n  Bootstrap only.\"\n  [sym]\n  (let [ns-obj (find-ns-obj sym)\n        ns     (Namespace. ns-obj sym)]\n    (letfn [(step [ret k]\n              (let [var-sym (symbol (demunge k))]\n                (assoc ret\n                  var-sym (Var. #(gobject\/get ns-obj k)\n                            (symbol (str sym) (str var-sym)) {:ns ns}))))]\n      (reduce step {} (js-keys ns-obj)))))\n\n(defn create-ns\n  \"Create a new namespace named by the symbol. Bootstrap only.\"\n  ([sym]\n   (create-ns sym (find-ns-obj sym)))\n  ([sym ns-obj]\n   (Namespace. ns-obj sym)))\n\n(defn find-ns\n  \"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.\"\n  [ns]\n  (when (nil? NS_CACHE)\n    (set! NS_CACHE (atom {})))\n  (let [the-ns (get @NS_CACHE ns)]\n    (if-not (nil? the-ns)\n      the-ns\n      (let [ns-obj (find-ns-obj ns)]\n        (when-not (nil? ns-obj)\n          (let [new-ns (create-ns ns ns-obj)]\n            (swap! NS_CACHE assoc ns new-ns)\n            new-ns))))))\n\n(defn find-macros-ns\n  \"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only.\"\n  [ns]\n  (when (nil? NS_CACHE)\n    (set! NS_CACHE (atom {})))\n  (let [ns-str (str ns)\n        ns (if (not ^boolean (gstring\/contains ns-str \"$macros\"))\n             (symbol (str ns-str \"$macros\"))\n             ns)\n        the-ns (get @NS_CACHE ns)]\n    (if-not (nil? the-ns)\n      the-ns\n      (let [ns-obj (find-ns-obj ns)]\n       (when-not (nil? ns-obj)\n         (let [new-ns (create-ns ns ns-obj)]\n           (swap! NS_CACHE assoc ns new-ns)\n           new-ns))))))\n\n(defn ns-name\n  \"Returns the name of the namespace, a Namespace object.\n  Bootstrap only.\"\n  [ns-obj]\n  (.-name ns-obj))\n\n(defn uri?\n  \"Returns true x is a goog.Uri instance.\"\n  {:added \"1.9\"}\n  [x]\n  (instance? goog.Uri x))\n\n(defn- maybe-enable-print! []\n  (cond\n    (exists? js\/console)\n    (enable-console-print!)\n\n    (or (identical? *target* \"nashorn\")\n        (identical? *target* \"graaljs\"))\n    (let [system (.type js\/Java \"java.lang.System\")]\n      (set! *print-newline* false)\n      (set-print-fn!\n        (fn []\n          (let [xs (js-arguments)\n                s  (.join (garray\/clone xs) \"\")]\n            (.println (.-out system) s))))\n      (set-print-err-fn!\n        (fn []\n          (let [xs (js-arguments)\n                s  (.join (garray\/clone xs) \"\")]\n            (.println (.-error system) s)))))))\n\n(maybe-enable-print!)\n\n(defonce\n  ^{:doc \"Runtime environments may provide a way to evaluate ClojureScript\n  forms. Whatever function *eval* is bound to will be passed any forms which\n  should be evaluated.\" :dynamic true}\n  *eval*\n  (fn [_]\n    (throw (js\/Error. \"cljs.core\/*eval* not bound\"))))\n\n(defn eval\n  \"Evaluates the form data structure (not text!) and returns the result.\n  Delegates to cljs.core\/*eval*. Intended for use in self-hosted ClojureScript,\n  which sets up an implementation of cljs.core\/*eval* for that environment.\"\n  [form]\n  (*eval* form))\n\n(when ^boolean js\/COMPILED\n  (when (identical? \"nodejs\" *target*)\n    (set! goog\/global js\/global))\n  (cond\n    (identical? \"window\" *global*) (set! goog\/global js\/window)\n    (identical? \"self\" *global*) (set! goog\/global js\/self)\n    (identical? \"global\" *global*) (set! goog\/global js\/global)))\n","(ns frontend.state\n  (:require [cljs-bean.core :as bean]\n            [cljs-time.core :as t]\n            [cljs-time.format :as tf]\n            [cljs.core.async :as async]\n            [clojure.string :as string]\n            [dommy.core :as dom]\n            [electron.ipc :as ipc]\n            [frontend.storage :as storage]\n            [frontend.util :as util]\n            [frontend.util.cursor :as cursor]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [lambdaisland.glogi :as log]\n            [medley.core :as medley]\n            [promesa.core :as p]\n            [rum.core :as rum]\n            [frontend.mobile.util :as mobile]\n            [frontend.mobile.util :as mobile-util]\n            [cljs.cache :as cache]))\n\n(defonce state\n  (let [document-mode? (or (storage\/get :document\/mode?) false)\n        current-graph (let [graph (storage\/get :git\/current-repo)]\n                        (when graph (ipc\/ipc \"setCurrentGraph\" graph))\n                        graph)]\n    (atom\n     {:route-match nil\n      :today nil\n      :system\/events (async\/chan 100)\n      :db\/batch-txs (async\/chan 100)\n      :file\/writes (async\/chan 100)\n      :notification\/show? false\n      :notification\/content nil\n      :repo\/cloning? false\n      :repo\/loading-files? nil\n      :repo\/importing-to-db? nil\n      :repo\/sync-status {}\n      :repo\/changed-files nil\n      :nfs\/user-granted? {}\n      :nfs\/refreshing? nil\n      :instrument\/disabled? (storage\/get \"instrument-disabled\")\n      ;; TODO: how to detect the network reliably?\n      :network\/online? true\n      :indexeddb\/support? true\n      :me nil\n      :git\/current-repo current-graph\n      :git\/status {}\n      :format\/loading {}\n      :draw? false\n      :db\/restoring? nil\n\n      :journals-length 2\n\n      :search\/q \"\"\n      :search\/mode :global\n      :search\/result nil\n      :search\/graph-filters []\n\n      ;; modals\n      :modal\/show? false\n\n      ;; right sidebar\n      :ui\/fullscreen? false\n      :ui\/settings-open? false\n      :ui\/sidebar-open? false\n      :ui\/left-sidebar-open? (boolean (storage\/get \"ls-left-sidebar-open?\"))\n      :ui\/theme (or (storage\/get :ui\/theme) \"dark\")\n      :ui\/system-theme? ((fnil identity (or util\/mac? util\/win32? false)) (storage\/get :ui\/system-theme?))\n      :ui\/wide-mode? false\n      ;; :show-all, :hide-block-body, :hide-block-children\n      :ui\/cycle-collapse :show-all\n      :ui\/sidebar-collapsed-blocks {}\n      :ui\/root-component nil\n      :ui\/file-component nil\n      :ui\/custom-query-components {}\n      :ui\/show-recent? false\n      :ui\/command-palette-open? false\n      :ui\/developer-mode? (or (= (storage\/get \"developer-mode\") \"true\")\n                              false)\n      ;; remember scroll positions of visited paths\n      :ui\/paths-scroll-positions {}\n      :ui\/shortcut-tooltip? (if (false? (storage\/get :ui\/shortcut-tooltip?))\n                              false\n                              true)\n      :ui\/visual-viewport-pending? false\n      :ui\/visual-viewport-state nil\n\n      :document\/mode? document-mode?\n\n      :github\/contents {}\n      :config {}\n      :block\/component-editing-mode? false\n      :editor\/draw-mode? false\n      :editor\/show-page-search? false\n      :editor\/show-page-search-hashtag? false\n      :editor\/show-date-picker? false\n      ;; With label or other data\n      :editor\/show-input nil\n      :editor\/show-zotero false\n      :editor\/last-saved-cursor nil\n      :editor\/editing? nil\n      :editor\/last-edit-block-input-id nil\n      :editor\/last-edit-block-id nil\n      :editor\/in-composition? false\n      :editor\/content {}\n      :editor\/block nil\n      :editor\/block-dom-id nil\n      :editor\/set-timestamp-block nil\n      :editor\/last-input-time nil\n      :editor\/document-mode? document-mode?\n      :editor\/args nil\n      :editor\/on-paste? false\n      :editor\/last-key-code nil\n\n      :db\/last-transact-time {}\n      :db\/last-persist-transact-ids {}\n      ;; whether database is persisted\n      :db\/persisted? {}\n      :db\/latest-txs (or (storage\/get-transit :db\/latest-txs) {})\n      :cursor-range nil\n\n      :selection\/mode false\n      :selection\/blocks []\n      :selection\/start-block nil\n      ;; either :up or :down, defaults to down\n      ;; used to determine selection direction when two or more blocks are selected\n      :selection\/direction :down\n      :custom-context-menu\/show? false\n      :custom-context-menu\/links nil\n\n      ;; pages or blocks in the right sidebar\n      ;; It is a list of `[repo db-id block-type block-data]` 4-tuple\n      :sidebar\/blocks '()\n\n      :preferred-language (storage\/get :preferred-language)\n\n      ;; electron\n      :electron\/auto-updater-downloaded false\n      :electron\/updater-pending? false\n      :electron\/updater {}\n      :electron\/user-cfgs nil\n\n      ;; plugin\n      :plugin\/indicator-text        nil\n      :plugin\/installed-plugins     {}\n      :plugin\/installed-themes      []\n      :plugin\/installed-commands    {}\n      :plugin\/installed-ui-items    {}\n      :plugin\/simple-commands       {}\n      :plugin\/selected-theme        nil\n      :plugin\/selected-unpacked-pkg nil\n      :plugin\/marketplace-pkgs      nil\n      :plugin\/marketplace-stats     nil\n      :plugin\/installing            nil\n      :plugin\/active-readme         nil\n\n      ;; pdf\n      :pdf\/current                  nil\n      :pdf\/ref-highlight            nil\n\n      ;; all notification contents as k-v pairs\n      :notification\/contents {}\n      :graph\/syncing? false\n\n      ;; copied blocks\n      :copy\/blocks {:copy\/content nil :copy\/block-tree nil}\n\n      :copy\/export-block-text-indent-style  (or (storage\/get :copy\/export-block-text-indent-style)\n                                                \"dashes\")\n      :copy\/export-block-text-remove-options (or (storage\/get :copy\/export-block-text-remove-options)\n                                                 #{})\n      :date-picker\/date nil\n\n      :youtube\/players {}\n\n      ;; command palette\n      :command-palette\/commands []\n\n      :view\/components {}\n\n      :debug\/write-acks {}\n\n      :encryption\/graph-parsing? false\n\n      :favorites\/dragging nil\n\n      :srs\/mode? false\n\n      :srs\/cards-due-count nil})))\n\n;; block uuid -> {content(String) -> ast}\n(def blocks-ast-cache (atom (cache\/lru-cache-factory {} :threshold 5000)))\n(defn add-block-ast-cache!\n  [block-uuid content ast]\n  (when (and block-uuid content ast)\n    (let [k block-uuid\n          add-cache! (fn []\n                       (reset! blocks-ast-cache (cache\/evict @blocks-ast-cache block-uuid))\n                       (reset! blocks-ast-cache (cache\/miss @blocks-ast-cache k {content ast})))]\n      (if (cache\/has? @blocks-ast-cache k)\n        (let [m (cache\/lookup @blocks-ast-cache k)]\n          (if (and (map? m) (get m content))\n            (reset! blocks-ast-cache (cache\/hit @blocks-ast-cache k))\n            (add-cache!)))\n        (add-cache!)))))\n\n(defn get-block-ast\n  [block-uuid content]\n  (when (and block-uuid content)\n    (let [k block-uuid]\n      (when (cache\/has? @blocks-ast-cache k)\n        (let [m (cache\/lookup @blocks-ast-cache k)]\n          (when-let [result (and (map? m) (get m content))]\n            (reset! blocks-ast-cache (cache\/hit @blocks-ast-cache k))\n            result))))))\n\n(defn sub\n  [ks]\n  (if (coll? ks)\n    (util\/react (rum\/cursor-in state ks))\n    (util\/react (rum\/cursor state ks))))\n\n(defn sub-current-route\n  []\n  (get-in (sub :route-match) [:data :name]))\n\n(defn get-route-match\n  []\n  (:route-match @state))\n\n(defn get-current-route\n  []\n  (get-in (get-route-match) [:data :name]))\n\n(defn home?\n  []\n  (= :home (get-current-route)))\n\n(defn get-current-page\n  []\n  (when (= :page (get-current-route))\n    (get-in (get-route-match)\n            [:path-params :name])))\n\n(defn route-has-p?\n  []\n  (get-in (get-route-match) [:query-params :p]))\n\n(defn set-state!\n  [path value]\n  (if (vector? path)\n    (swap! state assoc-in path value)\n    (swap! state assoc path value)))\n\n(defn update-state!\n  [path f]\n  (if (vector? path)\n    (swap! state update-in path f)\n    (swap! state update path f)))\n\n(defn get-current-repo\n  []\n  (or (:git\/current-repo @state)\n      (when-not (mobile\/is-native-platform?)\n        \"local\")))\n\n(defn get-config\n  ([]\n   (get-config (get-current-repo)))\n  ([repo-url]\n   (get-in @state [:config repo-url])))\n\n(def default-arweave-gateway \"https:\/\/arweave.net\")\n\n(defn get-arweave-gateway\n  []\n  (:arweave\/gateway (get-config) default-arweave-gateway))\n\n(defonce built-in-macros\n  {\"img\" \"[:img.$4 {:src \\\"$1\\\" :style {:width $2 :height $3}}]\"})\n\n(defn get-macros\n  []\n  (merge\n   built-in-macros\n   (:macros (get-config))))\n\n(defn sub-config\n  []\n  (sub :config))\n\n(defn get-custom-css-link\n  []\n  (:custom-css-url (get-config)))\n\n(defn get-custom-js-link\n  []\n  (:custom-js-url (get-config)))\n\n(defn get-default-journal-template\n  []\n  (when-let [template (get-in (get-config) [:default-templates :journals])]\n    (when-not (string\/blank? template)\n      (string\/trim template))))\n\n(defn all-pages-public?\n  []\n  (let [value (:publishing\/all-pages-public? (get-config))\n        value (if (some? value) value (:all-pages-public? (get-config)))]\n    (true? value)))\n\n(defn enable-grammarly?\n  []\n  (true? (:feature\/enable-grammarly?\n          (get (sub-config) (get-current-repo)))))\n\n;; (defn store-block-id-in-file?\n;;   []\n;;   (true? (:block\/store-id-in-file? (get-config))))\n\n(defn scheduled-deadlines-disabled?\n  []\n  (true? (:feature\/disable-scheduled-and-deadline-query?\n          (get (sub-config) (get-current-repo)))))\n\n(defn enable-timetracking?\n  []\n  (not (false? (:feature\/enable-timetracking?\n                (get (sub-config) (get-current-repo))))))\n\n(defn enable-journals?\n  [repo]\n  (not (false? (:feature\/enable-journals?\n                (get (sub-config) repo)))))\n\n(defn export-heading-to-list?\n  []\n  (not (false? (:export\/heading-to-list?\n                (get (sub-config) (get-current-repo))))))\n\n(defn enable-encryption?\n  [repo]\n  (:feature\/enable-encryption?\n   (get (sub-config) repo)))\n\n(defn enable-git-auto-push?\n  [repo]\n  (not (false? (:git-auto-push\n                (get (sub-config) repo)))))\n\n(defn enable-block-timestamps?\n  []\n  (true? (:feature\/enable-block-timestamps?\n          (get (sub-config) (get-current-repo)))))\n\n(defn sub-graph-config\n  []\n  (get (sub-config) (get-current-repo)))\n\n(defn sub-graph-config-settings\n  []\n  (:graph\/settings (sub-graph-config)))\n\n;; Enable by default\n(defn show-brackets?\n  []\n  (not (false? (:ui\/show-brackets?\n                (get (sub-config) (get-current-repo))))))\n\n(defn get-default-home\n  []\n  (:default-home (get-config)))\n\n(defn sub-default-home-page\n  []\n  (get-in (sub-config) [(get-current-repo) :default-home :page] \"\"))\n\n(defn custom-home-page?\n  []\n  (some? (:page (get-default-home))))\n\n(defn get-preferred-format\n  ([]\n   (get-preferred-format (get-current-repo)))\n  ([repo-url]\n   (keyword\n    (or\n     (when-let [fmt (:preferred-format (get-config repo-url))]\n       (string\/lower-case (name fmt)))\n\n     (get-in @state [:me :preferred_format] \"markdown\")))))\n\n;; TODO: consider adding a pane in Settings to set this through the GUI (rather\n;; than having to go through the config.edn file)\n(defn get-editor-command-trigger\n  ([] (get-editor-command-trigger (get-current-repo)))\n  ([repo-url]\n   (or\n    (:editor\/command-trigger (get-config repo-url)) ;; Get from user config\n    \"\/\"))) ;; Set the default\n\n(defn markdown?\n  []\n  (= (keyword (get-preferred-format))\n     :markdown))\n\n(defn get-pages-directory\n  []\n  (or\n   (when-let [repo (get-current-repo)]\n     (:pages-directory (get-config repo)))\n   \"pages\"))\n\n(defn get-journals-directory\n  []\n  (or\n   (when-let [repo (get-current-repo)]\n     (:journals-directory (get-config repo)))\n   \"journals\"))\n\n(defn org-mode-file-link?\n  [repo]\n  (:org-mode\/insert-file-link? (get-config repo)))\n\n(defn get-journal-file-name-format\n  []\n  (when-let [repo (get-current-repo)]\n    (:journal\/file-name-format (get-config repo))))\n\n(defn get-preferred-workflow\n  []\n  (keyword\n   (or\n    (when-let [workflow (:preferred-workflow (get-config))]\n      (let [workflow (name workflow)]\n        (if (util\/safe-re-find #\"now|NOW\" workflow)\n          :now\n          :todo)))\n    (get-in @state [:me :preferred_workflow] :now))))\n\n(defn get-preferred-todo\n  []\n  (if (= (get-preferred-workflow) :now)\n    \"LATER\"\n    \"TODO\"))\n\n(defn hide-file?\n  []\n  (:hide-file-in-page? (get-config)))\n\n(defn page-name-order\n  \"Decide whether to use file name or :title as page name. If it returns \\\"file\\\", use the file\n  name unless it is missing.\"\n  []\n  (:page-name-order (get-config)))\n\n(defn get-repos\n  []\n  (get-in @state [:me :repos]))\n\n(defn set-repos!\n  [repos]\n  (set-state! [:me :repos] repos))\n\n(defn add-repo!\n  [repo]\n  (when (not (string\/blank? repo))\n    (update-state! [:me :repos]\n                   (fn [repos]\n                     (->> (conj repos repo)\n                          (distinct))))))\n\n(defn set-current-repo!\n  [repo]\n  (swap! state assoc :git\/current-repo repo)\n  (if repo\n    (storage\/set :git\/current-repo repo)\n    (storage\/remove :git\/current-repo))\n  (ipc\/ipc \"setCurrentGraph\" repo))\n\n(defn set-preferred-format!\n  [format]\n  (swap! state assoc-in [:me :preferred_format] (name format)))\n\n(defn set-preferred-workflow!\n  [workflow]\n  (swap! state assoc-in [:me :preferred_workflow] (name workflow)))\n\n(defn set-preferred-language!\n  [language]\n  (set-state! :preferred-language (name language))\n  (storage\/set :preferred-language (name language)))\n\n(defn delete-repo!\n  [repo]\n  (swap! state update-in [:me :repos]\n         (fn [repos]\n           (->> (remove #(= (:url repo)\n                            (:url %))\n                        repos)\n                (util\/distinct-by :url))))\n  (when (= (get-current-repo) (:url repo))\n    (set-current-repo! (:url (first (get-repos))))))\n\n(defn next-collapse-mode\n  []\n  (case (:ui\/cycle-collapse @state)\n    :show-all\n    :hide-block-body\n\n    :hide-block-body\n    :hide-block-children\n\n    :hide-block-children\n    :show-all))\n\n(defn cycle-collapse!\n  []\n  (set-state! :ui\/cycle-collapse (next-collapse-mode)))\n\n(defn set-timestamp-block!\n  [value]\n  (set-state! :editor\/set-timestamp-block value))\n\n(defn get-timestamp-block\n  []\n  (:editor\/set-timestamp-block @state))\n\n(defn set-edit-content!\n  ([input-id value] (set-edit-content! input-id value true))\n  ([input-id value set-input-value?]\n   (when input-id\n     (when set-input-value?\n       (when-let [input (gdom\/getElement input-id)]\n         (util\/set-change-value input value)))\n     (update-state! :editor\/content (fn [m]\n                                      (assoc m input-id value)))\n     ;; followers\n     ;; (when-let [s (util\/extract-uuid input-id)]\n     ;;   (let [input (gdom\/getElement input-id)\n     ;;         leader-parent (util\/rec-get-block-node input)\n     ;;         followers (->> (array-seq (js\/document.getElementsByClassName s))\n     ;;                        (remove #(= leader-parent %)))]\n     ;;     (prn \"followers: \" (count followers))\n     ;;     ))\n     )))\n\n(defn get-edit-input-id\n  []\n  (ffirst (:editor\/editing? @state)))\n\n(defn get-input\n  []\n  (when-let [id (get-edit-input-id)]\n    (gdom\/getElement id)))\n\n(defn get-last-edit-input-id\n  []\n  (:editor\/last-edit-block-input-id @state))\n\n(defn editing?\n  []\n  (let [input (get-input)]\n    (and input (= input (.-activeElement js\/document)))))\n\n(defn get-edit-content\n  []\n  (get (:editor\/content @state) (get-edit-input-id)))\n\n(defn sub-edit-content\n  []\n  (sub [:editor\/content (get-edit-input-id)]))\n\n(defn append-current-edit-content!\n  [append-text]\n  (when-not (string\/blank? append-text)\n    (when-let [input-id (get-edit-input-id)]\n      (when-let [input (gdom\/getElement input-id)]\n        (let [value (gobj\/get input \"value\")\n              new-value (str value append-text)\n              new-value (if (or (= (last value) \" \")\n                                (= (last value) \"\\n\"))\n                          new-value\n                          (str \"\\n\" new-value))]\n          (js\/document.execCommand \"insertText\" false append-text)\n          (update-state! :editor\/content (fn [m]\n                                           (assoc m input-id new-value))))))))\n\n(defn get-cursor-range\n  []\n  (:cursor-range @state))\n\n(defn set-cursor-range!\n  [range]\n  (set-state! :cursor-range range))\n\n(defn set-cloning!\n  [value]\n  (set-state! :repo\/cloning? value))\n\n(defn set-q!\n  [value]\n  (set-state! :search\/q value))\n\n(defn set-search-mode!\n  [value]\n  (set-state! :search\/mode value))\n\n(defn set-editor-show-page-search!\n  [value]\n  (set-state! :editor\/show-page-search? value))\n\n(defn get-editor-show-page-search?\n  []\n  (get @state :editor\/show-page-search?))\n\n(defn set-editor-show-page-search-hashtag!\n  [value]\n  (set-state! :editor\/show-page-search? value)\n  (set-state! :editor\/show-page-search-hashtag? value))\n(defn get-editor-show-page-search-hashtag?\n  []\n  (get @state :editor\/show-page-search-hashtag?))\n(defn set-editor-show-block-search!\n  [value]\n  (set-state! :editor\/show-block-search? value))\n(defn get-editor-show-block-search?\n  []\n  (get @state :editor\/show-block-search?))\n(defn set-editor-show-template-search!\n  [value]\n  (set-state! :editor\/show-template-search? value))\n(defn get-editor-show-template-search?\n  []\n  (get @state :editor\/show-template-search?))\n(defn set-editor-show-date-picker!\n  [value]\n  (set-state! :editor\/show-date-picker? value))\n(defn get-editor-show-date-picker?\n  []\n  (get @state :editor\/show-date-picker?))\n(defn set-editor-show-input!\n  [value]\n  (set-state! :editor\/show-input value))\n(defn get-editor-show-input\n  []\n  (get @state :editor\/show-input))\n\n\n(defn set-editor-show-zotero!\n  [value]\n  (set-state! :editor\/show-zotero value))\n\n(defn get-editor-show-zotero\n  []\n  (get @state :editor\/show-zotero))\n\n\n(defn set-edit-input-id!\n  [input-id]\n  (swap! state update :editor\/editing?\n         (fn [m]\n           (and input-id {input-id true}))))\n\n(defn get-edit-pos\n  []\n  (when-let [input (get-input)]\n    (.-selectionStart input)))\n\n(defn set-selection-start-block!\n  [start-block]\n  (swap! state assoc :selection\/start-block start-block))\n\n(defn get-selection-start-block\n  []\n  (get @state :selection\/start-block))\n\n(defn set-selection-blocks!\n  ([blocks]\n   (set-selection-blocks! blocks :down))\n  ([blocks direction]\n   (when (seq blocks)\n     (swap! state assoc\n            :selection\/mode true\n            :selection\/blocks blocks\n            :selection\/direction direction))))\n\n(defn into-selection-mode!\n  []\n  (swap! state assoc :selection\/mode true))\n\n(defn clear-selection!\n  []\n  (swap! state assoc\n         :selection\/mode false\n         :selection\/blocks nil\n         :selection\/direction :down))\n\n(defn clear-selection-blocks!\n  []\n  (swap! state assoc :selection\/blocks nil))\n\n(defn get-selection-blocks\n  []\n  (util\/sort-by-height (:selection\/blocks @state)))\n\n(defn in-selection-mode?\n  []\n  (:selection\/mode @state))\n\n(defn selection?\n  \"True sense of selection mode with valid selected block\"\n  []\n  (and (in-selection-mode?) (seq (get-selection-blocks))))\n\n(defn conj-selection-block!\n  [block direction]\n  (dom\/add-class! block \"selected noselect\")\n  (swap! state assoc\n         :selection\/mode true\n         :selection\/blocks (conj (vec (:selection\/blocks @state)) block)\n         :selection\/direction direction))\n\n(defn drop-last-selection-block!\n  []\n  (let [last-block (peek (vec (:selection\/blocks @state)))]\n    (swap! state assoc\n           :selection\/mode true\n           :selection\/blocks (vec (pop (:selection\/blocks @state))))\n    last-block))\n\n(defn get-selection-direction\n  []\n  (:selection\/direction @state))\n\n(defn show-custom-context-menu!\n  [links]\n  (swap! state assoc\n         :custom-context-menu\/show? true\n         :custom-context-menu\/links links))\n\n(defn hide-custom-context-menu!\n  []\n  (swap! state assoc\n         :custom-context-menu\/show? false\n         :custom-context-menu\/links nil))\n\n(defn set-github-token!\n  [repo token-result]\n  (when token-result\n    (let [{:keys [token expires_at]} token-result]\n      (swap! state update-in [:me :repos]\n             (fn [repos]\n               (map (fn [r]\n                      (if (= repo (:url r))\n                        (merge r {:token token :expires_at expires_at})\n                        repo)) repos))))))\n\n(defn set-github-installation-tokens!\n  [tokens]\n  (when (seq tokens)\n    (let [tokens  (medley\/index-by :installation_id tokens)\n          repos (get-repos)]\n      (when (seq repos)\n        (let [set-token-f\n              (fn [{:keys [installation_id] :as repo}]\n                (let [{:keys [token] :as m} (get tokens installation_id)]\n                  (if (string? token)\n                    ;; GitHub API returns a expires_at key which is a timestamp (expires after 60 minutes at present),\n                    ;; however, user's system time may be inaccurate. Here, based on the client system time, we use\n                    ;; 40-minutes interval to deal with some critical conditions, for e.g. http request time consume.\n                    (let [formatter (tf\/formatters :date-time-no-ms)\n                          expires-at (->> (t\/plus (t\/now) (t\/minutes 40))\n                                          (tf\/unparse formatter))]\n                      (merge repo {:token token :expires_at expires-at}))\n                    (do\n                      (when (and\n                             (:url repo)\n                             (string\/starts-with? (:url repo) \"https:\/\/\"))\n                        (log\/error :token\/cannot-set-token {:repo-m repo :token-m m}))\n                      repo))))\n              repos (mapv set-token-f repos)]\n          (swap! state assoc-in [:me :repos] repos))))))\n\n(defn get-github-token\n  [repo]\n  (when repo\n    (let [repos (get-repos)]\n      (some #(when (= repo (:url %)) %) repos))))\n\n(defn toggle-sidebar-open?!\n  []\n  (swap! state update :ui\/sidebar-open? not))\n\n(defn open-right-sidebar!\n  []\n  (swap! state assoc :ui\/sidebar-open? true))\n\n(defn hide-right-sidebar!\n  []\n  (swap! state assoc :ui\/sidebar-open? false))\n\n(defn sidebar-add-block!\n  [repo db-id block-type block-data]\n  (when-not (or (util\/mobile?)\n            (mobile-util\/is-native-platform?))\n   (when db-id\n     (update-state! :sidebar\/blocks (fn [blocks]\n                                      (->> (remove #(= (second %) db-id) blocks)\n                                           (cons [repo db-id block-type block-data])\n                                           (distinct))))\n     (open-right-sidebar!)\n     (when-let [elem (gdom\/getElementByClass \"cp__right-sidebar-scrollable\")]\n       (util\/scroll-to elem 0)))))\n\n(defn sidebar-remove-block!\n  [idx]\n  (update-state! :sidebar\/blocks (fn [blocks]\n                                   (if (string? idx)\n                                     (remove #(= (second %) idx) blocks)\n                                     (util\/drop-nth idx blocks))))\n  (when (empty? (:sidebar\/blocks @state))\n    (hide-right-sidebar!)))\n\n(defn sidebar-block-exists?\n  [idx]\n  (some #(= (second %) idx) (:sidebar\/blocks @state)))\n\n(defn get-sidebar-blocks\n  []\n  (:sidebar\/blocks @state))\n\n(defn clear-sidebar-blocks!\n  []\n  (set-state! :sidebar\/blocks '()))\n\n(defn sidebar-block-toggle-collapse!\n  [db-id]\n  (when db-id\n    (update-state! [:ui\/sidebar-collapsed-blocks db-id] not)))\n\n(defn get-edit-block\n  []\n  (get @state :editor\/block))\n\n(defn get-last-edit-block\n  []\n  (:editor\/last-edit-block @state))\n\n(defn get-current-edit-block-and-position\n  []\n  (let [edit-input-id (get-edit-input-id)\n        edit-block (get-edit-block)\n        block-element (when edit-input-id (gdom\/getElement (string\/replace edit-input-id \"edit-block\" \"ls-block\")))\n        container (when block-element\n                    (util\/get-block-container block-element))]\n    (when container\n      {:last-edit-block edit-block\n       :container (gobj\/get container \"id\")\n       :pos (cursor\/pos (gdom\/getElement edit-input-id))})))\n\n(defonce publishing? (atom nil))\n\n(defn publishing-enable-editing?\n  []\n  (and @publishing? (:publishing\/enable-editing? (get-config))))\n\n(defn set-editing!\n  ([edit-input-id content block cursor-range]\n   (set-editing! edit-input-id content block cursor-range true))\n  ([edit-input-id content block cursor-range move-cursor?]\n   (when (and edit-input-id block\n              (or\n               (publishing-enable-editing?)\n               (not @publishing?)))\n     (let [block-element (gdom\/getElement (string\/replace edit-input-id \"edit-block\" \"ls-block\"))\n           container (util\/get-block-container block-element)\n           block (if container\n                   (assoc block\n                          :block\/container (gobj\/get container \"id\"))\n                   block)\n           content (string\/trim (or content \"\"))]\n       (swap! state\n              (fn [state]\n                (-> state\n                    (assoc-in [:editor\/content edit-input-id] content)\n                    (assoc\n                     :editor\/block block\n                     :editor\/editing? {edit-input-id true}\n                     :editor\/last-edit-block-input-id edit-input-id\n                     :editor\/last-edit-block block\n                     :editor\/last-key-code nil\n                     :cursor-range cursor-range))))\n\n       (when-let [input (gdom\/getElement edit-input-id)]\n         (let [pos (count cursor-range)]\n           (when content\n             (util\/set-change-value input content)\n             ;; FIXME\n             ;; use set-change-value for now\n             ;; until somebody can figure out why set! value doesn't work here\n             ;; it seems to me textarea autoresize is completely broken\n             #_(set! (.-value input) (string\/trim content)))\n           (when move-cursor?\n             (cursor\/move-cursor-to input pos))))))))\n\n(defn clear-edit!\n  []\n  (swap! state merge {:editor\/editing? nil\n                      :editor\/block nil\n                      :cursor-range nil}))\n\n(defn into-code-editor-mode!\n  []\n  (swap! state merge {:editor\/editing? nil\n                      :cursor-range nil\n                      :editor\/code-mode? true}))\n\n(defn set-last-pos!\n  [new-pos]\n  (set-state! :editor\/last-saved-cursor new-pos))\n\n(defn set-block-content-and-last-pos!\n  [edit-input-id content new-pos]\n  (when edit-input-id\n    (set-edit-content! edit-input-id content)\n    (set-state! :editor\/last-saved-cursor new-pos)))\n\n(defn set-theme!\n  [theme]\n  (set-state! :ui\/theme theme)\n  (storage\/set :ui\/theme theme))\n\n(defn sync-system-theme!\n  []\n  (let [system-dark? (.-matches (js\/window.matchMedia \"(prefers-color-scheme: dark)\"))]\n    (set-theme! (if system-dark? \"dark\" \"white\"))\n    (set-state! :ui\/system-theme? true)\n    (storage\/set :ui\/system-theme? true)))\n\n(defn use-theme-mode!\n  [theme-mode]\n  (if-not (= theme-mode \"system\")\n    (do\n      (set-theme! (if (= theme-mode \"light\") \"white\" theme-mode))\n      (set-state! :ui\/system-theme? false)\n      (storage\/set :ui\/system-theme? false))\n    (sync-system-theme!)))\n\n(defn dark?\n  []\n  (= \"dark\" (:ui\/theme @state)))\n\n(defn set-editing-block-dom-id!\n  [block-dom-id]\n  (set-state! :editor\/block-dom-id block-dom-id))\n\n(defn get-editing-block-dom-id\n  []\n  (:editor\/block-dom-id @state))\n\n(defn toggle-theme!\n  []\n  (let [theme (:ui\/theme @state)\n        theme' (if (= theme \"dark\") \"white\" \"dark\")]\n    (use-theme-mode! theme')))\n\n(defn- file-content-key\n  [repo path]\n  (str \"ls_file_content_\" repo path))\n\n(defn update-sync-status!\n  [status]\n  (when (seq status)\n    (when-let [current-repo (get-current-repo)]\n      (set-state! [:repo\/sync-status current-repo] status))))\n\n(defn set-root-component!\n  [component]\n  (set-state! :ui\/root-component component))\n\n(defn get-root-component\n  []\n  (get @state :ui\/root-component))\n\n(defn load-app-user-cfgs\n  ([] (load-app-user-cfgs false))\n  ([refresh?]\n   (p\/let [cfgs (if (or refresh? (nil? (:electron\/user-cfgs @state)))\n                  (ipc\/ipc \"userAppCfgs\")\n                  (:electron\/user-cfgs @state))\n           cfgs (if (object? cfgs) (bean\/->clj cfgs) cfgs)]\n     (set-state! :electron\/user-cfgs cfgs))))\n\n(defn setup-electron-updater!\n  []\n  (when (util\/electron?)\n    (js\/window.apis.setUpdatesCallback\n     (fn [_ args]\n       (let [data (bean\/->clj args)\n             pending? (not= (:type data) \"completed\")]\n         (set-state! :electron\/updater-pending? pending?)\n         (when pending? (set-state! :electron\/updater data))\n         nil)))))\n\n(defn set-file-component!\n  [component]\n  (set-state! :ui\/file-component component))\n\n(defn clear-file-component!\n  []\n  (set-state! :ui\/file-component nil))\n\n(defn get-file-component\n  []\n  (get @state :ui\/file-component))\n\n(defn set-journals-length!\n  [value]\n  (when value\n    (set-state! :journals-length value)))\n\n(defn add-custom-query-component!\n  [query-string component]\n  (update-state! :ui\/custom-query-components\n                 (fn [m]\n                   (assoc m query-string component))))\n\n(defn remove-custom-query-component!\n  [query-string]\n  (update-state! :ui\/custom-query-components\n                 (fn [m]\n                   (dissoc m query-string))))\n\n(defn get-custom-query-components\n  []\n  (vals (get @state :ui\/custom-query-components)))\n\n(defn save-scroll-position!\n  ([value]\n   (save-scroll-position! value js\/window.location.hash))\n  ([value path]\n   (set-state! [:ui\/paths-scroll-positions path] value)))\n\n(defn get-saved-scroll-position\n  ([]\n   (get-saved-scroll-position js\/window.location.hash))\n  ([path]\n   (get-in @state [:ui\/paths-scroll-positions path] 0)))\n\n(defn set-today!\n  [value]\n  (set-state! :today value))\n\n(defn get-date-formatter\n  []\n  (or\n   (when-let [repo (get-current-repo)]\n     (or\n      (get-in @state [:config repo :journal\/page-title-format])\n      ;; for compatibility\n      (get-in @state [:config repo :date-formatter])))\n   ;; TODO:\n   (get-in @state [:me :settings :date-formatter])\n   \"MMM do, yyyy\"))\n\n(defn set-git-status!\n  [repo-url value]\n  (swap! state assoc-in [:git\/status repo-url] value))\n\n(defn shortcuts []\n  (get-in @state [:config (get-current-repo) :shortcuts]))\n\n(defn get-me\n  []\n  (:me @state))\n\n(defn github-authed?\n  []\n  (:github-authed? (get-me)))\n\n(defn get-name\n  []\n  (:name (get-me)))\n\n(defn logged?\n  \"Whether the user has logged in.\"\n  []\n  (some? (get-name)))\n\n(defn set-draw!\n  [value]\n  (set-state! :draw? value))\n\n(defn in-draw-mode?\n  []\n  (:draw? @state))\n\n(defn set-db-restoring!\n  [value]\n  (set-state! :db\/restoring? value))\n\n(defn get-default-branch\n  [repo-url]\n  (or\n   (some->> (get-repos)\n            (filter (fn [m]\n                      (= (:url m) repo-url)))\n            (first)\n            :branch)\n   \"master\"))\n\n(defn get-current-project\n  []\n  (when-let [project (get-in (get-config) [:project :name])]\n    (when-not (string\/blank? project)\n      project)))\n\n(defn update-current-project\n  [& kv]\n  {:pre [(even? (count kv))]}\n  (when-let [current-repo (get-current-repo)]\n    (let [new-kvs (apply array-map (vec kv))\n          projects (:projects (get-me))\n          new-projects (reduce (fn [acc project]\n                                 (if (= (:repo project) current-repo)\n                                   (conj acc (merge project new-kvs))\n                                   (conj acc project)))\n                               []\n                               projects)]\n      (set-state! [:me :projects] new-projects))))\n\n(defn remove-current-project\n  []\n  (when-let [current-repo (get-current-repo)]\n    (update-state! [:me :projects]\n                   (fn [projects]\n                     (remove #(= (:repo %) current-repo) projects)))))\n\n(defn set-indexedb-support!\n  [value]\n  (set-state! :indexeddb\/support? value))\n\n(defn modal-opened?\n  []\n  (:modal\/show? @state))\n\n(defn set-modal!\n  ([modal-panel-content]\n   (set-modal! modal-panel-content\n               {:fullscreen? false\n                :close-btn?  true}))\n  ([modal-panel-content {:keys [fullscreen? close-btn?]}]\n   (swap! state assoc\n          :modal\/show? (boolean modal-panel-content)\n          :modal\/panel-content modal-panel-content\n          :modal\/fullscreen? fullscreen?\n          :modal\/close-btn? close-btn?)))\n\n(defn close-modal!\n  []\n  (swap! state assoc\n         :modal\/show? false\n         :modal\/panel-content nil))\n\n(defn get-db-batch-txs-chan\n  []\n  (:db\/batch-txs @state))\n\n(defn get-file-write-chan\n  []\n  (:file\/writes @state))\n\n(defn get-write-chan-length\n  []\n  (let [c (get-file-write-chan)]\n    (count (gobj\/get c \"buf\"))))\n\n(defn add-tx!\n  ;; TODO: replace f with data for batch transactions\n  [f]\n  (when f\n    (when-let [chan (get-db-batch-txs-chan)]\n      (async\/put! chan f))))\n\n(defn get-left-sidebar-open?\n  []\n  (get-in @state [:ui\/left-sidebar-open?]))\n\n(defn set-left-sidebar-open!\n  [value]\n  (storage\/set \"ls-left-sidebar-open?\" (boolean value))\n  (set-state! :ui\/left-sidebar-open? value))\n\n(defn toggle-left-sidebar!\n  []\n  (set-left-sidebar-open!\n    (not (get-left-sidebar-open?))))\n\n(defn set-developer-mode!\n  [value]\n  (set-state! :ui\/developer-mode? value)\n  (storage\/set \"developer-mode\" (str value)))\n\n(defn developer-mode?\n  []\n  (:ui\/developer-mode? @state))\n\n(defn get-notification-contents\n  []\n  (get @state :notification\/contents))\n\n(defn document-mode?\n  []\n  (get @state :document\/mode?))\n\n(defn doc-mode-enter-for-new-line?\n  []\n  (and (document-mode?)\n       (not (:shortcut\/doc-mode-enter-for-new-block? (sub-graph-config)))))\n\n(defn toggle-document-mode!\n  []\n  (let [mode (document-mode?)]\n    (set-state! :document\/mode? (not mode))\n    (storage\/set :document\/mode? (not mode))))\n\n(defn shortcut-tooltip-enabled?\n  []\n  (get @state :ui\/shortcut-tooltip?))\n\n(defn toggle-shortcut-tooltip!\n  []\n  (let [mode (shortcut-tooltip-enabled?)]\n    (set-state! :ui\/shortcut-tooltip? (not mode))\n    (storage\/set :ui\/shortcut-tooltip? (not mode))))\n\n(defn enable-tooltip?\n  []\n  (if (util\/mobile?)\n    false\n    (get (get (sub-config) (get-current-repo))\n         :ui\/enable-tooltip?\n         true)))\n\n(defn show-command-doc?\n  []\n  (get (get (sub-config) (get-current-repo))\n       :ui\/show-command-doc?\n       true))\n\n(defn set-config!\n  [repo-url value]\n  (set-state! [:config repo-url] value))\n\n(defn get-git-auto-push?\n  ([]\n   (get-git-auto-push? (get-current-repo)))\n  ([repo]\n   (true? (:git-auto-push (get-config repo)))))\n\n(defn set-changed-files!\n  [repo changed-files]\n  (set-state! [:repo\/changed-files repo] changed-files))\n\n(defn get-changed-files\n  []\n  (get-in @state [:repo\/changed-files (get-current-repo)]))\n\n(defn get-wide-mode?\n  []\n  (:ui\/wide-mode? @state))\n\n(defn toggle-wide-mode!\n  []\n  (update-state! :ui\/wide-mode? not))\n\n(defn set-online!\n  [value]\n  (set-state! :network\/online? value))\n\n(defn online?\n  []\n  (:network\/online? @state))\n\n(defn get-commands\n  []\n  (:commands (get-config)))\n\n(defn get-plugins-commands\n  []\n  (mapcat seq (flatten (vals (:plugin\/installed-commands @state)))))\n\n(defn get-plugins-commands-with-type\n  [type]\n  (filterv #(= (keyword (first %)) (keyword type))\n           (apply concat (vals (:plugin\/simple-commands @state)))))\n\n(defn get-plugins-ui-items-with-type\n  [type]\n  (filterv #(= (keyword (first %)) (keyword type))\n           (apply concat (vals (:plugin\/installed-ui-items @state)))))\n\n(defn get-scheduled-future-days\n  []\n  (let [days (:scheduled\/future-days (get-config))]\n    (or (when (int? days) days) 0)))\n\n(defn set-graph-syncing?\n  [value]\n  (set-state! :graph\/syncing? value))\n\n(defn set-editor-in-composition!\n  [value]\n  (set-state! :editor\/in-composition? value))\n\n(defn editor-in-composition?\n  []\n  (:editor\/in-composition? @state))\n\n(defn set-loading-files!\n  [value]\n  (set-state! :repo\/loading-files? value))\n\n(defn set-importing-to-db!\n  [value]\n  (set-state! :repo\/importing-to-db? value))\n\n(defn set-editor-last-input-time!\n  [repo time]\n  (swap! state assoc-in [:editor\/last-input-time repo] time))\n\n(defn set-last-transact-time!\n  [repo time]\n  (swap! state assoc-in [:db\/last-transact-time repo] time)\n\n  ;; THINK: new block, indent\/outdent, drag && drop, etc.\n  (set-editor-last-input-time! repo time))\n\n(defn set-published-pages\n  [pages]\n  (when-let [repo (get-current-repo)]\n    (set-state! [:me :published-pages repo] pages)))\n\n(defn reset-published-pages\n  []\n  (set-published-pages []))\n\n(defn set-db-persisted!\n  [repo value]\n  (swap! state assoc-in [:db\/persisted? repo] value))\n\n(defn db-idle?\n  [repo]\n  (when repo\n    (when-let [last-time (get-in @state [:db\/last-transact-time repo])]\n      (let [now (util\/time-ms)]\n        (>= (- now last-time) 3000)))))\n\n(defn input-idle?\n  [repo]\n  (when repo\n    (or\n     (when-let [last-time (get-in @state [:editor\/last-input-time repo])]\n       (let [now (util\/time-ms)]\n         (>= (- now last-time) 500)))\n     ;; not in editing mode\n     (not (get-edit-input-id)))))\n\n(defn set-last-persist-transact-id!\n  [repo files? id]\n  (swap! state assoc-in [:db\/last-persist-transact-ids :repo files?] id))\n\n(defn get-last-persist-transact-id\n  [repo files?]\n  (get-in @state [:db\/last-persist-transact-ids :repo files?]))\n\n(defn persist-transaction!\n  [repo files? tx-id tx-data]\n  (when (seq tx-data)\n    (let [latest-txs (:db\/latest-txs @state)\n          last-persist-tx-id (get-last-persist-transact-id repo files?)\n          latest-txs (if last-persist-tx-id\n                       (update-in latest-txs [repo files?]\n                                  (fn [result]\n                                    (remove (fn [tx] (<= (:tx-id tx) last-persist-tx-id)) result)))\n                       latest-txs)\n          new-txs (update-in latest-txs [repo files?] (fn [result]\n                                                        (vec (conj result {:tx-id   tx-id\n                                                                           :tx-data tx-data}))))]\n      (storage\/set-transit! :db\/latest-txs new-txs)\n      (set-state! :db\/latest-txs new-txs))))\n\n(defn get-repo-latest-txs\n  [repo file?]\n  (get-in (:db\/latest-txs @state) [repo file?]))\n\n(defn set-nfs-refreshing!\n  [value]\n  (set-state! :nfs\/refreshing? value))\n\n(defn nfs-refreshing?\n  []\n  (:nfs\/refreshing? @state))\n\n(defn set-search-result!\n  [value]\n  (set-state! :search\/result value))\n\n(defn clear-search-result!\n  []\n  (set-search-result! nil))\n\n(defn add-graph-search-filter!\n  [q]\n  (when-not (string\/blank? q)\n    (update-state! :search\/graph-filters\n                   (fn [value]\n                     (vec (distinct (conj value q)))))))\n\n(defn remove-search-filter!\n  [q]\n  (when-not (string\/blank? q)\n    (update-state! :search\/graph-filters\n                   (fn [value]\n                     (remove #{q} value)))))\n\n(defn clear-search-filters!\n  []\n  (set-state! :search\/graph-filters []))\n\n(defn get-search-mode\n  []\n  (:search\/mode @state))\n\n(defn toggle!\n  [path]\n  (update-state! path not))\n\n(defn toggle-settings!\n  []\n  (toggle! :ui\/settings-open?))\n\n(defn settings-open?\n  []\n  (:ui\/settings-open? @state))\n\n(defn close-settings!\n  []\n  (set-state! :ui\/settings-open? false))\n\n(defn open-settings!\n  []\n  (set-state! :ui\/settings-open? true))\n\n;; TODO: Move those to the uni `state`\n\n(defonce editor-op (atom nil))\n(defn set-editor-op!\n  [value]\n  (reset! editor-op value))\n(defn get-editor-op\n  []\n  @editor-op)\n\n(defn get-start-of-week\n  []\n  (or\n   (when-let [repo (get-current-repo)]\n     (get-in @state [:config repo :start-of-week]))\n   (get-in @state [:me :settings :start-of-week])\n   6))\n\n(defn get-ref-open-blocks-level\n  []\n  (or\n   (when-let [value (:ref\/default-open-blocks-level (get-config))]\n     (when (integer? value)\n       value))\n   2))\n\n(defn get-linked-references-collapsed-threshold\n  []\n  (or\n   (when-let [value (:ref\/linked-references-collapsed-threshold (get-config))]\n     (when (integer? value)\n       value))\n   100))\n\n(defn get-events-chan\n  []\n  (:system\/events @state))\n\n(defn pub-event!\n  [payload]\n  (let [chan (get-events-chan)]\n    (async\/put! chan payload)))\n\n(defonce diffs (atom nil))\n\n(defn get-copied-blocks\n  []\n  (:copy\/blocks @state))\n\n(defn set-copied-blocks\n  [content ids]\n  (set-state! :copy\/blocks {:copy\/content content :copy\/block-tree ids}))\n\n(defn get-export-block-text-indent-style []\n  (:copy\/export-block-text-indent-style @state))\n\n(defn set-export-block-text-indent-style!\n  [v]\n  (set-state! :copy\/export-block-text-indent-style v)\n  (storage\/set :copy\/export-block-text-indent-style v))\n\n(defn get-export-block-text-remove-options []\n  (:copy\/export-block-text-remove-options @state))\n\n(defn update-export-block-text-remove-options!\n  [e k]\n  (let [f (if (util\/echecked? e) conj disj)]\n    (update-state! :copy\/export-block-text-remove-options\n                   #(f % k))\n    (storage\/set :copy\/export-block-text-remove-options\n                 (get-export-block-text-remove-options))))\n\n(defn set-editor-args!\n  [args]\n  (set-state! :editor\/args args))\n\n(defn block-component-editing?\n  []\n  (:block\/component-editing-mode? @state))\n\n(defn set-block-component-editing-mode!\n  [value]\n  (set-state! :block\/component-editing-mode? value))\n\n(defn logical-outdenting?\n  []\n  (:editor\/logical-outdenting?\n   (get (sub-config) (get-current-repo))))\n\n(defn get-editor-args\n  []\n  (:editor\/args @state))\n\n(defn get-export-bullet-indentation\n  []\n  (case (get (get-config) :export\/bullet-indentation :tab)\n    :eight-spaces\n    \"        \"\n    :four-spaces\n    \"    \"\n    :two-spaces\n    \"  \"\n    :tab\n    \"\\t\"))\n\n(defn set-page-blocks-cp!\n  [value]\n  (set-state! [:view\/components :page-blocks] value))\n\n(defn get-page-blocks-cp\n  []\n  (get-in @state [:view\/components :page-blocks]))\n\n(defn set-editor-cp!\n  [value]\n  (set-state! [:view\/components :editor] value))\n\n(defn get-editor-cp\n  []\n  (get-in @state [:view\/components :editor]))\n\n(defn exit-editing-and-set-selected-blocks!\n  ([blocks]\n   (exit-editing-and-set-selected-blocks! blocks :down))\n  ([blocks direction]\n   (util\/select-unhighlight! (dom\/by-class \"selected\"))\n   (clear-selection!)\n   (clear-edit!)\n   (set-selection-blocks! blocks direction)\n   (util\/select-highlight! blocks)))\n\n(defn get-favorites-name\n  []\n  (or (:name\/favorites (get-config)) \"Favorites\"))\n\n(defn add-watch-state [key f]\n  (add-watch state key f))\n\n(defn remove-watch-state [key]\n  (remove-watch state key))\n\n(defn get-git-auto-commit-enabled?\n  []\n  (false? (sub [:electron\/user-cfgs :git\/disable-auto-commit?])))\n\n(defn set-last-key-code!\n  [key-code]\n  (set-state! :editor\/last-key-code key-code))\n\n(defn get-last-key-code\n  []\n  (:editor\/last-key-code @state))\n\n(defn set-visual-viewport-state\n  [input]\n  (set-state! :ui\/visual-viewport-state input))\n\n(defn get-visual-viewport-state\n  []\n  (:ui\/visual-viewport-state @state))\n"],"names":["frontend.handler.draw\/load-excalidraw-file","file","ok-handler","frontend.handler.draw.load_excalidraw_file","temp__5720__auto__","frontend.state\/get-current-repo","cljs.core.truth_","frontend.util.p_handle","frontend.handler.file\/load-file","content","error","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs$core$IFn$_invoke$arity$variadic","cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2","frontend.extensions.excalidraw\/update-draw-content-width","state","frontend.extensions.excalidraw.update_draw_content_width","el","rum.core\/dom-node","querySelector","width","cljs.core\/reset!","cljs$core$IFn$_invoke$arity$1","cljs.core.Keyword","js\/JSON.stringify","elements","beforeLoadModuleCode","id","module$node_modules$$excalidraw$excalidraw$dist$excalidraw_min","shadow.js.require","frontend.extensions.excalidraw\/excalidraw","frontend.extensions.excalidraw._STAR_bounding_width","frontend.extensions.excalidraw.draw_inner","frontend.extensions.excalidraw.draw_container","frontend.extensions.excalidraw","frontend.rum.adapt_class.cljs$core$IFn$_invoke$arity$2","goog.object.get","react_class","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","rum.core\/lazy-build","rum.core\/build-defcs","frontend.extensions.excalidraw\/draw-inner","data","option","frontend.state.sub","rum.core\/react","frontend.extensions.excalidraw\/*bounding-width","*draw-width","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs$core$IFn$_invoke$arity$2","*zen-mode?","*view-mode?","wide-mode?","*elements","daiquiri.core\/create-element","onMouseDown","e","frontend.util\/stop","frontend.handler.ui.toggle_wide_mode_BANG_","frontend.handler.ui\/toggle-wide-mode!","frontend.util.format.cljs$core$IFn$_invoke$arity$variadic","frontend.util.format","wide_mode_QMARK_","cljs.core.swap_BANG_","cljs.core\/not","daiquiri.interpreter\/interpret","cljs.core\/-deref","cljs.core\/deref","frontend.state.set_state_BANG_","value","frontend.state\/set-block-component-editing-mode!","onBlur","G__99290","cljs.core.merge","elements->clj","cljs-bean.core\/->clj","cljs.core\/seq","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","frontend.handler.draw\/save-excalidraw!","frontend.config\/website","cljs.core.select_keys","cljs.core.PersistentArrayMap","frontend.extensions.excalidraw.excalidraw.cljs$core$IFn$_invoke$arity$1","cljs.core.PersistentVector","cljs.core.PersistentVector.EMPTY_NODE","rum.core.reactive","rum.core.local.cljs$core$IFn$_invoke$arity$2","rum.core.local","frontend.extensions.excalidraw\/draw-container","*data","*loading?","loading?","db-restoring?","attrs99291","frontend.ui.loading","cljs.core\/map?","daiquiri.interpreter\/attributes","daiquiri.normalize.merge_with_class","loading_QMARK_","vec__99292","cljs.core.nth","clojure.string\/blank?","js\/JSON.parse","text","e99287","js\/Error","js\/console.dir","frontend.handler.notification.show_BANG_","frontend.util\/format","cljs.core.reset_BANG_","_STAR_loading_QMARK_","cljs.core.assoc","frontend.extensions.excalidraw.draw","frontend.extensions.excalidraw\/draw","repo","granted?","frontend.state\/sub","frontend.config\/local-db?","frontend.util\/electron?","shadow.loader.mm.setLoaded","setLoaded"]}}]}